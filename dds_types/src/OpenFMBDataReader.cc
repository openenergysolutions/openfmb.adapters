/********************************************
 * Type specific DataReader header file.
 * Autogenerated by DDL compiler.
 * Do no edit - edits may be overwritten.
 *******************************************/
#include <string.h>
#include "OpenFMBDataReader.hh" 


/* START SCOPE: UML_Extension */

namespace UML_Extension {


}  /* namespace UML_Extension */
/* END SCOPE: UML_Extension */
/* START SCOPE: openfmb */

namespace openfmb {

/* START SCOPE: breakermodule */

namespace breakermodule {


}  /* namespace breakermodule */
/* END SCOPE: breakermodule */
/* START SCOPE: commonmodule */

namespace commonmodule {


}  /* namespace commonmodule */
/* END SCOPE: commonmodule */
/* START SCOPE: essmodule */

namespace essmodule {


}  /* namespace essmodule */
/* END SCOPE: essmodule */
/* START SCOPE: generationmodule */

namespace generationmodule {


}  /* namespace generationmodule */
/* END SCOPE: generationmodule */
/* START SCOPE: interconnectionmodule */

namespace interconnectionmodule {


}  /* namespace interconnectionmodule */
/* END SCOPE: interconnectionmodule */
/* START SCOPE: loadmodule */

namespace loadmodule {


}  /* namespace loadmodule */
/* END SCOPE: loadmodule */
/* START SCOPE: optimizermodule */

namespace optimizermodule {


}  /* namespace optimizermodule */
/* END SCOPE: optimizermodule */
/* START SCOPE: reclosermodule */

namespace reclosermodule {


}  /* namespace reclosermodule */
/* END SCOPE: reclosermodule */
/* START SCOPE: regulatormodule */

namespace regulatormodule {


}  /* namespace regulatormodule */
/* END SCOPE: regulatormodule */
/* START SCOPE: resourcemodule */

namespace resourcemodule {


}  /* namespace resourcemodule */
/* END SCOPE: resourcemodule */
/* START SCOPE: solarmodule */

namespace solarmodule {


}  /* namespace solarmodule */
/* END SCOPE: solarmodule */
/* START SCOPE: switchmodule */

namespace switchmodule {


}  /* namespace switchmodule */
/* END SCOPE: switchmodule */

}  /* namespace openfmb */
/* END SCOPE: openfmb */
/* START SCOPE: openfmb */

namespace openfmb {

/* START SCOPE: commonmodule */

namespace commonmodule {


/******************************************************************
 * openfmb::commonmodule:: DataReader Ops
 *****************************************************************/

/******************************************************************/
BCRDataReader::BCRDataReader()
{
}

/******************************************************************/
ReturnCode_t 
BCRDataReader::read( BCRPtrSeq    * received_data,
                         SampleInfoSeq   * sample_infos,
                         int               max_samples,
                         SampleStateMask   sample_states, 
                         ViewStateMask     view_states, 
                         InstanceStateMask instance_states)
{
  return DataReader::read( (Sequence*)received_data, 
			    sample_infos, 
			    max_samples, 
			    sample_states, 
			    view_states, 
			    instance_states );
}
  

/******************************************************************/

ReturnCode_t
BCRDataReader::take( BCRPtrSeq     * received_data,
                         SampleInfoSeq    * sample_infos,
                         int                max_samples,
                         SampleStateMask    sample_states, 
                         ViewStateMask      view_states, 
                         InstanceStateMask  instance_states)
{
  return DataReader::take( (Sequence*)received_data,
                           sample_infos,
                           max_samples,
                           sample_states, 
                           view_states, 
                           instance_states);
}


/******************************************************************/

ReturnCode_t 
BCRDataReader::read_w_condition( BCRPtrSeq  * received_data,
                                     SampleInfoSeq * sample_infos,
                                     int             max_samples,
                                     ReadCondition * a_condition)
{
  return DataReader::read_w_condition( (Sequence*)received_data,
                                       sample_infos,
                                       max_samples,
                                       a_condition);
}


/******************************************************************/
    
ReturnCode_t
BCRDataReader::take_w_condition( BCRPtrSeq   * received_data,
                                     SampleInfoSeq  * sample_infos,
                                     int              max_samples,
                                     ReadCondition *  a_condition)
{
  return DataReader::take_w_condition( (Sequence*)received_data,
                                       sample_infos,
                                       max_samples,
                                       a_condition);
}


/******************************************************************/
    
ReturnCode_t
BCRDataReader::read_next_sample( BCR     * received_data,
                                  SampleInfo     * sample_info)
{
  return DataReader::read_next_sample( (void*)received_data,
                                       sample_info);
}


/******************************************************************/
    
ReturnCode_t
BCRDataReader::take_next_sample( BCR      * received_data,
                                     SampleInfo      * sample_info)
{
  return DataReader::take_next_sample( (void*) received_data,
                                       sample_info);
}


/******************************************************************/
    
ReturnCode_t
BCRDataReader::read_instance( BCRPtrSeq       * received_data,
                                  SampleInfoSeq    * sample_infos,
                                  int                max_samples,
                                  InstanceHandle_t   a_handle,
                                  SampleStateMask    sample_states, 
                                  ViewStateMask      view_states, 
                                  InstanceStateMask  instance_states)
{
  return DataReader::read_instance( (Sequence*)received_data, 
                                    sample_infos, 
                                    max_samples, 
                                    a_handle, 
                                    sample_states, 
                                    view_states, 
                                    instance_states );
}


/******************************************************************/
    
ReturnCode_t
BCRDataReader::take_instance( BCRPtrSeq    * received_data,
                                  SampleInfoSeq   * sample_infos,
                                  int               max_samples,
                                  InstanceHandle_t  a_handle,
                                  SampleStateMask   sample_states, 
                                  ViewStateMask     view_states, 
                                  InstanceStateMask instance_states)
{
  return DataReader::take_instance( (Sequence*)received_data,
                                    sample_infos,
                                    max_samples,
                                    a_handle,
                                    sample_states, 
                                    view_states, 
                                    instance_states);
}


/******************************************************************/
    
ReturnCode_t
BCRDataReader::read_next_instance( BCRPtrSeq    * received_data,
                                       SampleInfoSeq   * sample_infos,
                                       int               max_samples,
                                       InstanceHandle_t  previous_handle,
                                       SampleStateMask   sample_states, 
                                       ViewStateMask     view_states, 
                                       InstanceStateMask instance_states)
{
  return DataReader::read_next_instance( (Sequence*)received_data,
                                         sample_infos,
                                         max_samples,
                                         previous_handle,
                                         sample_states, 
                                         view_states, 
                                         instance_states);
}


/******************************************************************/

ReturnCode_t
BCRDataReader::take_next_instance( BCRPtrSeq     * received_data,
                                       SampleInfoSeq    * sample_infos,
                                       int                max_samples,
                                       InstanceHandle_t   previous_handle,
                                       SampleStateMask    sample_states, 
                                       ViewStateMask      view_states, 
                                       InstanceStateMask  instance_states)
{
  return DataReader::take_next_instance( (Sequence*)received_data,
                                         sample_infos,
                                         max_samples,
                                         previous_handle,
                                         sample_states, 
                                         view_states, 
                                         instance_states);
}


/******************************************************************/
    
ReturnCode_t
BCRDataReader::read_next_instance_w_condition( BCRPtrSeq     * received_data,
                                                   SampleInfoSeq    * sample_infos,
                                                   int                max_samples,
                                                   InstanceHandle_t   previous_handle,
                                                   ReadCondition *    a_condition)
{
  return DataReader::read_next_instance_w_condition( (Sequence*)received_data,
                                                     sample_infos,
                                                     max_samples,
                                                     previous_handle,
                                                     a_condition);
}


/******************************************************************/
    
ReturnCode_t 
BCRDataReader::take_next_instance_w_condition( BCRPtrSeq     * received_data,
                                                   SampleInfoSeq    * sample_infos,
                                                   int                max_samples,
                                                   InstanceHandle_t   previous_handle,
                                                   ReadCondition *    a_condition)
{
  return DataReader::take_next_instance_w_condition( (Sequence*)received_data,
                                                     sample_infos,
                                                     max_samples,
                                                     previous_handle,
                                                     a_condition);
}


/******************************************************************/
    
ReturnCode_t
BCRDataReader::return_loan( BCRPtrSeq   * received_data,
                                SampleInfoSeq  * sample_infos)
{
  return DataReader::return_loan( (Sequence*)received_data, sample_infos);
}


/******************************************************************/

ReturnCode_t
BCRDataReader::get_key_value( BCR            * key_holder, 
                                  InstanceHandle_t  handle)
{
  if ( ! key_holder )
      return RETCODE_BAD_PARAMETER;

  /* No keys: no op */
  CDX_UNUSED(handle);
  key_holder->clear();
  return DDS::RETCODE_OK;
}


/******************************************************************/
/* openfmb::commonmodule:: */
InstanceHandle_t 
BCRDataReader::lookup_instance( BCR       * instance_data)
{
  if ( ! instance_data )
      return HANDLE_NIL;

  /* No keys */
  return DDS::HANDLE_DEFAULT;
}


}  /* namespace commonmodule */
/* END SCOPE: commonmodule */
/* START SCOPE: essmodule */

namespace essmodule {


/******************************************************************
 * openfmb::essmodule:: DataReader Ops
 *****************************************************************/

/******************************************************************/
ENC_ESSControlKindDataReader::ENC_ESSControlKindDataReader()
{
}

/******************************************************************/
ReturnCode_t 
ENC_ESSControlKindDataReader::read( ENC_ESSControlKindPtrSeq    * received_data,
                         SampleInfoSeq   * sample_infos,
                         int               max_samples,
                         SampleStateMask   sample_states, 
                         ViewStateMask     view_states, 
                         InstanceStateMask instance_states)
{
  return DataReader::read( (Sequence*)received_data, 
			    sample_infos, 
			    max_samples, 
			    sample_states, 
			    view_states, 
			    instance_states );
}
  

/******************************************************************/

ReturnCode_t
ENC_ESSControlKindDataReader::take( ENC_ESSControlKindPtrSeq     * received_data,
                         SampleInfoSeq    * sample_infos,
                         int                max_samples,
                         SampleStateMask    sample_states, 
                         ViewStateMask      view_states, 
                         InstanceStateMask  instance_states)
{
  return DataReader::take( (Sequence*)received_data,
                           sample_infos,
                           max_samples,
                           sample_states, 
                           view_states, 
                           instance_states);
}


/******************************************************************/

ReturnCode_t 
ENC_ESSControlKindDataReader::read_w_condition( ENC_ESSControlKindPtrSeq  * received_data,
                                     SampleInfoSeq * sample_infos,
                                     int             max_samples,
                                     ReadCondition * a_condition)
{
  return DataReader::read_w_condition( (Sequence*)received_data,
                                       sample_infos,
                                       max_samples,
                                       a_condition);
}


/******************************************************************/
    
ReturnCode_t
ENC_ESSControlKindDataReader::take_w_condition( ENC_ESSControlKindPtrSeq   * received_data,
                                     SampleInfoSeq  * sample_infos,
                                     int              max_samples,
                                     ReadCondition *  a_condition)
{
  return DataReader::take_w_condition( (Sequence*)received_data,
                                       sample_infos,
                                       max_samples,
                                       a_condition);
}


/******************************************************************/
    
ReturnCode_t
ENC_ESSControlKindDataReader::read_next_sample( ENC_ESSControlKind     * received_data,
                                  SampleInfo     * sample_info)
{
  return DataReader::read_next_sample( (void*)received_data,
                                       sample_info);
}


/******************************************************************/
    
ReturnCode_t
ENC_ESSControlKindDataReader::take_next_sample( ENC_ESSControlKind      * received_data,
                                     SampleInfo      * sample_info)
{
  return DataReader::take_next_sample( (void*) received_data,
                                       sample_info);
}


/******************************************************************/
    
ReturnCode_t
ENC_ESSControlKindDataReader::read_instance( ENC_ESSControlKindPtrSeq       * received_data,
                                  SampleInfoSeq    * sample_infos,
                                  int                max_samples,
                                  InstanceHandle_t   a_handle,
                                  SampleStateMask    sample_states, 
                                  ViewStateMask      view_states, 
                                  InstanceStateMask  instance_states)
{
  return DataReader::read_instance( (Sequence*)received_data, 
                                    sample_infos, 
                                    max_samples, 
                                    a_handle, 
                                    sample_states, 
                                    view_states, 
                                    instance_states );
}


/******************************************************************/
    
ReturnCode_t
ENC_ESSControlKindDataReader::take_instance( ENC_ESSControlKindPtrSeq    * received_data,
                                  SampleInfoSeq   * sample_infos,
                                  int               max_samples,
                                  InstanceHandle_t  a_handle,
                                  SampleStateMask   sample_states, 
                                  ViewStateMask     view_states, 
                                  InstanceStateMask instance_states)
{
  return DataReader::take_instance( (Sequence*)received_data,
                                    sample_infos,
                                    max_samples,
                                    a_handle,
                                    sample_states, 
                                    view_states, 
                                    instance_states);
}


/******************************************************************/
    
ReturnCode_t
ENC_ESSControlKindDataReader::read_next_instance( ENC_ESSControlKindPtrSeq    * received_data,
                                       SampleInfoSeq   * sample_infos,
                                       int               max_samples,
                                       InstanceHandle_t  previous_handle,
                                       SampleStateMask   sample_states, 
                                       ViewStateMask     view_states, 
                                       InstanceStateMask instance_states)
{
  return DataReader::read_next_instance( (Sequence*)received_data,
                                         sample_infos,
                                         max_samples,
                                         previous_handle,
                                         sample_states, 
                                         view_states, 
                                         instance_states);
}


/******************************************************************/

ReturnCode_t
ENC_ESSControlKindDataReader::take_next_instance( ENC_ESSControlKindPtrSeq     * received_data,
                                       SampleInfoSeq    * sample_infos,
                                       int                max_samples,
                                       InstanceHandle_t   previous_handle,
                                       SampleStateMask    sample_states, 
                                       ViewStateMask      view_states, 
                                       InstanceStateMask  instance_states)
{
  return DataReader::take_next_instance( (Sequence*)received_data,
                                         sample_infos,
                                         max_samples,
                                         previous_handle,
                                         sample_states, 
                                         view_states, 
                                         instance_states);
}


/******************************************************************/
    
ReturnCode_t
ENC_ESSControlKindDataReader::read_next_instance_w_condition( ENC_ESSControlKindPtrSeq     * received_data,
                                                   SampleInfoSeq    * sample_infos,
                                                   int                max_samples,
                                                   InstanceHandle_t   previous_handle,
                                                   ReadCondition *    a_condition)
{
  return DataReader::read_next_instance_w_condition( (Sequence*)received_data,
                                                     sample_infos,
                                                     max_samples,
                                                     previous_handle,
                                                     a_condition);
}


/******************************************************************/
    
ReturnCode_t 
ENC_ESSControlKindDataReader::take_next_instance_w_condition( ENC_ESSControlKindPtrSeq     * received_data,
                                                   SampleInfoSeq    * sample_infos,
                                                   int                max_samples,
                                                   InstanceHandle_t   previous_handle,
                                                   ReadCondition *    a_condition)
{
  return DataReader::take_next_instance_w_condition( (Sequence*)received_data,
                                                     sample_infos,
                                                     max_samples,
                                                     previous_handle,
                                                     a_condition);
}


/******************************************************************/
    
ReturnCode_t
ENC_ESSControlKindDataReader::return_loan( ENC_ESSControlKindPtrSeq   * received_data,
                                SampleInfoSeq  * sample_infos)
{
  return DataReader::return_loan( (Sequence*)received_data, sample_infos);
}


/******************************************************************/

ReturnCode_t
ENC_ESSControlKindDataReader::get_key_value( ENC_ESSControlKind            * key_holder, 
                                  InstanceHandle_t  handle)
{
  if ( ! key_holder )
      return RETCODE_BAD_PARAMETER;

  /* No keys: no op */
  CDX_UNUSED(handle);
  key_holder->clear();
  return DDS::RETCODE_OK;
}


/******************************************************************/
/* openfmb::essmodule:: */
InstanceHandle_t 
ENC_ESSControlKindDataReader::lookup_instance( ENC_ESSControlKind       * instance_data)
{
  if ( ! instance_data )
      return HANDLE_NIL;

  /* No keys */
  return DDS::HANDLE_DEFAULT;
}


}  /* namespace essmodule */
/* END SCOPE: essmodule */
/* START SCOPE: generationmodule */

namespace generationmodule {


/******************************************************************
 * openfmb::generationmodule:: DataReader Ops
 *****************************************************************/

/******************************************************************/
GenerationControlScheduleProfileDataReader::GenerationControlScheduleProfileDataReader()
{
}

/******************************************************************/
ReturnCode_t 
GenerationControlScheduleProfileDataReader::read( GenerationControlScheduleProfilePtrSeq    * received_data,
                         SampleInfoSeq   * sample_infos,
                         int               max_samples,
                         SampleStateMask   sample_states, 
                         ViewStateMask     view_states, 
                         InstanceStateMask instance_states)
{
  return DataReader::read( (Sequence*)received_data, 
			    sample_infos, 
			    max_samples, 
			    sample_states, 
			    view_states, 
			    instance_states );
}
  

/******************************************************************/

ReturnCode_t
GenerationControlScheduleProfileDataReader::take( GenerationControlScheduleProfilePtrSeq     * received_data,
                         SampleInfoSeq    * sample_infos,
                         int                max_samples,
                         SampleStateMask    sample_states, 
                         ViewStateMask      view_states, 
                         InstanceStateMask  instance_states)
{
  return DataReader::take( (Sequence*)received_data,
                           sample_infos,
                           max_samples,
                           sample_states, 
                           view_states, 
                           instance_states);
}


/******************************************************************/

ReturnCode_t 
GenerationControlScheduleProfileDataReader::read_w_condition( GenerationControlScheduleProfilePtrSeq  * received_data,
                                     SampleInfoSeq * sample_infos,
                                     int             max_samples,
                                     ReadCondition * a_condition)
{
  return DataReader::read_w_condition( (Sequence*)received_data,
                                       sample_infos,
                                       max_samples,
                                       a_condition);
}


/******************************************************************/
    
ReturnCode_t
GenerationControlScheduleProfileDataReader::take_w_condition( GenerationControlScheduleProfilePtrSeq   * received_data,
                                     SampleInfoSeq  * sample_infos,
                                     int              max_samples,
                                     ReadCondition *  a_condition)
{
  return DataReader::take_w_condition( (Sequence*)received_data,
                                       sample_infos,
                                       max_samples,
                                       a_condition);
}


/******************************************************************/
    
ReturnCode_t
GenerationControlScheduleProfileDataReader::read_next_sample( GenerationControlScheduleProfile     * received_data,
                                  SampleInfo     * sample_info)
{
  return DataReader::read_next_sample( (void*)received_data,
                                       sample_info);
}


/******************************************************************/
    
ReturnCode_t
GenerationControlScheduleProfileDataReader::take_next_sample( GenerationControlScheduleProfile      * received_data,
                                     SampleInfo      * sample_info)
{
  return DataReader::take_next_sample( (void*) received_data,
                                       sample_info);
}


/******************************************************************/
    
ReturnCode_t
GenerationControlScheduleProfileDataReader::read_instance( GenerationControlScheduleProfilePtrSeq       * received_data,
                                  SampleInfoSeq    * sample_infos,
                                  int                max_samples,
                                  InstanceHandle_t   a_handle,
                                  SampleStateMask    sample_states, 
                                  ViewStateMask      view_states, 
                                  InstanceStateMask  instance_states)
{
  return DataReader::read_instance( (Sequence*)received_data, 
                                    sample_infos, 
                                    max_samples, 
                                    a_handle, 
                                    sample_states, 
                                    view_states, 
                                    instance_states );
}


/******************************************************************/
    
ReturnCode_t
GenerationControlScheduleProfileDataReader::take_instance( GenerationControlScheduleProfilePtrSeq    * received_data,
                                  SampleInfoSeq   * sample_infos,
                                  int               max_samples,
                                  InstanceHandle_t  a_handle,
                                  SampleStateMask   sample_states, 
                                  ViewStateMask     view_states, 
                                  InstanceStateMask instance_states)
{
  return DataReader::take_instance( (Sequence*)received_data,
                                    sample_infos,
                                    max_samples,
                                    a_handle,
                                    sample_states, 
                                    view_states, 
                                    instance_states);
}


/******************************************************************/
    
ReturnCode_t
GenerationControlScheduleProfileDataReader::read_next_instance( GenerationControlScheduleProfilePtrSeq    * received_data,
                                       SampleInfoSeq   * sample_infos,
                                       int               max_samples,
                                       InstanceHandle_t  previous_handle,
                                       SampleStateMask   sample_states, 
                                       ViewStateMask     view_states, 
                                       InstanceStateMask instance_states)
{
  return DataReader::read_next_instance( (Sequence*)received_data,
                                         sample_infos,
                                         max_samples,
                                         previous_handle,
                                         sample_states, 
                                         view_states, 
                                         instance_states);
}


/******************************************************************/

ReturnCode_t
GenerationControlScheduleProfileDataReader::take_next_instance( GenerationControlScheduleProfilePtrSeq     * received_data,
                                       SampleInfoSeq    * sample_infos,
                                       int                max_samples,
                                       InstanceHandle_t   previous_handle,
                                       SampleStateMask    sample_states, 
                                       ViewStateMask      view_states, 
                                       InstanceStateMask  instance_states)
{
  return DataReader::take_next_instance( (Sequence*)received_data,
                                         sample_infos,
                                         max_samples,
                                         previous_handle,
                                         sample_states, 
                                         view_states, 
                                         instance_states);
}


/******************************************************************/
    
ReturnCode_t
GenerationControlScheduleProfileDataReader::read_next_instance_w_condition( GenerationControlScheduleProfilePtrSeq     * received_data,
                                                   SampleInfoSeq    * sample_infos,
                                                   int                max_samples,
                                                   InstanceHandle_t   previous_handle,
                                                   ReadCondition *    a_condition)
{
  return DataReader::read_next_instance_w_condition( (Sequence*)received_data,
                                                     sample_infos,
                                                     max_samples,
                                                     previous_handle,
                                                     a_condition);
}


/******************************************************************/
    
ReturnCode_t 
GenerationControlScheduleProfileDataReader::take_next_instance_w_condition( GenerationControlScheduleProfilePtrSeq     * received_data,
                                                   SampleInfoSeq    * sample_infos,
                                                   int                max_samples,
                                                   InstanceHandle_t   previous_handle,
                                                   ReadCondition *    a_condition)
{
  return DataReader::take_next_instance_w_condition( (Sequence*)received_data,
                                                     sample_infos,
                                                     max_samples,
                                                     previous_handle,
                                                     a_condition);
}


/******************************************************************/
    
ReturnCode_t
GenerationControlScheduleProfileDataReader::return_loan( GenerationControlScheduleProfilePtrSeq   * received_data,
                                SampleInfoSeq  * sample_infos)
{
  return DataReader::return_loan( (Sequence*)received_data, sample_infos);
}


/******************************************************************/

ReturnCode_t
GenerationControlScheduleProfileDataReader::get_key_value( GenerationControlScheduleProfile            * key_holder, 
                                  InstanceHandle_t  handle)
{
  if ( ! key_holder )
      return RETCODE_BAD_PARAMETER;

  /* No keys: no op */
  CDX_UNUSED(handle);
  key_holder->clear();
  return DDS::RETCODE_OK;
}


/******************************************************************/
/* openfmb::generationmodule:: */
InstanceHandle_t 
GenerationControlScheduleProfileDataReader::lookup_instance( GenerationControlScheduleProfile       * instance_data)
{
  if ( ! instance_data )
      return HANDLE_NIL;

  /* No keys */
  return DDS::HANDLE_DEFAULT;
}


}  /* namespace generationmodule */
/* END SCOPE: generationmodule */
/* START SCOPE: interconnectionmodule */

namespace interconnectionmodule {


/******************************************************************
 * openfmb::interconnectionmodule:: DataReader Ops
 *****************************************************************/

/******************************************************************/
PlannedInterconnectionScheduleProfileDataReader::PlannedInterconnectionScheduleProfileDataReader()
{
}

/******************************************************************/
ReturnCode_t 
PlannedInterconnectionScheduleProfileDataReader::read( PlannedInterconnectionScheduleProfilePtrSeq    * received_data,
                         SampleInfoSeq   * sample_infos,
                         int               max_samples,
                         SampleStateMask   sample_states, 
                         ViewStateMask     view_states, 
                         InstanceStateMask instance_states)
{
  return DataReader::read( (Sequence*)received_data, 
			    sample_infos, 
			    max_samples, 
			    sample_states, 
			    view_states, 
			    instance_states );
}
  

/******************************************************************/

ReturnCode_t
PlannedInterconnectionScheduleProfileDataReader::take( PlannedInterconnectionScheduleProfilePtrSeq     * received_data,
                         SampleInfoSeq    * sample_infos,
                         int                max_samples,
                         SampleStateMask    sample_states, 
                         ViewStateMask      view_states, 
                         InstanceStateMask  instance_states)
{
  return DataReader::take( (Sequence*)received_data,
                           sample_infos,
                           max_samples,
                           sample_states, 
                           view_states, 
                           instance_states);
}


/******************************************************************/

ReturnCode_t 
PlannedInterconnectionScheduleProfileDataReader::read_w_condition( PlannedInterconnectionScheduleProfilePtrSeq  * received_data,
                                     SampleInfoSeq * sample_infos,
                                     int             max_samples,
                                     ReadCondition * a_condition)
{
  return DataReader::read_w_condition( (Sequence*)received_data,
                                       sample_infos,
                                       max_samples,
                                       a_condition);
}


/******************************************************************/
    
ReturnCode_t
PlannedInterconnectionScheduleProfileDataReader::take_w_condition( PlannedInterconnectionScheduleProfilePtrSeq   * received_data,
                                     SampleInfoSeq  * sample_infos,
                                     int              max_samples,
                                     ReadCondition *  a_condition)
{
  return DataReader::take_w_condition( (Sequence*)received_data,
                                       sample_infos,
                                       max_samples,
                                       a_condition);
}


/******************************************************************/
    
ReturnCode_t
PlannedInterconnectionScheduleProfileDataReader::read_next_sample( PlannedInterconnectionScheduleProfile     * received_data,
                                  SampleInfo     * sample_info)
{
  return DataReader::read_next_sample( (void*)received_data,
                                       sample_info);
}


/******************************************************************/
    
ReturnCode_t
PlannedInterconnectionScheduleProfileDataReader::take_next_sample( PlannedInterconnectionScheduleProfile      * received_data,
                                     SampleInfo      * sample_info)
{
  return DataReader::take_next_sample( (void*) received_data,
                                       sample_info);
}


/******************************************************************/
    
ReturnCode_t
PlannedInterconnectionScheduleProfileDataReader::read_instance( PlannedInterconnectionScheduleProfilePtrSeq       * received_data,
                                  SampleInfoSeq    * sample_infos,
                                  int                max_samples,
                                  InstanceHandle_t   a_handle,
                                  SampleStateMask    sample_states, 
                                  ViewStateMask      view_states, 
                                  InstanceStateMask  instance_states)
{
  return DataReader::read_instance( (Sequence*)received_data, 
                                    sample_infos, 
                                    max_samples, 
                                    a_handle, 
                                    sample_states, 
                                    view_states, 
                                    instance_states );
}


/******************************************************************/
    
ReturnCode_t
PlannedInterconnectionScheduleProfileDataReader::take_instance( PlannedInterconnectionScheduleProfilePtrSeq    * received_data,
                                  SampleInfoSeq   * sample_infos,
                                  int               max_samples,
                                  InstanceHandle_t  a_handle,
                                  SampleStateMask   sample_states, 
                                  ViewStateMask     view_states, 
                                  InstanceStateMask instance_states)
{
  return DataReader::take_instance( (Sequence*)received_data,
                                    sample_infos,
                                    max_samples,
                                    a_handle,
                                    sample_states, 
                                    view_states, 
                                    instance_states);
}


/******************************************************************/
    
ReturnCode_t
PlannedInterconnectionScheduleProfileDataReader::read_next_instance( PlannedInterconnectionScheduleProfilePtrSeq    * received_data,
                                       SampleInfoSeq   * sample_infos,
                                       int               max_samples,
                                       InstanceHandle_t  previous_handle,
                                       SampleStateMask   sample_states, 
                                       ViewStateMask     view_states, 
                                       InstanceStateMask instance_states)
{
  return DataReader::read_next_instance( (Sequence*)received_data,
                                         sample_infos,
                                         max_samples,
                                         previous_handle,
                                         sample_states, 
                                         view_states, 
                                         instance_states);
}


/******************************************************************/

ReturnCode_t
PlannedInterconnectionScheduleProfileDataReader::take_next_instance( PlannedInterconnectionScheduleProfilePtrSeq     * received_data,
                                       SampleInfoSeq    * sample_infos,
                                       int                max_samples,
                                       InstanceHandle_t   previous_handle,
                                       SampleStateMask    sample_states, 
                                       ViewStateMask      view_states, 
                                       InstanceStateMask  instance_states)
{
  return DataReader::take_next_instance( (Sequence*)received_data,
                                         sample_infos,
                                         max_samples,
                                         previous_handle,
                                         sample_states, 
                                         view_states, 
                                         instance_states);
}


/******************************************************************/
    
ReturnCode_t
PlannedInterconnectionScheduleProfileDataReader::read_next_instance_w_condition( PlannedInterconnectionScheduleProfilePtrSeq     * received_data,
                                                   SampleInfoSeq    * sample_infos,
                                                   int                max_samples,
                                                   InstanceHandle_t   previous_handle,
                                                   ReadCondition *    a_condition)
{
  return DataReader::read_next_instance_w_condition( (Sequence*)received_data,
                                                     sample_infos,
                                                     max_samples,
                                                     previous_handle,
                                                     a_condition);
}


/******************************************************************/
    
ReturnCode_t 
PlannedInterconnectionScheduleProfileDataReader::take_next_instance_w_condition( PlannedInterconnectionScheduleProfilePtrSeq     * received_data,
                                                   SampleInfoSeq    * sample_infos,
                                                   int                max_samples,
                                                   InstanceHandle_t   previous_handle,
                                                   ReadCondition *    a_condition)
{
  return DataReader::take_next_instance_w_condition( (Sequence*)received_data,
                                                     sample_infos,
                                                     max_samples,
                                                     previous_handle,
                                                     a_condition);
}


/******************************************************************/
    
ReturnCode_t
PlannedInterconnectionScheduleProfileDataReader::return_loan( PlannedInterconnectionScheduleProfilePtrSeq   * received_data,
                                SampleInfoSeq  * sample_infos)
{
  return DataReader::return_loan( (Sequence*)received_data, sample_infos);
}


/******************************************************************/

ReturnCode_t
PlannedInterconnectionScheduleProfileDataReader::get_key_value( PlannedInterconnectionScheduleProfile            * key_holder, 
                                  InstanceHandle_t  handle)
{
  if ( ! key_holder )
      return RETCODE_BAD_PARAMETER;

  /* No keys: no op */
  CDX_UNUSED(handle);
  key_holder->clear();
  return DDS::RETCODE_OK;
}


/******************************************************************/
/* openfmb::interconnectionmodule:: */
InstanceHandle_t 
PlannedInterconnectionScheduleProfileDataReader::lookup_instance( PlannedInterconnectionScheduleProfile       * instance_data)
{
  if ( ! instance_data )
      return HANDLE_NIL;

  /* No keys */
  return DDS::HANDLE_DEFAULT;
}


/******************************************************************
 * openfmb::interconnectionmodule:: DataReader Ops
 *****************************************************************/

/******************************************************************/
RequestedInterconnectionScheduleProfileDataReader::RequestedInterconnectionScheduleProfileDataReader()
{
}

/******************************************************************/
ReturnCode_t 
RequestedInterconnectionScheduleProfileDataReader::read( RequestedInterconnectionScheduleProfilePtrSeq    * received_data,
                         SampleInfoSeq   * sample_infos,
                         int               max_samples,
                         SampleStateMask   sample_states, 
                         ViewStateMask     view_states, 
                         InstanceStateMask instance_states)
{
  return DataReader::read( (Sequence*)received_data, 
			    sample_infos, 
			    max_samples, 
			    sample_states, 
			    view_states, 
			    instance_states );
}
  

/******************************************************************/

ReturnCode_t
RequestedInterconnectionScheduleProfileDataReader::take( RequestedInterconnectionScheduleProfilePtrSeq     * received_data,
                         SampleInfoSeq    * sample_infos,
                         int                max_samples,
                         SampleStateMask    sample_states, 
                         ViewStateMask      view_states, 
                         InstanceStateMask  instance_states)
{
  return DataReader::take( (Sequence*)received_data,
                           sample_infos,
                           max_samples,
                           sample_states, 
                           view_states, 
                           instance_states);
}


/******************************************************************/

ReturnCode_t 
RequestedInterconnectionScheduleProfileDataReader::read_w_condition( RequestedInterconnectionScheduleProfilePtrSeq  * received_data,
                                     SampleInfoSeq * sample_infos,
                                     int             max_samples,
                                     ReadCondition * a_condition)
{
  return DataReader::read_w_condition( (Sequence*)received_data,
                                       sample_infos,
                                       max_samples,
                                       a_condition);
}


/******************************************************************/
    
ReturnCode_t
RequestedInterconnectionScheduleProfileDataReader::take_w_condition( RequestedInterconnectionScheduleProfilePtrSeq   * received_data,
                                     SampleInfoSeq  * sample_infos,
                                     int              max_samples,
                                     ReadCondition *  a_condition)
{
  return DataReader::take_w_condition( (Sequence*)received_data,
                                       sample_infos,
                                       max_samples,
                                       a_condition);
}


/******************************************************************/
    
ReturnCode_t
RequestedInterconnectionScheduleProfileDataReader::read_next_sample( RequestedInterconnectionScheduleProfile     * received_data,
                                  SampleInfo     * sample_info)
{
  return DataReader::read_next_sample( (void*)received_data,
                                       sample_info);
}


/******************************************************************/
    
ReturnCode_t
RequestedInterconnectionScheduleProfileDataReader::take_next_sample( RequestedInterconnectionScheduleProfile      * received_data,
                                     SampleInfo      * sample_info)
{
  return DataReader::take_next_sample( (void*) received_data,
                                       sample_info);
}


/******************************************************************/
    
ReturnCode_t
RequestedInterconnectionScheduleProfileDataReader::read_instance( RequestedInterconnectionScheduleProfilePtrSeq       * received_data,
                                  SampleInfoSeq    * sample_infos,
                                  int                max_samples,
                                  InstanceHandle_t   a_handle,
                                  SampleStateMask    sample_states, 
                                  ViewStateMask      view_states, 
                                  InstanceStateMask  instance_states)
{
  return DataReader::read_instance( (Sequence*)received_data, 
                                    sample_infos, 
                                    max_samples, 
                                    a_handle, 
                                    sample_states, 
                                    view_states, 
                                    instance_states );
}


/******************************************************************/
    
ReturnCode_t
RequestedInterconnectionScheduleProfileDataReader::take_instance( RequestedInterconnectionScheduleProfilePtrSeq    * received_data,
                                  SampleInfoSeq   * sample_infos,
                                  int               max_samples,
                                  InstanceHandle_t  a_handle,
                                  SampleStateMask   sample_states, 
                                  ViewStateMask     view_states, 
                                  InstanceStateMask instance_states)
{
  return DataReader::take_instance( (Sequence*)received_data,
                                    sample_infos,
                                    max_samples,
                                    a_handle,
                                    sample_states, 
                                    view_states, 
                                    instance_states);
}


/******************************************************************/
    
ReturnCode_t
RequestedInterconnectionScheduleProfileDataReader::read_next_instance( RequestedInterconnectionScheduleProfilePtrSeq    * received_data,
                                       SampleInfoSeq   * sample_infos,
                                       int               max_samples,
                                       InstanceHandle_t  previous_handle,
                                       SampleStateMask   sample_states, 
                                       ViewStateMask     view_states, 
                                       InstanceStateMask instance_states)
{
  return DataReader::read_next_instance( (Sequence*)received_data,
                                         sample_infos,
                                         max_samples,
                                         previous_handle,
                                         sample_states, 
                                         view_states, 
                                         instance_states);
}


/******************************************************************/

ReturnCode_t
RequestedInterconnectionScheduleProfileDataReader::take_next_instance( RequestedInterconnectionScheduleProfilePtrSeq     * received_data,
                                       SampleInfoSeq    * sample_infos,
                                       int                max_samples,
                                       InstanceHandle_t   previous_handle,
                                       SampleStateMask    sample_states, 
                                       ViewStateMask      view_states, 
                                       InstanceStateMask  instance_states)
{
  return DataReader::take_next_instance( (Sequence*)received_data,
                                         sample_infos,
                                         max_samples,
                                         previous_handle,
                                         sample_states, 
                                         view_states, 
                                         instance_states);
}


/******************************************************************/
    
ReturnCode_t
RequestedInterconnectionScheduleProfileDataReader::read_next_instance_w_condition( RequestedInterconnectionScheduleProfilePtrSeq     * received_data,
                                                   SampleInfoSeq    * sample_infos,
                                                   int                max_samples,
                                                   InstanceHandle_t   previous_handle,
                                                   ReadCondition *    a_condition)
{
  return DataReader::read_next_instance_w_condition( (Sequence*)received_data,
                                                     sample_infos,
                                                     max_samples,
                                                     previous_handle,
                                                     a_condition);
}


/******************************************************************/
    
ReturnCode_t 
RequestedInterconnectionScheduleProfileDataReader::take_next_instance_w_condition( RequestedInterconnectionScheduleProfilePtrSeq     * received_data,
                                                   SampleInfoSeq    * sample_infos,
                                                   int                max_samples,
                                                   InstanceHandle_t   previous_handle,
                                                   ReadCondition *    a_condition)
{
  return DataReader::take_next_instance_w_condition( (Sequence*)received_data,
                                                     sample_infos,
                                                     max_samples,
                                                     previous_handle,
                                                     a_condition);
}


/******************************************************************/
    
ReturnCode_t
RequestedInterconnectionScheduleProfileDataReader::return_loan( RequestedInterconnectionScheduleProfilePtrSeq   * received_data,
                                SampleInfoSeq  * sample_infos)
{
  return DataReader::return_loan( (Sequence*)received_data, sample_infos);
}


/******************************************************************/

ReturnCode_t
RequestedInterconnectionScheduleProfileDataReader::get_key_value( RequestedInterconnectionScheduleProfile            * key_holder, 
                                  InstanceHandle_t  handle)
{
  if ( ! key_holder )
      return RETCODE_BAD_PARAMETER;

  /* No keys: no op */
  CDX_UNUSED(handle);
  key_holder->clear();
  return DDS::RETCODE_OK;
}


/******************************************************************/
/* openfmb::interconnectionmodule:: */
InstanceHandle_t 
RequestedInterconnectionScheduleProfileDataReader::lookup_instance( RequestedInterconnectionScheduleProfile       * instance_data)
{
  if ( ! instance_data )
      return HANDLE_NIL;

  /* No keys */
  return DDS::HANDLE_DEFAULT;
}


}  /* namespace interconnectionmodule */
/* END SCOPE: interconnectionmodule */
/* START SCOPE: loadmodule */

namespace loadmodule {


}  /* namespace loadmodule */
/* END SCOPE: loadmodule */
/* START SCOPE: optimizermodule */

namespace optimizermodule {


/******************************************************************
 * openfmb::optimizermodule:: DataReader Ops
 *****************************************************************/

/******************************************************************/
RequestedOptimizerScheduleProfileDataReader::RequestedOptimizerScheduleProfileDataReader()
{
}

/******************************************************************/
ReturnCode_t 
RequestedOptimizerScheduleProfileDataReader::read( RequestedOptimizerScheduleProfilePtrSeq    * received_data,
                         SampleInfoSeq   * sample_infos,
                         int               max_samples,
                         SampleStateMask   sample_states, 
                         ViewStateMask     view_states, 
                         InstanceStateMask instance_states)
{
  return DataReader::read( (Sequence*)received_data, 
			    sample_infos, 
			    max_samples, 
			    sample_states, 
			    view_states, 
			    instance_states );
}
  

/******************************************************************/

ReturnCode_t
RequestedOptimizerScheduleProfileDataReader::take( RequestedOptimizerScheduleProfilePtrSeq     * received_data,
                         SampleInfoSeq    * sample_infos,
                         int                max_samples,
                         SampleStateMask    sample_states, 
                         ViewStateMask      view_states, 
                         InstanceStateMask  instance_states)
{
  return DataReader::take( (Sequence*)received_data,
                           sample_infos,
                           max_samples,
                           sample_states, 
                           view_states, 
                           instance_states);
}


/******************************************************************/

ReturnCode_t 
RequestedOptimizerScheduleProfileDataReader::read_w_condition( RequestedOptimizerScheduleProfilePtrSeq  * received_data,
                                     SampleInfoSeq * sample_infos,
                                     int             max_samples,
                                     ReadCondition * a_condition)
{
  return DataReader::read_w_condition( (Sequence*)received_data,
                                       sample_infos,
                                       max_samples,
                                       a_condition);
}


/******************************************************************/
    
ReturnCode_t
RequestedOptimizerScheduleProfileDataReader::take_w_condition( RequestedOptimizerScheduleProfilePtrSeq   * received_data,
                                     SampleInfoSeq  * sample_infos,
                                     int              max_samples,
                                     ReadCondition *  a_condition)
{
  return DataReader::take_w_condition( (Sequence*)received_data,
                                       sample_infos,
                                       max_samples,
                                       a_condition);
}


/******************************************************************/
    
ReturnCode_t
RequestedOptimizerScheduleProfileDataReader::read_next_sample( RequestedOptimizerScheduleProfile     * received_data,
                                  SampleInfo     * sample_info)
{
  return DataReader::read_next_sample( (void*)received_data,
                                       sample_info);
}


/******************************************************************/
    
ReturnCode_t
RequestedOptimizerScheduleProfileDataReader::take_next_sample( RequestedOptimizerScheduleProfile      * received_data,
                                     SampleInfo      * sample_info)
{
  return DataReader::take_next_sample( (void*) received_data,
                                       sample_info);
}


/******************************************************************/
    
ReturnCode_t
RequestedOptimizerScheduleProfileDataReader::read_instance( RequestedOptimizerScheduleProfilePtrSeq       * received_data,
                                  SampleInfoSeq    * sample_infos,
                                  int                max_samples,
                                  InstanceHandle_t   a_handle,
                                  SampleStateMask    sample_states, 
                                  ViewStateMask      view_states, 
                                  InstanceStateMask  instance_states)
{
  return DataReader::read_instance( (Sequence*)received_data, 
                                    sample_infos, 
                                    max_samples, 
                                    a_handle, 
                                    sample_states, 
                                    view_states, 
                                    instance_states );
}


/******************************************************************/
    
ReturnCode_t
RequestedOptimizerScheduleProfileDataReader::take_instance( RequestedOptimizerScheduleProfilePtrSeq    * received_data,
                                  SampleInfoSeq   * sample_infos,
                                  int               max_samples,
                                  InstanceHandle_t  a_handle,
                                  SampleStateMask   sample_states, 
                                  ViewStateMask     view_states, 
                                  InstanceStateMask instance_states)
{
  return DataReader::take_instance( (Sequence*)received_data,
                                    sample_infos,
                                    max_samples,
                                    a_handle,
                                    sample_states, 
                                    view_states, 
                                    instance_states);
}


/******************************************************************/
    
ReturnCode_t
RequestedOptimizerScheduleProfileDataReader::read_next_instance( RequestedOptimizerScheduleProfilePtrSeq    * received_data,
                                       SampleInfoSeq   * sample_infos,
                                       int               max_samples,
                                       InstanceHandle_t  previous_handle,
                                       SampleStateMask   sample_states, 
                                       ViewStateMask     view_states, 
                                       InstanceStateMask instance_states)
{
  return DataReader::read_next_instance( (Sequence*)received_data,
                                         sample_infos,
                                         max_samples,
                                         previous_handle,
                                         sample_states, 
                                         view_states, 
                                         instance_states);
}


/******************************************************************/

ReturnCode_t
RequestedOptimizerScheduleProfileDataReader::take_next_instance( RequestedOptimizerScheduleProfilePtrSeq     * received_data,
                                       SampleInfoSeq    * sample_infos,
                                       int                max_samples,
                                       InstanceHandle_t   previous_handle,
                                       SampleStateMask    sample_states, 
                                       ViewStateMask      view_states, 
                                       InstanceStateMask  instance_states)
{
  return DataReader::take_next_instance( (Sequence*)received_data,
                                         sample_infos,
                                         max_samples,
                                         previous_handle,
                                         sample_states, 
                                         view_states, 
                                         instance_states);
}


/******************************************************************/
    
ReturnCode_t
RequestedOptimizerScheduleProfileDataReader::read_next_instance_w_condition( RequestedOptimizerScheduleProfilePtrSeq     * received_data,
                                                   SampleInfoSeq    * sample_infos,
                                                   int                max_samples,
                                                   InstanceHandle_t   previous_handle,
                                                   ReadCondition *    a_condition)
{
  return DataReader::read_next_instance_w_condition( (Sequence*)received_data,
                                                     sample_infos,
                                                     max_samples,
                                                     previous_handle,
                                                     a_condition);
}


/******************************************************************/
    
ReturnCode_t 
RequestedOptimizerScheduleProfileDataReader::take_next_instance_w_condition( RequestedOptimizerScheduleProfilePtrSeq     * received_data,
                                                   SampleInfoSeq    * sample_infos,
                                                   int                max_samples,
                                                   InstanceHandle_t   previous_handle,
                                                   ReadCondition *    a_condition)
{
  return DataReader::take_next_instance_w_condition( (Sequence*)received_data,
                                                     sample_infos,
                                                     max_samples,
                                                     previous_handle,
                                                     a_condition);
}


/******************************************************************/
    
ReturnCode_t
RequestedOptimizerScheduleProfileDataReader::return_loan( RequestedOptimizerScheduleProfilePtrSeq   * received_data,
                                SampleInfoSeq  * sample_infos)
{
  return DataReader::return_loan( (Sequence*)received_data, sample_infos);
}


/******************************************************************/

ReturnCode_t
RequestedOptimizerScheduleProfileDataReader::get_key_value( RequestedOptimizerScheduleProfile            * key_holder, 
                                  InstanceHandle_t  handle)
{
  if ( ! key_holder )
      return RETCODE_BAD_PARAMETER;

  /* No keys: no op */
  CDX_UNUSED(handle);
  key_holder->clear();
  return DDS::RETCODE_OK;
}


/******************************************************************/
/* openfmb::optimizermodule:: */
InstanceHandle_t 
RequestedOptimizerScheduleProfileDataReader::lookup_instance( RequestedOptimizerScheduleProfile       * instance_data)
{
  if ( ! instance_data )
      return HANDLE_NIL;

  /* No keys */
  return DDS::HANDLE_DEFAULT;
}


}  /* namespace optimizermodule */
/* END SCOPE: optimizermodule */
/* START SCOPE: reclosermodule */

namespace reclosermodule {


}  /* namespace reclosermodule */
/* END SCOPE: reclosermodule */
/* START SCOPE: switchmodule */

namespace switchmodule {


/******************************************************************
 * openfmb::switchmodule:: DataReader Ops
 *****************************************************************/

/******************************************************************/
SwitchControlXSWIDataReader::SwitchControlXSWIDataReader()
{
}

/******************************************************************/
ReturnCode_t 
SwitchControlXSWIDataReader::read( SwitchControlXSWIPtrSeq    * received_data,
                         SampleInfoSeq   * sample_infos,
                         int               max_samples,
                         SampleStateMask   sample_states, 
                         ViewStateMask     view_states, 
                         InstanceStateMask instance_states)
{
  return DataReader::read( (Sequence*)received_data, 
			    sample_infos, 
			    max_samples, 
			    sample_states, 
			    view_states, 
			    instance_states );
}
  

/******************************************************************/

ReturnCode_t
SwitchControlXSWIDataReader::take( SwitchControlXSWIPtrSeq     * received_data,
                         SampleInfoSeq    * sample_infos,
                         int                max_samples,
                         SampleStateMask    sample_states, 
                         ViewStateMask      view_states, 
                         InstanceStateMask  instance_states)
{
  return DataReader::take( (Sequence*)received_data,
                           sample_infos,
                           max_samples,
                           sample_states, 
                           view_states, 
                           instance_states);
}


/******************************************************************/

ReturnCode_t 
SwitchControlXSWIDataReader::read_w_condition( SwitchControlXSWIPtrSeq  * received_data,
                                     SampleInfoSeq * sample_infos,
                                     int             max_samples,
                                     ReadCondition * a_condition)
{
  return DataReader::read_w_condition( (Sequence*)received_data,
                                       sample_infos,
                                       max_samples,
                                       a_condition);
}


/******************************************************************/
    
ReturnCode_t
SwitchControlXSWIDataReader::take_w_condition( SwitchControlXSWIPtrSeq   * received_data,
                                     SampleInfoSeq  * sample_infos,
                                     int              max_samples,
                                     ReadCondition *  a_condition)
{
  return DataReader::take_w_condition( (Sequence*)received_data,
                                       sample_infos,
                                       max_samples,
                                       a_condition);
}


/******************************************************************/
    
ReturnCode_t
SwitchControlXSWIDataReader::read_next_sample( SwitchControlXSWI     * received_data,
                                  SampleInfo     * sample_info)
{
  return DataReader::read_next_sample( (void*)received_data,
                                       sample_info);
}


/******************************************************************/
    
ReturnCode_t
SwitchControlXSWIDataReader::take_next_sample( SwitchControlXSWI      * received_data,
                                     SampleInfo      * sample_info)
{
  return DataReader::take_next_sample( (void*) received_data,
                                       sample_info);
}


/******************************************************************/
    
ReturnCode_t
SwitchControlXSWIDataReader::read_instance( SwitchControlXSWIPtrSeq       * received_data,
                                  SampleInfoSeq    * sample_infos,
                                  int                max_samples,
                                  InstanceHandle_t   a_handle,
                                  SampleStateMask    sample_states, 
                                  ViewStateMask      view_states, 
                                  InstanceStateMask  instance_states)
{
  return DataReader::read_instance( (Sequence*)received_data, 
                                    sample_infos, 
                                    max_samples, 
                                    a_handle, 
                                    sample_states, 
                                    view_states, 
                                    instance_states );
}


/******************************************************************/
    
ReturnCode_t
SwitchControlXSWIDataReader::take_instance( SwitchControlXSWIPtrSeq    * received_data,
                                  SampleInfoSeq   * sample_infos,
                                  int               max_samples,
                                  InstanceHandle_t  a_handle,
                                  SampleStateMask   sample_states, 
                                  ViewStateMask     view_states, 
                                  InstanceStateMask instance_states)
{
  return DataReader::take_instance( (Sequence*)received_data,
                                    sample_infos,
                                    max_samples,
                                    a_handle,
                                    sample_states, 
                                    view_states, 
                                    instance_states);
}


/******************************************************************/
    
ReturnCode_t
SwitchControlXSWIDataReader::read_next_instance( SwitchControlXSWIPtrSeq    * received_data,
                                       SampleInfoSeq   * sample_infos,
                                       int               max_samples,
                                       InstanceHandle_t  previous_handle,
                                       SampleStateMask   sample_states, 
                                       ViewStateMask     view_states, 
                                       InstanceStateMask instance_states)
{
  return DataReader::read_next_instance( (Sequence*)received_data,
                                         sample_infos,
                                         max_samples,
                                         previous_handle,
                                         sample_states, 
                                         view_states, 
                                         instance_states);
}


/******************************************************************/

ReturnCode_t
SwitchControlXSWIDataReader::take_next_instance( SwitchControlXSWIPtrSeq     * received_data,
                                       SampleInfoSeq    * sample_infos,
                                       int                max_samples,
                                       InstanceHandle_t   previous_handle,
                                       SampleStateMask    sample_states, 
                                       ViewStateMask      view_states, 
                                       InstanceStateMask  instance_states)
{
  return DataReader::take_next_instance( (Sequence*)received_data,
                                         sample_infos,
                                         max_samples,
                                         previous_handle,
                                         sample_states, 
                                         view_states, 
                                         instance_states);
}


/******************************************************************/
    
ReturnCode_t
SwitchControlXSWIDataReader::read_next_instance_w_condition( SwitchControlXSWIPtrSeq     * received_data,
                                                   SampleInfoSeq    * sample_infos,
                                                   int                max_samples,
                                                   InstanceHandle_t   previous_handle,
                                                   ReadCondition *    a_condition)
{
  return DataReader::read_next_instance_w_condition( (Sequence*)received_data,
                                                     sample_infos,
                                                     max_samples,
                                                     previous_handle,
                                                     a_condition);
}


/******************************************************************/
    
ReturnCode_t 
SwitchControlXSWIDataReader::take_next_instance_w_condition( SwitchControlXSWIPtrSeq     * received_data,
                                                   SampleInfoSeq    * sample_infos,
                                                   int                max_samples,
                                                   InstanceHandle_t   previous_handle,
                                                   ReadCondition *    a_condition)
{
  return DataReader::take_next_instance_w_condition( (Sequence*)received_data,
                                                     sample_infos,
                                                     max_samples,
                                                     previous_handle,
                                                     a_condition);
}


/******************************************************************/
    
ReturnCode_t
SwitchControlXSWIDataReader::return_loan( SwitchControlXSWIPtrSeq   * received_data,
                                SampleInfoSeq  * sample_infos)
{
  return DataReader::return_loan( (Sequence*)received_data, sample_infos);
}


/******************************************************************/

ReturnCode_t
SwitchControlXSWIDataReader::get_key_value( SwitchControlXSWI            * key_holder, 
                                  InstanceHandle_t  handle)
{
  if ( ! key_holder )
      return RETCODE_BAD_PARAMETER;

  /* No keys: no op */
  CDX_UNUSED(handle);
  key_holder->clear();
  return DDS::RETCODE_OK;
}


/******************************************************************/
/* openfmb::switchmodule:: */
InstanceHandle_t 
SwitchControlXSWIDataReader::lookup_instance( SwitchControlXSWI       * instance_data)
{
  if ( ! instance_data )
      return HANDLE_NIL;

  /* No keys */
  return DDS::HANDLE_DEFAULT;
}


}  /* namespace switchmodule */
/* END SCOPE: switchmodule */

}  /* namespace openfmb */
/* END SCOPE: openfmb */
/* START SCOPE: openfmb */

namespace openfmb {

/* START SCOPE: breakermodule */

namespace breakermodule {


}  /* namespace breakermodule */
/* END SCOPE: breakermodule */
/* START SCOPE: commonmodule */

namespace commonmodule {


}  /* namespace commonmodule */
/* END SCOPE: commonmodule */
/* START SCOPE: essmodule */

namespace essmodule {


/******************************************************************
 * openfmb::essmodule:: DataReader Ops
 *****************************************************************/

/******************************************************************/
EssEventZBATDataReader::EssEventZBATDataReader()
{
}

/******************************************************************/
ReturnCode_t 
EssEventZBATDataReader::read( EssEventZBATPtrSeq    * received_data,
                         SampleInfoSeq   * sample_infos,
                         int               max_samples,
                         SampleStateMask   sample_states, 
                         ViewStateMask     view_states, 
                         InstanceStateMask instance_states)
{
  return DataReader::read( (Sequence*)received_data, 
			    sample_infos, 
			    max_samples, 
			    sample_states, 
			    view_states, 
			    instance_states );
}
  

/******************************************************************/

ReturnCode_t
EssEventZBATDataReader::take( EssEventZBATPtrSeq     * received_data,
                         SampleInfoSeq    * sample_infos,
                         int                max_samples,
                         SampleStateMask    sample_states, 
                         ViewStateMask      view_states, 
                         InstanceStateMask  instance_states)
{
  return DataReader::take( (Sequence*)received_data,
                           sample_infos,
                           max_samples,
                           sample_states, 
                           view_states, 
                           instance_states);
}


/******************************************************************/

ReturnCode_t 
EssEventZBATDataReader::read_w_condition( EssEventZBATPtrSeq  * received_data,
                                     SampleInfoSeq * sample_infos,
                                     int             max_samples,
                                     ReadCondition * a_condition)
{
  return DataReader::read_w_condition( (Sequence*)received_data,
                                       sample_infos,
                                       max_samples,
                                       a_condition);
}


/******************************************************************/
    
ReturnCode_t
EssEventZBATDataReader::take_w_condition( EssEventZBATPtrSeq   * received_data,
                                     SampleInfoSeq  * sample_infos,
                                     int              max_samples,
                                     ReadCondition *  a_condition)
{
  return DataReader::take_w_condition( (Sequence*)received_data,
                                       sample_infos,
                                       max_samples,
                                       a_condition);
}


/******************************************************************/
    
ReturnCode_t
EssEventZBATDataReader::read_next_sample( EssEventZBAT     * received_data,
                                  SampleInfo     * sample_info)
{
  return DataReader::read_next_sample( (void*)received_data,
                                       sample_info);
}


/******************************************************************/
    
ReturnCode_t
EssEventZBATDataReader::take_next_sample( EssEventZBAT      * received_data,
                                     SampleInfo      * sample_info)
{
  return DataReader::take_next_sample( (void*) received_data,
                                       sample_info);
}


/******************************************************************/
    
ReturnCode_t
EssEventZBATDataReader::read_instance( EssEventZBATPtrSeq       * received_data,
                                  SampleInfoSeq    * sample_infos,
                                  int                max_samples,
                                  InstanceHandle_t   a_handle,
                                  SampleStateMask    sample_states, 
                                  ViewStateMask      view_states, 
                                  InstanceStateMask  instance_states)
{
  return DataReader::read_instance( (Sequence*)received_data, 
                                    sample_infos, 
                                    max_samples, 
                                    a_handle, 
                                    sample_states, 
                                    view_states, 
                                    instance_states );
}


/******************************************************************/
    
ReturnCode_t
EssEventZBATDataReader::take_instance( EssEventZBATPtrSeq    * received_data,
                                  SampleInfoSeq   * sample_infos,
                                  int               max_samples,
                                  InstanceHandle_t  a_handle,
                                  SampleStateMask   sample_states, 
                                  ViewStateMask     view_states, 
                                  InstanceStateMask instance_states)
{
  return DataReader::take_instance( (Sequence*)received_data,
                                    sample_infos,
                                    max_samples,
                                    a_handle,
                                    sample_states, 
                                    view_states, 
                                    instance_states);
}


/******************************************************************/
    
ReturnCode_t
EssEventZBATDataReader::read_next_instance( EssEventZBATPtrSeq    * received_data,
                                       SampleInfoSeq   * sample_infos,
                                       int               max_samples,
                                       InstanceHandle_t  previous_handle,
                                       SampleStateMask   sample_states, 
                                       ViewStateMask     view_states, 
                                       InstanceStateMask instance_states)
{
  return DataReader::read_next_instance( (Sequence*)received_data,
                                         sample_infos,
                                         max_samples,
                                         previous_handle,
                                         sample_states, 
                                         view_states, 
                                         instance_states);
}


/******************************************************************/

ReturnCode_t
EssEventZBATDataReader::take_next_instance( EssEventZBATPtrSeq     * received_data,
                                       SampleInfoSeq    * sample_infos,
                                       int                max_samples,
                                       InstanceHandle_t   previous_handle,
                                       SampleStateMask    sample_states, 
                                       ViewStateMask      view_states, 
                                       InstanceStateMask  instance_states)
{
  return DataReader::take_next_instance( (Sequence*)received_data,
                                         sample_infos,
                                         max_samples,
                                         previous_handle,
                                         sample_states, 
                                         view_states, 
                                         instance_states);
}


/******************************************************************/
    
ReturnCode_t
EssEventZBATDataReader::read_next_instance_w_condition( EssEventZBATPtrSeq     * received_data,
                                                   SampleInfoSeq    * sample_infos,
                                                   int                max_samples,
                                                   InstanceHandle_t   previous_handle,
                                                   ReadCondition *    a_condition)
{
  return DataReader::read_next_instance_w_condition( (Sequence*)received_data,
                                                     sample_infos,
                                                     max_samples,
                                                     previous_handle,
                                                     a_condition);
}


/******************************************************************/
    
ReturnCode_t 
EssEventZBATDataReader::take_next_instance_w_condition( EssEventZBATPtrSeq     * received_data,
                                                   SampleInfoSeq    * sample_infos,
                                                   int                max_samples,
                                                   InstanceHandle_t   previous_handle,
                                                   ReadCondition *    a_condition)
{
  return DataReader::take_next_instance_w_condition( (Sequence*)received_data,
                                                     sample_infos,
                                                     max_samples,
                                                     previous_handle,
                                                     a_condition);
}


/******************************************************************/
    
ReturnCode_t
EssEventZBATDataReader::return_loan( EssEventZBATPtrSeq   * received_data,
                                SampleInfoSeq  * sample_infos)
{
  return DataReader::return_loan( (Sequence*)received_data, sample_infos);
}


/******************************************************************/

ReturnCode_t
EssEventZBATDataReader::get_key_value( EssEventZBAT            * key_holder, 
                                  InstanceHandle_t  handle)
{
  if ( ! key_holder )
      return RETCODE_BAD_PARAMETER;

  /* No keys: no op */
  CDX_UNUSED(handle);
  key_holder->clear();
  return DDS::RETCODE_OK;
}


/******************************************************************/
/* openfmb::essmodule:: */
InstanceHandle_t 
EssEventZBATDataReader::lookup_instance( EssEventZBAT       * instance_data)
{
  if ( ! instance_data )
      return HANDLE_NIL;

  /* No keys */
  return DDS::HANDLE_DEFAULT;
}


/******************************************************************
 * openfmb::essmodule:: DataReader Ops
 *****************************************************************/

/******************************************************************/
EssStatusZBATDataReader::EssStatusZBATDataReader()
{
}

/******************************************************************/
ReturnCode_t 
EssStatusZBATDataReader::read( EssStatusZBATPtrSeq    * received_data,
                         SampleInfoSeq   * sample_infos,
                         int               max_samples,
                         SampleStateMask   sample_states, 
                         ViewStateMask     view_states, 
                         InstanceStateMask instance_states)
{
  return DataReader::read( (Sequence*)received_data, 
			    sample_infos, 
			    max_samples, 
			    sample_states, 
			    view_states, 
			    instance_states );
}
  

/******************************************************************/

ReturnCode_t
EssStatusZBATDataReader::take( EssStatusZBATPtrSeq     * received_data,
                         SampleInfoSeq    * sample_infos,
                         int                max_samples,
                         SampleStateMask    sample_states, 
                         ViewStateMask      view_states, 
                         InstanceStateMask  instance_states)
{
  return DataReader::take( (Sequence*)received_data,
                           sample_infos,
                           max_samples,
                           sample_states, 
                           view_states, 
                           instance_states);
}


/******************************************************************/

ReturnCode_t 
EssStatusZBATDataReader::read_w_condition( EssStatusZBATPtrSeq  * received_data,
                                     SampleInfoSeq * sample_infos,
                                     int             max_samples,
                                     ReadCondition * a_condition)
{
  return DataReader::read_w_condition( (Sequence*)received_data,
                                       sample_infos,
                                       max_samples,
                                       a_condition);
}


/******************************************************************/
    
ReturnCode_t
EssStatusZBATDataReader::take_w_condition( EssStatusZBATPtrSeq   * received_data,
                                     SampleInfoSeq  * sample_infos,
                                     int              max_samples,
                                     ReadCondition *  a_condition)
{
  return DataReader::take_w_condition( (Sequence*)received_data,
                                       sample_infos,
                                       max_samples,
                                       a_condition);
}


/******************************************************************/
    
ReturnCode_t
EssStatusZBATDataReader::read_next_sample( EssStatusZBAT     * received_data,
                                  SampleInfo     * sample_info)
{
  return DataReader::read_next_sample( (void*)received_data,
                                       sample_info);
}


/******************************************************************/
    
ReturnCode_t
EssStatusZBATDataReader::take_next_sample( EssStatusZBAT      * received_data,
                                     SampleInfo      * sample_info)
{
  return DataReader::take_next_sample( (void*) received_data,
                                       sample_info);
}


/******************************************************************/
    
ReturnCode_t
EssStatusZBATDataReader::read_instance( EssStatusZBATPtrSeq       * received_data,
                                  SampleInfoSeq    * sample_infos,
                                  int                max_samples,
                                  InstanceHandle_t   a_handle,
                                  SampleStateMask    sample_states, 
                                  ViewStateMask      view_states, 
                                  InstanceStateMask  instance_states)
{
  return DataReader::read_instance( (Sequence*)received_data, 
                                    sample_infos, 
                                    max_samples, 
                                    a_handle, 
                                    sample_states, 
                                    view_states, 
                                    instance_states );
}


/******************************************************************/
    
ReturnCode_t
EssStatusZBATDataReader::take_instance( EssStatusZBATPtrSeq    * received_data,
                                  SampleInfoSeq   * sample_infos,
                                  int               max_samples,
                                  InstanceHandle_t  a_handle,
                                  SampleStateMask   sample_states, 
                                  ViewStateMask     view_states, 
                                  InstanceStateMask instance_states)
{
  return DataReader::take_instance( (Sequence*)received_data,
                                    sample_infos,
                                    max_samples,
                                    a_handle,
                                    sample_states, 
                                    view_states, 
                                    instance_states);
}


/******************************************************************/
    
ReturnCode_t
EssStatusZBATDataReader::read_next_instance( EssStatusZBATPtrSeq    * received_data,
                                       SampleInfoSeq   * sample_infos,
                                       int               max_samples,
                                       InstanceHandle_t  previous_handle,
                                       SampleStateMask   sample_states, 
                                       ViewStateMask     view_states, 
                                       InstanceStateMask instance_states)
{
  return DataReader::read_next_instance( (Sequence*)received_data,
                                         sample_infos,
                                         max_samples,
                                         previous_handle,
                                         sample_states, 
                                         view_states, 
                                         instance_states);
}


/******************************************************************/

ReturnCode_t
EssStatusZBATDataReader::take_next_instance( EssStatusZBATPtrSeq     * received_data,
                                       SampleInfoSeq    * sample_infos,
                                       int                max_samples,
                                       InstanceHandle_t   previous_handle,
                                       SampleStateMask    sample_states, 
                                       ViewStateMask      view_states, 
                                       InstanceStateMask  instance_states)
{
  return DataReader::take_next_instance( (Sequence*)received_data,
                                         sample_infos,
                                         max_samples,
                                         previous_handle,
                                         sample_states, 
                                         view_states, 
                                         instance_states);
}


/******************************************************************/
    
ReturnCode_t
EssStatusZBATDataReader::read_next_instance_w_condition( EssStatusZBATPtrSeq     * received_data,
                                                   SampleInfoSeq    * sample_infos,
                                                   int                max_samples,
                                                   InstanceHandle_t   previous_handle,
                                                   ReadCondition *    a_condition)
{
  return DataReader::read_next_instance_w_condition( (Sequence*)received_data,
                                                     sample_infos,
                                                     max_samples,
                                                     previous_handle,
                                                     a_condition);
}


/******************************************************************/
    
ReturnCode_t 
EssStatusZBATDataReader::take_next_instance_w_condition( EssStatusZBATPtrSeq     * received_data,
                                                   SampleInfoSeq    * sample_infos,
                                                   int                max_samples,
                                                   InstanceHandle_t   previous_handle,
                                                   ReadCondition *    a_condition)
{
  return DataReader::take_next_instance_w_condition( (Sequence*)received_data,
                                                     sample_infos,
                                                     max_samples,
                                                     previous_handle,
                                                     a_condition);
}


/******************************************************************/
    
ReturnCode_t
EssStatusZBATDataReader::return_loan( EssStatusZBATPtrSeq   * received_data,
                                SampleInfoSeq  * sample_infos)
{
  return DataReader::return_loan( (Sequence*)received_data, sample_infos);
}


/******************************************************************/

ReturnCode_t
EssStatusZBATDataReader::get_key_value( EssStatusZBAT            * key_holder, 
                                  InstanceHandle_t  handle)
{
  if ( ! key_holder )
      return RETCODE_BAD_PARAMETER;

  /* No keys: no op */
  CDX_UNUSED(handle);
  key_holder->clear();
  return DDS::RETCODE_OK;
}


/******************************************************************/
/* openfmb::essmodule:: */
InstanceHandle_t 
EssStatusZBATDataReader::lookup_instance( EssStatusZBAT       * instance_data)
{
  if ( ! instance_data )
      return HANDLE_NIL;

  /* No keys */
  return DDS::HANDLE_DEFAULT;
}


}  /* namespace essmodule */
/* END SCOPE: essmodule */
/* START SCOPE: generationmodule */

namespace generationmodule {


/******************************************************************
 * openfmb::generationmodule:: DataReader Ops
 *****************************************************************/

/******************************************************************/
GenerationStatusProfileDataReader::GenerationStatusProfileDataReader()
{
}

/******************************************************************/
ReturnCode_t 
GenerationStatusProfileDataReader::read( GenerationStatusProfilePtrSeq    * received_data,
                         SampleInfoSeq   * sample_infos,
                         int               max_samples,
                         SampleStateMask   sample_states, 
                         ViewStateMask     view_states, 
                         InstanceStateMask instance_states)
{
  return DataReader::read( (Sequence*)received_data, 
			    sample_infos, 
			    max_samples, 
			    sample_states, 
			    view_states, 
			    instance_states );
}
  

/******************************************************************/

ReturnCode_t
GenerationStatusProfileDataReader::take( GenerationStatusProfilePtrSeq     * received_data,
                         SampleInfoSeq    * sample_infos,
                         int                max_samples,
                         SampleStateMask    sample_states, 
                         ViewStateMask      view_states, 
                         InstanceStateMask  instance_states)
{
  return DataReader::take( (Sequence*)received_data,
                           sample_infos,
                           max_samples,
                           sample_states, 
                           view_states, 
                           instance_states);
}


/******************************************************************/

ReturnCode_t 
GenerationStatusProfileDataReader::read_w_condition( GenerationStatusProfilePtrSeq  * received_data,
                                     SampleInfoSeq * sample_infos,
                                     int             max_samples,
                                     ReadCondition * a_condition)
{
  return DataReader::read_w_condition( (Sequence*)received_data,
                                       sample_infos,
                                       max_samples,
                                       a_condition);
}


/******************************************************************/
    
ReturnCode_t
GenerationStatusProfileDataReader::take_w_condition( GenerationStatusProfilePtrSeq   * received_data,
                                     SampleInfoSeq  * sample_infos,
                                     int              max_samples,
                                     ReadCondition *  a_condition)
{
  return DataReader::take_w_condition( (Sequence*)received_data,
                                       sample_infos,
                                       max_samples,
                                       a_condition);
}


/******************************************************************/
    
ReturnCode_t
GenerationStatusProfileDataReader::read_next_sample( GenerationStatusProfile     * received_data,
                                  SampleInfo     * sample_info)
{
  return DataReader::read_next_sample( (void*)received_data,
                                       sample_info);
}


/******************************************************************/
    
ReturnCode_t
GenerationStatusProfileDataReader::take_next_sample( GenerationStatusProfile      * received_data,
                                     SampleInfo      * sample_info)
{
  return DataReader::take_next_sample( (void*) received_data,
                                       sample_info);
}


/******************************************************************/
    
ReturnCode_t
GenerationStatusProfileDataReader::read_instance( GenerationStatusProfilePtrSeq       * received_data,
                                  SampleInfoSeq    * sample_infos,
                                  int                max_samples,
                                  InstanceHandle_t   a_handle,
                                  SampleStateMask    sample_states, 
                                  ViewStateMask      view_states, 
                                  InstanceStateMask  instance_states)
{
  return DataReader::read_instance( (Sequence*)received_data, 
                                    sample_infos, 
                                    max_samples, 
                                    a_handle, 
                                    sample_states, 
                                    view_states, 
                                    instance_states );
}


/******************************************************************/
    
ReturnCode_t
GenerationStatusProfileDataReader::take_instance( GenerationStatusProfilePtrSeq    * received_data,
                                  SampleInfoSeq   * sample_infos,
                                  int               max_samples,
                                  InstanceHandle_t  a_handle,
                                  SampleStateMask   sample_states, 
                                  ViewStateMask     view_states, 
                                  InstanceStateMask instance_states)
{
  return DataReader::take_instance( (Sequence*)received_data,
                                    sample_infos,
                                    max_samples,
                                    a_handle,
                                    sample_states, 
                                    view_states, 
                                    instance_states);
}


/******************************************************************/
    
ReturnCode_t
GenerationStatusProfileDataReader::read_next_instance( GenerationStatusProfilePtrSeq    * received_data,
                                       SampleInfoSeq   * sample_infos,
                                       int               max_samples,
                                       InstanceHandle_t  previous_handle,
                                       SampleStateMask   sample_states, 
                                       ViewStateMask     view_states, 
                                       InstanceStateMask instance_states)
{
  return DataReader::read_next_instance( (Sequence*)received_data,
                                         sample_infos,
                                         max_samples,
                                         previous_handle,
                                         sample_states, 
                                         view_states, 
                                         instance_states);
}


/******************************************************************/

ReturnCode_t
GenerationStatusProfileDataReader::take_next_instance( GenerationStatusProfilePtrSeq     * received_data,
                                       SampleInfoSeq    * sample_infos,
                                       int                max_samples,
                                       InstanceHandle_t   previous_handle,
                                       SampleStateMask    sample_states, 
                                       ViewStateMask      view_states, 
                                       InstanceStateMask  instance_states)
{
  return DataReader::take_next_instance( (Sequence*)received_data,
                                         sample_infos,
                                         max_samples,
                                         previous_handle,
                                         sample_states, 
                                         view_states, 
                                         instance_states);
}


/******************************************************************/
    
ReturnCode_t
GenerationStatusProfileDataReader::read_next_instance_w_condition( GenerationStatusProfilePtrSeq     * received_data,
                                                   SampleInfoSeq    * sample_infos,
                                                   int                max_samples,
                                                   InstanceHandle_t   previous_handle,
                                                   ReadCondition *    a_condition)
{
  return DataReader::read_next_instance_w_condition( (Sequence*)received_data,
                                                     sample_infos,
                                                     max_samples,
                                                     previous_handle,
                                                     a_condition);
}


/******************************************************************/
    
ReturnCode_t 
GenerationStatusProfileDataReader::take_next_instance_w_condition( GenerationStatusProfilePtrSeq     * received_data,
                                                   SampleInfoSeq    * sample_infos,
                                                   int                max_samples,
                                                   InstanceHandle_t   previous_handle,
                                                   ReadCondition *    a_condition)
{
  return DataReader::take_next_instance_w_condition( (Sequence*)received_data,
                                                     sample_infos,
                                                     max_samples,
                                                     previous_handle,
                                                     a_condition);
}


/******************************************************************/
    
ReturnCode_t
GenerationStatusProfileDataReader::return_loan( GenerationStatusProfilePtrSeq   * received_data,
                                SampleInfoSeq  * sample_infos)
{
  return DataReader::return_loan( (Sequence*)received_data, sample_infos);
}


/******************************************************************/

ReturnCode_t
GenerationStatusProfileDataReader::get_key_value( GenerationStatusProfile            * key_holder, 
                                  InstanceHandle_t  handle)
{
  if ( ! key_holder )
      return RETCODE_BAD_PARAMETER;

  /* key: use DR to get it */
  return DataReader::get_key_value(  key_holder, handle );
}


/******************************************************************/
/* openfmb::generationmodule:: */
InstanceHandle_t 
GenerationStatusProfileDataReader::lookup_instance( GenerationStatusProfile       * instance_data)
{
  if ( ! instance_data )
      return HANDLE_NIL;

  /* Complex key: use DR to find it */
  return DataReader::lookup_instance(  instance_data );
}


}  /* namespace generationmodule */
/* END SCOPE: generationmodule */
/* START SCOPE: loadmodule */

namespace loadmodule {


/******************************************************************
 * openfmb::loadmodule:: DataReader Ops
 *****************************************************************/

/******************************************************************/
LoadStatusProfileDataReader::LoadStatusProfileDataReader()
{
}

/******************************************************************/
ReturnCode_t 
LoadStatusProfileDataReader::read( LoadStatusProfilePtrSeq    * received_data,
                         SampleInfoSeq   * sample_infos,
                         int               max_samples,
                         SampleStateMask   sample_states, 
                         ViewStateMask     view_states, 
                         InstanceStateMask instance_states)
{
  return DataReader::read( (Sequence*)received_data, 
			    sample_infos, 
			    max_samples, 
			    sample_states, 
			    view_states, 
			    instance_states );
}
  

/******************************************************************/

ReturnCode_t
LoadStatusProfileDataReader::take( LoadStatusProfilePtrSeq     * received_data,
                         SampleInfoSeq    * sample_infos,
                         int                max_samples,
                         SampleStateMask    sample_states, 
                         ViewStateMask      view_states, 
                         InstanceStateMask  instance_states)
{
  return DataReader::take( (Sequence*)received_data,
                           sample_infos,
                           max_samples,
                           sample_states, 
                           view_states, 
                           instance_states);
}


/******************************************************************/

ReturnCode_t 
LoadStatusProfileDataReader::read_w_condition( LoadStatusProfilePtrSeq  * received_data,
                                     SampleInfoSeq * sample_infos,
                                     int             max_samples,
                                     ReadCondition * a_condition)
{
  return DataReader::read_w_condition( (Sequence*)received_data,
                                       sample_infos,
                                       max_samples,
                                       a_condition);
}


/******************************************************************/
    
ReturnCode_t
LoadStatusProfileDataReader::take_w_condition( LoadStatusProfilePtrSeq   * received_data,
                                     SampleInfoSeq  * sample_infos,
                                     int              max_samples,
                                     ReadCondition *  a_condition)
{
  return DataReader::take_w_condition( (Sequence*)received_data,
                                       sample_infos,
                                       max_samples,
                                       a_condition);
}


/******************************************************************/
    
ReturnCode_t
LoadStatusProfileDataReader::read_next_sample( LoadStatusProfile     * received_data,
                                  SampleInfo     * sample_info)
{
  return DataReader::read_next_sample( (void*)received_data,
                                       sample_info);
}


/******************************************************************/
    
ReturnCode_t
LoadStatusProfileDataReader::take_next_sample( LoadStatusProfile      * received_data,
                                     SampleInfo      * sample_info)
{
  return DataReader::take_next_sample( (void*) received_data,
                                       sample_info);
}


/******************************************************************/
    
ReturnCode_t
LoadStatusProfileDataReader::read_instance( LoadStatusProfilePtrSeq       * received_data,
                                  SampleInfoSeq    * sample_infos,
                                  int                max_samples,
                                  InstanceHandle_t   a_handle,
                                  SampleStateMask    sample_states, 
                                  ViewStateMask      view_states, 
                                  InstanceStateMask  instance_states)
{
  return DataReader::read_instance( (Sequence*)received_data, 
                                    sample_infos, 
                                    max_samples, 
                                    a_handle, 
                                    sample_states, 
                                    view_states, 
                                    instance_states );
}


/******************************************************************/
    
ReturnCode_t
LoadStatusProfileDataReader::take_instance( LoadStatusProfilePtrSeq    * received_data,
                                  SampleInfoSeq   * sample_infos,
                                  int               max_samples,
                                  InstanceHandle_t  a_handle,
                                  SampleStateMask   sample_states, 
                                  ViewStateMask     view_states, 
                                  InstanceStateMask instance_states)
{
  return DataReader::take_instance( (Sequence*)received_data,
                                    sample_infos,
                                    max_samples,
                                    a_handle,
                                    sample_states, 
                                    view_states, 
                                    instance_states);
}


/******************************************************************/
    
ReturnCode_t
LoadStatusProfileDataReader::read_next_instance( LoadStatusProfilePtrSeq    * received_data,
                                       SampleInfoSeq   * sample_infos,
                                       int               max_samples,
                                       InstanceHandle_t  previous_handle,
                                       SampleStateMask   sample_states, 
                                       ViewStateMask     view_states, 
                                       InstanceStateMask instance_states)
{
  return DataReader::read_next_instance( (Sequence*)received_data,
                                         sample_infos,
                                         max_samples,
                                         previous_handle,
                                         sample_states, 
                                         view_states, 
                                         instance_states);
}


/******************************************************************/

ReturnCode_t
LoadStatusProfileDataReader::take_next_instance( LoadStatusProfilePtrSeq     * received_data,
                                       SampleInfoSeq    * sample_infos,
                                       int                max_samples,
                                       InstanceHandle_t   previous_handle,
                                       SampleStateMask    sample_states, 
                                       ViewStateMask      view_states, 
                                       InstanceStateMask  instance_states)
{
  return DataReader::take_next_instance( (Sequence*)received_data,
                                         sample_infos,
                                         max_samples,
                                         previous_handle,
                                         sample_states, 
                                         view_states, 
                                         instance_states);
}


/******************************************************************/
    
ReturnCode_t
LoadStatusProfileDataReader::read_next_instance_w_condition( LoadStatusProfilePtrSeq     * received_data,
                                                   SampleInfoSeq    * sample_infos,
                                                   int                max_samples,
                                                   InstanceHandle_t   previous_handle,
                                                   ReadCondition *    a_condition)
{
  return DataReader::read_next_instance_w_condition( (Sequence*)received_data,
                                                     sample_infos,
                                                     max_samples,
                                                     previous_handle,
                                                     a_condition);
}


/******************************************************************/
    
ReturnCode_t 
LoadStatusProfileDataReader::take_next_instance_w_condition( LoadStatusProfilePtrSeq     * received_data,
                                                   SampleInfoSeq    * sample_infos,
                                                   int                max_samples,
                                                   InstanceHandle_t   previous_handle,
                                                   ReadCondition *    a_condition)
{
  return DataReader::take_next_instance_w_condition( (Sequence*)received_data,
                                                     sample_infos,
                                                     max_samples,
                                                     previous_handle,
                                                     a_condition);
}


/******************************************************************/
    
ReturnCode_t
LoadStatusProfileDataReader::return_loan( LoadStatusProfilePtrSeq   * received_data,
                                SampleInfoSeq  * sample_infos)
{
  return DataReader::return_loan( (Sequence*)received_data, sample_infos);
}


/******************************************************************/

ReturnCode_t
LoadStatusProfileDataReader::get_key_value( LoadStatusProfile            * key_holder, 
                                  InstanceHandle_t  handle)
{
  if ( ! key_holder )
      return RETCODE_BAD_PARAMETER;

  /* key: use DR to get it */
  return DataReader::get_key_value(  key_holder, handle );
}


/******************************************************************/
/* openfmb::loadmodule:: */
InstanceHandle_t 
LoadStatusProfileDataReader::lookup_instance( LoadStatusProfile       * instance_data)
{
  if ( ! instance_data )
      return HANDLE_NIL;

  /* Complex key: use DR to find it */
  return DataReader::lookup_instance(  instance_data );
}


}  /* namespace loadmodule */
/* END SCOPE: loadmodule */
/* START SCOPE: optimizermodule */

namespace optimizermodule {


/******************************************************************
 * openfmb::optimizermodule:: DataReader Ops
 *****************************************************************/

/******************************************************************/
PlannedOptimizerScheduleProfileDataReader::PlannedOptimizerScheduleProfileDataReader()
{
}

/******************************************************************/
ReturnCode_t 
PlannedOptimizerScheduleProfileDataReader::read( PlannedOptimizerScheduleProfilePtrSeq    * received_data,
                         SampleInfoSeq   * sample_infos,
                         int               max_samples,
                         SampleStateMask   sample_states, 
                         ViewStateMask     view_states, 
                         InstanceStateMask instance_states)
{
  return DataReader::read( (Sequence*)received_data, 
			    sample_infos, 
			    max_samples, 
			    sample_states, 
			    view_states, 
			    instance_states );
}
  

/******************************************************************/

ReturnCode_t
PlannedOptimizerScheduleProfileDataReader::take( PlannedOptimizerScheduleProfilePtrSeq     * received_data,
                         SampleInfoSeq    * sample_infos,
                         int                max_samples,
                         SampleStateMask    sample_states, 
                         ViewStateMask      view_states, 
                         InstanceStateMask  instance_states)
{
  return DataReader::take( (Sequence*)received_data,
                           sample_infos,
                           max_samples,
                           sample_states, 
                           view_states, 
                           instance_states);
}


/******************************************************************/

ReturnCode_t 
PlannedOptimizerScheduleProfileDataReader::read_w_condition( PlannedOptimizerScheduleProfilePtrSeq  * received_data,
                                     SampleInfoSeq * sample_infos,
                                     int             max_samples,
                                     ReadCondition * a_condition)
{
  return DataReader::read_w_condition( (Sequence*)received_data,
                                       sample_infos,
                                       max_samples,
                                       a_condition);
}


/******************************************************************/
    
ReturnCode_t
PlannedOptimizerScheduleProfileDataReader::take_w_condition( PlannedOptimizerScheduleProfilePtrSeq   * received_data,
                                     SampleInfoSeq  * sample_infos,
                                     int              max_samples,
                                     ReadCondition *  a_condition)
{
  return DataReader::take_w_condition( (Sequence*)received_data,
                                       sample_infos,
                                       max_samples,
                                       a_condition);
}


/******************************************************************/
    
ReturnCode_t
PlannedOptimizerScheduleProfileDataReader::read_next_sample( PlannedOptimizerScheduleProfile     * received_data,
                                  SampleInfo     * sample_info)
{
  return DataReader::read_next_sample( (void*)received_data,
                                       sample_info);
}


/******************************************************************/
    
ReturnCode_t
PlannedOptimizerScheduleProfileDataReader::take_next_sample( PlannedOptimizerScheduleProfile      * received_data,
                                     SampleInfo      * sample_info)
{
  return DataReader::take_next_sample( (void*) received_data,
                                       sample_info);
}


/******************************************************************/
    
ReturnCode_t
PlannedOptimizerScheduleProfileDataReader::read_instance( PlannedOptimizerScheduleProfilePtrSeq       * received_data,
                                  SampleInfoSeq    * sample_infos,
                                  int                max_samples,
                                  InstanceHandle_t   a_handle,
                                  SampleStateMask    sample_states, 
                                  ViewStateMask      view_states, 
                                  InstanceStateMask  instance_states)
{
  return DataReader::read_instance( (Sequence*)received_data, 
                                    sample_infos, 
                                    max_samples, 
                                    a_handle, 
                                    sample_states, 
                                    view_states, 
                                    instance_states );
}


/******************************************************************/
    
ReturnCode_t
PlannedOptimizerScheduleProfileDataReader::take_instance( PlannedOptimizerScheduleProfilePtrSeq    * received_data,
                                  SampleInfoSeq   * sample_infos,
                                  int               max_samples,
                                  InstanceHandle_t  a_handle,
                                  SampleStateMask   sample_states, 
                                  ViewStateMask     view_states, 
                                  InstanceStateMask instance_states)
{
  return DataReader::take_instance( (Sequence*)received_data,
                                    sample_infos,
                                    max_samples,
                                    a_handle,
                                    sample_states, 
                                    view_states, 
                                    instance_states);
}


/******************************************************************/
    
ReturnCode_t
PlannedOptimizerScheduleProfileDataReader::read_next_instance( PlannedOptimizerScheduleProfilePtrSeq    * received_data,
                                       SampleInfoSeq   * sample_infos,
                                       int               max_samples,
                                       InstanceHandle_t  previous_handle,
                                       SampleStateMask   sample_states, 
                                       ViewStateMask     view_states, 
                                       InstanceStateMask instance_states)
{
  return DataReader::read_next_instance( (Sequence*)received_data,
                                         sample_infos,
                                         max_samples,
                                         previous_handle,
                                         sample_states, 
                                         view_states, 
                                         instance_states);
}


/******************************************************************/

ReturnCode_t
PlannedOptimizerScheduleProfileDataReader::take_next_instance( PlannedOptimizerScheduleProfilePtrSeq     * received_data,
                                       SampleInfoSeq    * sample_infos,
                                       int                max_samples,
                                       InstanceHandle_t   previous_handle,
                                       SampleStateMask    sample_states, 
                                       ViewStateMask      view_states, 
                                       InstanceStateMask  instance_states)
{
  return DataReader::take_next_instance( (Sequence*)received_data,
                                         sample_infos,
                                         max_samples,
                                         previous_handle,
                                         sample_states, 
                                         view_states, 
                                         instance_states);
}


/******************************************************************/
    
ReturnCode_t
PlannedOptimizerScheduleProfileDataReader::read_next_instance_w_condition( PlannedOptimizerScheduleProfilePtrSeq     * received_data,
                                                   SampleInfoSeq    * sample_infos,
                                                   int                max_samples,
                                                   InstanceHandle_t   previous_handle,
                                                   ReadCondition *    a_condition)
{
  return DataReader::read_next_instance_w_condition( (Sequence*)received_data,
                                                     sample_infos,
                                                     max_samples,
                                                     previous_handle,
                                                     a_condition);
}


/******************************************************************/
    
ReturnCode_t 
PlannedOptimizerScheduleProfileDataReader::take_next_instance_w_condition( PlannedOptimizerScheduleProfilePtrSeq     * received_data,
                                                   SampleInfoSeq    * sample_infos,
                                                   int                max_samples,
                                                   InstanceHandle_t   previous_handle,
                                                   ReadCondition *    a_condition)
{
  return DataReader::take_next_instance_w_condition( (Sequence*)received_data,
                                                     sample_infos,
                                                     max_samples,
                                                     previous_handle,
                                                     a_condition);
}


/******************************************************************/
    
ReturnCode_t
PlannedOptimizerScheduleProfileDataReader::return_loan( PlannedOptimizerScheduleProfilePtrSeq   * received_data,
                                SampleInfoSeq  * sample_infos)
{
  return DataReader::return_loan( (Sequence*)received_data, sample_infos);
}


/******************************************************************/

ReturnCode_t
PlannedOptimizerScheduleProfileDataReader::get_key_value( PlannedOptimizerScheduleProfile            * key_holder, 
                                  InstanceHandle_t  handle)
{
  if ( ! key_holder )
      return RETCODE_BAD_PARAMETER;

  /* No keys: no op */
  CDX_UNUSED(handle);
  key_holder->clear();
  return DDS::RETCODE_OK;
}


/******************************************************************/
/* openfmb::optimizermodule:: */
InstanceHandle_t 
PlannedOptimizerScheduleProfileDataReader::lookup_instance( PlannedOptimizerScheduleProfile       * instance_data)
{
  if ( ! instance_data )
      return HANDLE_NIL;

  /* No keys */
  return DDS::HANDLE_DEFAULT;
}


}  /* namespace optimizermodule */
/* END SCOPE: optimizermodule */
/* START SCOPE: reclosermodule */

namespace reclosermodule {


}  /* namespace reclosermodule */
/* END SCOPE: reclosermodule */
/* START SCOPE: solarmodule */

namespace solarmodule {


/******************************************************************
 * openfmb::solarmodule:: DataReader Ops
 *****************************************************************/

/******************************************************************/
SolarEventZGENDataReader::SolarEventZGENDataReader()
{
}

/******************************************************************/
ReturnCode_t 
SolarEventZGENDataReader::read( SolarEventZGENPtrSeq    * received_data,
                         SampleInfoSeq   * sample_infos,
                         int               max_samples,
                         SampleStateMask   sample_states, 
                         ViewStateMask     view_states, 
                         InstanceStateMask instance_states)
{
  return DataReader::read( (Sequence*)received_data, 
			    sample_infos, 
			    max_samples, 
			    sample_states, 
			    view_states, 
			    instance_states );
}
  

/******************************************************************/

ReturnCode_t
SolarEventZGENDataReader::take( SolarEventZGENPtrSeq     * received_data,
                         SampleInfoSeq    * sample_infos,
                         int                max_samples,
                         SampleStateMask    sample_states, 
                         ViewStateMask      view_states, 
                         InstanceStateMask  instance_states)
{
  return DataReader::take( (Sequence*)received_data,
                           sample_infos,
                           max_samples,
                           sample_states, 
                           view_states, 
                           instance_states);
}


/******************************************************************/

ReturnCode_t 
SolarEventZGENDataReader::read_w_condition( SolarEventZGENPtrSeq  * received_data,
                                     SampleInfoSeq * sample_infos,
                                     int             max_samples,
                                     ReadCondition * a_condition)
{
  return DataReader::read_w_condition( (Sequence*)received_data,
                                       sample_infos,
                                       max_samples,
                                       a_condition);
}


/******************************************************************/
    
ReturnCode_t
SolarEventZGENDataReader::take_w_condition( SolarEventZGENPtrSeq   * received_data,
                                     SampleInfoSeq  * sample_infos,
                                     int              max_samples,
                                     ReadCondition *  a_condition)
{
  return DataReader::take_w_condition( (Sequence*)received_data,
                                       sample_infos,
                                       max_samples,
                                       a_condition);
}


/******************************************************************/
    
ReturnCode_t
SolarEventZGENDataReader::read_next_sample( SolarEventZGEN     * received_data,
                                  SampleInfo     * sample_info)
{
  return DataReader::read_next_sample( (void*)received_data,
                                       sample_info);
}


/******************************************************************/
    
ReturnCode_t
SolarEventZGENDataReader::take_next_sample( SolarEventZGEN      * received_data,
                                     SampleInfo      * sample_info)
{
  return DataReader::take_next_sample( (void*) received_data,
                                       sample_info);
}


/******************************************************************/
    
ReturnCode_t
SolarEventZGENDataReader::read_instance( SolarEventZGENPtrSeq       * received_data,
                                  SampleInfoSeq    * sample_infos,
                                  int                max_samples,
                                  InstanceHandle_t   a_handle,
                                  SampleStateMask    sample_states, 
                                  ViewStateMask      view_states, 
                                  InstanceStateMask  instance_states)
{
  return DataReader::read_instance( (Sequence*)received_data, 
                                    sample_infos, 
                                    max_samples, 
                                    a_handle, 
                                    sample_states, 
                                    view_states, 
                                    instance_states );
}


/******************************************************************/
    
ReturnCode_t
SolarEventZGENDataReader::take_instance( SolarEventZGENPtrSeq    * received_data,
                                  SampleInfoSeq   * sample_infos,
                                  int               max_samples,
                                  InstanceHandle_t  a_handle,
                                  SampleStateMask   sample_states, 
                                  ViewStateMask     view_states, 
                                  InstanceStateMask instance_states)
{
  return DataReader::take_instance( (Sequence*)received_data,
                                    sample_infos,
                                    max_samples,
                                    a_handle,
                                    sample_states, 
                                    view_states, 
                                    instance_states);
}


/******************************************************************/
    
ReturnCode_t
SolarEventZGENDataReader::read_next_instance( SolarEventZGENPtrSeq    * received_data,
                                       SampleInfoSeq   * sample_infos,
                                       int               max_samples,
                                       InstanceHandle_t  previous_handle,
                                       SampleStateMask   sample_states, 
                                       ViewStateMask     view_states, 
                                       InstanceStateMask instance_states)
{
  return DataReader::read_next_instance( (Sequence*)received_data,
                                         sample_infos,
                                         max_samples,
                                         previous_handle,
                                         sample_states, 
                                         view_states, 
                                         instance_states);
}


/******************************************************************/

ReturnCode_t
SolarEventZGENDataReader::take_next_instance( SolarEventZGENPtrSeq     * received_data,
                                       SampleInfoSeq    * sample_infos,
                                       int                max_samples,
                                       InstanceHandle_t   previous_handle,
                                       SampleStateMask    sample_states, 
                                       ViewStateMask      view_states, 
                                       InstanceStateMask  instance_states)
{
  return DataReader::take_next_instance( (Sequence*)received_data,
                                         sample_infos,
                                         max_samples,
                                         previous_handle,
                                         sample_states, 
                                         view_states, 
                                         instance_states);
}


/******************************************************************/
    
ReturnCode_t
SolarEventZGENDataReader::read_next_instance_w_condition( SolarEventZGENPtrSeq     * received_data,
                                                   SampleInfoSeq    * sample_infos,
                                                   int                max_samples,
                                                   InstanceHandle_t   previous_handle,
                                                   ReadCondition *    a_condition)
{
  return DataReader::read_next_instance_w_condition( (Sequence*)received_data,
                                                     sample_infos,
                                                     max_samples,
                                                     previous_handle,
                                                     a_condition);
}


/******************************************************************/
    
ReturnCode_t 
SolarEventZGENDataReader::take_next_instance_w_condition( SolarEventZGENPtrSeq     * received_data,
                                                   SampleInfoSeq    * sample_infos,
                                                   int                max_samples,
                                                   InstanceHandle_t   previous_handle,
                                                   ReadCondition *    a_condition)
{
  return DataReader::take_next_instance_w_condition( (Sequence*)received_data,
                                                     sample_infos,
                                                     max_samples,
                                                     previous_handle,
                                                     a_condition);
}


/******************************************************************/
    
ReturnCode_t
SolarEventZGENDataReader::return_loan( SolarEventZGENPtrSeq   * received_data,
                                SampleInfoSeq  * sample_infos)
{
  return DataReader::return_loan( (Sequence*)received_data, sample_infos);
}


/******************************************************************/

ReturnCode_t
SolarEventZGENDataReader::get_key_value( SolarEventZGEN            * key_holder, 
                                  InstanceHandle_t  handle)
{
  if ( ! key_holder )
      return RETCODE_BAD_PARAMETER;

  /* No keys: no op */
  CDX_UNUSED(handle);
  key_holder->clear();
  return DDS::RETCODE_OK;
}


/******************************************************************/
/* openfmb::solarmodule:: */
InstanceHandle_t 
SolarEventZGENDataReader::lookup_instance( SolarEventZGEN       * instance_data)
{
  if ( ! instance_data )
      return HANDLE_NIL;

  /* No keys */
  return DDS::HANDLE_DEFAULT;
}


/******************************************************************
 * openfmb::solarmodule:: DataReader Ops
 *****************************************************************/

/******************************************************************/
SolarStatusZGENDataReader::SolarStatusZGENDataReader()
{
}

/******************************************************************/
ReturnCode_t 
SolarStatusZGENDataReader::read( SolarStatusZGENPtrSeq    * received_data,
                         SampleInfoSeq   * sample_infos,
                         int               max_samples,
                         SampleStateMask   sample_states, 
                         ViewStateMask     view_states, 
                         InstanceStateMask instance_states)
{
  return DataReader::read( (Sequence*)received_data, 
			    sample_infos, 
			    max_samples, 
			    sample_states, 
			    view_states, 
			    instance_states );
}
  

/******************************************************************/

ReturnCode_t
SolarStatusZGENDataReader::take( SolarStatusZGENPtrSeq     * received_data,
                         SampleInfoSeq    * sample_infos,
                         int                max_samples,
                         SampleStateMask    sample_states, 
                         ViewStateMask      view_states, 
                         InstanceStateMask  instance_states)
{
  return DataReader::take( (Sequence*)received_data,
                           sample_infos,
                           max_samples,
                           sample_states, 
                           view_states, 
                           instance_states);
}


/******************************************************************/

ReturnCode_t 
SolarStatusZGENDataReader::read_w_condition( SolarStatusZGENPtrSeq  * received_data,
                                     SampleInfoSeq * sample_infos,
                                     int             max_samples,
                                     ReadCondition * a_condition)
{
  return DataReader::read_w_condition( (Sequence*)received_data,
                                       sample_infos,
                                       max_samples,
                                       a_condition);
}


/******************************************************************/
    
ReturnCode_t
SolarStatusZGENDataReader::take_w_condition( SolarStatusZGENPtrSeq   * received_data,
                                     SampleInfoSeq  * sample_infos,
                                     int              max_samples,
                                     ReadCondition *  a_condition)
{
  return DataReader::take_w_condition( (Sequence*)received_data,
                                       sample_infos,
                                       max_samples,
                                       a_condition);
}


/******************************************************************/
    
ReturnCode_t
SolarStatusZGENDataReader::read_next_sample( SolarStatusZGEN     * received_data,
                                  SampleInfo     * sample_info)
{
  return DataReader::read_next_sample( (void*)received_data,
                                       sample_info);
}


/******************************************************************/
    
ReturnCode_t
SolarStatusZGENDataReader::take_next_sample( SolarStatusZGEN      * received_data,
                                     SampleInfo      * sample_info)
{
  return DataReader::take_next_sample( (void*) received_data,
                                       sample_info);
}


/******************************************************************/
    
ReturnCode_t
SolarStatusZGENDataReader::read_instance( SolarStatusZGENPtrSeq       * received_data,
                                  SampleInfoSeq    * sample_infos,
                                  int                max_samples,
                                  InstanceHandle_t   a_handle,
                                  SampleStateMask    sample_states, 
                                  ViewStateMask      view_states, 
                                  InstanceStateMask  instance_states)
{
  return DataReader::read_instance( (Sequence*)received_data, 
                                    sample_infos, 
                                    max_samples, 
                                    a_handle, 
                                    sample_states, 
                                    view_states, 
                                    instance_states );
}


/******************************************************************/
    
ReturnCode_t
SolarStatusZGENDataReader::take_instance( SolarStatusZGENPtrSeq    * received_data,
                                  SampleInfoSeq   * sample_infos,
                                  int               max_samples,
                                  InstanceHandle_t  a_handle,
                                  SampleStateMask   sample_states, 
                                  ViewStateMask     view_states, 
                                  InstanceStateMask instance_states)
{
  return DataReader::take_instance( (Sequence*)received_data,
                                    sample_infos,
                                    max_samples,
                                    a_handle,
                                    sample_states, 
                                    view_states, 
                                    instance_states);
}


/******************************************************************/
    
ReturnCode_t
SolarStatusZGENDataReader::read_next_instance( SolarStatusZGENPtrSeq    * received_data,
                                       SampleInfoSeq   * sample_infos,
                                       int               max_samples,
                                       InstanceHandle_t  previous_handle,
                                       SampleStateMask   sample_states, 
                                       ViewStateMask     view_states, 
                                       InstanceStateMask instance_states)
{
  return DataReader::read_next_instance( (Sequence*)received_data,
                                         sample_infos,
                                         max_samples,
                                         previous_handle,
                                         sample_states, 
                                         view_states, 
                                         instance_states);
}


/******************************************************************/

ReturnCode_t
SolarStatusZGENDataReader::take_next_instance( SolarStatusZGENPtrSeq     * received_data,
                                       SampleInfoSeq    * sample_infos,
                                       int                max_samples,
                                       InstanceHandle_t   previous_handle,
                                       SampleStateMask    sample_states, 
                                       ViewStateMask      view_states, 
                                       InstanceStateMask  instance_states)
{
  return DataReader::take_next_instance( (Sequence*)received_data,
                                         sample_infos,
                                         max_samples,
                                         previous_handle,
                                         sample_states, 
                                         view_states, 
                                         instance_states);
}


/******************************************************************/
    
ReturnCode_t
SolarStatusZGENDataReader::read_next_instance_w_condition( SolarStatusZGENPtrSeq     * received_data,
                                                   SampleInfoSeq    * sample_infos,
                                                   int                max_samples,
                                                   InstanceHandle_t   previous_handle,
                                                   ReadCondition *    a_condition)
{
  return DataReader::read_next_instance_w_condition( (Sequence*)received_data,
                                                     sample_infos,
                                                     max_samples,
                                                     previous_handle,
                                                     a_condition);
}


/******************************************************************/
    
ReturnCode_t 
SolarStatusZGENDataReader::take_next_instance_w_condition( SolarStatusZGENPtrSeq     * received_data,
                                                   SampleInfoSeq    * sample_infos,
                                                   int                max_samples,
                                                   InstanceHandle_t   previous_handle,
                                                   ReadCondition *    a_condition)
{
  return DataReader::take_next_instance_w_condition( (Sequence*)received_data,
                                                     sample_infos,
                                                     max_samples,
                                                     previous_handle,
                                                     a_condition);
}


/******************************************************************/
    
ReturnCode_t
SolarStatusZGENDataReader::return_loan( SolarStatusZGENPtrSeq   * received_data,
                                SampleInfoSeq  * sample_infos)
{
  return DataReader::return_loan( (Sequence*)received_data, sample_infos);
}


/******************************************************************/

ReturnCode_t
SolarStatusZGENDataReader::get_key_value( SolarStatusZGEN            * key_holder, 
                                  InstanceHandle_t  handle)
{
  if ( ! key_holder )
      return RETCODE_BAD_PARAMETER;

  /* No keys: no op */
  CDX_UNUSED(handle);
  key_holder->clear();
  return DDS::RETCODE_OK;
}


/******************************************************************/
/* openfmb::solarmodule:: */
InstanceHandle_t 
SolarStatusZGENDataReader::lookup_instance( SolarStatusZGEN       * instance_data)
{
  if ( ! instance_data )
      return HANDLE_NIL;

  /* No keys */
  return DDS::HANDLE_DEFAULT;
}


}  /* namespace solarmodule */
/* END SCOPE: solarmodule */
/* START SCOPE: switchmodule */

namespace switchmodule {


}  /* namespace switchmodule */
/* END SCOPE: switchmodule */

}  /* namespace openfmb */
/* END SCOPE: openfmb */
/* START SCOPE: openfmb */

namespace openfmb {

/* START SCOPE: breakermodule */

namespace breakermodule {


}  /* namespace breakermodule */
/* END SCOPE: breakermodule */
/* START SCOPE: commonmodule */

namespace commonmodule {


}  /* namespace commonmodule */
/* END SCOPE: commonmodule */
/* START SCOPE: essmodule */

namespace essmodule {


/******************************************************************
 * openfmb::essmodule:: DataReader Ops
 *****************************************************************/

/******************************************************************/
ESSEventProfileDataReader::ESSEventProfileDataReader()
{
}

/******************************************************************/
ReturnCode_t 
ESSEventProfileDataReader::read( ESSEventProfilePtrSeq    * received_data,
                         SampleInfoSeq   * sample_infos,
                         int               max_samples,
                         SampleStateMask   sample_states, 
                         ViewStateMask     view_states, 
                         InstanceStateMask instance_states)
{
  return DataReader::read( (Sequence*)received_data, 
			    sample_infos, 
			    max_samples, 
			    sample_states, 
			    view_states, 
			    instance_states );
}
  

/******************************************************************/

ReturnCode_t
ESSEventProfileDataReader::take( ESSEventProfilePtrSeq     * received_data,
                         SampleInfoSeq    * sample_infos,
                         int                max_samples,
                         SampleStateMask    sample_states, 
                         ViewStateMask      view_states, 
                         InstanceStateMask  instance_states)
{
  return DataReader::take( (Sequence*)received_data,
                           sample_infos,
                           max_samples,
                           sample_states, 
                           view_states, 
                           instance_states);
}


/******************************************************************/

ReturnCode_t 
ESSEventProfileDataReader::read_w_condition( ESSEventProfilePtrSeq  * received_data,
                                     SampleInfoSeq * sample_infos,
                                     int             max_samples,
                                     ReadCondition * a_condition)
{
  return DataReader::read_w_condition( (Sequence*)received_data,
                                       sample_infos,
                                       max_samples,
                                       a_condition);
}


/******************************************************************/
    
ReturnCode_t
ESSEventProfileDataReader::take_w_condition( ESSEventProfilePtrSeq   * received_data,
                                     SampleInfoSeq  * sample_infos,
                                     int              max_samples,
                                     ReadCondition *  a_condition)
{
  return DataReader::take_w_condition( (Sequence*)received_data,
                                       sample_infos,
                                       max_samples,
                                       a_condition);
}


/******************************************************************/
    
ReturnCode_t
ESSEventProfileDataReader::read_next_sample( ESSEventProfile     * received_data,
                                  SampleInfo     * sample_info)
{
  return DataReader::read_next_sample( (void*)received_data,
                                       sample_info);
}


/******************************************************************/
    
ReturnCode_t
ESSEventProfileDataReader::take_next_sample( ESSEventProfile      * received_data,
                                     SampleInfo      * sample_info)
{
  return DataReader::take_next_sample( (void*) received_data,
                                       sample_info);
}


/******************************************************************/
    
ReturnCode_t
ESSEventProfileDataReader::read_instance( ESSEventProfilePtrSeq       * received_data,
                                  SampleInfoSeq    * sample_infos,
                                  int                max_samples,
                                  InstanceHandle_t   a_handle,
                                  SampleStateMask    sample_states, 
                                  ViewStateMask      view_states, 
                                  InstanceStateMask  instance_states)
{
  return DataReader::read_instance( (Sequence*)received_data, 
                                    sample_infos, 
                                    max_samples, 
                                    a_handle, 
                                    sample_states, 
                                    view_states, 
                                    instance_states );
}


/******************************************************************/
    
ReturnCode_t
ESSEventProfileDataReader::take_instance( ESSEventProfilePtrSeq    * received_data,
                                  SampleInfoSeq   * sample_infos,
                                  int               max_samples,
                                  InstanceHandle_t  a_handle,
                                  SampleStateMask   sample_states, 
                                  ViewStateMask     view_states, 
                                  InstanceStateMask instance_states)
{
  return DataReader::take_instance( (Sequence*)received_data,
                                    sample_infos,
                                    max_samples,
                                    a_handle,
                                    sample_states, 
                                    view_states, 
                                    instance_states);
}


/******************************************************************/
    
ReturnCode_t
ESSEventProfileDataReader::read_next_instance( ESSEventProfilePtrSeq    * received_data,
                                       SampleInfoSeq   * sample_infos,
                                       int               max_samples,
                                       InstanceHandle_t  previous_handle,
                                       SampleStateMask   sample_states, 
                                       ViewStateMask     view_states, 
                                       InstanceStateMask instance_states)
{
  return DataReader::read_next_instance( (Sequence*)received_data,
                                         sample_infos,
                                         max_samples,
                                         previous_handle,
                                         sample_states, 
                                         view_states, 
                                         instance_states);
}


/******************************************************************/

ReturnCode_t
ESSEventProfileDataReader::take_next_instance( ESSEventProfilePtrSeq     * received_data,
                                       SampleInfoSeq    * sample_infos,
                                       int                max_samples,
                                       InstanceHandle_t   previous_handle,
                                       SampleStateMask    sample_states, 
                                       ViewStateMask      view_states, 
                                       InstanceStateMask  instance_states)
{
  return DataReader::take_next_instance( (Sequence*)received_data,
                                         sample_infos,
                                         max_samples,
                                         previous_handle,
                                         sample_states, 
                                         view_states, 
                                         instance_states);
}


/******************************************************************/
    
ReturnCode_t
ESSEventProfileDataReader::read_next_instance_w_condition( ESSEventProfilePtrSeq     * received_data,
                                                   SampleInfoSeq    * sample_infos,
                                                   int                max_samples,
                                                   InstanceHandle_t   previous_handle,
                                                   ReadCondition *    a_condition)
{
  return DataReader::read_next_instance_w_condition( (Sequence*)received_data,
                                                     sample_infos,
                                                     max_samples,
                                                     previous_handle,
                                                     a_condition);
}


/******************************************************************/
    
ReturnCode_t 
ESSEventProfileDataReader::take_next_instance_w_condition( ESSEventProfilePtrSeq     * received_data,
                                                   SampleInfoSeq    * sample_infos,
                                                   int                max_samples,
                                                   InstanceHandle_t   previous_handle,
                                                   ReadCondition *    a_condition)
{
  return DataReader::take_next_instance_w_condition( (Sequence*)received_data,
                                                     sample_infos,
                                                     max_samples,
                                                     previous_handle,
                                                     a_condition);
}


/******************************************************************/
    
ReturnCode_t
ESSEventProfileDataReader::return_loan( ESSEventProfilePtrSeq   * received_data,
                                SampleInfoSeq  * sample_infos)
{
  return DataReader::return_loan( (Sequence*)received_data, sample_infos);
}


/******************************************************************/

ReturnCode_t
ESSEventProfileDataReader::get_key_value( ESSEventProfile            * key_holder, 
                                  InstanceHandle_t  handle)
{
  if ( ! key_holder )
      return RETCODE_BAD_PARAMETER;

  /* key: use DR to get it */
  return DataReader::get_key_value(  key_holder, handle );
}


/******************************************************************/
/* openfmb::essmodule:: */
InstanceHandle_t 
ESSEventProfileDataReader::lookup_instance( ESSEventProfile       * instance_data)
{
  if ( ! instance_data )
      return HANDLE_NIL;

  /* Complex key: use DR to find it */
  return DataReader::lookup_instance(  instance_data );
}


/******************************************************************
 * openfmb::essmodule:: DataReader Ops
 *****************************************************************/

/******************************************************************/
ESSReadingValueDataReader::ESSReadingValueDataReader()
{
}

/******************************************************************/
ReturnCode_t 
ESSReadingValueDataReader::read( ESSReadingValuePtrSeq    * received_data,
                         SampleInfoSeq   * sample_infos,
                         int               max_samples,
                         SampleStateMask   sample_states, 
                         ViewStateMask     view_states, 
                         InstanceStateMask instance_states)
{
  return DataReader::read( (Sequence*)received_data, 
			    sample_infos, 
			    max_samples, 
			    sample_states, 
			    view_states, 
			    instance_states );
}
  

/******************************************************************/

ReturnCode_t
ESSReadingValueDataReader::take( ESSReadingValuePtrSeq     * received_data,
                         SampleInfoSeq    * sample_infos,
                         int                max_samples,
                         SampleStateMask    sample_states, 
                         ViewStateMask      view_states, 
                         InstanceStateMask  instance_states)
{
  return DataReader::take( (Sequence*)received_data,
                           sample_infos,
                           max_samples,
                           sample_states, 
                           view_states, 
                           instance_states);
}


/******************************************************************/

ReturnCode_t 
ESSReadingValueDataReader::read_w_condition( ESSReadingValuePtrSeq  * received_data,
                                     SampleInfoSeq * sample_infos,
                                     int             max_samples,
                                     ReadCondition * a_condition)
{
  return DataReader::read_w_condition( (Sequence*)received_data,
                                       sample_infos,
                                       max_samples,
                                       a_condition);
}


/******************************************************************/
    
ReturnCode_t
ESSReadingValueDataReader::take_w_condition( ESSReadingValuePtrSeq   * received_data,
                                     SampleInfoSeq  * sample_infos,
                                     int              max_samples,
                                     ReadCondition *  a_condition)
{
  return DataReader::take_w_condition( (Sequence*)received_data,
                                       sample_infos,
                                       max_samples,
                                       a_condition);
}


/******************************************************************/
    
ReturnCode_t
ESSReadingValueDataReader::read_next_sample( ESSReadingValue     * received_data,
                                  SampleInfo     * sample_info)
{
  return DataReader::read_next_sample( (void*)received_data,
                                       sample_info);
}


/******************************************************************/
    
ReturnCode_t
ESSReadingValueDataReader::take_next_sample( ESSReadingValue      * received_data,
                                     SampleInfo      * sample_info)
{
  return DataReader::take_next_sample( (void*) received_data,
                                       sample_info);
}


/******************************************************************/
    
ReturnCode_t
ESSReadingValueDataReader::read_instance( ESSReadingValuePtrSeq       * received_data,
                                  SampleInfoSeq    * sample_infos,
                                  int                max_samples,
                                  InstanceHandle_t   a_handle,
                                  SampleStateMask    sample_states, 
                                  ViewStateMask      view_states, 
                                  InstanceStateMask  instance_states)
{
  return DataReader::read_instance( (Sequence*)received_data, 
                                    sample_infos, 
                                    max_samples, 
                                    a_handle, 
                                    sample_states, 
                                    view_states, 
                                    instance_states );
}


/******************************************************************/
    
ReturnCode_t
ESSReadingValueDataReader::take_instance( ESSReadingValuePtrSeq    * received_data,
                                  SampleInfoSeq   * sample_infos,
                                  int               max_samples,
                                  InstanceHandle_t  a_handle,
                                  SampleStateMask   sample_states, 
                                  ViewStateMask     view_states, 
                                  InstanceStateMask instance_states)
{
  return DataReader::take_instance( (Sequence*)received_data,
                                    sample_infos,
                                    max_samples,
                                    a_handle,
                                    sample_states, 
                                    view_states, 
                                    instance_states);
}


/******************************************************************/
    
ReturnCode_t
ESSReadingValueDataReader::read_next_instance( ESSReadingValuePtrSeq    * received_data,
                                       SampleInfoSeq   * sample_infos,
                                       int               max_samples,
                                       InstanceHandle_t  previous_handle,
                                       SampleStateMask   sample_states, 
                                       ViewStateMask     view_states, 
                                       InstanceStateMask instance_states)
{
  return DataReader::read_next_instance( (Sequence*)received_data,
                                         sample_infos,
                                         max_samples,
                                         previous_handle,
                                         sample_states, 
                                         view_states, 
                                         instance_states);
}


/******************************************************************/

ReturnCode_t
ESSReadingValueDataReader::take_next_instance( ESSReadingValuePtrSeq     * received_data,
                                       SampleInfoSeq    * sample_infos,
                                       int                max_samples,
                                       InstanceHandle_t   previous_handle,
                                       SampleStateMask    sample_states, 
                                       ViewStateMask      view_states, 
                                       InstanceStateMask  instance_states)
{
  return DataReader::take_next_instance( (Sequence*)received_data,
                                         sample_infos,
                                         max_samples,
                                         previous_handle,
                                         sample_states, 
                                         view_states, 
                                         instance_states);
}


/******************************************************************/
    
ReturnCode_t
ESSReadingValueDataReader::read_next_instance_w_condition( ESSReadingValuePtrSeq     * received_data,
                                                   SampleInfoSeq    * sample_infos,
                                                   int                max_samples,
                                                   InstanceHandle_t   previous_handle,
                                                   ReadCondition *    a_condition)
{
  return DataReader::read_next_instance_w_condition( (Sequence*)received_data,
                                                     sample_infos,
                                                     max_samples,
                                                     previous_handle,
                                                     a_condition);
}


/******************************************************************/
    
ReturnCode_t 
ESSReadingValueDataReader::take_next_instance_w_condition( ESSReadingValuePtrSeq     * received_data,
                                                   SampleInfoSeq    * sample_infos,
                                                   int                max_samples,
                                                   InstanceHandle_t   previous_handle,
                                                   ReadCondition *    a_condition)
{
  return DataReader::take_next_instance_w_condition( (Sequence*)received_data,
                                                     sample_infos,
                                                     max_samples,
                                                     previous_handle,
                                                     a_condition);
}


/******************************************************************/
    
ReturnCode_t
ESSReadingValueDataReader::return_loan( ESSReadingValuePtrSeq   * received_data,
                                SampleInfoSeq  * sample_infos)
{
  return DataReader::return_loan( (Sequence*)received_data, sample_infos);
}


/******************************************************************/

ReturnCode_t
ESSReadingValueDataReader::get_key_value( ESSReadingValue            * key_holder, 
                                  InstanceHandle_t  handle)
{
  if ( ! key_holder )
      return RETCODE_BAD_PARAMETER;

  /* No keys: no op */
  CDX_UNUSED(handle);
  key_holder->clear();
  return DDS::RETCODE_OK;
}


/******************************************************************/
/* openfmb::essmodule:: */
InstanceHandle_t 
ESSReadingValueDataReader::lookup_instance( ESSReadingValue       * instance_data)
{
  if ( ! instance_data )
      return HANDLE_NIL;

  /* No keys */
  return DDS::HANDLE_DEFAULT;
}


/******************************************************************
 * openfmb::essmodule:: DataReader Ops
 *****************************************************************/

/******************************************************************/
ESSStatusProfileDataReader::ESSStatusProfileDataReader()
{
}

/******************************************************************/
ReturnCode_t 
ESSStatusProfileDataReader::read( ESSStatusProfilePtrSeq    * received_data,
                         SampleInfoSeq   * sample_infos,
                         int               max_samples,
                         SampleStateMask   sample_states, 
                         ViewStateMask     view_states, 
                         InstanceStateMask instance_states)
{
  return DataReader::read( (Sequence*)received_data, 
			    sample_infos, 
			    max_samples, 
			    sample_states, 
			    view_states, 
			    instance_states );
}
  

/******************************************************************/

ReturnCode_t
ESSStatusProfileDataReader::take( ESSStatusProfilePtrSeq     * received_data,
                         SampleInfoSeq    * sample_infos,
                         int                max_samples,
                         SampleStateMask    sample_states, 
                         ViewStateMask      view_states, 
                         InstanceStateMask  instance_states)
{
  return DataReader::take( (Sequence*)received_data,
                           sample_infos,
                           max_samples,
                           sample_states, 
                           view_states, 
                           instance_states);
}


/******************************************************************/

ReturnCode_t 
ESSStatusProfileDataReader::read_w_condition( ESSStatusProfilePtrSeq  * received_data,
                                     SampleInfoSeq * sample_infos,
                                     int             max_samples,
                                     ReadCondition * a_condition)
{
  return DataReader::read_w_condition( (Sequence*)received_data,
                                       sample_infos,
                                       max_samples,
                                       a_condition);
}


/******************************************************************/
    
ReturnCode_t
ESSStatusProfileDataReader::take_w_condition( ESSStatusProfilePtrSeq   * received_data,
                                     SampleInfoSeq  * sample_infos,
                                     int              max_samples,
                                     ReadCondition *  a_condition)
{
  return DataReader::take_w_condition( (Sequence*)received_data,
                                       sample_infos,
                                       max_samples,
                                       a_condition);
}


/******************************************************************/
    
ReturnCode_t
ESSStatusProfileDataReader::read_next_sample( ESSStatusProfile     * received_data,
                                  SampleInfo     * sample_info)
{
  return DataReader::read_next_sample( (void*)received_data,
                                       sample_info);
}


/******************************************************************/
    
ReturnCode_t
ESSStatusProfileDataReader::take_next_sample( ESSStatusProfile      * received_data,
                                     SampleInfo      * sample_info)
{
  return DataReader::take_next_sample( (void*) received_data,
                                       sample_info);
}


/******************************************************************/
    
ReturnCode_t
ESSStatusProfileDataReader::read_instance( ESSStatusProfilePtrSeq       * received_data,
                                  SampleInfoSeq    * sample_infos,
                                  int                max_samples,
                                  InstanceHandle_t   a_handle,
                                  SampleStateMask    sample_states, 
                                  ViewStateMask      view_states, 
                                  InstanceStateMask  instance_states)
{
  return DataReader::read_instance( (Sequence*)received_data, 
                                    sample_infos, 
                                    max_samples, 
                                    a_handle, 
                                    sample_states, 
                                    view_states, 
                                    instance_states );
}


/******************************************************************/
    
ReturnCode_t
ESSStatusProfileDataReader::take_instance( ESSStatusProfilePtrSeq    * received_data,
                                  SampleInfoSeq   * sample_infos,
                                  int               max_samples,
                                  InstanceHandle_t  a_handle,
                                  SampleStateMask   sample_states, 
                                  ViewStateMask     view_states, 
                                  InstanceStateMask instance_states)
{
  return DataReader::take_instance( (Sequence*)received_data,
                                    sample_infos,
                                    max_samples,
                                    a_handle,
                                    sample_states, 
                                    view_states, 
                                    instance_states);
}


/******************************************************************/
    
ReturnCode_t
ESSStatusProfileDataReader::read_next_instance( ESSStatusProfilePtrSeq    * received_data,
                                       SampleInfoSeq   * sample_infos,
                                       int               max_samples,
                                       InstanceHandle_t  previous_handle,
                                       SampleStateMask   sample_states, 
                                       ViewStateMask     view_states, 
                                       InstanceStateMask instance_states)
{
  return DataReader::read_next_instance( (Sequence*)received_data,
                                         sample_infos,
                                         max_samples,
                                         previous_handle,
                                         sample_states, 
                                         view_states, 
                                         instance_states);
}


/******************************************************************/

ReturnCode_t
ESSStatusProfileDataReader::take_next_instance( ESSStatusProfilePtrSeq     * received_data,
                                       SampleInfoSeq    * sample_infos,
                                       int                max_samples,
                                       InstanceHandle_t   previous_handle,
                                       SampleStateMask    sample_states, 
                                       ViewStateMask      view_states, 
                                       InstanceStateMask  instance_states)
{
  return DataReader::take_next_instance( (Sequence*)received_data,
                                         sample_infos,
                                         max_samples,
                                         previous_handle,
                                         sample_states, 
                                         view_states, 
                                         instance_states);
}


/******************************************************************/
    
ReturnCode_t
ESSStatusProfileDataReader::read_next_instance_w_condition( ESSStatusProfilePtrSeq     * received_data,
                                                   SampleInfoSeq    * sample_infos,
                                                   int                max_samples,
                                                   InstanceHandle_t   previous_handle,
                                                   ReadCondition *    a_condition)
{
  return DataReader::read_next_instance_w_condition( (Sequence*)received_data,
                                                     sample_infos,
                                                     max_samples,
                                                     previous_handle,
                                                     a_condition);
}


/******************************************************************/
    
ReturnCode_t 
ESSStatusProfileDataReader::take_next_instance_w_condition( ESSStatusProfilePtrSeq     * received_data,
                                                   SampleInfoSeq    * sample_infos,
                                                   int                max_samples,
                                                   InstanceHandle_t   previous_handle,
                                                   ReadCondition *    a_condition)
{
  return DataReader::take_next_instance_w_condition( (Sequence*)received_data,
                                                     sample_infos,
                                                     max_samples,
                                                     previous_handle,
                                                     a_condition);
}


/******************************************************************/
    
ReturnCode_t
ESSStatusProfileDataReader::return_loan( ESSStatusProfilePtrSeq   * received_data,
                                SampleInfoSeq  * sample_infos)
{
  return DataReader::return_loan( (Sequence*)received_data, sample_infos);
}


/******************************************************************/

ReturnCode_t
ESSStatusProfileDataReader::get_key_value( ESSStatusProfile            * key_holder, 
                                  InstanceHandle_t  handle)
{
  if ( ! key_holder )
      return RETCODE_BAD_PARAMETER;

  /* key: use DR to get it */
  return DataReader::get_key_value(  key_holder, handle );
}


/******************************************************************/
/* openfmb::essmodule:: */
InstanceHandle_t 
ESSStatusProfileDataReader::lookup_instance( ESSStatusProfile       * instance_data)
{
  if ( ! instance_data )
      return HANDLE_NIL;

  /* Complex key: use DR to find it */
  return DataReader::lookup_instance(  instance_data );
}


}  /* namespace essmodule */
/* END SCOPE: essmodule */
/* START SCOPE: generationmodule */

namespace generationmodule {


/******************************************************************
 * openfmb::generationmodule:: DataReader Ops
 *****************************************************************/

/******************************************************************/
GenerationReadingValueDataReader::GenerationReadingValueDataReader()
{
}

/******************************************************************/
ReturnCode_t 
GenerationReadingValueDataReader::read( GenerationReadingValuePtrSeq    * received_data,
                         SampleInfoSeq   * sample_infos,
                         int               max_samples,
                         SampleStateMask   sample_states, 
                         ViewStateMask     view_states, 
                         InstanceStateMask instance_states)
{
  return DataReader::read( (Sequence*)received_data, 
			    sample_infos, 
			    max_samples, 
			    sample_states, 
			    view_states, 
			    instance_states );
}
  

/******************************************************************/

ReturnCode_t
GenerationReadingValueDataReader::take( GenerationReadingValuePtrSeq     * received_data,
                         SampleInfoSeq    * sample_infos,
                         int                max_samples,
                         SampleStateMask    sample_states, 
                         ViewStateMask      view_states, 
                         InstanceStateMask  instance_states)
{
  return DataReader::take( (Sequence*)received_data,
                           sample_infos,
                           max_samples,
                           sample_states, 
                           view_states, 
                           instance_states);
}


/******************************************************************/

ReturnCode_t 
GenerationReadingValueDataReader::read_w_condition( GenerationReadingValuePtrSeq  * received_data,
                                     SampleInfoSeq * sample_infos,
                                     int             max_samples,
                                     ReadCondition * a_condition)
{
  return DataReader::read_w_condition( (Sequence*)received_data,
                                       sample_infos,
                                       max_samples,
                                       a_condition);
}


/******************************************************************/
    
ReturnCode_t
GenerationReadingValueDataReader::take_w_condition( GenerationReadingValuePtrSeq   * received_data,
                                     SampleInfoSeq  * sample_infos,
                                     int              max_samples,
                                     ReadCondition *  a_condition)
{
  return DataReader::take_w_condition( (Sequence*)received_data,
                                       sample_infos,
                                       max_samples,
                                       a_condition);
}


/******************************************************************/
    
ReturnCode_t
GenerationReadingValueDataReader::read_next_sample( GenerationReadingValue     * received_data,
                                  SampleInfo     * sample_info)
{
  return DataReader::read_next_sample( (void*)received_data,
                                       sample_info);
}


/******************************************************************/
    
ReturnCode_t
GenerationReadingValueDataReader::take_next_sample( GenerationReadingValue      * received_data,
                                     SampleInfo      * sample_info)
{
  return DataReader::take_next_sample( (void*) received_data,
                                       sample_info);
}


/******************************************************************/
    
ReturnCode_t
GenerationReadingValueDataReader::read_instance( GenerationReadingValuePtrSeq       * received_data,
                                  SampleInfoSeq    * sample_infos,
                                  int                max_samples,
                                  InstanceHandle_t   a_handle,
                                  SampleStateMask    sample_states, 
                                  ViewStateMask      view_states, 
                                  InstanceStateMask  instance_states)
{
  return DataReader::read_instance( (Sequence*)received_data, 
                                    sample_infos, 
                                    max_samples, 
                                    a_handle, 
                                    sample_states, 
                                    view_states, 
                                    instance_states );
}


/******************************************************************/
    
ReturnCode_t
GenerationReadingValueDataReader::take_instance( GenerationReadingValuePtrSeq    * received_data,
                                  SampleInfoSeq   * sample_infos,
                                  int               max_samples,
                                  InstanceHandle_t  a_handle,
                                  SampleStateMask   sample_states, 
                                  ViewStateMask     view_states, 
                                  InstanceStateMask instance_states)
{
  return DataReader::take_instance( (Sequence*)received_data,
                                    sample_infos,
                                    max_samples,
                                    a_handle,
                                    sample_states, 
                                    view_states, 
                                    instance_states);
}


/******************************************************************/
    
ReturnCode_t
GenerationReadingValueDataReader::read_next_instance( GenerationReadingValuePtrSeq    * received_data,
                                       SampleInfoSeq   * sample_infos,
                                       int               max_samples,
                                       InstanceHandle_t  previous_handle,
                                       SampleStateMask   sample_states, 
                                       ViewStateMask     view_states, 
                                       InstanceStateMask instance_states)
{
  return DataReader::read_next_instance( (Sequence*)received_data,
                                         sample_infos,
                                         max_samples,
                                         previous_handle,
                                         sample_states, 
                                         view_states, 
                                         instance_states);
}


/******************************************************************/

ReturnCode_t
GenerationReadingValueDataReader::take_next_instance( GenerationReadingValuePtrSeq     * received_data,
                                       SampleInfoSeq    * sample_infos,
                                       int                max_samples,
                                       InstanceHandle_t   previous_handle,
                                       SampleStateMask    sample_states, 
                                       ViewStateMask      view_states, 
                                       InstanceStateMask  instance_states)
{
  return DataReader::take_next_instance( (Sequence*)received_data,
                                         sample_infos,
                                         max_samples,
                                         previous_handle,
                                         sample_states, 
                                         view_states, 
                                         instance_states);
}


/******************************************************************/
    
ReturnCode_t
GenerationReadingValueDataReader::read_next_instance_w_condition( GenerationReadingValuePtrSeq     * received_data,
                                                   SampleInfoSeq    * sample_infos,
                                                   int                max_samples,
                                                   InstanceHandle_t   previous_handle,
                                                   ReadCondition *    a_condition)
{
  return DataReader::read_next_instance_w_condition( (Sequence*)received_data,
                                                     sample_infos,
                                                     max_samples,
                                                     previous_handle,
                                                     a_condition);
}


/******************************************************************/
    
ReturnCode_t 
GenerationReadingValueDataReader::take_next_instance_w_condition( GenerationReadingValuePtrSeq     * received_data,
                                                   SampleInfoSeq    * sample_infos,
                                                   int                max_samples,
                                                   InstanceHandle_t   previous_handle,
                                                   ReadCondition *    a_condition)
{
  return DataReader::take_next_instance_w_condition( (Sequence*)received_data,
                                                     sample_infos,
                                                     max_samples,
                                                     previous_handle,
                                                     a_condition);
}


/******************************************************************/
    
ReturnCode_t
GenerationReadingValueDataReader::return_loan( GenerationReadingValuePtrSeq   * received_data,
                                SampleInfoSeq  * sample_infos)
{
  return DataReader::return_loan( (Sequence*)received_data, sample_infos);
}


/******************************************************************/

ReturnCode_t
GenerationReadingValueDataReader::get_key_value( GenerationReadingValue            * key_holder, 
                                  InstanceHandle_t  handle)
{
  if ( ! key_holder )
      return RETCODE_BAD_PARAMETER;

  /* No keys: no op */
  CDX_UNUSED(handle);
  key_holder->clear();
  return DDS::RETCODE_OK;
}


/******************************************************************/
/* openfmb::generationmodule:: */
InstanceHandle_t 
GenerationReadingValueDataReader::lookup_instance( GenerationReadingValue       * instance_data)
{
  if ( ! instance_data )
      return HANDLE_NIL;

  /* No keys */
  return DDS::HANDLE_DEFAULT;
}


/******************************************************************
 * openfmb::generationmodule:: DataReader Ops
 *****************************************************************/

/******************************************************************/
GenerationReadingProfileDataReader::GenerationReadingProfileDataReader()
{
}

/******************************************************************/
ReturnCode_t 
GenerationReadingProfileDataReader::read( GenerationReadingProfilePtrSeq    * received_data,
                         SampleInfoSeq   * sample_infos,
                         int               max_samples,
                         SampleStateMask   sample_states, 
                         ViewStateMask     view_states, 
                         InstanceStateMask instance_states)
{
  return DataReader::read( (Sequence*)received_data, 
			    sample_infos, 
			    max_samples, 
			    sample_states, 
			    view_states, 
			    instance_states );
}
  

/******************************************************************/

ReturnCode_t
GenerationReadingProfileDataReader::take( GenerationReadingProfilePtrSeq     * received_data,
                         SampleInfoSeq    * sample_infos,
                         int                max_samples,
                         SampleStateMask    sample_states, 
                         ViewStateMask      view_states, 
                         InstanceStateMask  instance_states)
{
  return DataReader::take( (Sequence*)received_data,
                           sample_infos,
                           max_samples,
                           sample_states, 
                           view_states, 
                           instance_states);
}


/******************************************************************/

ReturnCode_t 
GenerationReadingProfileDataReader::read_w_condition( GenerationReadingProfilePtrSeq  * received_data,
                                     SampleInfoSeq * sample_infos,
                                     int             max_samples,
                                     ReadCondition * a_condition)
{
  return DataReader::read_w_condition( (Sequence*)received_data,
                                       sample_infos,
                                       max_samples,
                                       a_condition);
}


/******************************************************************/
    
ReturnCode_t
GenerationReadingProfileDataReader::take_w_condition( GenerationReadingProfilePtrSeq   * received_data,
                                     SampleInfoSeq  * sample_infos,
                                     int              max_samples,
                                     ReadCondition *  a_condition)
{
  return DataReader::take_w_condition( (Sequence*)received_data,
                                       sample_infos,
                                       max_samples,
                                       a_condition);
}


/******************************************************************/
    
ReturnCode_t
GenerationReadingProfileDataReader::read_next_sample( GenerationReadingProfile     * received_data,
                                  SampleInfo     * sample_info)
{
  return DataReader::read_next_sample( (void*)received_data,
                                       sample_info);
}


/******************************************************************/
    
ReturnCode_t
GenerationReadingProfileDataReader::take_next_sample( GenerationReadingProfile      * received_data,
                                     SampleInfo      * sample_info)
{
  return DataReader::take_next_sample( (void*) received_data,
                                       sample_info);
}


/******************************************************************/
    
ReturnCode_t
GenerationReadingProfileDataReader::read_instance( GenerationReadingProfilePtrSeq       * received_data,
                                  SampleInfoSeq    * sample_infos,
                                  int                max_samples,
                                  InstanceHandle_t   a_handle,
                                  SampleStateMask    sample_states, 
                                  ViewStateMask      view_states, 
                                  InstanceStateMask  instance_states)
{
  return DataReader::read_instance( (Sequence*)received_data, 
                                    sample_infos, 
                                    max_samples, 
                                    a_handle, 
                                    sample_states, 
                                    view_states, 
                                    instance_states );
}


/******************************************************************/
    
ReturnCode_t
GenerationReadingProfileDataReader::take_instance( GenerationReadingProfilePtrSeq    * received_data,
                                  SampleInfoSeq   * sample_infos,
                                  int               max_samples,
                                  InstanceHandle_t  a_handle,
                                  SampleStateMask   sample_states, 
                                  ViewStateMask     view_states, 
                                  InstanceStateMask instance_states)
{
  return DataReader::take_instance( (Sequence*)received_data,
                                    sample_infos,
                                    max_samples,
                                    a_handle,
                                    sample_states, 
                                    view_states, 
                                    instance_states);
}


/******************************************************************/
    
ReturnCode_t
GenerationReadingProfileDataReader::read_next_instance( GenerationReadingProfilePtrSeq    * received_data,
                                       SampleInfoSeq   * sample_infos,
                                       int               max_samples,
                                       InstanceHandle_t  previous_handle,
                                       SampleStateMask   sample_states, 
                                       ViewStateMask     view_states, 
                                       InstanceStateMask instance_states)
{
  return DataReader::read_next_instance( (Sequence*)received_data,
                                         sample_infos,
                                         max_samples,
                                         previous_handle,
                                         sample_states, 
                                         view_states, 
                                         instance_states);
}


/******************************************************************/

ReturnCode_t
GenerationReadingProfileDataReader::take_next_instance( GenerationReadingProfilePtrSeq     * received_data,
                                       SampleInfoSeq    * sample_infos,
                                       int                max_samples,
                                       InstanceHandle_t   previous_handle,
                                       SampleStateMask    sample_states, 
                                       ViewStateMask      view_states, 
                                       InstanceStateMask  instance_states)
{
  return DataReader::take_next_instance( (Sequence*)received_data,
                                         sample_infos,
                                         max_samples,
                                         previous_handle,
                                         sample_states, 
                                         view_states, 
                                         instance_states);
}


/******************************************************************/
    
ReturnCode_t
GenerationReadingProfileDataReader::read_next_instance_w_condition( GenerationReadingProfilePtrSeq     * received_data,
                                                   SampleInfoSeq    * sample_infos,
                                                   int                max_samples,
                                                   InstanceHandle_t   previous_handle,
                                                   ReadCondition *    a_condition)
{
  return DataReader::read_next_instance_w_condition( (Sequence*)received_data,
                                                     sample_infos,
                                                     max_samples,
                                                     previous_handle,
                                                     a_condition);
}


/******************************************************************/
    
ReturnCode_t 
GenerationReadingProfileDataReader::take_next_instance_w_condition( GenerationReadingProfilePtrSeq     * received_data,
                                                   SampleInfoSeq    * sample_infos,
                                                   int                max_samples,
                                                   InstanceHandle_t   previous_handle,
                                                   ReadCondition *    a_condition)
{
  return DataReader::take_next_instance_w_condition( (Sequence*)received_data,
                                                     sample_infos,
                                                     max_samples,
                                                     previous_handle,
                                                     a_condition);
}


/******************************************************************/
    
ReturnCode_t
GenerationReadingProfileDataReader::return_loan( GenerationReadingProfilePtrSeq   * received_data,
                                SampleInfoSeq  * sample_infos)
{
  return DataReader::return_loan( (Sequence*)received_data, sample_infos);
}


/******************************************************************/

ReturnCode_t
GenerationReadingProfileDataReader::get_key_value( GenerationReadingProfile            * key_holder, 
                                  InstanceHandle_t  handle)
{
  if ( ! key_holder )
      return RETCODE_BAD_PARAMETER;

  /* key: use DR to get it */
  return DataReader::get_key_value(  key_holder, handle );
}


/******************************************************************/
/* openfmb::generationmodule:: */
InstanceHandle_t 
GenerationReadingProfileDataReader::lookup_instance( GenerationReadingProfile       * instance_data)
{
  if ( ! instance_data )
      return HANDLE_NIL;

  /* Complex key: use DR to find it */
  return DataReader::lookup_instance(  instance_data );
}


/******************************************************************
 * openfmb::generationmodule:: DataReader Ops
 *****************************************************************/

/******************************************************************/
GenerationEventProfileDataReader::GenerationEventProfileDataReader()
{
}

/******************************************************************/
ReturnCode_t 
GenerationEventProfileDataReader::read( GenerationEventProfilePtrSeq    * received_data,
                         SampleInfoSeq   * sample_infos,
                         int               max_samples,
                         SampleStateMask   sample_states, 
                         ViewStateMask     view_states, 
                         InstanceStateMask instance_states)
{
  return DataReader::read( (Sequence*)received_data, 
			    sample_infos, 
			    max_samples, 
			    sample_states, 
			    view_states, 
			    instance_states );
}
  

/******************************************************************/

ReturnCode_t
GenerationEventProfileDataReader::take( GenerationEventProfilePtrSeq     * received_data,
                         SampleInfoSeq    * sample_infos,
                         int                max_samples,
                         SampleStateMask    sample_states, 
                         ViewStateMask      view_states, 
                         InstanceStateMask  instance_states)
{
  return DataReader::take( (Sequence*)received_data,
                           sample_infos,
                           max_samples,
                           sample_states, 
                           view_states, 
                           instance_states);
}


/******************************************************************/

ReturnCode_t 
GenerationEventProfileDataReader::read_w_condition( GenerationEventProfilePtrSeq  * received_data,
                                     SampleInfoSeq * sample_infos,
                                     int             max_samples,
                                     ReadCondition * a_condition)
{
  return DataReader::read_w_condition( (Sequence*)received_data,
                                       sample_infos,
                                       max_samples,
                                       a_condition);
}


/******************************************************************/
    
ReturnCode_t
GenerationEventProfileDataReader::take_w_condition( GenerationEventProfilePtrSeq   * received_data,
                                     SampleInfoSeq  * sample_infos,
                                     int              max_samples,
                                     ReadCondition *  a_condition)
{
  return DataReader::take_w_condition( (Sequence*)received_data,
                                       sample_infos,
                                       max_samples,
                                       a_condition);
}


/******************************************************************/
    
ReturnCode_t
GenerationEventProfileDataReader::read_next_sample( GenerationEventProfile     * received_data,
                                  SampleInfo     * sample_info)
{
  return DataReader::read_next_sample( (void*)received_data,
                                       sample_info);
}


/******************************************************************/
    
ReturnCode_t
GenerationEventProfileDataReader::take_next_sample( GenerationEventProfile      * received_data,
                                     SampleInfo      * sample_info)
{
  return DataReader::take_next_sample( (void*) received_data,
                                       sample_info);
}


/******************************************************************/
    
ReturnCode_t
GenerationEventProfileDataReader::read_instance( GenerationEventProfilePtrSeq       * received_data,
                                  SampleInfoSeq    * sample_infos,
                                  int                max_samples,
                                  InstanceHandle_t   a_handle,
                                  SampleStateMask    sample_states, 
                                  ViewStateMask      view_states, 
                                  InstanceStateMask  instance_states)
{
  return DataReader::read_instance( (Sequence*)received_data, 
                                    sample_infos, 
                                    max_samples, 
                                    a_handle, 
                                    sample_states, 
                                    view_states, 
                                    instance_states );
}


/******************************************************************/
    
ReturnCode_t
GenerationEventProfileDataReader::take_instance( GenerationEventProfilePtrSeq    * received_data,
                                  SampleInfoSeq   * sample_infos,
                                  int               max_samples,
                                  InstanceHandle_t  a_handle,
                                  SampleStateMask   sample_states, 
                                  ViewStateMask     view_states, 
                                  InstanceStateMask instance_states)
{
  return DataReader::take_instance( (Sequence*)received_data,
                                    sample_infos,
                                    max_samples,
                                    a_handle,
                                    sample_states, 
                                    view_states, 
                                    instance_states);
}


/******************************************************************/
    
ReturnCode_t
GenerationEventProfileDataReader::read_next_instance( GenerationEventProfilePtrSeq    * received_data,
                                       SampleInfoSeq   * sample_infos,
                                       int               max_samples,
                                       InstanceHandle_t  previous_handle,
                                       SampleStateMask   sample_states, 
                                       ViewStateMask     view_states, 
                                       InstanceStateMask instance_states)
{
  return DataReader::read_next_instance( (Sequence*)received_data,
                                         sample_infos,
                                         max_samples,
                                         previous_handle,
                                         sample_states, 
                                         view_states, 
                                         instance_states);
}


/******************************************************************/

ReturnCode_t
GenerationEventProfileDataReader::take_next_instance( GenerationEventProfilePtrSeq     * received_data,
                                       SampleInfoSeq    * sample_infos,
                                       int                max_samples,
                                       InstanceHandle_t   previous_handle,
                                       SampleStateMask    sample_states, 
                                       ViewStateMask      view_states, 
                                       InstanceStateMask  instance_states)
{
  return DataReader::take_next_instance( (Sequence*)received_data,
                                         sample_infos,
                                         max_samples,
                                         previous_handle,
                                         sample_states, 
                                         view_states, 
                                         instance_states);
}


/******************************************************************/
    
ReturnCode_t
GenerationEventProfileDataReader::read_next_instance_w_condition( GenerationEventProfilePtrSeq     * received_data,
                                                   SampleInfoSeq    * sample_infos,
                                                   int                max_samples,
                                                   InstanceHandle_t   previous_handle,
                                                   ReadCondition *    a_condition)
{
  return DataReader::read_next_instance_w_condition( (Sequence*)received_data,
                                                     sample_infos,
                                                     max_samples,
                                                     previous_handle,
                                                     a_condition);
}


/******************************************************************/
    
ReturnCode_t 
GenerationEventProfileDataReader::take_next_instance_w_condition( GenerationEventProfilePtrSeq     * received_data,
                                                   SampleInfoSeq    * sample_infos,
                                                   int                max_samples,
                                                   InstanceHandle_t   previous_handle,
                                                   ReadCondition *    a_condition)
{
  return DataReader::take_next_instance_w_condition( (Sequence*)received_data,
                                                     sample_infos,
                                                     max_samples,
                                                     previous_handle,
                                                     a_condition);
}


/******************************************************************/
    
ReturnCode_t
GenerationEventProfileDataReader::return_loan( GenerationEventProfilePtrSeq   * received_data,
                                SampleInfoSeq  * sample_infos)
{
  return DataReader::return_loan( (Sequence*)received_data, sample_infos);
}


/******************************************************************/

ReturnCode_t
GenerationEventProfileDataReader::get_key_value( GenerationEventProfile            * key_holder, 
                                  InstanceHandle_t  handle)
{
  if ( ! key_holder )
      return RETCODE_BAD_PARAMETER;

  /* key: use DR to get it */
  return DataReader::get_key_value(  key_holder, handle );
}


/******************************************************************/
/* openfmb::generationmodule:: */
InstanceHandle_t 
GenerationEventProfileDataReader::lookup_instance( GenerationEventProfile       * instance_data)
{
  if ( ! instance_data )
      return HANDLE_NIL;

  /* Complex key: use DR to find it */
  return DataReader::lookup_instance(  instance_data );
}


}  /* namespace generationmodule */
/* END SCOPE: generationmodule */
/* START SCOPE: loadmodule */

namespace loadmodule {


/******************************************************************
 * openfmb::loadmodule:: DataReader Ops
 *****************************************************************/

/******************************************************************/
LoadEventProfileDataReader::LoadEventProfileDataReader()
{
}

/******************************************************************/
ReturnCode_t 
LoadEventProfileDataReader::read( LoadEventProfilePtrSeq    * received_data,
                         SampleInfoSeq   * sample_infos,
                         int               max_samples,
                         SampleStateMask   sample_states, 
                         ViewStateMask     view_states, 
                         InstanceStateMask instance_states)
{
  return DataReader::read( (Sequence*)received_data, 
			    sample_infos, 
			    max_samples, 
			    sample_states, 
			    view_states, 
			    instance_states );
}
  

/******************************************************************/

ReturnCode_t
LoadEventProfileDataReader::take( LoadEventProfilePtrSeq     * received_data,
                         SampleInfoSeq    * sample_infos,
                         int                max_samples,
                         SampleStateMask    sample_states, 
                         ViewStateMask      view_states, 
                         InstanceStateMask  instance_states)
{
  return DataReader::take( (Sequence*)received_data,
                           sample_infos,
                           max_samples,
                           sample_states, 
                           view_states, 
                           instance_states);
}


/******************************************************************/

ReturnCode_t 
LoadEventProfileDataReader::read_w_condition( LoadEventProfilePtrSeq  * received_data,
                                     SampleInfoSeq * sample_infos,
                                     int             max_samples,
                                     ReadCondition * a_condition)
{
  return DataReader::read_w_condition( (Sequence*)received_data,
                                       sample_infos,
                                       max_samples,
                                       a_condition);
}


/******************************************************************/
    
ReturnCode_t
LoadEventProfileDataReader::take_w_condition( LoadEventProfilePtrSeq   * received_data,
                                     SampleInfoSeq  * sample_infos,
                                     int              max_samples,
                                     ReadCondition *  a_condition)
{
  return DataReader::take_w_condition( (Sequence*)received_data,
                                       sample_infos,
                                       max_samples,
                                       a_condition);
}


/******************************************************************/
    
ReturnCode_t
LoadEventProfileDataReader::read_next_sample( LoadEventProfile     * received_data,
                                  SampleInfo     * sample_info)
{
  return DataReader::read_next_sample( (void*)received_data,
                                       sample_info);
}


/******************************************************************/
    
ReturnCode_t
LoadEventProfileDataReader::take_next_sample( LoadEventProfile      * received_data,
                                     SampleInfo      * sample_info)
{
  return DataReader::take_next_sample( (void*) received_data,
                                       sample_info);
}


/******************************************************************/
    
ReturnCode_t
LoadEventProfileDataReader::read_instance( LoadEventProfilePtrSeq       * received_data,
                                  SampleInfoSeq    * sample_infos,
                                  int                max_samples,
                                  InstanceHandle_t   a_handle,
                                  SampleStateMask    sample_states, 
                                  ViewStateMask      view_states, 
                                  InstanceStateMask  instance_states)
{
  return DataReader::read_instance( (Sequence*)received_data, 
                                    sample_infos, 
                                    max_samples, 
                                    a_handle, 
                                    sample_states, 
                                    view_states, 
                                    instance_states );
}


/******************************************************************/
    
ReturnCode_t
LoadEventProfileDataReader::take_instance( LoadEventProfilePtrSeq    * received_data,
                                  SampleInfoSeq   * sample_infos,
                                  int               max_samples,
                                  InstanceHandle_t  a_handle,
                                  SampleStateMask   sample_states, 
                                  ViewStateMask     view_states, 
                                  InstanceStateMask instance_states)
{
  return DataReader::take_instance( (Sequence*)received_data,
                                    sample_infos,
                                    max_samples,
                                    a_handle,
                                    sample_states, 
                                    view_states, 
                                    instance_states);
}


/******************************************************************/
    
ReturnCode_t
LoadEventProfileDataReader::read_next_instance( LoadEventProfilePtrSeq    * received_data,
                                       SampleInfoSeq   * sample_infos,
                                       int               max_samples,
                                       InstanceHandle_t  previous_handle,
                                       SampleStateMask   sample_states, 
                                       ViewStateMask     view_states, 
                                       InstanceStateMask instance_states)
{
  return DataReader::read_next_instance( (Sequence*)received_data,
                                         sample_infos,
                                         max_samples,
                                         previous_handle,
                                         sample_states, 
                                         view_states, 
                                         instance_states);
}


/******************************************************************/

ReturnCode_t
LoadEventProfileDataReader::take_next_instance( LoadEventProfilePtrSeq     * received_data,
                                       SampleInfoSeq    * sample_infos,
                                       int                max_samples,
                                       InstanceHandle_t   previous_handle,
                                       SampleStateMask    sample_states, 
                                       ViewStateMask      view_states, 
                                       InstanceStateMask  instance_states)
{
  return DataReader::take_next_instance( (Sequence*)received_data,
                                         sample_infos,
                                         max_samples,
                                         previous_handle,
                                         sample_states, 
                                         view_states, 
                                         instance_states);
}


/******************************************************************/
    
ReturnCode_t
LoadEventProfileDataReader::read_next_instance_w_condition( LoadEventProfilePtrSeq     * received_data,
                                                   SampleInfoSeq    * sample_infos,
                                                   int                max_samples,
                                                   InstanceHandle_t   previous_handle,
                                                   ReadCondition *    a_condition)
{
  return DataReader::read_next_instance_w_condition( (Sequence*)received_data,
                                                     sample_infos,
                                                     max_samples,
                                                     previous_handle,
                                                     a_condition);
}


/******************************************************************/
    
ReturnCode_t 
LoadEventProfileDataReader::take_next_instance_w_condition( LoadEventProfilePtrSeq     * received_data,
                                                   SampleInfoSeq    * sample_infos,
                                                   int                max_samples,
                                                   InstanceHandle_t   previous_handle,
                                                   ReadCondition *    a_condition)
{
  return DataReader::take_next_instance_w_condition( (Sequence*)received_data,
                                                     sample_infos,
                                                     max_samples,
                                                     previous_handle,
                                                     a_condition);
}


/******************************************************************/
    
ReturnCode_t
LoadEventProfileDataReader::return_loan( LoadEventProfilePtrSeq   * received_data,
                                SampleInfoSeq  * sample_infos)
{
  return DataReader::return_loan( (Sequence*)received_data, sample_infos);
}


/******************************************************************/

ReturnCode_t
LoadEventProfileDataReader::get_key_value( LoadEventProfile            * key_holder, 
                                  InstanceHandle_t  handle)
{
  if ( ! key_holder )
      return RETCODE_BAD_PARAMETER;

  /* key: use DR to get it */
  return DataReader::get_key_value(  key_holder, handle );
}


/******************************************************************/
/* openfmb::loadmodule:: */
InstanceHandle_t 
LoadEventProfileDataReader::lookup_instance( LoadEventProfile       * instance_data)
{
  if ( ! instance_data )
      return HANDLE_NIL;

  /* Complex key: use DR to find it */
  return DataReader::lookup_instance(  instance_data );
}


/******************************************************************
 * openfmb::loadmodule:: DataReader Ops
 *****************************************************************/

/******************************************************************/
LoadReadingValueDataReader::LoadReadingValueDataReader()
{
}

/******************************************************************/
ReturnCode_t 
LoadReadingValueDataReader::read( LoadReadingValuePtrSeq    * received_data,
                         SampleInfoSeq   * sample_infos,
                         int               max_samples,
                         SampleStateMask   sample_states, 
                         ViewStateMask     view_states, 
                         InstanceStateMask instance_states)
{
  return DataReader::read( (Sequence*)received_data, 
			    sample_infos, 
			    max_samples, 
			    sample_states, 
			    view_states, 
			    instance_states );
}
  

/******************************************************************/

ReturnCode_t
LoadReadingValueDataReader::take( LoadReadingValuePtrSeq     * received_data,
                         SampleInfoSeq    * sample_infos,
                         int                max_samples,
                         SampleStateMask    sample_states, 
                         ViewStateMask      view_states, 
                         InstanceStateMask  instance_states)
{
  return DataReader::take( (Sequence*)received_data,
                           sample_infos,
                           max_samples,
                           sample_states, 
                           view_states, 
                           instance_states);
}


/******************************************************************/

ReturnCode_t 
LoadReadingValueDataReader::read_w_condition( LoadReadingValuePtrSeq  * received_data,
                                     SampleInfoSeq * sample_infos,
                                     int             max_samples,
                                     ReadCondition * a_condition)
{
  return DataReader::read_w_condition( (Sequence*)received_data,
                                       sample_infos,
                                       max_samples,
                                       a_condition);
}


/******************************************************************/
    
ReturnCode_t
LoadReadingValueDataReader::take_w_condition( LoadReadingValuePtrSeq   * received_data,
                                     SampleInfoSeq  * sample_infos,
                                     int              max_samples,
                                     ReadCondition *  a_condition)
{
  return DataReader::take_w_condition( (Sequence*)received_data,
                                       sample_infos,
                                       max_samples,
                                       a_condition);
}


/******************************************************************/
    
ReturnCode_t
LoadReadingValueDataReader::read_next_sample( LoadReadingValue     * received_data,
                                  SampleInfo     * sample_info)
{
  return DataReader::read_next_sample( (void*)received_data,
                                       sample_info);
}


/******************************************************************/
    
ReturnCode_t
LoadReadingValueDataReader::take_next_sample( LoadReadingValue      * received_data,
                                     SampleInfo      * sample_info)
{
  return DataReader::take_next_sample( (void*) received_data,
                                       sample_info);
}


/******************************************************************/
    
ReturnCode_t
LoadReadingValueDataReader::read_instance( LoadReadingValuePtrSeq       * received_data,
                                  SampleInfoSeq    * sample_infos,
                                  int                max_samples,
                                  InstanceHandle_t   a_handle,
                                  SampleStateMask    sample_states, 
                                  ViewStateMask      view_states, 
                                  InstanceStateMask  instance_states)
{
  return DataReader::read_instance( (Sequence*)received_data, 
                                    sample_infos, 
                                    max_samples, 
                                    a_handle, 
                                    sample_states, 
                                    view_states, 
                                    instance_states );
}


/******************************************************************/
    
ReturnCode_t
LoadReadingValueDataReader::take_instance( LoadReadingValuePtrSeq    * received_data,
                                  SampleInfoSeq   * sample_infos,
                                  int               max_samples,
                                  InstanceHandle_t  a_handle,
                                  SampleStateMask   sample_states, 
                                  ViewStateMask     view_states, 
                                  InstanceStateMask instance_states)
{
  return DataReader::take_instance( (Sequence*)received_data,
                                    sample_infos,
                                    max_samples,
                                    a_handle,
                                    sample_states, 
                                    view_states, 
                                    instance_states);
}


/******************************************************************/
    
ReturnCode_t
LoadReadingValueDataReader::read_next_instance( LoadReadingValuePtrSeq    * received_data,
                                       SampleInfoSeq   * sample_infos,
                                       int               max_samples,
                                       InstanceHandle_t  previous_handle,
                                       SampleStateMask   sample_states, 
                                       ViewStateMask     view_states, 
                                       InstanceStateMask instance_states)
{
  return DataReader::read_next_instance( (Sequence*)received_data,
                                         sample_infos,
                                         max_samples,
                                         previous_handle,
                                         sample_states, 
                                         view_states, 
                                         instance_states);
}


/******************************************************************/

ReturnCode_t
LoadReadingValueDataReader::take_next_instance( LoadReadingValuePtrSeq     * received_data,
                                       SampleInfoSeq    * sample_infos,
                                       int                max_samples,
                                       InstanceHandle_t   previous_handle,
                                       SampleStateMask    sample_states, 
                                       ViewStateMask      view_states, 
                                       InstanceStateMask  instance_states)
{
  return DataReader::take_next_instance( (Sequence*)received_data,
                                         sample_infos,
                                         max_samples,
                                         previous_handle,
                                         sample_states, 
                                         view_states, 
                                         instance_states);
}


/******************************************************************/
    
ReturnCode_t
LoadReadingValueDataReader::read_next_instance_w_condition( LoadReadingValuePtrSeq     * received_data,
                                                   SampleInfoSeq    * sample_infos,
                                                   int                max_samples,
                                                   InstanceHandle_t   previous_handle,
                                                   ReadCondition *    a_condition)
{
  return DataReader::read_next_instance_w_condition( (Sequence*)received_data,
                                                     sample_infos,
                                                     max_samples,
                                                     previous_handle,
                                                     a_condition);
}


/******************************************************************/
    
ReturnCode_t 
LoadReadingValueDataReader::take_next_instance_w_condition( LoadReadingValuePtrSeq     * received_data,
                                                   SampleInfoSeq    * sample_infos,
                                                   int                max_samples,
                                                   InstanceHandle_t   previous_handle,
                                                   ReadCondition *    a_condition)
{
  return DataReader::take_next_instance_w_condition( (Sequence*)received_data,
                                                     sample_infos,
                                                     max_samples,
                                                     previous_handle,
                                                     a_condition);
}


/******************************************************************/
    
ReturnCode_t
LoadReadingValueDataReader::return_loan( LoadReadingValuePtrSeq   * received_data,
                                SampleInfoSeq  * sample_infos)
{
  return DataReader::return_loan( (Sequence*)received_data, sample_infos);
}


/******************************************************************/

ReturnCode_t
LoadReadingValueDataReader::get_key_value( LoadReadingValue            * key_holder, 
                                  InstanceHandle_t  handle)
{
  if ( ! key_holder )
      return RETCODE_BAD_PARAMETER;

  /* No keys: no op */
  CDX_UNUSED(handle);
  key_holder->clear();
  return DDS::RETCODE_OK;
}


/******************************************************************/
/* openfmb::loadmodule:: */
InstanceHandle_t 
LoadReadingValueDataReader::lookup_instance( LoadReadingValue       * instance_data)
{
  if ( ! instance_data )
      return HANDLE_NIL;

  /* No keys */
  return DDS::HANDLE_DEFAULT;
}


}  /* namespace loadmodule */
/* END SCOPE: loadmodule */
/* START SCOPE: reclosermodule */

namespace reclosermodule {


/******************************************************************
 * openfmb::reclosermodule:: DataReader Ops
 *****************************************************************/

/******************************************************************/
RecloserControlProfileDataReader::RecloserControlProfileDataReader()
{
}

/******************************************************************/
ReturnCode_t 
RecloserControlProfileDataReader::read( RecloserControlProfilePtrSeq    * received_data,
                         SampleInfoSeq   * sample_infos,
                         int               max_samples,
                         SampleStateMask   sample_states, 
                         ViewStateMask     view_states, 
                         InstanceStateMask instance_states)
{
  return DataReader::read( (Sequence*)received_data, 
			    sample_infos, 
			    max_samples, 
			    sample_states, 
			    view_states, 
			    instance_states );
}
  

/******************************************************************/

ReturnCode_t
RecloserControlProfileDataReader::take( RecloserControlProfilePtrSeq     * received_data,
                         SampleInfoSeq    * sample_infos,
                         int                max_samples,
                         SampleStateMask    sample_states, 
                         ViewStateMask      view_states, 
                         InstanceStateMask  instance_states)
{
  return DataReader::take( (Sequence*)received_data,
                           sample_infos,
                           max_samples,
                           sample_states, 
                           view_states, 
                           instance_states);
}


/******************************************************************/

ReturnCode_t 
RecloserControlProfileDataReader::read_w_condition( RecloserControlProfilePtrSeq  * received_data,
                                     SampleInfoSeq * sample_infos,
                                     int             max_samples,
                                     ReadCondition * a_condition)
{
  return DataReader::read_w_condition( (Sequence*)received_data,
                                       sample_infos,
                                       max_samples,
                                       a_condition);
}


/******************************************************************/
    
ReturnCode_t
RecloserControlProfileDataReader::take_w_condition( RecloserControlProfilePtrSeq   * received_data,
                                     SampleInfoSeq  * sample_infos,
                                     int              max_samples,
                                     ReadCondition *  a_condition)
{
  return DataReader::take_w_condition( (Sequence*)received_data,
                                       sample_infos,
                                       max_samples,
                                       a_condition);
}


/******************************************************************/
    
ReturnCode_t
RecloserControlProfileDataReader::read_next_sample( RecloserControlProfile     * received_data,
                                  SampleInfo     * sample_info)
{
  return DataReader::read_next_sample( (void*)received_data,
                                       sample_info);
}


/******************************************************************/
    
ReturnCode_t
RecloserControlProfileDataReader::take_next_sample( RecloserControlProfile      * received_data,
                                     SampleInfo      * sample_info)
{
  return DataReader::take_next_sample( (void*) received_data,
                                       sample_info);
}


/******************************************************************/
    
ReturnCode_t
RecloserControlProfileDataReader::read_instance( RecloserControlProfilePtrSeq       * received_data,
                                  SampleInfoSeq    * sample_infos,
                                  int                max_samples,
                                  InstanceHandle_t   a_handle,
                                  SampleStateMask    sample_states, 
                                  ViewStateMask      view_states, 
                                  InstanceStateMask  instance_states)
{
  return DataReader::read_instance( (Sequence*)received_data, 
                                    sample_infos, 
                                    max_samples, 
                                    a_handle, 
                                    sample_states, 
                                    view_states, 
                                    instance_states );
}


/******************************************************************/
    
ReturnCode_t
RecloserControlProfileDataReader::take_instance( RecloserControlProfilePtrSeq    * received_data,
                                  SampleInfoSeq   * sample_infos,
                                  int               max_samples,
                                  InstanceHandle_t  a_handle,
                                  SampleStateMask   sample_states, 
                                  ViewStateMask     view_states, 
                                  InstanceStateMask instance_states)
{
  return DataReader::take_instance( (Sequence*)received_data,
                                    sample_infos,
                                    max_samples,
                                    a_handle,
                                    sample_states, 
                                    view_states, 
                                    instance_states);
}


/******************************************************************/
    
ReturnCode_t
RecloserControlProfileDataReader::read_next_instance( RecloserControlProfilePtrSeq    * received_data,
                                       SampleInfoSeq   * sample_infos,
                                       int               max_samples,
                                       InstanceHandle_t  previous_handle,
                                       SampleStateMask   sample_states, 
                                       ViewStateMask     view_states, 
                                       InstanceStateMask instance_states)
{
  return DataReader::read_next_instance( (Sequence*)received_data,
                                         sample_infos,
                                         max_samples,
                                         previous_handle,
                                         sample_states, 
                                         view_states, 
                                         instance_states);
}


/******************************************************************/

ReturnCode_t
RecloserControlProfileDataReader::take_next_instance( RecloserControlProfilePtrSeq     * received_data,
                                       SampleInfoSeq    * sample_infos,
                                       int                max_samples,
                                       InstanceHandle_t   previous_handle,
                                       SampleStateMask    sample_states, 
                                       ViewStateMask      view_states, 
                                       InstanceStateMask  instance_states)
{
  return DataReader::take_next_instance( (Sequence*)received_data,
                                         sample_infos,
                                         max_samples,
                                         previous_handle,
                                         sample_states, 
                                         view_states, 
                                         instance_states);
}


/******************************************************************/
    
ReturnCode_t
RecloserControlProfileDataReader::read_next_instance_w_condition( RecloserControlProfilePtrSeq     * received_data,
                                                   SampleInfoSeq    * sample_infos,
                                                   int                max_samples,
                                                   InstanceHandle_t   previous_handle,
                                                   ReadCondition *    a_condition)
{
  return DataReader::read_next_instance_w_condition( (Sequence*)received_data,
                                                     sample_infos,
                                                     max_samples,
                                                     previous_handle,
                                                     a_condition);
}


/******************************************************************/
    
ReturnCode_t 
RecloserControlProfileDataReader::take_next_instance_w_condition( RecloserControlProfilePtrSeq     * received_data,
                                                   SampleInfoSeq    * sample_infos,
                                                   int                max_samples,
                                                   InstanceHandle_t   previous_handle,
                                                   ReadCondition *    a_condition)
{
  return DataReader::take_next_instance_w_condition( (Sequence*)received_data,
                                                     sample_infos,
                                                     max_samples,
                                                     previous_handle,
                                                     a_condition);
}


/******************************************************************/
    
ReturnCode_t
RecloserControlProfileDataReader::return_loan( RecloserControlProfilePtrSeq   * received_data,
                                SampleInfoSeq  * sample_infos)
{
  return DataReader::return_loan( (Sequence*)received_data, sample_infos);
}


/******************************************************************/

ReturnCode_t
RecloserControlProfileDataReader::get_key_value( RecloserControlProfile            * key_holder, 
                                  InstanceHandle_t  handle)
{
  if ( ! key_holder )
      return RETCODE_BAD_PARAMETER;

  /* key: use DR to get it */
  return DataReader::get_key_value(  key_holder, handle );
}


/******************************************************************/
/* openfmb::reclosermodule:: */
InstanceHandle_t 
RecloserControlProfileDataReader::lookup_instance( RecloserControlProfile       * instance_data)
{
  if ( ! instance_data )
      return HANDLE_NIL;

  /* Complex key: use DR to find it */
  return DataReader::lookup_instance(  instance_data );
}


/******************************************************************
 * openfmb::reclosermodule:: DataReader Ops
 *****************************************************************/

/******************************************************************/
RecloserEventProfileDataReader::RecloserEventProfileDataReader()
{
}

/******************************************************************/
ReturnCode_t 
RecloserEventProfileDataReader::read( RecloserEventProfilePtrSeq    * received_data,
                         SampleInfoSeq   * sample_infos,
                         int               max_samples,
                         SampleStateMask   sample_states, 
                         ViewStateMask     view_states, 
                         InstanceStateMask instance_states)
{
  return DataReader::read( (Sequence*)received_data, 
			    sample_infos, 
			    max_samples, 
			    sample_states, 
			    view_states, 
			    instance_states );
}
  

/******************************************************************/

ReturnCode_t
RecloserEventProfileDataReader::take( RecloserEventProfilePtrSeq     * received_data,
                         SampleInfoSeq    * sample_infos,
                         int                max_samples,
                         SampleStateMask    sample_states, 
                         ViewStateMask      view_states, 
                         InstanceStateMask  instance_states)
{
  return DataReader::take( (Sequence*)received_data,
                           sample_infos,
                           max_samples,
                           sample_states, 
                           view_states, 
                           instance_states);
}


/******************************************************************/

ReturnCode_t 
RecloserEventProfileDataReader::read_w_condition( RecloserEventProfilePtrSeq  * received_data,
                                     SampleInfoSeq * sample_infos,
                                     int             max_samples,
                                     ReadCondition * a_condition)
{
  return DataReader::read_w_condition( (Sequence*)received_data,
                                       sample_infos,
                                       max_samples,
                                       a_condition);
}


/******************************************************************/
    
ReturnCode_t
RecloserEventProfileDataReader::take_w_condition( RecloserEventProfilePtrSeq   * received_data,
                                     SampleInfoSeq  * sample_infos,
                                     int              max_samples,
                                     ReadCondition *  a_condition)
{
  return DataReader::take_w_condition( (Sequence*)received_data,
                                       sample_infos,
                                       max_samples,
                                       a_condition);
}


/******************************************************************/
    
ReturnCode_t
RecloserEventProfileDataReader::read_next_sample( RecloserEventProfile     * received_data,
                                  SampleInfo     * sample_info)
{
  return DataReader::read_next_sample( (void*)received_data,
                                       sample_info);
}


/******************************************************************/
    
ReturnCode_t
RecloserEventProfileDataReader::take_next_sample( RecloserEventProfile      * received_data,
                                     SampleInfo      * sample_info)
{
  return DataReader::take_next_sample( (void*) received_data,
                                       sample_info);
}


/******************************************************************/
    
ReturnCode_t
RecloserEventProfileDataReader::read_instance( RecloserEventProfilePtrSeq       * received_data,
                                  SampleInfoSeq    * sample_infos,
                                  int                max_samples,
                                  InstanceHandle_t   a_handle,
                                  SampleStateMask    sample_states, 
                                  ViewStateMask      view_states, 
                                  InstanceStateMask  instance_states)
{
  return DataReader::read_instance( (Sequence*)received_data, 
                                    sample_infos, 
                                    max_samples, 
                                    a_handle, 
                                    sample_states, 
                                    view_states, 
                                    instance_states );
}


/******************************************************************/
    
ReturnCode_t
RecloserEventProfileDataReader::take_instance( RecloserEventProfilePtrSeq    * received_data,
                                  SampleInfoSeq   * sample_infos,
                                  int               max_samples,
                                  InstanceHandle_t  a_handle,
                                  SampleStateMask   sample_states, 
                                  ViewStateMask     view_states, 
                                  InstanceStateMask instance_states)
{
  return DataReader::take_instance( (Sequence*)received_data,
                                    sample_infos,
                                    max_samples,
                                    a_handle,
                                    sample_states, 
                                    view_states, 
                                    instance_states);
}


/******************************************************************/
    
ReturnCode_t
RecloserEventProfileDataReader::read_next_instance( RecloserEventProfilePtrSeq    * received_data,
                                       SampleInfoSeq   * sample_infos,
                                       int               max_samples,
                                       InstanceHandle_t  previous_handle,
                                       SampleStateMask   sample_states, 
                                       ViewStateMask     view_states, 
                                       InstanceStateMask instance_states)
{
  return DataReader::read_next_instance( (Sequence*)received_data,
                                         sample_infos,
                                         max_samples,
                                         previous_handle,
                                         sample_states, 
                                         view_states, 
                                         instance_states);
}


/******************************************************************/

ReturnCode_t
RecloserEventProfileDataReader::take_next_instance( RecloserEventProfilePtrSeq     * received_data,
                                       SampleInfoSeq    * sample_infos,
                                       int                max_samples,
                                       InstanceHandle_t   previous_handle,
                                       SampleStateMask    sample_states, 
                                       ViewStateMask      view_states, 
                                       InstanceStateMask  instance_states)
{
  return DataReader::take_next_instance( (Sequence*)received_data,
                                         sample_infos,
                                         max_samples,
                                         previous_handle,
                                         sample_states, 
                                         view_states, 
                                         instance_states);
}


/******************************************************************/
    
ReturnCode_t
RecloserEventProfileDataReader::read_next_instance_w_condition( RecloserEventProfilePtrSeq     * received_data,
                                                   SampleInfoSeq    * sample_infos,
                                                   int                max_samples,
                                                   InstanceHandle_t   previous_handle,
                                                   ReadCondition *    a_condition)
{
  return DataReader::read_next_instance_w_condition( (Sequence*)received_data,
                                                     sample_infos,
                                                     max_samples,
                                                     previous_handle,
                                                     a_condition);
}


/******************************************************************/
    
ReturnCode_t 
RecloserEventProfileDataReader::take_next_instance_w_condition( RecloserEventProfilePtrSeq     * received_data,
                                                   SampleInfoSeq    * sample_infos,
                                                   int                max_samples,
                                                   InstanceHandle_t   previous_handle,
                                                   ReadCondition *    a_condition)
{
  return DataReader::take_next_instance_w_condition( (Sequence*)received_data,
                                                     sample_infos,
                                                     max_samples,
                                                     previous_handle,
                                                     a_condition);
}


/******************************************************************/
    
ReturnCode_t
RecloserEventProfileDataReader::return_loan( RecloserEventProfilePtrSeq   * received_data,
                                SampleInfoSeq  * sample_infos)
{
  return DataReader::return_loan( (Sequence*)received_data, sample_infos);
}


/******************************************************************/

ReturnCode_t
RecloserEventProfileDataReader::get_key_value( RecloserEventProfile            * key_holder, 
                                  InstanceHandle_t  handle)
{
  if ( ! key_holder )
      return RETCODE_BAD_PARAMETER;

  /* key: use DR to get it */
  return DataReader::get_key_value(  key_holder, handle );
}


/******************************************************************/
/* openfmb::reclosermodule:: */
InstanceHandle_t 
RecloserEventProfileDataReader::lookup_instance( RecloserEventProfile       * instance_data)
{
  if ( ! instance_data )
      return HANDLE_NIL;

  /* Complex key: use DR to find it */
  return DataReader::lookup_instance(  instance_data );
}


/******************************************************************
 * openfmb::reclosermodule:: DataReader Ops
 *****************************************************************/

/******************************************************************/
RecloserReadingValueDataReader::RecloserReadingValueDataReader()
{
}

/******************************************************************/
ReturnCode_t 
RecloserReadingValueDataReader::read( RecloserReadingValuePtrSeq    * received_data,
                         SampleInfoSeq   * sample_infos,
                         int               max_samples,
                         SampleStateMask   sample_states, 
                         ViewStateMask     view_states, 
                         InstanceStateMask instance_states)
{
  return DataReader::read( (Sequence*)received_data, 
			    sample_infos, 
			    max_samples, 
			    sample_states, 
			    view_states, 
			    instance_states );
}
  

/******************************************************************/

ReturnCode_t
RecloserReadingValueDataReader::take( RecloserReadingValuePtrSeq     * received_data,
                         SampleInfoSeq    * sample_infos,
                         int                max_samples,
                         SampleStateMask    sample_states, 
                         ViewStateMask      view_states, 
                         InstanceStateMask  instance_states)
{
  return DataReader::take( (Sequence*)received_data,
                           sample_infos,
                           max_samples,
                           sample_states, 
                           view_states, 
                           instance_states);
}


/******************************************************************/

ReturnCode_t 
RecloserReadingValueDataReader::read_w_condition( RecloserReadingValuePtrSeq  * received_data,
                                     SampleInfoSeq * sample_infos,
                                     int             max_samples,
                                     ReadCondition * a_condition)
{
  return DataReader::read_w_condition( (Sequence*)received_data,
                                       sample_infos,
                                       max_samples,
                                       a_condition);
}


/******************************************************************/
    
ReturnCode_t
RecloserReadingValueDataReader::take_w_condition( RecloserReadingValuePtrSeq   * received_data,
                                     SampleInfoSeq  * sample_infos,
                                     int              max_samples,
                                     ReadCondition *  a_condition)
{
  return DataReader::take_w_condition( (Sequence*)received_data,
                                       sample_infos,
                                       max_samples,
                                       a_condition);
}


/******************************************************************/
    
ReturnCode_t
RecloserReadingValueDataReader::read_next_sample( RecloserReadingValue     * received_data,
                                  SampleInfo     * sample_info)
{
  return DataReader::read_next_sample( (void*)received_data,
                                       sample_info);
}


/******************************************************************/
    
ReturnCode_t
RecloserReadingValueDataReader::take_next_sample( RecloserReadingValue      * received_data,
                                     SampleInfo      * sample_info)
{
  return DataReader::take_next_sample( (void*) received_data,
                                       sample_info);
}


/******************************************************************/
    
ReturnCode_t
RecloserReadingValueDataReader::read_instance( RecloserReadingValuePtrSeq       * received_data,
                                  SampleInfoSeq    * sample_infos,
                                  int                max_samples,
                                  InstanceHandle_t   a_handle,
                                  SampleStateMask    sample_states, 
                                  ViewStateMask      view_states, 
                                  InstanceStateMask  instance_states)
{
  return DataReader::read_instance( (Sequence*)received_data, 
                                    sample_infos, 
                                    max_samples, 
                                    a_handle, 
                                    sample_states, 
                                    view_states, 
                                    instance_states );
}


/******************************************************************/
    
ReturnCode_t
RecloserReadingValueDataReader::take_instance( RecloserReadingValuePtrSeq    * received_data,
                                  SampleInfoSeq   * sample_infos,
                                  int               max_samples,
                                  InstanceHandle_t  a_handle,
                                  SampleStateMask   sample_states, 
                                  ViewStateMask     view_states, 
                                  InstanceStateMask instance_states)
{
  return DataReader::take_instance( (Sequence*)received_data,
                                    sample_infos,
                                    max_samples,
                                    a_handle,
                                    sample_states, 
                                    view_states, 
                                    instance_states);
}


/******************************************************************/
    
ReturnCode_t
RecloserReadingValueDataReader::read_next_instance( RecloserReadingValuePtrSeq    * received_data,
                                       SampleInfoSeq   * sample_infos,
                                       int               max_samples,
                                       InstanceHandle_t  previous_handle,
                                       SampleStateMask   sample_states, 
                                       ViewStateMask     view_states, 
                                       InstanceStateMask instance_states)
{
  return DataReader::read_next_instance( (Sequence*)received_data,
                                         sample_infos,
                                         max_samples,
                                         previous_handle,
                                         sample_states, 
                                         view_states, 
                                         instance_states);
}


/******************************************************************/

ReturnCode_t
RecloserReadingValueDataReader::take_next_instance( RecloserReadingValuePtrSeq     * received_data,
                                       SampleInfoSeq    * sample_infos,
                                       int                max_samples,
                                       InstanceHandle_t   previous_handle,
                                       SampleStateMask    sample_states, 
                                       ViewStateMask      view_states, 
                                       InstanceStateMask  instance_states)
{
  return DataReader::take_next_instance( (Sequence*)received_data,
                                         sample_infos,
                                         max_samples,
                                         previous_handle,
                                         sample_states, 
                                         view_states, 
                                         instance_states);
}


/******************************************************************/
    
ReturnCode_t
RecloserReadingValueDataReader::read_next_instance_w_condition( RecloserReadingValuePtrSeq     * received_data,
                                                   SampleInfoSeq    * sample_infos,
                                                   int                max_samples,
                                                   InstanceHandle_t   previous_handle,
                                                   ReadCondition *    a_condition)
{
  return DataReader::read_next_instance_w_condition( (Sequence*)received_data,
                                                     sample_infos,
                                                     max_samples,
                                                     previous_handle,
                                                     a_condition);
}


/******************************************************************/
    
ReturnCode_t 
RecloserReadingValueDataReader::take_next_instance_w_condition( RecloserReadingValuePtrSeq     * received_data,
                                                   SampleInfoSeq    * sample_infos,
                                                   int                max_samples,
                                                   InstanceHandle_t   previous_handle,
                                                   ReadCondition *    a_condition)
{
  return DataReader::take_next_instance_w_condition( (Sequence*)received_data,
                                                     sample_infos,
                                                     max_samples,
                                                     previous_handle,
                                                     a_condition);
}


/******************************************************************/
    
ReturnCode_t
RecloserReadingValueDataReader::return_loan( RecloserReadingValuePtrSeq   * received_data,
                                SampleInfoSeq  * sample_infos)
{
  return DataReader::return_loan( (Sequence*)received_data, sample_infos);
}


/******************************************************************/

ReturnCode_t
RecloserReadingValueDataReader::get_key_value( RecloserReadingValue            * key_holder, 
                                  InstanceHandle_t  handle)
{
  if ( ! key_holder )
      return RETCODE_BAD_PARAMETER;

  /* No keys: no op */
  CDX_UNUSED(handle);
  key_holder->clear();
  return DDS::RETCODE_OK;
}


/******************************************************************/
/* openfmb::reclosermodule:: */
InstanceHandle_t 
RecloserReadingValueDataReader::lookup_instance( RecloserReadingValue       * instance_data)
{
  if ( ! instance_data )
      return HANDLE_NIL;

  /* No keys */
  return DDS::HANDLE_DEFAULT;
}


/******************************************************************
 * openfmb::reclosermodule:: DataReader Ops
 *****************************************************************/

/******************************************************************/
RecloserStatusProfileDataReader::RecloserStatusProfileDataReader()
{
}

/******************************************************************/
ReturnCode_t 
RecloserStatusProfileDataReader::read( RecloserStatusProfilePtrSeq    * received_data,
                         SampleInfoSeq   * sample_infos,
                         int               max_samples,
                         SampleStateMask   sample_states, 
                         ViewStateMask     view_states, 
                         InstanceStateMask instance_states)
{
  return DataReader::read( (Sequence*)received_data, 
			    sample_infos, 
			    max_samples, 
			    sample_states, 
			    view_states, 
			    instance_states );
}
  

/******************************************************************/

ReturnCode_t
RecloserStatusProfileDataReader::take( RecloserStatusProfilePtrSeq     * received_data,
                         SampleInfoSeq    * sample_infos,
                         int                max_samples,
                         SampleStateMask    sample_states, 
                         ViewStateMask      view_states, 
                         InstanceStateMask  instance_states)
{
  return DataReader::take( (Sequence*)received_data,
                           sample_infos,
                           max_samples,
                           sample_states, 
                           view_states, 
                           instance_states);
}


/******************************************************************/

ReturnCode_t 
RecloserStatusProfileDataReader::read_w_condition( RecloserStatusProfilePtrSeq  * received_data,
                                     SampleInfoSeq * sample_infos,
                                     int             max_samples,
                                     ReadCondition * a_condition)
{
  return DataReader::read_w_condition( (Sequence*)received_data,
                                       sample_infos,
                                       max_samples,
                                       a_condition);
}


/******************************************************************/
    
ReturnCode_t
RecloserStatusProfileDataReader::take_w_condition( RecloserStatusProfilePtrSeq   * received_data,
                                     SampleInfoSeq  * sample_infos,
                                     int              max_samples,
                                     ReadCondition *  a_condition)
{
  return DataReader::take_w_condition( (Sequence*)received_data,
                                       sample_infos,
                                       max_samples,
                                       a_condition);
}


/******************************************************************/
    
ReturnCode_t
RecloserStatusProfileDataReader::read_next_sample( RecloserStatusProfile     * received_data,
                                  SampleInfo     * sample_info)
{
  return DataReader::read_next_sample( (void*)received_data,
                                       sample_info);
}


/******************************************************************/
    
ReturnCode_t
RecloserStatusProfileDataReader::take_next_sample( RecloserStatusProfile      * received_data,
                                     SampleInfo      * sample_info)
{
  return DataReader::take_next_sample( (void*) received_data,
                                       sample_info);
}


/******************************************************************/
    
ReturnCode_t
RecloserStatusProfileDataReader::read_instance( RecloserStatusProfilePtrSeq       * received_data,
                                  SampleInfoSeq    * sample_infos,
                                  int                max_samples,
                                  InstanceHandle_t   a_handle,
                                  SampleStateMask    sample_states, 
                                  ViewStateMask      view_states, 
                                  InstanceStateMask  instance_states)
{
  return DataReader::read_instance( (Sequence*)received_data, 
                                    sample_infos, 
                                    max_samples, 
                                    a_handle, 
                                    sample_states, 
                                    view_states, 
                                    instance_states );
}


/******************************************************************/
    
ReturnCode_t
RecloserStatusProfileDataReader::take_instance( RecloserStatusProfilePtrSeq    * received_data,
                                  SampleInfoSeq   * sample_infos,
                                  int               max_samples,
                                  InstanceHandle_t  a_handle,
                                  SampleStateMask   sample_states, 
                                  ViewStateMask     view_states, 
                                  InstanceStateMask instance_states)
{
  return DataReader::take_instance( (Sequence*)received_data,
                                    sample_infos,
                                    max_samples,
                                    a_handle,
                                    sample_states, 
                                    view_states, 
                                    instance_states);
}


/******************************************************************/
    
ReturnCode_t
RecloserStatusProfileDataReader::read_next_instance( RecloserStatusProfilePtrSeq    * received_data,
                                       SampleInfoSeq   * sample_infos,
                                       int               max_samples,
                                       InstanceHandle_t  previous_handle,
                                       SampleStateMask   sample_states, 
                                       ViewStateMask     view_states, 
                                       InstanceStateMask instance_states)
{
  return DataReader::read_next_instance( (Sequence*)received_data,
                                         sample_infos,
                                         max_samples,
                                         previous_handle,
                                         sample_states, 
                                         view_states, 
                                         instance_states);
}


/******************************************************************/

ReturnCode_t
RecloserStatusProfileDataReader::take_next_instance( RecloserStatusProfilePtrSeq     * received_data,
                                       SampleInfoSeq    * sample_infos,
                                       int                max_samples,
                                       InstanceHandle_t   previous_handle,
                                       SampleStateMask    sample_states, 
                                       ViewStateMask      view_states, 
                                       InstanceStateMask  instance_states)
{
  return DataReader::take_next_instance( (Sequence*)received_data,
                                         sample_infos,
                                         max_samples,
                                         previous_handle,
                                         sample_states, 
                                         view_states, 
                                         instance_states);
}


/******************************************************************/
    
ReturnCode_t
RecloserStatusProfileDataReader::read_next_instance_w_condition( RecloserStatusProfilePtrSeq     * received_data,
                                                   SampleInfoSeq    * sample_infos,
                                                   int                max_samples,
                                                   InstanceHandle_t   previous_handle,
                                                   ReadCondition *    a_condition)
{
  return DataReader::read_next_instance_w_condition( (Sequence*)received_data,
                                                     sample_infos,
                                                     max_samples,
                                                     previous_handle,
                                                     a_condition);
}


/******************************************************************/
    
ReturnCode_t 
RecloserStatusProfileDataReader::take_next_instance_w_condition( RecloserStatusProfilePtrSeq     * received_data,
                                                   SampleInfoSeq    * sample_infos,
                                                   int                max_samples,
                                                   InstanceHandle_t   previous_handle,
                                                   ReadCondition *    a_condition)
{
  return DataReader::take_next_instance_w_condition( (Sequence*)received_data,
                                                     sample_infos,
                                                     max_samples,
                                                     previous_handle,
                                                     a_condition);
}


/******************************************************************/
    
ReturnCode_t
RecloserStatusProfileDataReader::return_loan( RecloserStatusProfilePtrSeq   * received_data,
                                SampleInfoSeq  * sample_infos)
{
  return DataReader::return_loan( (Sequence*)received_data, sample_infos);
}


/******************************************************************/

ReturnCode_t
RecloserStatusProfileDataReader::get_key_value( RecloserStatusProfile            * key_holder, 
                                  InstanceHandle_t  handle)
{
  if ( ! key_holder )
      return RETCODE_BAD_PARAMETER;

  /* key: use DR to get it */
  return DataReader::get_key_value(  key_holder, handle );
}


/******************************************************************/
/* openfmb::reclosermodule:: */
InstanceHandle_t 
RecloserStatusProfileDataReader::lookup_instance( RecloserStatusProfile       * instance_data)
{
  if ( ! instance_data )
      return HANDLE_NIL;

  /* Complex key: use DR to find it */
  return DataReader::lookup_instance(  instance_data );
}


}  /* namespace reclosermodule */
/* END SCOPE: reclosermodule */
/* START SCOPE: regulatormodule */

namespace regulatormodule {


/******************************************************************
 * openfmb::regulatormodule:: DataReader Ops
 *****************************************************************/

/******************************************************************/
RegulatorReadingValueDataReader::RegulatorReadingValueDataReader()
{
}

/******************************************************************/
ReturnCode_t 
RegulatorReadingValueDataReader::read( RegulatorReadingValuePtrSeq    * received_data,
                         SampleInfoSeq   * sample_infos,
                         int               max_samples,
                         SampleStateMask   sample_states, 
                         ViewStateMask     view_states, 
                         InstanceStateMask instance_states)
{
  return DataReader::read( (Sequence*)received_data, 
			    sample_infos, 
			    max_samples, 
			    sample_states, 
			    view_states, 
			    instance_states );
}
  

/******************************************************************/

ReturnCode_t
RegulatorReadingValueDataReader::take( RegulatorReadingValuePtrSeq     * received_data,
                         SampleInfoSeq    * sample_infos,
                         int                max_samples,
                         SampleStateMask    sample_states, 
                         ViewStateMask      view_states, 
                         InstanceStateMask  instance_states)
{
  return DataReader::take( (Sequence*)received_data,
                           sample_infos,
                           max_samples,
                           sample_states, 
                           view_states, 
                           instance_states);
}


/******************************************************************/

ReturnCode_t 
RegulatorReadingValueDataReader::read_w_condition( RegulatorReadingValuePtrSeq  * received_data,
                                     SampleInfoSeq * sample_infos,
                                     int             max_samples,
                                     ReadCondition * a_condition)
{
  return DataReader::read_w_condition( (Sequence*)received_data,
                                       sample_infos,
                                       max_samples,
                                       a_condition);
}


/******************************************************************/
    
ReturnCode_t
RegulatorReadingValueDataReader::take_w_condition( RegulatorReadingValuePtrSeq   * received_data,
                                     SampleInfoSeq  * sample_infos,
                                     int              max_samples,
                                     ReadCondition *  a_condition)
{
  return DataReader::take_w_condition( (Sequence*)received_data,
                                       sample_infos,
                                       max_samples,
                                       a_condition);
}


/******************************************************************/
    
ReturnCode_t
RegulatorReadingValueDataReader::read_next_sample( RegulatorReadingValue     * received_data,
                                  SampleInfo     * sample_info)
{
  return DataReader::read_next_sample( (void*)received_data,
                                       sample_info);
}


/******************************************************************/
    
ReturnCode_t
RegulatorReadingValueDataReader::take_next_sample( RegulatorReadingValue      * received_data,
                                     SampleInfo      * sample_info)
{
  return DataReader::take_next_sample( (void*) received_data,
                                       sample_info);
}


/******************************************************************/
    
ReturnCode_t
RegulatorReadingValueDataReader::read_instance( RegulatorReadingValuePtrSeq       * received_data,
                                  SampleInfoSeq    * sample_infos,
                                  int                max_samples,
                                  InstanceHandle_t   a_handle,
                                  SampleStateMask    sample_states, 
                                  ViewStateMask      view_states, 
                                  InstanceStateMask  instance_states)
{
  return DataReader::read_instance( (Sequence*)received_data, 
                                    sample_infos, 
                                    max_samples, 
                                    a_handle, 
                                    sample_states, 
                                    view_states, 
                                    instance_states );
}


/******************************************************************/
    
ReturnCode_t
RegulatorReadingValueDataReader::take_instance( RegulatorReadingValuePtrSeq    * received_data,
                                  SampleInfoSeq   * sample_infos,
                                  int               max_samples,
                                  InstanceHandle_t  a_handle,
                                  SampleStateMask   sample_states, 
                                  ViewStateMask     view_states, 
                                  InstanceStateMask instance_states)
{
  return DataReader::take_instance( (Sequence*)received_data,
                                    sample_infos,
                                    max_samples,
                                    a_handle,
                                    sample_states, 
                                    view_states, 
                                    instance_states);
}


/******************************************************************/
    
ReturnCode_t
RegulatorReadingValueDataReader::read_next_instance( RegulatorReadingValuePtrSeq    * received_data,
                                       SampleInfoSeq   * sample_infos,
                                       int               max_samples,
                                       InstanceHandle_t  previous_handle,
                                       SampleStateMask   sample_states, 
                                       ViewStateMask     view_states, 
                                       InstanceStateMask instance_states)
{
  return DataReader::read_next_instance( (Sequence*)received_data,
                                         sample_infos,
                                         max_samples,
                                         previous_handle,
                                         sample_states, 
                                         view_states, 
                                         instance_states);
}


/******************************************************************/

ReturnCode_t
RegulatorReadingValueDataReader::take_next_instance( RegulatorReadingValuePtrSeq     * received_data,
                                       SampleInfoSeq    * sample_infos,
                                       int                max_samples,
                                       InstanceHandle_t   previous_handle,
                                       SampleStateMask    sample_states, 
                                       ViewStateMask      view_states, 
                                       InstanceStateMask  instance_states)
{
  return DataReader::take_next_instance( (Sequence*)received_data,
                                         sample_infos,
                                         max_samples,
                                         previous_handle,
                                         sample_states, 
                                         view_states, 
                                         instance_states);
}


/******************************************************************/
    
ReturnCode_t
RegulatorReadingValueDataReader::read_next_instance_w_condition( RegulatorReadingValuePtrSeq     * received_data,
                                                   SampleInfoSeq    * sample_infos,
                                                   int                max_samples,
                                                   InstanceHandle_t   previous_handle,
                                                   ReadCondition *    a_condition)
{
  return DataReader::read_next_instance_w_condition( (Sequence*)received_data,
                                                     sample_infos,
                                                     max_samples,
                                                     previous_handle,
                                                     a_condition);
}


/******************************************************************/
    
ReturnCode_t 
RegulatorReadingValueDataReader::take_next_instance_w_condition( RegulatorReadingValuePtrSeq     * received_data,
                                                   SampleInfoSeq    * sample_infos,
                                                   int                max_samples,
                                                   InstanceHandle_t   previous_handle,
                                                   ReadCondition *    a_condition)
{
  return DataReader::take_next_instance_w_condition( (Sequence*)received_data,
                                                     sample_infos,
                                                     max_samples,
                                                     previous_handle,
                                                     a_condition);
}


/******************************************************************/
    
ReturnCode_t
RegulatorReadingValueDataReader::return_loan( RegulatorReadingValuePtrSeq   * received_data,
                                SampleInfoSeq  * sample_infos)
{
  return DataReader::return_loan( (Sequence*)received_data, sample_infos);
}


/******************************************************************/

ReturnCode_t
RegulatorReadingValueDataReader::get_key_value( RegulatorReadingValue            * key_holder, 
                                  InstanceHandle_t  handle)
{
  if ( ! key_holder )
      return RETCODE_BAD_PARAMETER;

  /* No keys: no op */
  CDX_UNUSED(handle);
  key_holder->clear();
  return DDS::RETCODE_OK;
}


/******************************************************************/
/* openfmb::regulatormodule:: */
InstanceHandle_t 
RegulatorReadingValueDataReader::lookup_instance( RegulatorReadingValue       * instance_data)
{
  if ( ! instance_data )
      return HANDLE_NIL;

  /* No keys */
  return DDS::HANDLE_DEFAULT;
}


}  /* namespace regulatormodule */
/* END SCOPE: regulatormodule */
/* START SCOPE: resourcemodule */

namespace resourcemodule {


/******************************************************************
 * openfmb::resourcemodule:: DataReader Ops
 *****************************************************************/

/******************************************************************/
ResourceReadingValueDataReader::ResourceReadingValueDataReader()
{
}

/******************************************************************/
ReturnCode_t 
ResourceReadingValueDataReader::read( ResourceReadingValuePtrSeq    * received_data,
                         SampleInfoSeq   * sample_infos,
                         int               max_samples,
                         SampleStateMask   sample_states, 
                         ViewStateMask     view_states, 
                         InstanceStateMask instance_states)
{
  return DataReader::read( (Sequence*)received_data, 
			    sample_infos, 
			    max_samples, 
			    sample_states, 
			    view_states, 
			    instance_states );
}
  

/******************************************************************/

ReturnCode_t
ResourceReadingValueDataReader::take( ResourceReadingValuePtrSeq     * received_data,
                         SampleInfoSeq    * sample_infos,
                         int                max_samples,
                         SampleStateMask    sample_states, 
                         ViewStateMask      view_states, 
                         InstanceStateMask  instance_states)
{
  return DataReader::take( (Sequence*)received_data,
                           sample_infos,
                           max_samples,
                           sample_states, 
                           view_states, 
                           instance_states);
}


/******************************************************************/

ReturnCode_t 
ResourceReadingValueDataReader::read_w_condition( ResourceReadingValuePtrSeq  * received_data,
                                     SampleInfoSeq * sample_infos,
                                     int             max_samples,
                                     ReadCondition * a_condition)
{
  return DataReader::read_w_condition( (Sequence*)received_data,
                                       sample_infos,
                                       max_samples,
                                       a_condition);
}


/******************************************************************/
    
ReturnCode_t
ResourceReadingValueDataReader::take_w_condition( ResourceReadingValuePtrSeq   * received_data,
                                     SampleInfoSeq  * sample_infos,
                                     int              max_samples,
                                     ReadCondition *  a_condition)
{
  return DataReader::take_w_condition( (Sequence*)received_data,
                                       sample_infos,
                                       max_samples,
                                       a_condition);
}


/******************************************************************/
    
ReturnCode_t
ResourceReadingValueDataReader::read_next_sample( ResourceReadingValue     * received_data,
                                  SampleInfo     * sample_info)
{
  return DataReader::read_next_sample( (void*)received_data,
                                       sample_info);
}


/******************************************************************/
    
ReturnCode_t
ResourceReadingValueDataReader::take_next_sample( ResourceReadingValue      * received_data,
                                     SampleInfo      * sample_info)
{
  return DataReader::take_next_sample( (void*) received_data,
                                       sample_info);
}


/******************************************************************/
    
ReturnCode_t
ResourceReadingValueDataReader::read_instance( ResourceReadingValuePtrSeq       * received_data,
                                  SampleInfoSeq    * sample_infos,
                                  int                max_samples,
                                  InstanceHandle_t   a_handle,
                                  SampleStateMask    sample_states, 
                                  ViewStateMask      view_states, 
                                  InstanceStateMask  instance_states)
{
  return DataReader::read_instance( (Sequence*)received_data, 
                                    sample_infos, 
                                    max_samples, 
                                    a_handle, 
                                    sample_states, 
                                    view_states, 
                                    instance_states );
}


/******************************************************************/
    
ReturnCode_t
ResourceReadingValueDataReader::take_instance( ResourceReadingValuePtrSeq    * received_data,
                                  SampleInfoSeq   * sample_infos,
                                  int               max_samples,
                                  InstanceHandle_t  a_handle,
                                  SampleStateMask   sample_states, 
                                  ViewStateMask     view_states, 
                                  InstanceStateMask instance_states)
{
  return DataReader::take_instance( (Sequence*)received_data,
                                    sample_infos,
                                    max_samples,
                                    a_handle,
                                    sample_states, 
                                    view_states, 
                                    instance_states);
}


/******************************************************************/
    
ReturnCode_t
ResourceReadingValueDataReader::read_next_instance( ResourceReadingValuePtrSeq    * received_data,
                                       SampleInfoSeq   * sample_infos,
                                       int               max_samples,
                                       InstanceHandle_t  previous_handle,
                                       SampleStateMask   sample_states, 
                                       ViewStateMask     view_states, 
                                       InstanceStateMask instance_states)
{
  return DataReader::read_next_instance( (Sequence*)received_data,
                                         sample_infos,
                                         max_samples,
                                         previous_handle,
                                         sample_states, 
                                         view_states, 
                                         instance_states);
}


/******************************************************************/

ReturnCode_t
ResourceReadingValueDataReader::take_next_instance( ResourceReadingValuePtrSeq     * received_data,
                                       SampleInfoSeq    * sample_infos,
                                       int                max_samples,
                                       InstanceHandle_t   previous_handle,
                                       SampleStateMask    sample_states, 
                                       ViewStateMask      view_states, 
                                       InstanceStateMask  instance_states)
{
  return DataReader::take_next_instance( (Sequence*)received_data,
                                         sample_infos,
                                         max_samples,
                                         previous_handle,
                                         sample_states, 
                                         view_states, 
                                         instance_states);
}


/******************************************************************/
    
ReturnCode_t
ResourceReadingValueDataReader::read_next_instance_w_condition( ResourceReadingValuePtrSeq     * received_data,
                                                   SampleInfoSeq    * sample_infos,
                                                   int                max_samples,
                                                   InstanceHandle_t   previous_handle,
                                                   ReadCondition *    a_condition)
{
  return DataReader::read_next_instance_w_condition( (Sequence*)received_data,
                                                     sample_infos,
                                                     max_samples,
                                                     previous_handle,
                                                     a_condition);
}


/******************************************************************/
    
ReturnCode_t 
ResourceReadingValueDataReader::take_next_instance_w_condition( ResourceReadingValuePtrSeq     * received_data,
                                                   SampleInfoSeq    * sample_infos,
                                                   int                max_samples,
                                                   InstanceHandle_t   previous_handle,
                                                   ReadCondition *    a_condition)
{
  return DataReader::take_next_instance_w_condition( (Sequence*)received_data,
                                                     sample_infos,
                                                     max_samples,
                                                     previous_handle,
                                                     a_condition);
}


/******************************************************************/
    
ReturnCode_t
ResourceReadingValueDataReader::return_loan( ResourceReadingValuePtrSeq   * received_data,
                                SampleInfoSeq  * sample_infos)
{
  return DataReader::return_loan( (Sequence*)received_data, sample_infos);
}


/******************************************************************/

ReturnCode_t
ResourceReadingValueDataReader::get_key_value( ResourceReadingValue            * key_holder, 
                                  InstanceHandle_t  handle)
{
  if ( ! key_holder )
      return RETCODE_BAD_PARAMETER;

  /* No keys: no op */
  CDX_UNUSED(handle);
  key_holder->clear();
  return DDS::RETCODE_OK;
}


/******************************************************************/
/* openfmb::resourcemodule:: */
InstanceHandle_t 
ResourceReadingValueDataReader::lookup_instance( ResourceReadingValue       * instance_data)
{
  if ( ! instance_data )
      return HANDLE_NIL;

  /* No keys */
  return DDS::HANDLE_DEFAULT;
}


}  /* namespace resourcemodule */
/* END SCOPE: resourcemodule */
/* START SCOPE: solarmodule */

namespace solarmodule {


/******************************************************************
 * openfmb::solarmodule:: DataReader Ops
 *****************************************************************/

/******************************************************************/
SolarEventProfileDataReader::SolarEventProfileDataReader()
{
}

/******************************************************************/
ReturnCode_t 
SolarEventProfileDataReader::read( SolarEventProfilePtrSeq    * received_data,
                         SampleInfoSeq   * sample_infos,
                         int               max_samples,
                         SampleStateMask   sample_states, 
                         ViewStateMask     view_states, 
                         InstanceStateMask instance_states)
{
  return DataReader::read( (Sequence*)received_data, 
			    sample_infos, 
			    max_samples, 
			    sample_states, 
			    view_states, 
			    instance_states );
}
  

/******************************************************************/

ReturnCode_t
SolarEventProfileDataReader::take( SolarEventProfilePtrSeq     * received_data,
                         SampleInfoSeq    * sample_infos,
                         int                max_samples,
                         SampleStateMask    sample_states, 
                         ViewStateMask      view_states, 
                         InstanceStateMask  instance_states)
{
  return DataReader::take( (Sequence*)received_data,
                           sample_infos,
                           max_samples,
                           sample_states, 
                           view_states, 
                           instance_states);
}


/******************************************************************/

ReturnCode_t 
SolarEventProfileDataReader::read_w_condition( SolarEventProfilePtrSeq  * received_data,
                                     SampleInfoSeq * sample_infos,
                                     int             max_samples,
                                     ReadCondition * a_condition)
{
  return DataReader::read_w_condition( (Sequence*)received_data,
                                       sample_infos,
                                       max_samples,
                                       a_condition);
}


/******************************************************************/
    
ReturnCode_t
SolarEventProfileDataReader::take_w_condition( SolarEventProfilePtrSeq   * received_data,
                                     SampleInfoSeq  * sample_infos,
                                     int              max_samples,
                                     ReadCondition *  a_condition)
{
  return DataReader::take_w_condition( (Sequence*)received_data,
                                       sample_infos,
                                       max_samples,
                                       a_condition);
}


/******************************************************************/
    
ReturnCode_t
SolarEventProfileDataReader::read_next_sample( SolarEventProfile     * received_data,
                                  SampleInfo     * sample_info)
{
  return DataReader::read_next_sample( (void*)received_data,
                                       sample_info);
}


/******************************************************************/
    
ReturnCode_t
SolarEventProfileDataReader::take_next_sample( SolarEventProfile      * received_data,
                                     SampleInfo      * sample_info)
{
  return DataReader::take_next_sample( (void*) received_data,
                                       sample_info);
}


/******************************************************************/
    
ReturnCode_t
SolarEventProfileDataReader::read_instance( SolarEventProfilePtrSeq       * received_data,
                                  SampleInfoSeq    * sample_infos,
                                  int                max_samples,
                                  InstanceHandle_t   a_handle,
                                  SampleStateMask    sample_states, 
                                  ViewStateMask      view_states, 
                                  InstanceStateMask  instance_states)
{
  return DataReader::read_instance( (Sequence*)received_data, 
                                    sample_infos, 
                                    max_samples, 
                                    a_handle, 
                                    sample_states, 
                                    view_states, 
                                    instance_states );
}


/******************************************************************/
    
ReturnCode_t
SolarEventProfileDataReader::take_instance( SolarEventProfilePtrSeq    * received_data,
                                  SampleInfoSeq   * sample_infos,
                                  int               max_samples,
                                  InstanceHandle_t  a_handle,
                                  SampleStateMask   sample_states, 
                                  ViewStateMask     view_states, 
                                  InstanceStateMask instance_states)
{
  return DataReader::take_instance( (Sequence*)received_data,
                                    sample_infos,
                                    max_samples,
                                    a_handle,
                                    sample_states, 
                                    view_states, 
                                    instance_states);
}


/******************************************************************/
    
ReturnCode_t
SolarEventProfileDataReader::read_next_instance( SolarEventProfilePtrSeq    * received_data,
                                       SampleInfoSeq   * sample_infos,
                                       int               max_samples,
                                       InstanceHandle_t  previous_handle,
                                       SampleStateMask   sample_states, 
                                       ViewStateMask     view_states, 
                                       InstanceStateMask instance_states)
{
  return DataReader::read_next_instance( (Sequence*)received_data,
                                         sample_infos,
                                         max_samples,
                                         previous_handle,
                                         sample_states, 
                                         view_states, 
                                         instance_states);
}


/******************************************************************/

ReturnCode_t
SolarEventProfileDataReader::take_next_instance( SolarEventProfilePtrSeq     * received_data,
                                       SampleInfoSeq    * sample_infos,
                                       int                max_samples,
                                       InstanceHandle_t   previous_handle,
                                       SampleStateMask    sample_states, 
                                       ViewStateMask      view_states, 
                                       InstanceStateMask  instance_states)
{
  return DataReader::take_next_instance( (Sequence*)received_data,
                                         sample_infos,
                                         max_samples,
                                         previous_handle,
                                         sample_states, 
                                         view_states, 
                                         instance_states);
}


/******************************************************************/
    
ReturnCode_t
SolarEventProfileDataReader::read_next_instance_w_condition( SolarEventProfilePtrSeq     * received_data,
                                                   SampleInfoSeq    * sample_infos,
                                                   int                max_samples,
                                                   InstanceHandle_t   previous_handle,
                                                   ReadCondition *    a_condition)
{
  return DataReader::read_next_instance_w_condition( (Sequence*)received_data,
                                                     sample_infos,
                                                     max_samples,
                                                     previous_handle,
                                                     a_condition);
}


/******************************************************************/
    
ReturnCode_t 
SolarEventProfileDataReader::take_next_instance_w_condition( SolarEventProfilePtrSeq     * received_data,
                                                   SampleInfoSeq    * sample_infos,
                                                   int                max_samples,
                                                   InstanceHandle_t   previous_handle,
                                                   ReadCondition *    a_condition)
{
  return DataReader::take_next_instance_w_condition( (Sequence*)received_data,
                                                     sample_infos,
                                                     max_samples,
                                                     previous_handle,
                                                     a_condition);
}


/******************************************************************/
    
ReturnCode_t
SolarEventProfileDataReader::return_loan( SolarEventProfilePtrSeq   * received_data,
                                SampleInfoSeq  * sample_infos)
{
  return DataReader::return_loan( (Sequence*)received_data, sample_infos);
}


/******************************************************************/

ReturnCode_t
SolarEventProfileDataReader::get_key_value( SolarEventProfile            * key_holder, 
                                  InstanceHandle_t  handle)
{
  if ( ! key_holder )
      return RETCODE_BAD_PARAMETER;

  /* key: use DR to get it */
  return DataReader::get_key_value(  key_holder, handle );
}


/******************************************************************/
/* openfmb::solarmodule:: */
InstanceHandle_t 
SolarEventProfileDataReader::lookup_instance( SolarEventProfile       * instance_data)
{
  if ( ! instance_data )
      return HANDLE_NIL;

  /* Complex key: use DR to find it */
  return DataReader::lookup_instance(  instance_data );
}


/******************************************************************
 * openfmb::solarmodule:: DataReader Ops
 *****************************************************************/

/******************************************************************/
SolarReadingValueDataReader::SolarReadingValueDataReader()
{
}

/******************************************************************/
ReturnCode_t 
SolarReadingValueDataReader::read( SolarReadingValuePtrSeq    * received_data,
                         SampleInfoSeq   * sample_infos,
                         int               max_samples,
                         SampleStateMask   sample_states, 
                         ViewStateMask     view_states, 
                         InstanceStateMask instance_states)
{
  return DataReader::read( (Sequence*)received_data, 
			    sample_infos, 
			    max_samples, 
			    sample_states, 
			    view_states, 
			    instance_states );
}
  

/******************************************************************/

ReturnCode_t
SolarReadingValueDataReader::take( SolarReadingValuePtrSeq     * received_data,
                         SampleInfoSeq    * sample_infos,
                         int                max_samples,
                         SampleStateMask    sample_states, 
                         ViewStateMask      view_states, 
                         InstanceStateMask  instance_states)
{
  return DataReader::take( (Sequence*)received_data,
                           sample_infos,
                           max_samples,
                           sample_states, 
                           view_states, 
                           instance_states);
}


/******************************************************************/

ReturnCode_t 
SolarReadingValueDataReader::read_w_condition( SolarReadingValuePtrSeq  * received_data,
                                     SampleInfoSeq * sample_infos,
                                     int             max_samples,
                                     ReadCondition * a_condition)
{
  return DataReader::read_w_condition( (Sequence*)received_data,
                                       sample_infos,
                                       max_samples,
                                       a_condition);
}


/******************************************************************/
    
ReturnCode_t
SolarReadingValueDataReader::take_w_condition( SolarReadingValuePtrSeq   * received_data,
                                     SampleInfoSeq  * sample_infos,
                                     int              max_samples,
                                     ReadCondition *  a_condition)
{
  return DataReader::take_w_condition( (Sequence*)received_data,
                                       sample_infos,
                                       max_samples,
                                       a_condition);
}


/******************************************************************/
    
ReturnCode_t
SolarReadingValueDataReader::read_next_sample( SolarReadingValue     * received_data,
                                  SampleInfo     * sample_info)
{
  return DataReader::read_next_sample( (void*)received_data,
                                       sample_info);
}


/******************************************************************/
    
ReturnCode_t
SolarReadingValueDataReader::take_next_sample( SolarReadingValue      * received_data,
                                     SampleInfo      * sample_info)
{
  return DataReader::take_next_sample( (void*) received_data,
                                       sample_info);
}


/******************************************************************/
    
ReturnCode_t
SolarReadingValueDataReader::read_instance( SolarReadingValuePtrSeq       * received_data,
                                  SampleInfoSeq    * sample_infos,
                                  int                max_samples,
                                  InstanceHandle_t   a_handle,
                                  SampleStateMask    sample_states, 
                                  ViewStateMask      view_states, 
                                  InstanceStateMask  instance_states)
{
  return DataReader::read_instance( (Sequence*)received_data, 
                                    sample_infos, 
                                    max_samples, 
                                    a_handle, 
                                    sample_states, 
                                    view_states, 
                                    instance_states );
}


/******************************************************************/
    
ReturnCode_t
SolarReadingValueDataReader::take_instance( SolarReadingValuePtrSeq    * received_data,
                                  SampleInfoSeq   * sample_infos,
                                  int               max_samples,
                                  InstanceHandle_t  a_handle,
                                  SampleStateMask   sample_states, 
                                  ViewStateMask     view_states, 
                                  InstanceStateMask instance_states)
{
  return DataReader::take_instance( (Sequence*)received_data,
                                    sample_infos,
                                    max_samples,
                                    a_handle,
                                    sample_states, 
                                    view_states, 
                                    instance_states);
}


/******************************************************************/
    
ReturnCode_t
SolarReadingValueDataReader::read_next_instance( SolarReadingValuePtrSeq    * received_data,
                                       SampleInfoSeq   * sample_infos,
                                       int               max_samples,
                                       InstanceHandle_t  previous_handle,
                                       SampleStateMask   sample_states, 
                                       ViewStateMask     view_states, 
                                       InstanceStateMask instance_states)
{
  return DataReader::read_next_instance( (Sequence*)received_data,
                                         sample_infos,
                                         max_samples,
                                         previous_handle,
                                         sample_states, 
                                         view_states, 
                                         instance_states);
}


/******************************************************************/

ReturnCode_t
SolarReadingValueDataReader::take_next_instance( SolarReadingValuePtrSeq     * received_data,
                                       SampleInfoSeq    * sample_infos,
                                       int                max_samples,
                                       InstanceHandle_t   previous_handle,
                                       SampleStateMask    sample_states, 
                                       ViewStateMask      view_states, 
                                       InstanceStateMask  instance_states)
{
  return DataReader::take_next_instance( (Sequence*)received_data,
                                         sample_infos,
                                         max_samples,
                                         previous_handle,
                                         sample_states, 
                                         view_states, 
                                         instance_states);
}


/******************************************************************/
    
ReturnCode_t
SolarReadingValueDataReader::read_next_instance_w_condition( SolarReadingValuePtrSeq     * received_data,
                                                   SampleInfoSeq    * sample_infos,
                                                   int                max_samples,
                                                   InstanceHandle_t   previous_handle,
                                                   ReadCondition *    a_condition)
{
  return DataReader::read_next_instance_w_condition( (Sequence*)received_data,
                                                     sample_infos,
                                                     max_samples,
                                                     previous_handle,
                                                     a_condition);
}


/******************************************************************/
    
ReturnCode_t 
SolarReadingValueDataReader::take_next_instance_w_condition( SolarReadingValuePtrSeq     * received_data,
                                                   SampleInfoSeq    * sample_infos,
                                                   int                max_samples,
                                                   InstanceHandle_t   previous_handle,
                                                   ReadCondition *    a_condition)
{
  return DataReader::take_next_instance_w_condition( (Sequence*)received_data,
                                                     sample_infos,
                                                     max_samples,
                                                     previous_handle,
                                                     a_condition);
}


/******************************************************************/
    
ReturnCode_t
SolarReadingValueDataReader::return_loan( SolarReadingValuePtrSeq   * received_data,
                                SampleInfoSeq  * sample_infos)
{
  return DataReader::return_loan( (Sequence*)received_data, sample_infos);
}


/******************************************************************/

ReturnCode_t
SolarReadingValueDataReader::get_key_value( SolarReadingValue            * key_holder, 
                                  InstanceHandle_t  handle)
{
  if ( ! key_holder )
      return RETCODE_BAD_PARAMETER;

  /* No keys: no op */
  CDX_UNUSED(handle);
  key_holder->clear();
  return DDS::RETCODE_OK;
}


/******************************************************************/
/* openfmb::solarmodule:: */
InstanceHandle_t 
SolarReadingValueDataReader::lookup_instance( SolarReadingValue       * instance_data)
{
  if ( ! instance_data )
      return HANDLE_NIL;

  /* No keys */
  return DDS::HANDLE_DEFAULT;
}


/******************************************************************
 * openfmb::solarmodule:: DataReader Ops
 *****************************************************************/

/******************************************************************/
SolarStatusProfileDataReader::SolarStatusProfileDataReader()
{
}

/******************************************************************/
ReturnCode_t 
SolarStatusProfileDataReader::read( SolarStatusProfilePtrSeq    * received_data,
                         SampleInfoSeq   * sample_infos,
                         int               max_samples,
                         SampleStateMask   sample_states, 
                         ViewStateMask     view_states, 
                         InstanceStateMask instance_states)
{
  return DataReader::read( (Sequence*)received_data, 
			    sample_infos, 
			    max_samples, 
			    sample_states, 
			    view_states, 
			    instance_states );
}
  

/******************************************************************/

ReturnCode_t
SolarStatusProfileDataReader::take( SolarStatusProfilePtrSeq     * received_data,
                         SampleInfoSeq    * sample_infos,
                         int                max_samples,
                         SampleStateMask    sample_states, 
                         ViewStateMask      view_states, 
                         InstanceStateMask  instance_states)
{
  return DataReader::take( (Sequence*)received_data,
                           sample_infos,
                           max_samples,
                           sample_states, 
                           view_states, 
                           instance_states);
}


/******************************************************************/

ReturnCode_t 
SolarStatusProfileDataReader::read_w_condition( SolarStatusProfilePtrSeq  * received_data,
                                     SampleInfoSeq * sample_infos,
                                     int             max_samples,
                                     ReadCondition * a_condition)
{
  return DataReader::read_w_condition( (Sequence*)received_data,
                                       sample_infos,
                                       max_samples,
                                       a_condition);
}


/******************************************************************/
    
ReturnCode_t
SolarStatusProfileDataReader::take_w_condition( SolarStatusProfilePtrSeq   * received_data,
                                     SampleInfoSeq  * sample_infos,
                                     int              max_samples,
                                     ReadCondition *  a_condition)
{
  return DataReader::take_w_condition( (Sequence*)received_data,
                                       sample_infos,
                                       max_samples,
                                       a_condition);
}


/******************************************************************/
    
ReturnCode_t
SolarStatusProfileDataReader::read_next_sample( SolarStatusProfile     * received_data,
                                  SampleInfo     * sample_info)
{
  return DataReader::read_next_sample( (void*)received_data,
                                       sample_info);
}


/******************************************************************/
    
ReturnCode_t
SolarStatusProfileDataReader::take_next_sample( SolarStatusProfile      * received_data,
                                     SampleInfo      * sample_info)
{
  return DataReader::take_next_sample( (void*) received_data,
                                       sample_info);
}


/******************************************************************/
    
ReturnCode_t
SolarStatusProfileDataReader::read_instance( SolarStatusProfilePtrSeq       * received_data,
                                  SampleInfoSeq    * sample_infos,
                                  int                max_samples,
                                  InstanceHandle_t   a_handle,
                                  SampleStateMask    sample_states, 
                                  ViewStateMask      view_states, 
                                  InstanceStateMask  instance_states)
{
  return DataReader::read_instance( (Sequence*)received_data, 
                                    sample_infos, 
                                    max_samples, 
                                    a_handle, 
                                    sample_states, 
                                    view_states, 
                                    instance_states );
}


/******************************************************************/
    
ReturnCode_t
SolarStatusProfileDataReader::take_instance( SolarStatusProfilePtrSeq    * received_data,
                                  SampleInfoSeq   * sample_infos,
                                  int               max_samples,
                                  InstanceHandle_t  a_handle,
                                  SampleStateMask   sample_states, 
                                  ViewStateMask     view_states, 
                                  InstanceStateMask instance_states)
{
  return DataReader::take_instance( (Sequence*)received_data,
                                    sample_infos,
                                    max_samples,
                                    a_handle,
                                    sample_states, 
                                    view_states, 
                                    instance_states);
}


/******************************************************************/
    
ReturnCode_t
SolarStatusProfileDataReader::read_next_instance( SolarStatusProfilePtrSeq    * received_data,
                                       SampleInfoSeq   * sample_infos,
                                       int               max_samples,
                                       InstanceHandle_t  previous_handle,
                                       SampleStateMask   sample_states, 
                                       ViewStateMask     view_states, 
                                       InstanceStateMask instance_states)
{
  return DataReader::read_next_instance( (Sequence*)received_data,
                                         sample_infos,
                                         max_samples,
                                         previous_handle,
                                         sample_states, 
                                         view_states, 
                                         instance_states);
}


/******************************************************************/

ReturnCode_t
SolarStatusProfileDataReader::take_next_instance( SolarStatusProfilePtrSeq     * received_data,
                                       SampleInfoSeq    * sample_infos,
                                       int                max_samples,
                                       InstanceHandle_t   previous_handle,
                                       SampleStateMask    sample_states, 
                                       ViewStateMask      view_states, 
                                       InstanceStateMask  instance_states)
{
  return DataReader::take_next_instance( (Sequence*)received_data,
                                         sample_infos,
                                         max_samples,
                                         previous_handle,
                                         sample_states, 
                                         view_states, 
                                         instance_states);
}


/******************************************************************/
    
ReturnCode_t
SolarStatusProfileDataReader::read_next_instance_w_condition( SolarStatusProfilePtrSeq     * received_data,
                                                   SampleInfoSeq    * sample_infos,
                                                   int                max_samples,
                                                   InstanceHandle_t   previous_handle,
                                                   ReadCondition *    a_condition)
{
  return DataReader::read_next_instance_w_condition( (Sequence*)received_data,
                                                     sample_infos,
                                                     max_samples,
                                                     previous_handle,
                                                     a_condition);
}


/******************************************************************/
    
ReturnCode_t 
SolarStatusProfileDataReader::take_next_instance_w_condition( SolarStatusProfilePtrSeq     * received_data,
                                                   SampleInfoSeq    * sample_infos,
                                                   int                max_samples,
                                                   InstanceHandle_t   previous_handle,
                                                   ReadCondition *    a_condition)
{
  return DataReader::take_next_instance_w_condition( (Sequence*)received_data,
                                                     sample_infos,
                                                     max_samples,
                                                     previous_handle,
                                                     a_condition);
}


/******************************************************************/
    
ReturnCode_t
SolarStatusProfileDataReader::return_loan( SolarStatusProfilePtrSeq   * received_data,
                                SampleInfoSeq  * sample_infos)
{
  return DataReader::return_loan( (Sequence*)received_data, sample_infos);
}


/******************************************************************/

ReturnCode_t
SolarStatusProfileDataReader::get_key_value( SolarStatusProfile            * key_holder, 
                                  InstanceHandle_t  handle)
{
  if ( ! key_holder )
      return RETCODE_BAD_PARAMETER;

  /* key: use DR to get it */
  return DataReader::get_key_value(  key_holder, handle );
}


/******************************************************************/
/* openfmb::solarmodule:: */
InstanceHandle_t 
SolarStatusProfileDataReader::lookup_instance( SolarStatusProfile       * instance_data)
{
  if ( ! instance_data )
      return HANDLE_NIL;

  /* Complex key: use DR to find it */
  return DataReader::lookup_instance(  instance_data );
}


}  /* namespace solarmodule */
/* END SCOPE: solarmodule */
/* START SCOPE: switchmodule */

namespace switchmodule {


/******************************************************************
 * openfmb::switchmodule:: DataReader Ops
 *****************************************************************/

/******************************************************************/
SwitchControlProfileDataReader::SwitchControlProfileDataReader()
{
}

/******************************************************************/
ReturnCode_t 
SwitchControlProfileDataReader::read( SwitchControlProfilePtrSeq    * received_data,
                         SampleInfoSeq   * sample_infos,
                         int               max_samples,
                         SampleStateMask   sample_states, 
                         ViewStateMask     view_states, 
                         InstanceStateMask instance_states)
{
  return DataReader::read( (Sequence*)received_data, 
			    sample_infos, 
			    max_samples, 
			    sample_states, 
			    view_states, 
			    instance_states );
}
  

/******************************************************************/

ReturnCode_t
SwitchControlProfileDataReader::take( SwitchControlProfilePtrSeq     * received_data,
                         SampleInfoSeq    * sample_infos,
                         int                max_samples,
                         SampleStateMask    sample_states, 
                         ViewStateMask      view_states, 
                         InstanceStateMask  instance_states)
{
  return DataReader::take( (Sequence*)received_data,
                           sample_infos,
                           max_samples,
                           sample_states, 
                           view_states, 
                           instance_states);
}


/******************************************************************/

ReturnCode_t 
SwitchControlProfileDataReader::read_w_condition( SwitchControlProfilePtrSeq  * received_data,
                                     SampleInfoSeq * sample_infos,
                                     int             max_samples,
                                     ReadCondition * a_condition)
{
  return DataReader::read_w_condition( (Sequence*)received_data,
                                       sample_infos,
                                       max_samples,
                                       a_condition);
}


/******************************************************************/
    
ReturnCode_t
SwitchControlProfileDataReader::take_w_condition( SwitchControlProfilePtrSeq   * received_data,
                                     SampleInfoSeq  * sample_infos,
                                     int              max_samples,
                                     ReadCondition *  a_condition)
{
  return DataReader::take_w_condition( (Sequence*)received_data,
                                       sample_infos,
                                       max_samples,
                                       a_condition);
}


/******************************************************************/
    
ReturnCode_t
SwitchControlProfileDataReader::read_next_sample( SwitchControlProfile     * received_data,
                                  SampleInfo     * sample_info)
{
  return DataReader::read_next_sample( (void*)received_data,
                                       sample_info);
}


/******************************************************************/
    
ReturnCode_t
SwitchControlProfileDataReader::take_next_sample( SwitchControlProfile      * received_data,
                                     SampleInfo      * sample_info)
{
  return DataReader::take_next_sample( (void*) received_data,
                                       sample_info);
}


/******************************************************************/
    
ReturnCode_t
SwitchControlProfileDataReader::read_instance( SwitchControlProfilePtrSeq       * received_data,
                                  SampleInfoSeq    * sample_infos,
                                  int                max_samples,
                                  InstanceHandle_t   a_handle,
                                  SampleStateMask    sample_states, 
                                  ViewStateMask      view_states, 
                                  InstanceStateMask  instance_states)
{
  return DataReader::read_instance( (Sequence*)received_data, 
                                    sample_infos, 
                                    max_samples, 
                                    a_handle, 
                                    sample_states, 
                                    view_states, 
                                    instance_states );
}


/******************************************************************/
    
ReturnCode_t
SwitchControlProfileDataReader::take_instance( SwitchControlProfilePtrSeq    * received_data,
                                  SampleInfoSeq   * sample_infos,
                                  int               max_samples,
                                  InstanceHandle_t  a_handle,
                                  SampleStateMask   sample_states, 
                                  ViewStateMask     view_states, 
                                  InstanceStateMask instance_states)
{
  return DataReader::take_instance( (Sequence*)received_data,
                                    sample_infos,
                                    max_samples,
                                    a_handle,
                                    sample_states, 
                                    view_states, 
                                    instance_states);
}


/******************************************************************/
    
ReturnCode_t
SwitchControlProfileDataReader::read_next_instance( SwitchControlProfilePtrSeq    * received_data,
                                       SampleInfoSeq   * sample_infos,
                                       int               max_samples,
                                       InstanceHandle_t  previous_handle,
                                       SampleStateMask   sample_states, 
                                       ViewStateMask     view_states, 
                                       InstanceStateMask instance_states)
{
  return DataReader::read_next_instance( (Sequence*)received_data,
                                         sample_infos,
                                         max_samples,
                                         previous_handle,
                                         sample_states, 
                                         view_states, 
                                         instance_states);
}


/******************************************************************/

ReturnCode_t
SwitchControlProfileDataReader::take_next_instance( SwitchControlProfilePtrSeq     * received_data,
                                       SampleInfoSeq    * sample_infos,
                                       int                max_samples,
                                       InstanceHandle_t   previous_handle,
                                       SampleStateMask    sample_states, 
                                       ViewStateMask      view_states, 
                                       InstanceStateMask  instance_states)
{
  return DataReader::take_next_instance( (Sequence*)received_data,
                                         sample_infos,
                                         max_samples,
                                         previous_handle,
                                         sample_states, 
                                         view_states, 
                                         instance_states);
}


/******************************************************************/
    
ReturnCode_t
SwitchControlProfileDataReader::read_next_instance_w_condition( SwitchControlProfilePtrSeq     * received_data,
                                                   SampleInfoSeq    * sample_infos,
                                                   int                max_samples,
                                                   InstanceHandle_t   previous_handle,
                                                   ReadCondition *    a_condition)
{
  return DataReader::read_next_instance_w_condition( (Sequence*)received_data,
                                                     sample_infos,
                                                     max_samples,
                                                     previous_handle,
                                                     a_condition);
}


/******************************************************************/
    
ReturnCode_t 
SwitchControlProfileDataReader::take_next_instance_w_condition( SwitchControlProfilePtrSeq     * received_data,
                                                   SampleInfoSeq    * sample_infos,
                                                   int                max_samples,
                                                   InstanceHandle_t   previous_handle,
                                                   ReadCondition *    a_condition)
{
  return DataReader::take_next_instance_w_condition( (Sequence*)received_data,
                                                     sample_infos,
                                                     max_samples,
                                                     previous_handle,
                                                     a_condition);
}


/******************************************************************/
    
ReturnCode_t
SwitchControlProfileDataReader::return_loan( SwitchControlProfilePtrSeq   * received_data,
                                SampleInfoSeq  * sample_infos)
{
  return DataReader::return_loan( (Sequence*)received_data, sample_infos);
}


/******************************************************************/

ReturnCode_t
SwitchControlProfileDataReader::get_key_value( SwitchControlProfile            * key_holder, 
                                  InstanceHandle_t  handle)
{
  if ( ! key_holder )
      return RETCODE_BAD_PARAMETER;

  /* key: use DR to get it */
  return DataReader::get_key_value(  key_holder, handle );
}


/******************************************************************/
/* openfmb::switchmodule:: */
InstanceHandle_t 
SwitchControlProfileDataReader::lookup_instance( SwitchControlProfile       * instance_data)
{
  if ( ! instance_data )
      return HANDLE_NIL;

  /* Complex key: use DR to find it */
  return DataReader::lookup_instance(  instance_data );
}


/******************************************************************
 * openfmb::switchmodule:: DataReader Ops
 *****************************************************************/

/******************************************************************/
SwitchEventProfileDataReader::SwitchEventProfileDataReader()
{
}

/******************************************************************/
ReturnCode_t 
SwitchEventProfileDataReader::read( SwitchEventProfilePtrSeq    * received_data,
                         SampleInfoSeq   * sample_infos,
                         int               max_samples,
                         SampleStateMask   sample_states, 
                         ViewStateMask     view_states, 
                         InstanceStateMask instance_states)
{
  return DataReader::read( (Sequence*)received_data, 
			    sample_infos, 
			    max_samples, 
			    sample_states, 
			    view_states, 
			    instance_states );
}
  

/******************************************************************/

ReturnCode_t
SwitchEventProfileDataReader::take( SwitchEventProfilePtrSeq     * received_data,
                         SampleInfoSeq    * sample_infos,
                         int                max_samples,
                         SampleStateMask    sample_states, 
                         ViewStateMask      view_states, 
                         InstanceStateMask  instance_states)
{
  return DataReader::take( (Sequence*)received_data,
                           sample_infos,
                           max_samples,
                           sample_states, 
                           view_states, 
                           instance_states);
}


/******************************************************************/

ReturnCode_t 
SwitchEventProfileDataReader::read_w_condition( SwitchEventProfilePtrSeq  * received_data,
                                     SampleInfoSeq * sample_infos,
                                     int             max_samples,
                                     ReadCondition * a_condition)
{
  return DataReader::read_w_condition( (Sequence*)received_data,
                                       sample_infos,
                                       max_samples,
                                       a_condition);
}


/******************************************************************/
    
ReturnCode_t
SwitchEventProfileDataReader::take_w_condition( SwitchEventProfilePtrSeq   * received_data,
                                     SampleInfoSeq  * sample_infos,
                                     int              max_samples,
                                     ReadCondition *  a_condition)
{
  return DataReader::take_w_condition( (Sequence*)received_data,
                                       sample_infos,
                                       max_samples,
                                       a_condition);
}


/******************************************************************/
    
ReturnCode_t
SwitchEventProfileDataReader::read_next_sample( SwitchEventProfile     * received_data,
                                  SampleInfo     * sample_info)
{
  return DataReader::read_next_sample( (void*)received_data,
                                       sample_info);
}


/******************************************************************/
    
ReturnCode_t
SwitchEventProfileDataReader::take_next_sample( SwitchEventProfile      * received_data,
                                     SampleInfo      * sample_info)
{
  return DataReader::take_next_sample( (void*) received_data,
                                       sample_info);
}


/******************************************************************/
    
ReturnCode_t
SwitchEventProfileDataReader::read_instance( SwitchEventProfilePtrSeq       * received_data,
                                  SampleInfoSeq    * sample_infos,
                                  int                max_samples,
                                  InstanceHandle_t   a_handle,
                                  SampleStateMask    sample_states, 
                                  ViewStateMask      view_states, 
                                  InstanceStateMask  instance_states)
{
  return DataReader::read_instance( (Sequence*)received_data, 
                                    sample_infos, 
                                    max_samples, 
                                    a_handle, 
                                    sample_states, 
                                    view_states, 
                                    instance_states );
}


/******************************************************************/
    
ReturnCode_t
SwitchEventProfileDataReader::take_instance( SwitchEventProfilePtrSeq    * received_data,
                                  SampleInfoSeq   * sample_infos,
                                  int               max_samples,
                                  InstanceHandle_t  a_handle,
                                  SampleStateMask   sample_states, 
                                  ViewStateMask     view_states, 
                                  InstanceStateMask instance_states)
{
  return DataReader::take_instance( (Sequence*)received_data,
                                    sample_infos,
                                    max_samples,
                                    a_handle,
                                    sample_states, 
                                    view_states, 
                                    instance_states);
}


/******************************************************************/
    
ReturnCode_t
SwitchEventProfileDataReader::read_next_instance( SwitchEventProfilePtrSeq    * received_data,
                                       SampleInfoSeq   * sample_infos,
                                       int               max_samples,
                                       InstanceHandle_t  previous_handle,
                                       SampleStateMask   sample_states, 
                                       ViewStateMask     view_states, 
                                       InstanceStateMask instance_states)
{
  return DataReader::read_next_instance( (Sequence*)received_data,
                                         sample_infos,
                                         max_samples,
                                         previous_handle,
                                         sample_states, 
                                         view_states, 
                                         instance_states);
}


/******************************************************************/

ReturnCode_t
SwitchEventProfileDataReader::take_next_instance( SwitchEventProfilePtrSeq     * received_data,
                                       SampleInfoSeq    * sample_infos,
                                       int                max_samples,
                                       InstanceHandle_t   previous_handle,
                                       SampleStateMask    sample_states, 
                                       ViewStateMask      view_states, 
                                       InstanceStateMask  instance_states)
{
  return DataReader::take_next_instance( (Sequence*)received_data,
                                         sample_infos,
                                         max_samples,
                                         previous_handle,
                                         sample_states, 
                                         view_states, 
                                         instance_states);
}


/******************************************************************/
    
ReturnCode_t
SwitchEventProfileDataReader::read_next_instance_w_condition( SwitchEventProfilePtrSeq     * received_data,
                                                   SampleInfoSeq    * sample_infos,
                                                   int                max_samples,
                                                   InstanceHandle_t   previous_handle,
                                                   ReadCondition *    a_condition)
{
  return DataReader::read_next_instance_w_condition( (Sequence*)received_data,
                                                     sample_infos,
                                                     max_samples,
                                                     previous_handle,
                                                     a_condition);
}


/******************************************************************/
    
ReturnCode_t 
SwitchEventProfileDataReader::take_next_instance_w_condition( SwitchEventProfilePtrSeq     * received_data,
                                                   SampleInfoSeq    * sample_infos,
                                                   int                max_samples,
                                                   InstanceHandle_t   previous_handle,
                                                   ReadCondition *    a_condition)
{
  return DataReader::take_next_instance_w_condition( (Sequence*)received_data,
                                                     sample_infos,
                                                     max_samples,
                                                     previous_handle,
                                                     a_condition);
}


/******************************************************************/
    
ReturnCode_t
SwitchEventProfileDataReader::return_loan( SwitchEventProfilePtrSeq   * received_data,
                                SampleInfoSeq  * sample_infos)
{
  return DataReader::return_loan( (Sequence*)received_data, sample_infos);
}


/******************************************************************/

ReturnCode_t
SwitchEventProfileDataReader::get_key_value( SwitchEventProfile            * key_holder, 
                                  InstanceHandle_t  handle)
{
  if ( ! key_holder )
      return RETCODE_BAD_PARAMETER;

  /* key: use DR to get it */
  return DataReader::get_key_value(  key_holder, handle );
}


/******************************************************************/
/* openfmb::switchmodule:: */
InstanceHandle_t 
SwitchEventProfileDataReader::lookup_instance( SwitchEventProfile       * instance_data)
{
  if ( ! instance_data )
      return HANDLE_NIL;

  /* Complex key: use DR to find it */
  return DataReader::lookup_instance(  instance_data );
}


/******************************************************************
 * openfmb::switchmodule:: DataReader Ops
 *****************************************************************/

/******************************************************************/
SwitchReadingValueDataReader::SwitchReadingValueDataReader()
{
}

/******************************************************************/
ReturnCode_t 
SwitchReadingValueDataReader::read( SwitchReadingValuePtrSeq    * received_data,
                         SampleInfoSeq   * sample_infos,
                         int               max_samples,
                         SampleStateMask   sample_states, 
                         ViewStateMask     view_states, 
                         InstanceStateMask instance_states)
{
  return DataReader::read( (Sequence*)received_data, 
			    sample_infos, 
			    max_samples, 
			    sample_states, 
			    view_states, 
			    instance_states );
}
  

/******************************************************************/

ReturnCode_t
SwitchReadingValueDataReader::take( SwitchReadingValuePtrSeq     * received_data,
                         SampleInfoSeq    * sample_infos,
                         int                max_samples,
                         SampleStateMask    sample_states, 
                         ViewStateMask      view_states, 
                         InstanceStateMask  instance_states)
{
  return DataReader::take( (Sequence*)received_data,
                           sample_infos,
                           max_samples,
                           sample_states, 
                           view_states, 
                           instance_states);
}


/******************************************************************/

ReturnCode_t 
SwitchReadingValueDataReader::read_w_condition( SwitchReadingValuePtrSeq  * received_data,
                                     SampleInfoSeq * sample_infos,
                                     int             max_samples,
                                     ReadCondition * a_condition)
{
  return DataReader::read_w_condition( (Sequence*)received_data,
                                       sample_infos,
                                       max_samples,
                                       a_condition);
}


/******************************************************************/
    
ReturnCode_t
SwitchReadingValueDataReader::take_w_condition( SwitchReadingValuePtrSeq   * received_data,
                                     SampleInfoSeq  * sample_infos,
                                     int              max_samples,
                                     ReadCondition *  a_condition)
{
  return DataReader::take_w_condition( (Sequence*)received_data,
                                       sample_infos,
                                       max_samples,
                                       a_condition);
}


/******************************************************************/
    
ReturnCode_t
SwitchReadingValueDataReader::read_next_sample( SwitchReadingValue     * received_data,
                                  SampleInfo     * sample_info)
{
  return DataReader::read_next_sample( (void*)received_data,
                                       sample_info);
}


/******************************************************************/
    
ReturnCode_t
SwitchReadingValueDataReader::take_next_sample( SwitchReadingValue      * received_data,
                                     SampleInfo      * sample_info)
{
  return DataReader::take_next_sample( (void*) received_data,
                                       sample_info);
}


/******************************************************************/
    
ReturnCode_t
SwitchReadingValueDataReader::read_instance( SwitchReadingValuePtrSeq       * received_data,
                                  SampleInfoSeq    * sample_infos,
                                  int                max_samples,
                                  InstanceHandle_t   a_handle,
                                  SampleStateMask    sample_states, 
                                  ViewStateMask      view_states, 
                                  InstanceStateMask  instance_states)
{
  return DataReader::read_instance( (Sequence*)received_data, 
                                    sample_infos, 
                                    max_samples, 
                                    a_handle, 
                                    sample_states, 
                                    view_states, 
                                    instance_states );
}


/******************************************************************/
    
ReturnCode_t
SwitchReadingValueDataReader::take_instance( SwitchReadingValuePtrSeq    * received_data,
                                  SampleInfoSeq   * sample_infos,
                                  int               max_samples,
                                  InstanceHandle_t  a_handle,
                                  SampleStateMask   sample_states, 
                                  ViewStateMask     view_states, 
                                  InstanceStateMask instance_states)
{
  return DataReader::take_instance( (Sequence*)received_data,
                                    sample_infos,
                                    max_samples,
                                    a_handle,
                                    sample_states, 
                                    view_states, 
                                    instance_states);
}


/******************************************************************/
    
ReturnCode_t
SwitchReadingValueDataReader::read_next_instance( SwitchReadingValuePtrSeq    * received_data,
                                       SampleInfoSeq   * sample_infos,
                                       int               max_samples,
                                       InstanceHandle_t  previous_handle,
                                       SampleStateMask   sample_states, 
                                       ViewStateMask     view_states, 
                                       InstanceStateMask instance_states)
{
  return DataReader::read_next_instance( (Sequence*)received_data,
                                         sample_infos,
                                         max_samples,
                                         previous_handle,
                                         sample_states, 
                                         view_states, 
                                         instance_states);
}


/******************************************************************/

ReturnCode_t
SwitchReadingValueDataReader::take_next_instance( SwitchReadingValuePtrSeq     * received_data,
                                       SampleInfoSeq    * sample_infos,
                                       int                max_samples,
                                       InstanceHandle_t   previous_handle,
                                       SampleStateMask    sample_states, 
                                       ViewStateMask      view_states, 
                                       InstanceStateMask  instance_states)
{
  return DataReader::take_next_instance( (Sequence*)received_data,
                                         sample_infos,
                                         max_samples,
                                         previous_handle,
                                         sample_states, 
                                         view_states, 
                                         instance_states);
}


/******************************************************************/
    
ReturnCode_t
SwitchReadingValueDataReader::read_next_instance_w_condition( SwitchReadingValuePtrSeq     * received_data,
                                                   SampleInfoSeq    * sample_infos,
                                                   int                max_samples,
                                                   InstanceHandle_t   previous_handle,
                                                   ReadCondition *    a_condition)
{
  return DataReader::read_next_instance_w_condition( (Sequence*)received_data,
                                                     sample_infos,
                                                     max_samples,
                                                     previous_handle,
                                                     a_condition);
}


/******************************************************************/
    
ReturnCode_t 
SwitchReadingValueDataReader::take_next_instance_w_condition( SwitchReadingValuePtrSeq     * received_data,
                                                   SampleInfoSeq    * sample_infos,
                                                   int                max_samples,
                                                   InstanceHandle_t   previous_handle,
                                                   ReadCondition *    a_condition)
{
  return DataReader::take_next_instance_w_condition( (Sequence*)received_data,
                                                     sample_infos,
                                                     max_samples,
                                                     previous_handle,
                                                     a_condition);
}


/******************************************************************/
    
ReturnCode_t
SwitchReadingValueDataReader::return_loan( SwitchReadingValuePtrSeq   * received_data,
                                SampleInfoSeq  * sample_infos)
{
  return DataReader::return_loan( (Sequence*)received_data, sample_infos);
}


/******************************************************************/

ReturnCode_t
SwitchReadingValueDataReader::get_key_value( SwitchReadingValue            * key_holder, 
                                  InstanceHandle_t  handle)
{
  if ( ! key_holder )
      return RETCODE_BAD_PARAMETER;

  /* No keys: no op */
  CDX_UNUSED(handle);
  key_holder->clear();
  return DDS::RETCODE_OK;
}


/******************************************************************/
/* openfmb::switchmodule:: */
InstanceHandle_t 
SwitchReadingValueDataReader::lookup_instance( SwitchReadingValue       * instance_data)
{
  if ( ! instance_data )
      return HANDLE_NIL;

  /* No keys */
  return DDS::HANDLE_DEFAULT;
}


/******************************************************************
 * openfmb::switchmodule:: DataReader Ops
 *****************************************************************/

/******************************************************************/
SwitchStatusProfileDataReader::SwitchStatusProfileDataReader()
{
}

/******************************************************************/
ReturnCode_t 
SwitchStatusProfileDataReader::read( SwitchStatusProfilePtrSeq    * received_data,
                         SampleInfoSeq   * sample_infos,
                         int               max_samples,
                         SampleStateMask   sample_states, 
                         ViewStateMask     view_states, 
                         InstanceStateMask instance_states)
{
  return DataReader::read( (Sequence*)received_data, 
			    sample_infos, 
			    max_samples, 
			    sample_states, 
			    view_states, 
			    instance_states );
}
  

/******************************************************************/

ReturnCode_t
SwitchStatusProfileDataReader::take( SwitchStatusProfilePtrSeq     * received_data,
                         SampleInfoSeq    * sample_infos,
                         int                max_samples,
                         SampleStateMask    sample_states, 
                         ViewStateMask      view_states, 
                         InstanceStateMask  instance_states)
{
  return DataReader::take( (Sequence*)received_data,
                           sample_infos,
                           max_samples,
                           sample_states, 
                           view_states, 
                           instance_states);
}


/******************************************************************/

ReturnCode_t 
SwitchStatusProfileDataReader::read_w_condition( SwitchStatusProfilePtrSeq  * received_data,
                                     SampleInfoSeq * sample_infos,
                                     int             max_samples,
                                     ReadCondition * a_condition)
{
  return DataReader::read_w_condition( (Sequence*)received_data,
                                       sample_infos,
                                       max_samples,
                                       a_condition);
}


/******************************************************************/
    
ReturnCode_t
SwitchStatusProfileDataReader::take_w_condition( SwitchStatusProfilePtrSeq   * received_data,
                                     SampleInfoSeq  * sample_infos,
                                     int              max_samples,
                                     ReadCondition *  a_condition)
{
  return DataReader::take_w_condition( (Sequence*)received_data,
                                       sample_infos,
                                       max_samples,
                                       a_condition);
}


/******************************************************************/
    
ReturnCode_t
SwitchStatusProfileDataReader::read_next_sample( SwitchStatusProfile     * received_data,
                                  SampleInfo     * sample_info)
{
  return DataReader::read_next_sample( (void*)received_data,
                                       sample_info);
}


/******************************************************************/
    
ReturnCode_t
SwitchStatusProfileDataReader::take_next_sample( SwitchStatusProfile      * received_data,
                                     SampleInfo      * sample_info)
{
  return DataReader::take_next_sample( (void*) received_data,
                                       sample_info);
}


/******************************************************************/
    
ReturnCode_t
SwitchStatusProfileDataReader::read_instance( SwitchStatusProfilePtrSeq       * received_data,
                                  SampleInfoSeq    * sample_infos,
                                  int                max_samples,
                                  InstanceHandle_t   a_handle,
                                  SampleStateMask    sample_states, 
                                  ViewStateMask      view_states, 
                                  InstanceStateMask  instance_states)
{
  return DataReader::read_instance( (Sequence*)received_data, 
                                    sample_infos, 
                                    max_samples, 
                                    a_handle, 
                                    sample_states, 
                                    view_states, 
                                    instance_states );
}


/******************************************************************/
    
ReturnCode_t
SwitchStatusProfileDataReader::take_instance( SwitchStatusProfilePtrSeq    * received_data,
                                  SampleInfoSeq   * sample_infos,
                                  int               max_samples,
                                  InstanceHandle_t  a_handle,
                                  SampleStateMask   sample_states, 
                                  ViewStateMask     view_states, 
                                  InstanceStateMask instance_states)
{
  return DataReader::take_instance( (Sequence*)received_data,
                                    sample_infos,
                                    max_samples,
                                    a_handle,
                                    sample_states, 
                                    view_states, 
                                    instance_states);
}


/******************************************************************/
    
ReturnCode_t
SwitchStatusProfileDataReader::read_next_instance( SwitchStatusProfilePtrSeq    * received_data,
                                       SampleInfoSeq   * sample_infos,
                                       int               max_samples,
                                       InstanceHandle_t  previous_handle,
                                       SampleStateMask   sample_states, 
                                       ViewStateMask     view_states, 
                                       InstanceStateMask instance_states)
{
  return DataReader::read_next_instance( (Sequence*)received_data,
                                         sample_infos,
                                         max_samples,
                                         previous_handle,
                                         sample_states, 
                                         view_states, 
                                         instance_states);
}


/******************************************************************/

ReturnCode_t
SwitchStatusProfileDataReader::take_next_instance( SwitchStatusProfilePtrSeq     * received_data,
                                       SampleInfoSeq    * sample_infos,
                                       int                max_samples,
                                       InstanceHandle_t   previous_handle,
                                       SampleStateMask    sample_states, 
                                       ViewStateMask      view_states, 
                                       InstanceStateMask  instance_states)
{
  return DataReader::take_next_instance( (Sequence*)received_data,
                                         sample_infos,
                                         max_samples,
                                         previous_handle,
                                         sample_states, 
                                         view_states, 
                                         instance_states);
}


/******************************************************************/
    
ReturnCode_t
SwitchStatusProfileDataReader::read_next_instance_w_condition( SwitchStatusProfilePtrSeq     * received_data,
                                                   SampleInfoSeq    * sample_infos,
                                                   int                max_samples,
                                                   InstanceHandle_t   previous_handle,
                                                   ReadCondition *    a_condition)
{
  return DataReader::read_next_instance_w_condition( (Sequence*)received_data,
                                                     sample_infos,
                                                     max_samples,
                                                     previous_handle,
                                                     a_condition);
}


/******************************************************************/
    
ReturnCode_t 
SwitchStatusProfileDataReader::take_next_instance_w_condition( SwitchStatusProfilePtrSeq     * received_data,
                                                   SampleInfoSeq    * sample_infos,
                                                   int                max_samples,
                                                   InstanceHandle_t   previous_handle,
                                                   ReadCondition *    a_condition)
{
  return DataReader::take_next_instance_w_condition( (Sequence*)received_data,
                                                     sample_infos,
                                                     max_samples,
                                                     previous_handle,
                                                     a_condition);
}


/******************************************************************/
    
ReturnCode_t
SwitchStatusProfileDataReader::return_loan( SwitchStatusProfilePtrSeq   * received_data,
                                SampleInfoSeq  * sample_infos)
{
  return DataReader::return_loan( (Sequence*)received_data, sample_infos);
}


/******************************************************************/

ReturnCode_t
SwitchStatusProfileDataReader::get_key_value( SwitchStatusProfile            * key_holder, 
                                  InstanceHandle_t  handle)
{
  if ( ! key_holder )
      return RETCODE_BAD_PARAMETER;

  /* key: use DR to get it */
  return DataReader::get_key_value(  key_holder, handle );
}


/******************************************************************/
/* openfmb::switchmodule:: */
InstanceHandle_t 
SwitchStatusProfileDataReader::lookup_instance( SwitchStatusProfile       * instance_data)
{
  if ( ! instance_data )
      return HANDLE_NIL;

  /* Complex key: use DR to find it */
  return DataReader::lookup_instance(  instance_data );
}


}  /* namespace switchmodule */
/* END SCOPE: switchmodule */

}  /* namespace openfmb */
/* END SCOPE: openfmb */
/* START SCOPE: openfmb */

namespace openfmb {

/* START SCOPE: breakermodule */

namespace breakermodule {


/******************************************************************
 * openfmb::breakermodule:: DataReader Ops
 *****************************************************************/

/******************************************************************/
BreakerControlProfileDataReader::BreakerControlProfileDataReader()
{
}

/******************************************************************/
ReturnCode_t 
BreakerControlProfileDataReader::read( BreakerControlProfilePtrSeq    * received_data,
                         SampleInfoSeq   * sample_infos,
                         int               max_samples,
                         SampleStateMask   sample_states, 
                         ViewStateMask     view_states, 
                         InstanceStateMask instance_states)
{
  return DataReader::read( (Sequence*)received_data, 
			    sample_infos, 
			    max_samples, 
			    sample_states, 
			    view_states, 
			    instance_states );
}
  

/******************************************************************/

ReturnCode_t
BreakerControlProfileDataReader::take( BreakerControlProfilePtrSeq     * received_data,
                         SampleInfoSeq    * sample_infos,
                         int                max_samples,
                         SampleStateMask    sample_states, 
                         ViewStateMask      view_states, 
                         InstanceStateMask  instance_states)
{
  return DataReader::take( (Sequence*)received_data,
                           sample_infos,
                           max_samples,
                           sample_states, 
                           view_states, 
                           instance_states);
}


/******************************************************************/

ReturnCode_t 
BreakerControlProfileDataReader::read_w_condition( BreakerControlProfilePtrSeq  * received_data,
                                     SampleInfoSeq * sample_infos,
                                     int             max_samples,
                                     ReadCondition * a_condition)
{
  return DataReader::read_w_condition( (Sequence*)received_data,
                                       sample_infos,
                                       max_samples,
                                       a_condition);
}


/******************************************************************/
    
ReturnCode_t
BreakerControlProfileDataReader::take_w_condition( BreakerControlProfilePtrSeq   * received_data,
                                     SampleInfoSeq  * sample_infos,
                                     int              max_samples,
                                     ReadCondition *  a_condition)
{
  return DataReader::take_w_condition( (Sequence*)received_data,
                                       sample_infos,
                                       max_samples,
                                       a_condition);
}


/******************************************************************/
    
ReturnCode_t
BreakerControlProfileDataReader::read_next_sample( BreakerControlProfile     * received_data,
                                  SampleInfo     * sample_info)
{
  return DataReader::read_next_sample( (void*)received_data,
                                       sample_info);
}


/******************************************************************/
    
ReturnCode_t
BreakerControlProfileDataReader::take_next_sample( BreakerControlProfile      * received_data,
                                     SampleInfo      * sample_info)
{
  return DataReader::take_next_sample( (void*) received_data,
                                       sample_info);
}


/******************************************************************/
    
ReturnCode_t
BreakerControlProfileDataReader::read_instance( BreakerControlProfilePtrSeq       * received_data,
                                  SampleInfoSeq    * sample_infos,
                                  int                max_samples,
                                  InstanceHandle_t   a_handle,
                                  SampleStateMask    sample_states, 
                                  ViewStateMask      view_states, 
                                  InstanceStateMask  instance_states)
{
  return DataReader::read_instance( (Sequence*)received_data, 
                                    sample_infos, 
                                    max_samples, 
                                    a_handle, 
                                    sample_states, 
                                    view_states, 
                                    instance_states );
}


/******************************************************************/
    
ReturnCode_t
BreakerControlProfileDataReader::take_instance( BreakerControlProfilePtrSeq    * received_data,
                                  SampleInfoSeq   * sample_infos,
                                  int               max_samples,
                                  InstanceHandle_t  a_handle,
                                  SampleStateMask   sample_states, 
                                  ViewStateMask     view_states, 
                                  InstanceStateMask instance_states)
{
  return DataReader::take_instance( (Sequence*)received_data,
                                    sample_infos,
                                    max_samples,
                                    a_handle,
                                    sample_states, 
                                    view_states, 
                                    instance_states);
}


/******************************************************************/
    
ReturnCode_t
BreakerControlProfileDataReader::read_next_instance( BreakerControlProfilePtrSeq    * received_data,
                                       SampleInfoSeq   * sample_infos,
                                       int               max_samples,
                                       InstanceHandle_t  previous_handle,
                                       SampleStateMask   sample_states, 
                                       ViewStateMask     view_states, 
                                       InstanceStateMask instance_states)
{
  return DataReader::read_next_instance( (Sequence*)received_data,
                                         sample_infos,
                                         max_samples,
                                         previous_handle,
                                         sample_states, 
                                         view_states, 
                                         instance_states);
}


/******************************************************************/

ReturnCode_t
BreakerControlProfileDataReader::take_next_instance( BreakerControlProfilePtrSeq     * received_data,
                                       SampleInfoSeq    * sample_infos,
                                       int                max_samples,
                                       InstanceHandle_t   previous_handle,
                                       SampleStateMask    sample_states, 
                                       ViewStateMask      view_states, 
                                       InstanceStateMask  instance_states)
{
  return DataReader::take_next_instance( (Sequence*)received_data,
                                         sample_infos,
                                         max_samples,
                                         previous_handle,
                                         sample_states, 
                                         view_states, 
                                         instance_states);
}


/******************************************************************/
    
ReturnCode_t
BreakerControlProfileDataReader::read_next_instance_w_condition( BreakerControlProfilePtrSeq     * received_data,
                                                   SampleInfoSeq    * sample_infos,
                                                   int                max_samples,
                                                   InstanceHandle_t   previous_handle,
                                                   ReadCondition *    a_condition)
{
  return DataReader::read_next_instance_w_condition( (Sequence*)received_data,
                                                     sample_infos,
                                                     max_samples,
                                                     previous_handle,
                                                     a_condition);
}


/******************************************************************/
    
ReturnCode_t 
BreakerControlProfileDataReader::take_next_instance_w_condition( BreakerControlProfilePtrSeq     * received_data,
                                                   SampleInfoSeq    * sample_infos,
                                                   int                max_samples,
                                                   InstanceHandle_t   previous_handle,
                                                   ReadCondition *    a_condition)
{
  return DataReader::take_next_instance_w_condition( (Sequence*)received_data,
                                                     sample_infos,
                                                     max_samples,
                                                     previous_handle,
                                                     a_condition);
}


/******************************************************************/
    
ReturnCode_t
BreakerControlProfileDataReader::return_loan( BreakerControlProfilePtrSeq   * received_data,
                                SampleInfoSeq  * sample_infos)
{
  return DataReader::return_loan( (Sequence*)received_data, sample_infos);
}


/******************************************************************/

ReturnCode_t
BreakerControlProfileDataReader::get_key_value( BreakerControlProfile            * key_holder, 
                                  InstanceHandle_t  handle)
{
  if ( ! key_holder )
      return RETCODE_BAD_PARAMETER;

  /* key: use DR to get it */
  return DataReader::get_key_value(  key_holder, handle );
}


/******************************************************************/
/* openfmb::breakermodule:: */
InstanceHandle_t 
BreakerControlProfileDataReader::lookup_instance( BreakerControlProfile       * instance_data)
{
  if ( ! instance_data )
      return HANDLE_NIL;

  /* Complex key: use DR to find it */
  return DataReader::lookup_instance(  instance_data );
}


/******************************************************************
 * openfmb::breakermodule:: DataReader Ops
 *****************************************************************/

/******************************************************************/
BreakerEventProfileDataReader::BreakerEventProfileDataReader()
{
}

/******************************************************************/
ReturnCode_t 
BreakerEventProfileDataReader::read( BreakerEventProfilePtrSeq    * received_data,
                         SampleInfoSeq   * sample_infos,
                         int               max_samples,
                         SampleStateMask   sample_states, 
                         ViewStateMask     view_states, 
                         InstanceStateMask instance_states)
{
  return DataReader::read( (Sequence*)received_data, 
			    sample_infos, 
			    max_samples, 
			    sample_states, 
			    view_states, 
			    instance_states );
}
  

/******************************************************************/

ReturnCode_t
BreakerEventProfileDataReader::take( BreakerEventProfilePtrSeq     * received_data,
                         SampleInfoSeq    * sample_infos,
                         int                max_samples,
                         SampleStateMask    sample_states, 
                         ViewStateMask      view_states, 
                         InstanceStateMask  instance_states)
{
  return DataReader::take( (Sequence*)received_data,
                           sample_infos,
                           max_samples,
                           sample_states, 
                           view_states, 
                           instance_states);
}


/******************************************************************/

ReturnCode_t 
BreakerEventProfileDataReader::read_w_condition( BreakerEventProfilePtrSeq  * received_data,
                                     SampleInfoSeq * sample_infos,
                                     int             max_samples,
                                     ReadCondition * a_condition)
{
  return DataReader::read_w_condition( (Sequence*)received_data,
                                       sample_infos,
                                       max_samples,
                                       a_condition);
}


/******************************************************************/
    
ReturnCode_t
BreakerEventProfileDataReader::take_w_condition( BreakerEventProfilePtrSeq   * received_data,
                                     SampleInfoSeq  * sample_infos,
                                     int              max_samples,
                                     ReadCondition *  a_condition)
{
  return DataReader::take_w_condition( (Sequence*)received_data,
                                       sample_infos,
                                       max_samples,
                                       a_condition);
}


/******************************************************************/
    
ReturnCode_t
BreakerEventProfileDataReader::read_next_sample( BreakerEventProfile     * received_data,
                                  SampleInfo     * sample_info)
{
  return DataReader::read_next_sample( (void*)received_data,
                                       sample_info);
}


/******************************************************************/
    
ReturnCode_t
BreakerEventProfileDataReader::take_next_sample( BreakerEventProfile      * received_data,
                                     SampleInfo      * sample_info)
{
  return DataReader::take_next_sample( (void*) received_data,
                                       sample_info);
}


/******************************************************************/
    
ReturnCode_t
BreakerEventProfileDataReader::read_instance( BreakerEventProfilePtrSeq       * received_data,
                                  SampleInfoSeq    * sample_infos,
                                  int                max_samples,
                                  InstanceHandle_t   a_handle,
                                  SampleStateMask    sample_states, 
                                  ViewStateMask      view_states, 
                                  InstanceStateMask  instance_states)
{
  return DataReader::read_instance( (Sequence*)received_data, 
                                    sample_infos, 
                                    max_samples, 
                                    a_handle, 
                                    sample_states, 
                                    view_states, 
                                    instance_states );
}


/******************************************************************/
    
ReturnCode_t
BreakerEventProfileDataReader::take_instance( BreakerEventProfilePtrSeq    * received_data,
                                  SampleInfoSeq   * sample_infos,
                                  int               max_samples,
                                  InstanceHandle_t  a_handle,
                                  SampleStateMask   sample_states, 
                                  ViewStateMask     view_states, 
                                  InstanceStateMask instance_states)
{
  return DataReader::take_instance( (Sequence*)received_data,
                                    sample_infos,
                                    max_samples,
                                    a_handle,
                                    sample_states, 
                                    view_states, 
                                    instance_states);
}


/******************************************************************/
    
ReturnCode_t
BreakerEventProfileDataReader::read_next_instance( BreakerEventProfilePtrSeq    * received_data,
                                       SampleInfoSeq   * sample_infos,
                                       int               max_samples,
                                       InstanceHandle_t  previous_handle,
                                       SampleStateMask   sample_states, 
                                       ViewStateMask     view_states, 
                                       InstanceStateMask instance_states)
{
  return DataReader::read_next_instance( (Sequence*)received_data,
                                         sample_infos,
                                         max_samples,
                                         previous_handle,
                                         sample_states, 
                                         view_states, 
                                         instance_states);
}


/******************************************************************/

ReturnCode_t
BreakerEventProfileDataReader::take_next_instance( BreakerEventProfilePtrSeq     * received_data,
                                       SampleInfoSeq    * sample_infos,
                                       int                max_samples,
                                       InstanceHandle_t   previous_handle,
                                       SampleStateMask    sample_states, 
                                       ViewStateMask      view_states, 
                                       InstanceStateMask  instance_states)
{
  return DataReader::take_next_instance( (Sequence*)received_data,
                                         sample_infos,
                                         max_samples,
                                         previous_handle,
                                         sample_states, 
                                         view_states, 
                                         instance_states);
}


/******************************************************************/
    
ReturnCode_t
BreakerEventProfileDataReader::read_next_instance_w_condition( BreakerEventProfilePtrSeq     * received_data,
                                                   SampleInfoSeq    * sample_infos,
                                                   int                max_samples,
                                                   InstanceHandle_t   previous_handle,
                                                   ReadCondition *    a_condition)
{
  return DataReader::read_next_instance_w_condition( (Sequence*)received_data,
                                                     sample_infos,
                                                     max_samples,
                                                     previous_handle,
                                                     a_condition);
}


/******************************************************************/
    
ReturnCode_t 
BreakerEventProfileDataReader::take_next_instance_w_condition( BreakerEventProfilePtrSeq     * received_data,
                                                   SampleInfoSeq    * sample_infos,
                                                   int                max_samples,
                                                   InstanceHandle_t   previous_handle,
                                                   ReadCondition *    a_condition)
{
  return DataReader::take_next_instance_w_condition( (Sequence*)received_data,
                                                     sample_infos,
                                                     max_samples,
                                                     previous_handle,
                                                     a_condition);
}


/******************************************************************/
    
ReturnCode_t
BreakerEventProfileDataReader::return_loan( BreakerEventProfilePtrSeq   * received_data,
                                SampleInfoSeq  * sample_infos)
{
  return DataReader::return_loan( (Sequence*)received_data, sample_infos);
}


/******************************************************************/

ReturnCode_t
BreakerEventProfileDataReader::get_key_value( BreakerEventProfile            * key_holder, 
                                  InstanceHandle_t  handle)
{
  if ( ! key_holder )
      return RETCODE_BAD_PARAMETER;

  /* key: use DR to get it */
  return DataReader::get_key_value(  key_holder, handle );
}


/******************************************************************/
/* openfmb::breakermodule:: */
InstanceHandle_t 
BreakerEventProfileDataReader::lookup_instance( BreakerEventProfile       * instance_data)
{
  if ( ! instance_data )
      return HANDLE_NIL;

  /* Complex key: use DR to find it */
  return DataReader::lookup_instance(  instance_data );
}


/******************************************************************
 * openfmb::breakermodule:: DataReader Ops
 *****************************************************************/

/******************************************************************/
BreakerReadingValueDataReader::BreakerReadingValueDataReader()
{
}

/******************************************************************/
ReturnCode_t 
BreakerReadingValueDataReader::read( BreakerReadingValuePtrSeq    * received_data,
                         SampleInfoSeq   * sample_infos,
                         int               max_samples,
                         SampleStateMask   sample_states, 
                         ViewStateMask     view_states, 
                         InstanceStateMask instance_states)
{
  return DataReader::read( (Sequence*)received_data, 
			    sample_infos, 
			    max_samples, 
			    sample_states, 
			    view_states, 
			    instance_states );
}
  

/******************************************************************/

ReturnCode_t
BreakerReadingValueDataReader::take( BreakerReadingValuePtrSeq     * received_data,
                         SampleInfoSeq    * sample_infos,
                         int                max_samples,
                         SampleStateMask    sample_states, 
                         ViewStateMask      view_states, 
                         InstanceStateMask  instance_states)
{
  return DataReader::take( (Sequence*)received_data,
                           sample_infos,
                           max_samples,
                           sample_states, 
                           view_states, 
                           instance_states);
}


/******************************************************************/

ReturnCode_t 
BreakerReadingValueDataReader::read_w_condition( BreakerReadingValuePtrSeq  * received_data,
                                     SampleInfoSeq * sample_infos,
                                     int             max_samples,
                                     ReadCondition * a_condition)
{
  return DataReader::read_w_condition( (Sequence*)received_data,
                                       sample_infos,
                                       max_samples,
                                       a_condition);
}


/******************************************************************/
    
ReturnCode_t
BreakerReadingValueDataReader::take_w_condition( BreakerReadingValuePtrSeq   * received_data,
                                     SampleInfoSeq  * sample_infos,
                                     int              max_samples,
                                     ReadCondition *  a_condition)
{
  return DataReader::take_w_condition( (Sequence*)received_data,
                                       sample_infos,
                                       max_samples,
                                       a_condition);
}


/******************************************************************/
    
ReturnCode_t
BreakerReadingValueDataReader::read_next_sample( BreakerReadingValue     * received_data,
                                  SampleInfo     * sample_info)
{
  return DataReader::read_next_sample( (void*)received_data,
                                       sample_info);
}


/******************************************************************/
    
ReturnCode_t
BreakerReadingValueDataReader::take_next_sample( BreakerReadingValue      * received_data,
                                     SampleInfo      * sample_info)
{
  return DataReader::take_next_sample( (void*) received_data,
                                       sample_info);
}


/******************************************************************/
    
ReturnCode_t
BreakerReadingValueDataReader::read_instance( BreakerReadingValuePtrSeq       * received_data,
                                  SampleInfoSeq    * sample_infos,
                                  int                max_samples,
                                  InstanceHandle_t   a_handle,
                                  SampleStateMask    sample_states, 
                                  ViewStateMask      view_states, 
                                  InstanceStateMask  instance_states)
{
  return DataReader::read_instance( (Sequence*)received_data, 
                                    sample_infos, 
                                    max_samples, 
                                    a_handle, 
                                    sample_states, 
                                    view_states, 
                                    instance_states );
}


/******************************************************************/
    
ReturnCode_t
BreakerReadingValueDataReader::take_instance( BreakerReadingValuePtrSeq    * received_data,
                                  SampleInfoSeq   * sample_infos,
                                  int               max_samples,
                                  InstanceHandle_t  a_handle,
                                  SampleStateMask   sample_states, 
                                  ViewStateMask     view_states, 
                                  InstanceStateMask instance_states)
{
  return DataReader::take_instance( (Sequence*)received_data,
                                    sample_infos,
                                    max_samples,
                                    a_handle,
                                    sample_states, 
                                    view_states, 
                                    instance_states);
}


/******************************************************************/
    
ReturnCode_t
BreakerReadingValueDataReader::read_next_instance( BreakerReadingValuePtrSeq    * received_data,
                                       SampleInfoSeq   * sample_infos,
                                       int               max_samples,
                                       InstanceHandle_t  previous_handle,
                                       SampleStateMask   sample_states, 
                                       ViewStateMask     view_states, 
                                       InstanceStateMask instance_states)
{
  return DataReader::read_next_instance( (Sequence*)received_data,
                                         sample_infos,
                                         max_samples,
                                         previous_handle,
                                         sample_states, 
                                         view_states, 
                                         instance_states);
}


/******************************************************************/

ReturnCode_t
BreakerReadingValueDataReader::take_next_instance( BreakerReadingValuePtrSeq     * received_data,
                                       SampleInfoSeq    * sample_infos,
                                       int                max_samples,
                                       InstanceHandle_t   previous_handle,
                                       SampleStateMask    sample_states, 
                                       ViewStateMask      view_states, 
                                       InstanceStateMask  instance_states)
{
  return DataReader::take_next_instance( (Sequence*)received_data,
                                         sample_infos,
                                         max_samples,
                                         previous_handle,
                                         sample_states, 
                                         view_states, 
                                         instance_states);
}


/******************************************************************/
    
ReturnCode_t
BreakerReadingValueDataReader::read_next_instance_w_condition( BreakerReadingValuePtrSeq     * received_data,
                                                   SampleInfoSeq    * sample_infos,
                                                   int                max_samples,
                                                   InstanceHandle_t   previous_handle,
                                                   ReadCondition *    a_condition)
{
  return DataReader::read_next_instance_w_condition( (Sequence*)received_data,
                                                     sample_infos,
                                                     max_samples,
                                                     previous_handle,
                                                     a_condition);
}


/******************************************************************/
    
ReturnCode_t 
BreakerReadingValueDataReader::take_next_instance_w_condition( BreakerReadingValuePtrSeq     * received_data,
                                                   SampleInfoSeq    * sample_infos,
                                                   int                max_samples,
                                                   InstanceHandle_t   previous_handle,
                                                   ReadCondition *    a_condition)
{
  return DataReader::take_next_instance_w_condition( (Sequence*)received_data,
                                                     sample_infos,
                                                     max_samples,
                                                     previous_handle,
                                                     a_condition);
}


/******************************************************************/
    
ReturnCode_t
BreakerReadingValueDataReader::return_loan( BreakerReadingValuePtrSeq   * received_data,
                                SampleInfoSeq  * sample_infos)
{
  return DataReader::return_loan( (Sequence*)received_data, sample_infos);
}


/******************************************************************/

ReturnCode_t
BreakerReadingValueDataReader::get_key_value( BreakerReadingValue            * key_holder, 
                                  InstanceHandle_t  handle)
{
  if ( ! key_holder )
      return RETCODE_BAD_PARAMETER;

  /* No keys: no op */
  CDX_UNUSED(handle);
  key_holder->clear();
  return DDS::RETCODE_OK;
}


/******************************************************************/
/* openfmb::breakermodule:: */
InstanceHandle_t 
BreakerReadingValueDataReader::lookup_instance( BreakerReadingValue       * instance_data)
{
  if ( ! instance_data )
      return HANDLE_NIL;

  /* No keys */
  return DDS::HANDLE_DEFAULT;
}


/******************************************************************
 * openfmb::breakermodule:: DataReader Ops
 *****************************************************************/

/******************************************************************/
BreakerStatusProfileDataReader::BreakerStatusProfileDataReader()
{
}

/******************************************************************/
ReturnCode_t 
BreakerStatusProfileDataReader::read( BreakerStatusProfilePtrSeq    * received_data,
                         SampleInfoSeq   * sample_infos,
                         int               max_samples,
                         SampleStateMask   sample_states, 
                         ViewStateMask     view_states, 
                         InstanceStateMask instance_states)
{
  return DataReader::read( (Sequence*)received_data, 
			    sample_infos, 
			    max_samples, 
			    sample_states, 
			    view_states, 
			    instance_states );
}
  

/******************************************************************/

ReturnCode_t
BreakerStatusProfileDataReader::take( BreakerStatusProfilePtrSeq     * received_data,
                         SampleInfoSeq    * sample_infos,
                         int                max_samples,
                         SampleStateMask    sample_states, 
                         ViewStateMask      view_states, 
                         InstanceStateMask  instance_states)
{
  return DataReader::take( (Sequence*)received_data,
                           sample_infos,
                           max_samples,
                           sample_states, 
                           view_states, 
                           instance_states);
}


/******************************************************************/

ReturnCode_t 
BreakerStatusProfileDataReader::read_w_condition( BreakerStatusProfilePtrSeq  * received_data,
                                     SampleInfoSeq * sample_infos,
                                     int             max_samples,
                                     ReadCondition * a_condition)
{
  return DataReader::read_w_condition( (Sequence*)received_data,
                                       sample_infos,
                                       max_samples,
                                       a_condition);
}


/******************************************************************/
    
ReturnCode_t
BreakerStatusProfileDataReader::take_w_condition( BreakerStatusProfilePtrSeq   * received_data,
                                     SampleInfoSeq  * sample_infos,
                                     int              max_samples,
                                     ReadCondition *  a_condition)
{
  return DataReader::take_w_condition( (Sequence*)received_data,
                                       sample_infos,
                                       max_samples,
                                       a_condition);
}


/******************************************************************/
    
ReturnCode_t
BreakerStatusProfileDataReader::read_next_sample( BreakerStatusProfile     * received_data,
                                  SampleInfo     * sample_info)
{
  return DataReader::read_next_sample( (void*)received_data,
                                       sample_info);
}


/******************************************************************/
    
ReturnCode_t
BreakerStatusProfileDataReader::take_next_sample( BreakerStatusProfile      * received_data,
                                     SampleInfo      * sample_info)
{
  return DataReader::take_next_sample( (void*) received_data,
                                       sample_info);
}


/******************************************************************/
    
ReturnCode_t
BreakerStatusProfileDataReader::read_instance( BreakerStatusProfilePtrSeq       * received_data,
                                  SampleInfoSeq    * sample_infos,
                                  int                max_samples,
                                  InstanceHandle_t   a_handle,
                                  SampleStateMask    sample_states, 
                                  ViewStateMask      view_states, 
                                  InstanceStateMask  instance_states)
{
  return DataReader::read_instance( (Sequence*)received_data, 
                                    sample_infos, 
                                    max_samples, 
                                    a_handle, 
                                    sample_states, 
                                    view_states, 
                                    instance_states );
}


/******************************************************************/
    
ReturnCode_t
BreakerStatusProfileDataReader::take_instance( BreakerStatusProfilePtrSeq    * received_data,
                                  SampleInfoSeq   * sample_infos,
                                  int               max_samples,
                                  InstanceHandle_t  a_handle,
                                  SampleStateMask   sample_states, 
                                  ViewStateMask     view_states, 
                                  InstanceStateMask instance_states)
{
  return DataReader::take_instance( (Sequence*)received_data,
                                    sample_infos,
                                    max_samples,
                                    a_handle,
                                    sample_states, 
                                    view_states, 
                                    instance_states);
}


/******************************************************************/
    
ReturnCode_t
BreakerStatusProfileDataReader::read_next_instance( BreakerStatusProfilePtrSeq    * received_data,
                                       SampleInfoSeq   * sample_infos,
                                       int               max_samples,
                                       InstanceHandle_t  previous_handle,
                                       SampleStateMask   sample_states, 
                                       ViewStateMask     view_states, 
                                       InstanceStateMask instance_states)
{
  return DataReader::read_next_instance( (Sequence*)received_data,
                                         sample_infos,
                                         max_samples,
                                         previous_handle,
                                         sample_states, 
                                         view_states, 
                                         instance_states);
}


/******************************************************************/

ReturnCode_t
BreakerStatusProfileDataReader::take_next_instance( BreakerStatusProfilePtrSeq     * received_data,
                                       SampleInfoSeq    * sample_infos,
                                       int                max_samples,
                                       InstanceHandle_t   previous_handle,
                                       SampleStateMask    sample_states, 
                                       ViewStateMask      view_states, 
                                       InstanceStateMask  instance_states)
{
  return DataReader::take_next_instance( (Sequence*)received_data,
                                         sample_infos,
                                         max_samples,
                                         previous_handle,
                                         sample_states, 
                                         view_states, 
                                         instance_states);
}


/******************************************************************/
    
ReturnCode_t
BreakerStatusProfileDataReader::read_next_instance_w_condition( BreakerStatusProfilePtrSeq     * received_data,
                                                   SampleInfoSeq    * sample_infos,
                                                   int                max_samples,
                                                   InstanceHandle_t   previous_handle,
                                                   ReadCondition *    a_condition)
{
  return DataReader::read_next_instance_w_condition( (Sequence*)received_data,
                                                     sample_infos,
                                                     max_samples,
                                                     previous_handle,
                                                     a_condition);
}


/******************************************************************/
    
ReturnCode_t 
BreakerStatusProfileDataReader::take_next_instance_w_condition( BreakerStatusProfilePtrSeq     * received_data,
                                                   SampleInfoSeq    * sample_infos,
                                                   int                max_samples,
                                                   InstanceHandle_t   previous_handle,
                                                   ReadCondition *    a_condition)
{
  return DataReader::take_next_instance_w_condition( (Sequence*)received_data,
                                                     sample_infos,
                                                     max_samples,
                                                     previous_handle,
                                                     a_condition);
}


/******************************************************************/
    
ReturnCode_t
BreakerStatusProfileDataReader::return_loan( BreakerStatusProfilePtrSeq   * received_data,
                                SampleInfoSeq  * sample_infos)
{
  return DataReader::return_loan( (Sequence*)received_data, sample_infos);
}


/******************************************************************/

ReturnCode_t
BreakerStatusProfileDataReader::get_key_value( BreakerStatusProfile            * key_holder, 
                                  InstanceHandle_t  handle)
{
  if ( ! key_holder )
      return RETCODE_BAD_PARAMETER;

  /* key: use DR to get it */
  return DataReader::get_key_value(  key_holder, handle );
}


/******************************************************************/
/* openfmb::breakermodule:: */
InstanceHandle_t 
BreakerStatusProfileDataReader::lookup_instance( BreakerStatusProfile       * instance_data)
{
  if ( ! instance_data )
      return HANDLE_NIL;

  /* Complex key: use DR to find it */
  return DataReader::lookup_instance(  instance_data );
}


}  /* namespace breakermodule */
/* END SCOPE: breakermodule */
/* START SCOPE: commonmodule */

namespace commonmodule {


}  /* namespace commonmodule */
/* END SCOPE: commonmodule */
/* START SCOPE: essmodule */

namespace essmodule {


/******************************************************************
 * openfmb::essmodule:: DataReader Ops
 *****************************************************************/

/******************************************************************/
EssControlFSCCDataReader::EssControlFSCCDataReader()
{
}

/******************************************************************/
ReturnCode_t 
EssControlFSCCDataReader::read( EssControlFSCCPtrSeq    * received_data,
                         SampleInfoSeq   * sample_infos,
                         int               max_samples,
                         SampleStateMask   sample_states, 
                         ViewStateMask     view_states, 
                         InstanceStateMask instance_states)
{
  return DataReader::read( (Sequence*)received_data, 
			    sample_infos, 
			    max_samples, 
			    sample_states, 
			    view_states, 
			    instance_states );
}
  

/******************************************************************/

ReturnCode_t
EssControlFSCCDataReader::take( EssControlFSCCPtrSeq     * received_data,
                         SampleInfoSeq    * sample_infos,
                         int                max_samples,
                         SampleStateMask    sample_states, 
                         ViewStateMask      view_states, 
                         InstanceStateMask  instance_states)
{
  return DataReader::take( (Sequence*)received_data,
                           sample_infos,
                           max_samples,
                           sample_states, 
                           view_states, 
                           instance_states);
}


/******************************************************************/

ReturnCode_t 
EssControlFSCCDataReader::read_w_condition( EssControlFSCCPtrSeq  * received_data,
                                     SampleInfoSeq * sample_infos,
                                     int             max_samples,
                                     ReadCondition * a_condition)
{
  return DataReader::read_w_condition( (Sequence*)received_data,
                                       sample_infos,
                                       max_samples,
                                       a_condition);
}


/******************************************************************/
    
ReturnCode_t
EssControlFSCCDataReader::take_w_condition( EssControlFSCCPtrSeq   * received_data,
                                     SampleInfoSeq  * sample_infos,
                                     int              max_samples,
                                     ReadCondition *  a_condition)
{
  return DataReader::take_w_condition( (Sequence*)received_data,
                                       sample_infos,
                                       max_samples,
                                       a_condition);
}


/******************************************************************/
    
ReturnCode_t
EssControlFSCCDataReader::read_next_sample( EssControlFSCC     * received_data,
                                  SampleInfo     * sample_info)
{
  return DataReader::read_next_sample( (void*)received_data,
                                       sample_info);
}


/******************************************************************/
    
ReturnCode_t
EssControlFSCCDataReader::take_next_sample( EssControlFSCC      * received_data,
                                     SampleInfo      * sample_info)
{
  return DataReader::take_next_sample( (void*) received_data,
                                       sample_info);
}


/******************************************************************/
    
ReturnCode_t
EssControlFSCCDataReader::read_instance( EssControlFSCCPtrSeq       * received_data,
                                  SampleInfoSeq    * sample_infos,
                                  int                max_samples,
                                  InstanceHandle_t   a_handle,
                                  SampleStateMask    sample_states, 
                                  ViewStateMask      view_states, 
                                  InstanceStateMask  instance_states)
{
  return DataReader::read_instance( (Sequence*)received_data, 
                                    sample_infos, 
                                    max_samples, 
                                    a_handle, 
                                    sample_states, 
                                    view_states, 
                                    instance_states );
}


/******************************************************************/
    
ReturnCode_t
EssControlFSCCDataReader::take_instance( EssControlFSCCPtrSeq    * received_data,
                                  SampleInfoSeq   * sample_infos,
                                  int               max_samples,
                                  InstanceHandle_t  a_handle,
                                  SampleStateMask   sample_states, 
                                  ViewStateMask     view_states, 
                                  InstanceStateMask instance_states)
{
  return DataReader::take_instance( (Sequence*)received_data,
                                    sample_infos,
                                    max_samples,
                                    a_handle,
                                    sample_states, 
                                    view_states, 
                                    instance_states);
}


/******************************************************************/
    
ReturnCode_t
EssControlFSCCDataReader::read_next_instance( EssControlFSCCPtrSeq    * received_data,
                                       SampleInfoSeq   * sample_infos,
                                       int               max_samples,
                                       InstanceHandle_t  previous_handle,
                                       SampleStateMask   sample_states, 
                                       ViewStateMask     view_states, 
                                       InstanceStateMask instance_states)
{
  return DataReader::read_next_instance( (Sequence*)received_data,
                                         sample_infos,
                                         max_samples,
                                         previous_handle,
                                         sample_states, 
                                         view_states, 
                                         instance_states);
}


/******************************************************************/

ReturnCode_t
EssControlFSCCDataReader::take_next_instance( EssControlFSCCPtrSeq     * received_data,
                                       SampleInfoSeq    * sample_infos,
                                       int                max_samples,
                                       InstanceHandle_t   previous_handle,
                                       SampleStateMask    sample_states, 
                                       ViewStateMask      view_states, 
                                       InstanceStateMask  instance_states)
{
  return DataReader::take_next_instance( (Sequence*)received_data,
                                         sample_infos,
                                         max_samples,
                                         previous_handle,
                                         sample_states, 
                                         view_states, 
                                         instance_states);
}


/******************************************************************/
    
ReturnCode_t
EssControlFSCCDataReader::read_next_instance_w_condition( EssControlFSCCPtrSeq     * received_data,
                                                   SampleInfoSeq    * sample_infos,
                                                   int                max_samples,
                                                   InstanceHandle_t   previous_handle,
                                                   ReadCondition *    a_condition)
{
  return DataReader::read_next_instance_w_condition( (Sequence*)received_data,
                                                     sample_infos,
                                                     max_samples,
                                                     previous_handle,
                                                     a_condition);
}


/******************************************************************/
    
ReturnCode_t 
EssControlFSCCDataReader::take_next_instance_w_condition( EssControlFSCCPtrSeq     * received_data,
                                                   SampleInfoSeq    * sample_infos,
                                                   int                max_samples,
                                                   InstanceHandle_t   previous_handle,
                                                   ReadCondition *    a_condition)
{
  return DataReader::take_next_instance_w_condition( (Sequence*)received_data,
                                                     sample_infos,
                                                     max_samples,
                                                     previous_handle,
                                                     a_condition);
}


/******************************************************************/
    
ReturnCode_t
EssControlFSCCDataReader::return_loan( EssControlFSCCPtrSeq   * received_data,
                                SampleInfoSeq  * sample_infos)
{
  return DataReader::return_loan( (Sequence*)received_data, sample_infos);
}


/******************************************************************/

ReturnCode_t
EssControlFSCCDataReader::get_key_value( EssControlFSCC            * key_holder, 
                                  InstanceHandle_t  handle)
{
  if ( ! key_holder )
      return RETCODE_BAD_PARAMETER;

  /* No keys: no op */
  CDX_UNUSED(handle);
  key_holder->clear();
  return DDS::RETCODE_OK;
}


/******************************************************************/
/* openfmb::essmodule:: */
InstanceHandle_t 
EssControlFSCCDataReader::lookup_instance( EssControlFSCC       * instance_data)
{
  if ( ! instance_data )
      return HANDLE_NIL;

  /* No keys */
  return DDS::HANDLE_DEFAULT;
}


/******************************************************************
 * openfmb::essmodule:: DataReader Ops
 *****************************************************************/

/******************************************************************/
ESSReadingProfileDataReader::ESSReadingProfileDataReader()
{
}

/******************************************************************/
ReturnCode_t 
ESSReadingProfileDataReader::read( ESSReadingProfilePtrSeq    * received_data,
                         SampleInfoSeq   * sample_infos,
                         int               max_samples,
                         SampleStateMask   sample_states, 
                         ViewStateMask     view_states, 
                         InstanceStateMask instance_states)
{
  return DataReader::read( (Sequence*)received_data, 
			    sample_infos, 
			    max_samples, 
			    sample_states, 
			    view_states, 
			    instance_states );
}
  

/******************************************************************/

ReturnCode_t
ESSReadingProfileDataReader::take( ESSReadingProfilePtrSeq     * received_data,
                         SampleInfoSeq    * sample_infos,
                         int                max_samples,
                         SampleStateMask    sample_states, 
                         ViewStateMask      view_states, 
                         InstanceStateMask  instance_states)
{
  return DataReader::take( (Sequence*)received_data,
                           sample_infos,
                           max_samples,
                           sample_states, 
                           view_states, 
                           instance_states);
}


/******************************************************************/

ReturnCode_t 
ESSReadingProfileDataReader::read_w_condition( ESSReadingProfilePtrSeq  * received_data,
                                     SampleInfoSeq * sample_infos,
                                     int             max_samples,
                                     ReadCondition * a_condition)
{
  return DataReader::read_w_condition( (Sequence*)received_data,
                                       sample_infos,
                                       max_samples,
                                       a_condition);
}


/******************************************************************/
    
ReturnCode_t
ESSReadingProfileDataReader::take_w_condition( ESSReadingProfilePtrSeq   * received_data,
                                     SampleInfoSeq  * sample_infos,
                                     int              max_samples,
                                     ReadCondition *  a_condition)
{
  return DataReader::take_w_condition( (Sequence*)received_data,
                                       sample_infos,
                                       max_samples,
                                       a_condition);
}


/******************************************************************/
    
ReturnCode_t
ESSReadingProfileDataReader::read_next_sample( ESSReadingProfile     * received_data,
                                  SampleInfo     * sample_info)
{
  return DataReader::read_next_sample( (void*)received_data,
                                       sample_info);
}


/******************************************************************/
    
ReturnCode_t
ESSReadingProfileDataReader::take_next_sample( ESSReadingProfile      * received_data,
                                     SampleInfo      * sample_info)
{
  return DataReader::take_next_sample( (void*) received_data,
                                       sample_info);
}


/******************************************************************/
    
ReturnCode_t
ESSReadingProfileDataReader::read_instance( ESSReadingProfilePtrSeq       * received_data,
                                  SampleInfoSeq    * sample_infos,
                                  int                max_samples,
                                  InstanceHandle_t   a_handle,
                                  SampleStateMask    sample_states, 
                                  ViewStateMask      view_states, 
                                  InstanceStateMask  instance_states)
{
  return DataReader::read_instance( (Sequence*)received_data, 
                                    sample_infos, 
                                    max_samples, 
                                    a_handle, 
                                    sample_states, 
                                    view_states, 
                                    instance_states );
}


/******************************************************************/
    
ReturnCode_t
ESSReadingProfileDataReader::take_instance( ESSReadingProfilePtrSeq    * received_data,
                                  SampleInfoSeq   * sample_infos,
                                  int               max_samples,
                                  InstanceHandle_t  a_handle,
                                  SampleStateMask   sample_states, 
                                  ViewStateMask     view_states, 
                                  InstanceStateMask instance_states)
{
  return DataReader::take_instance( (Sequence*)received_data,
                                    sample_infos,
                                    max_samples,
                                    a_handle,
                                    sample_states, 
                                    view_states, 
                                    instance_states);
}


/******************************************************************/
    
ReturnCode_t
ESSReadingProfileDataReader::read_next_instance( ESSReadingProfilePtrSeq    * received_data,
                                       SampleInfoSeq   * sample_infos,
                                       int               max_samples,
                                       InstanceHandle_t  previous_handle,
                                       SampleStateMask   sample_states, 
                                       ViewStateMask     view_states, 
                                       InstanceStateMask instance_states)
{
  return DataReader::read_next_instance( (Sequence*)received_data,
                                         sample_infos,
                                         max_samples,
                                         previous_handle,
                                         sample_states, 
                                         view_states, 
                                         instance_states);
}


/******************************************************************/

ReturnCode_t
ESSReadingProfileDataReader::take_next_instance( ESSReadingProfilePtrSeq     * received_data,
                                       SampleInfoSeq    * sample_infos,
                                       int                max_samples,
                                       InstanceHandle_t   previous_handle,
                                       SampleStateMask    sample_states, 
                                       ViewStateMask      view_states, 
                                       InstanceStateMask  instance_states)
{
  return DataReader::take_next_instance( (Sequence*)received_data,
                                         sample_infos,
                                         max_samples,
                                         previous_handle,
                                         sample_states, 
                                         view_states, 
                                         instance_states);
}


/******************************************************************/
    
ReturnCode_t
ESSReadingProfileDataReader::read_next_instance_w_condition( ESSReadingProfilePtrSeq     * received_data,
                                                   SampleInfoSeq    * sample_infos,
                                                   int                max_samples,
                                                   InstanceHandle_t   previous_handle,
                                                   ReadCondition *    a_condition)
{
  return DataReader::read_next_instance_w_condition( (Sequence*)received_data,
                                                     sample_infos,
                                                     max_samples,
                                                     previous_handle,
                                                     a_condition);
}


/******************************************************************/
    
ReturnCode_t 
ESSReadingProfileDataReader::take_next_instance_w_condition( ESSReadingProfilePtrSeq     * received_data,
                                                   SampleInfoSeq    * sample_infos,
                                                   int                max_samples,
                                                   InstanceHandle_t   previous_handle,
                                                   ReadCondition *    a_condition)
{
  return DataReader::take_next_instance_w_condition( (Sequence*)received_data,
                                                     sample_infos,
                                                     max_samples,
                                                     previous_handle,
                                                     a_condition);
}


/******************************************************************/
    
ReturnCode_t
ESSReadingProfileDataReader::return_loan( ESSReadingProfilePtrSeq   * received_data,
                                SampleInfoSeq  * sample_infos)
{
  return DataReader::return_loan( (Sequence*)received_data, sample_infos);
}


/******************************************************************/

ReturnCode_t
ESSReadingProfileDataReader::get_key_value( ESSReadingProfile            * key_holder, 
                                  InstanceHandle_t  handle)
{
  if ( ! key_holder )
      return RETCODE_BAD_PARAMETER;

  /* key: use DR to get it */
  return DataReader::get_key_value(  key_holder, handle );
}


/******************************************************************/
/* openfmb::essmodule:: */
InstanceHandle_t 
ESSReadingProfileDataReader::lookup_instance( ESSReadingProfile       * instance_data)
{
  if ( ! instance_data )
      return HANDLE_NIL;

  /* Complex key: use DR to find it */
  return DataReader::lookup_instance(  instance_data );
}


/******************************************************************
 * openfmb::essmodule:: DataReader Ops
 *****************************************************************/

/******************************************************************/
ESSControlDataReader::ESSControlDataReader()
{
}

/******************************************************************/
ReturnCode_t 
ESSControlDataReader::read( ESSControlPtrSeq    * received_data,
                         SampleInfoSeq   * sample_infos,
                         int               max_samples,
                         SampleStateMask   sample_states, 
                         ViewStateMask     view_states, 
                         InstanceStateMask instance_states)
{
  return DataReader::read( (Sequence*)received_data, 
			    sample_infos, 
			    max_samples, 
			    sample_states, 
			    view_states, 
			    instance_states );
}
  

/******************************************************************/

ReturnCode_t
ESSControlDataReader::take( ESSControlPtrSeq     * received_data,
                         SampleInfoSeq    * sample_infos,
                         int                max_samples,
                         SampleStateMask    sample_states, 
                         ViewStateMask      view_states, 
                         InstanceStateMask  instance_states)
{
  return DataReader::take( (Sequence*)received_data,
                           sample_infos,
                           max_samples,
                           sample_states, 
                           view_states, 
                           instance_states);
}


/******************************************************************/

ReturnCode_t 
ESSControlDataReader::read_w_condition( ESSControlPtrSeq  * received_data,
                                     SampleInfoSeq * sample_infos,
                                     int             max_samples,
                                     ReadCondition * a_condition)
{
  return DataReader::read_w_condition( (Sequence*)received_data,
                                       sample_infos,
                                       max_samples,
                                       a_condition);
}


/******************************************************************/
    
ReturnCode_t
ESSControlDataReader::take_w_condition( ESSControlPtrSeq   * received_data,
                                     SampleInfoSeq  * sample_infos,
                                     int              max_samples,
                                     ReadCondition *  a_condition)
{
  return DataReader::take_w_condition( (Sequence*)received_data,
                                       sample_infos,
                                       max_samples,
                                       a_condition);
}


/******************************************************************/
    
ReturnCode_t
ESSControlDataReader::read_next_sample( ESSControl     * received_data,
                                  SampleInfo     * sample_info)
{
  return DataReader::read_next_sample( (void*)received_data,
                                       sample_info);
}


/******************************************************************/
    
ReturnCode_t
ESSControlDataReader::take_next_sample( ESSControl      * received_data,
                                     SampleInfo      * sample_info)
{
  return DataReader::take_next_sample( (void*) received_data,
                                       sample_info);
}


/******************************************************************/
    
ReturnCode_t
ESSControlDataReader::read_instance( ESSControlPtrSeq       * received_data,
                                  SampleInfoSeq    * sample_infos,
                                  int                max_samples,
                                  InstanceHandle_t   a_handle,
                                  SampleStateMask    sample_states, 
                                  ViewStateMask      view_states, 
                                  InstanceStateMask  instance_states)
{
  return DataReader::read_instance( (Sequence*)received_data, 
                                    sample_infos, 
                                    max_samples, 
                                    a_handle, 
                                    sample_states, 
                                    view_states, 
                                    instance_states );
}


/******************************************************************/
    
ReturnCode_t
ESSControlDataReader::take_instance( ESSControlPtrSeq    * received_data,
                                  SampleInfoSeq   * sample_infos,
                                  int               max_samples,
                                  InstanceHandle_t  a_handle,
                                  SampleStateMask   sample_states, 
                                  ViewStateMask     view_states, 
                                  InstanceStateMask instance_states)
{
  return DataReader::take_instance( (Sequence*)received_data,
                                    sample_infos,
                                    max_samples,
                                    a_handle,
                                    sample_states, 
                                    view_states, 
                                    instance_states);
}


/******************************************************************/
    
ReturnCode_t
ESSControlDataReader::read_next_instance( ESSControlPtrSeq    * received_data,
                                       SampleInfoSeq   * sample_infos,
                                       int               max_samples,
                                       InstanceHandle_t  previous_handle,
                                       SampleStateMask   sample_states, 
                                       ViewStateMask     view_states, 
                                       InstanceStateMask instance_states)
{
  return DataReader::read_next_instance( (Sequence*)received_data,
                                         sample_infos,
                                         max_samples,
                                         previous_handle,
                                         sample_states, 
                                         view_states, 
                                         instance_states);
}


/******************************************************************/

ReturnCode_t
ESSControlDataReader::take_next_instance( ESSControlPtrSeq     * received_data,
                                       SampleInfoSeq    * sample_infos,
                                       int                max_samples,
                                       InstanceHandle_t   previous_handle,
                                       SampleStateMask    sample_states, 
                                       ViewStateMask      view_states, 
                                       InstanceStateMask  instance_states)
{
  return DataReader::take_next_instance( (Sequence*)received_data,
                                         sample_infos,
                                         max_samples,
                                         previous_handle,
                                         sample_states, 
                                         view_states, 
                                         instance_states);
}


/******************************************************************/
    
ReturnCode_t
ESSControlDataReader::read_next_instance_w_condition( ESSControlPtrSeq     * received_data,
                                                   SampleInfoSeq    * sample_infos,
                                                   int                max_samples,
                                                   InstanceHandle_t   previous_handle,
                                                   ReadCondition *    a_condition)
{
  return DataReader::read_next_instance_w_condition( (Sequence*)received_data,
                                                     sample_infos,
                                                     max_samples,
                                                     previous_handle,
                                                     a_condition);
}


/******************************************************************/
    
ReturnCode_t 
ESSControlDataReader::take_next_instance_w_condition( ESSControlPtrSeq     * received_data,
                                                   SampleInfoSeq    * sample_infos,
                                                   int                max_samples,
                                                   InstanceHandle_t   previous_handle,
                                                   ReadCondition *    a_condition)
{
  return DataReader::take_next_instance_w_condition( (Sequence*)received_data,
                                                     sample_infos,
                                                     max_samples,
                                                     previous_handle,
                                                     a_condition);
}


/******************************************************************/
    
ReturnCode_t
ESSControlDataReader::return_loan( ESSControlPtrSeq   * received_data,
                                SampleInfoSeq  * sample_infos)
{
  return DataReader::return_loan( (Sequence*)received_data, sample_infos);
}


/******************************************************************/

ReturnCode_t
ESSControlDataReader::get_key_value( ESSControl            * key_holder, 
                                  InstanceHandle_t  handle)
{
  if ( ! key_holder )
      return RETCODE_BAD_PARAMETER;

  /* No keys: no op */
  CDX_UNUSED(handle);
  key_holder->clear();
  return DDS::RETCODE_OK;
}


/******************************************************************/
/* openfmb::essmodule:: */
InstanceHandle_t 
ESSControlDataReader::lookup_instance( ESSControl       * instance_data)
{
  if ( ! instance_data )
      return HANDLE_NIL;

  /* No keys */
  return DDS::HANDLE_DEFAULT;
}


/******************************************************************
 * openfmb::essmodule:: DataReader Ops
 *****************************************************************/

/******************************************************************/
ESSControlProfileDataReader::ESSControlProfileDataReader()
{
}

/******************************************************************/
ReturnCode_t 
ESSControlProfileDataReader::read( ESSControlProfilePtrSeq    * received_data,
                         SampleInfoSeq   * sample_infos,
                         int               max_samples,
                         SampleStateMask   sample_states, 
                         ViewStateMask     view_states, 
                         InstanceStateMask instance_states)
{
  return DataReader::read( (Sequence*)received_data, 
			    sample_infos, 
			    max_samples, 
			    sample_states, 
			    view_states, 
			    instance_states );
}
  

/******************************************************************/

ReturnCode_t
ESSControlProfileDataReader::take( ESSControlProfilePtrSeq     * received_data,
                         SampleInfoSeq    * sample_infos,
                         int                max_samples,
                         SampleStateMask    sample_states, 
                         ViewStateMask      view_states, 
                         InstanceStateMask  instance_states)
{
  return DataReader::take( (Sequence*)received_data,
                           sample_infos,
                           max_samples,
                           sample_states, 
                           view_states, 
                           instance_states);
}


/******************************************************************/

ReturnCode_t 
ESSControlProfileDataReader::read_w_condition( ESSControlProfilePtrSeq  * received_data,
                                     SampleInfoSeq * sample_infos,
                                     int             max_samples,
                                     ReadCondition * a_condition)
{
  return DataReader::read_w_condition( (Sequence*)received_data,
                                       sample_infos,
                                       max_samples,
                                       a_condition);
}


/******************************************************************/
    
ReturnCode_t
ESSControlProfileDataReader::take_w_condition( ESSControlProfilePtrSeq   * received_data,
                                     SampleInfoSeq  * sample_infos,
                                     int              max_samples,
                                     ReadCondition *  a_condition)
{
  return DataReader::take_w_condition( (Sequence*)received_data,
                                       sample_infos,
                                       max_samples,
                                       a_condition);
}


/******************************************************************/
    
ReturnCode_t
ESSControlProfileDataReader::read_next_sample( ESSControlProfile     * received_data,
                                  SampleInfo     * sample_info)
{
  return DataReader::read_next_sample( (void*)received_data,
                                       sample_info);
}


/******************************************************************/
    
ReturnCode_t
ESSControlProfileDataReader::take_next_sample( ESSControlProfile      * received_data,
                                     SampleInfo      * sample_info)
{
  return DataReader::take_next_sample( (void*) received_data,
                                       sample_info);
}


/******************************************************************/
    
ReturnCode_t
ESSControlProfileDataReader::read_instance( ESSControlProfilePtrSeq       * received_data,
                                  SampleInfoSeq    * sample_infos,
                                  int                max_samples,
                                  InstanceHandle_t   a_handle,
                                  SampleStateMask    sample_states, 
                                  ViewStateMask      view_states, 
                                  InstanceStateMask  instance_states)
{
  return DataReader::read_instance( (Sequence*)received_data, 
                                    sample_infos, 
                                    max_samples, 
                                    a_handle, 
                                    sample_states, 
                                    view_states, 
                                    instance_states );
}


/******************************************************************/
    
ReturnCode_t
ESSControlProfileDataReader::take_instance( ESSControlProfilePtrSeq    * received_data,
                                  SampleInfoSeq   * sample_infos,
                                  int               max_samples,
                                  InstanceHandle_t  a_handle,
                                  SampleStateMask   sample_states, 
                                  ViewStateMask     view_states, 
                                  InstanceStateMask instance_states)
{
  return DataReader::take_instance( (Sequence*)received_data,
                                    sample_infos,
                                    max_samples,
                                    a_handle,
                                    sample_states, 
                                    view_states, 
                                    instance_states);
}


/******************************************************************/
    
ReturnCode_t
ESSControlProfileDataReader::read_next_instance( ESSControlProfilePtrSeq    * received_data,
                                       SampleInfoSeq   * sample_infos,
                                       int               max_samples,
                                       InstanceHandle_t  previous_handle,
                                       SampleStateMask   sample_states, 
                                       ViewStateMask     view_states, 
                                       InstanceStateMask instance_states)
{
  return DataReader::read_next_instance( (Sequence*)received_data,
                                         sample_infos,
                                         max_samples,
                                         previous_handle,
                                         sample_states, 
                                         view_states, 
                                         instance_states);
}


/******************************************************************/

ReturnCode_t
ESSControlProfileDataReader::take_next_instance( ESSControlProfilePtrSeq     * received_data,
                                       SampleInfoSeq    * sample_infos,
                                       int                max_samples,
                                       InstanceHandle_t   previous_handle,
                                       SampleStateMask    sample_states, 
                                       ViewStateMask      view_states, 
                                       InstanceStateMask  instance_states)
{
  return DataReader::take_next_instance( (Sequence*)received_data,
                                         sample_infos,
                                         max_samples,
                                         previous_handle,
                                         sample_states, 
                                         view_states, 
                                         instance_states);
}


/******************************************************************/
    
ReturnCode_t
ESSControlProfileDataReader::read_next_instance_w_condition( ESSControlProfilePtrSeq     * received_data,
                                                   SampleInfoSeq    * sample_infos,
                                                   int                max_samples,
                                                   InstanceHandle_t   previous_handle,
                                                   ReadCondition *    a_condition)
{
  return DataReader::read_next_instance_w_condition( (Sequence*)received_data,
                                                     sample_infos,
                                                     max_samples,
                                                     previous_handle,
                                                     a_condition);
}


/******************************************************************/
    
ReturnCode_t 
ESSControlProfileDataReader::take_next_instance_w_condition( ESSControlProfilePtrSeq     * received_data,
                                                   SampleInfoSeq    * sample_infos,
                                                   int                max_samples,
                                                   InstanceHandle_t   previous_handle,
                                                   ReadCondition *    a_condition)
{
  return DataReader::take_next_instance_w_condition( (Sequence*)received_data,
                                                     sample_infos,
                                                     max_samples,
                                                     previous_handle,
                                                     a_condition);
}


/******************************************************************/
    
ReturnCode_t
ESSControlProfileDataReader::return_loan( ESSControlProfilePtrSeq   * received_data,
                                SampleInfoSeq  * sample_infos)
{
  return DataReader::return_loan( (Sequence*)received_data, sample_infos);
}


/******************************************************************/

ReturnCode_t
ESSControlProfileDataReader::get_key_value( ESSControlProfile            * key_holder, 
                                  InstanceHandle_t  handle)
{
  if ( ! key_holder )
      return RETCODE_BAD_PARAMETER;

  /* key: use DR to get it */
  return DataReader::get_key_value(  key_holder, handle );
}


/******************************************************************/
/* openfmb::essmodule:: */
InstanceHandle_t 
ESSControlProfileDataReader::lookup_instance( ESSControlProfile       * instance_data)
{
  if ( ! instance_data )
      return HANDLE_NIL;

  /* Complex key: use DR to find it */
  return DataReader::lookup_instance(  instance_data );
}


}  /* namespace essmodule */
/* END SCOPE: essmodule */
/* START SCOPE: generationmodule */

namespace generationmodule {


/******************************************************************
 * openfmb::generationmodule:: DataReader Ops
 *****************************************************************/

/******************************************************************/
GenerationControlProfileDataReader::GenerationControlProfileDataReader()
{
}

/******************************************************************/
ReturnCode_t 
GenerationControlProfileDataReader::read( GenerationControlProfilePtrSeq    * received_data,
                         SampleInfoSeq   * sample_infos,
                         int               max_samples,
                         SampleStateMask   sample_states, 
                         ViewStateMask     view_states, 
                         InstanceStateMask instance_states)
{
  return DataReader::read( (Sequence*)received_data, 
			    sample_infos, 
			    max_samples, 
			    sample_states, 
			    view_states, 
			    instance_states );
}
  

/******************************************************************/

ReturnCode_t
GenerationControlProfileDataReader::take( GenerationControlProfilePtrSeq     * received_data,
                         SampleInfoSeq    * sample_infos,
                         int                max_samples,
                         SampleStateMask    sample_states, 
                         ViewStateMask      view_states, 
                         InstanceStateMask  instance_states)
{
  return DataReader::take( (Sequence*)received_data,
                           sample_infos,
                           max_samples,
                           sample_states, 
                           view_states, 
                           instance_states);
}


/******************************************************************/

ReturnCode_t 
GenerationControlProfileDataReader::read_w_condition( GenerationControlProfilePtrSeq  * received_data,
                                     SampleInfoSeq * sample_infos,
                                     int             max_samples,
                                     ReadCondition * a_condition)
{
  return DataReader::read_w_condition( (Sequence*)received_data,
                                       sample_infos,
                                       max_samples,
                                       a_condition);
}


/******************************************************************/
    
ReturnCode_t
GenerationControlProfileDataReader::take_w_condition( GenerationControlProfilePtrSeq   * received_data,
                                     SampleInfoSeq  * sample_infos,
                                     int              max_samples,
                                     ReadCondition *  a_condition)
{
  return DataReader::take_w_condition( (Sequence*)received_data,
                                       sample_infos,
                                       max_samples,
                                       a_condition);
}


/******************************************************************/
    
ReturnCode_t
GenerationControlProfileDataReader::read_next_sample( GenerationControlProfile     * received_data,
                                  SampleInfo     * sample_info)
{
  return DataReader::read_next_sample( (void*)received_data,
                                       sample_info);
}


/******************************************************************/
    
ReturnCode_t
GenerationControlProfileDataReader::take_next_sample( GenerationControlProfile      * received_data,
                                     SampleInfo      * sample_info)
{
  return DataReader::take_next_sample( (void*) received_data,
                                       sample_info);
}


/******************************************************************/
    
ReturnCode_t
GenerationControlProfileDataReader::read_instance( GenerationControlProfilePtrSeq       * received_data,
                                  SampleInfoSeq    * sample_infos,
                                  int                max_samples,
                                  InstanceHandle_t   a_handle,
                                  SampleStateMask    sample_states, 
                                  ViewStateMask      view_states, 
                                  InstanceStateMask  instance_states)
{
  return DataReader::read_instance( (Sequence*)received_data, 
                                    sample_infos, 
                                    max_samples, 
                                    a_handle, 
                                    sample_states, 
                                    view_states, 
                                    instance_states );
}


/******************************************************************/
    
ReturnCode_t
GenerationControlProfileDataReader::take_instance( GenerationControlProfilePtrSeq    * received_data,
                                  SampleInfoSeq   * sample_infos,
                                  int               max_samples,
                                  InstanceHandle_t  a_handle,
                                  SampleStateMask   sample_states, 
                                  ViewStateMask     view_states, 
                                  InstanceStateMask instance_states)
{
  return DataReader::take_instance( (Sequence*)received_data,
                                    sample_infos,
                                    max_samples,
                                    a_handle,
                                    sample_states, 
                                    view_states, 
                                    instance_states);
}


/******************************************************************/
    
ReturnCode_t
GenerationControlProfileDataReader::read_next_instance( GenerationControlProfilePtrSeq    * received_data,
                                       SampleInfoSeq   * sample_infos,
                                       int               max_samples,
                                       InstanceHandle_t  previous_handle,
                                       SampleStateMask   sample_states, 
                                       ViewStateMask     view_states, 
                                       InstanceStateMask instance_states)
{
  return DataReader::read_next_instance( (Sequence*)received_data,
                                         sample_infos,
                                         max_samples,
                                         previous_handle,
                                         sample_states, 
                                         view_states, 
                                         instance_states);
}


/******************************************************************/

ReturnCode_t
GenerationControlProfileDataReader::take_next_instance( GenerationControlProfilePtrSeq     * received_data,
                                       SampleInfoSeq    * sample_infos,
                                       int                max_samples,
                                       InstanceHandle_t   previous_handle,
                                       SampleStateMask    sample_states, 
                                       ViewStateMask      view_states, 
                                       InstanceStateMask  instance_states)
{
  return DataReader::take_next_instance( (Sequence*)received_data,
                                         sample_infos,
                                         max_samples,
                                         previous_handle,
                                         sample_states, 
                                         view_states, 
                                         instance_states);
}


/******************************************************************/
    
ReturnCode_t
GenerationControlProfileDataReader::read_next_instance_w_condition( GenerationControlProfilePtrSeq     * received_data,
                                                   SampleInfoSeq    * sample_infos,
                                                   int                max_samples,
                                                   InstanceHandle_t   previous_handle,
                                                   ReadCondition *    a_condition)
{
  return DataReader::read_next_instance_w_condition( (Sequence*)received_data,
                                                     sample_infos,
                                                     max_samples,
                                                     previous_handle,
                                                     a_condition);
}


/******************************************************************/
    
ReturnCode_t 
GenerationControlProfileDataReader::take_next_instance_w_condition( GenerationControlProfilePtrSeq     * received_data,
                                                   SampleInfoSeq    * sample_infos,
                                                   int                max_samples,
                                                   InstanceHandle_t   previous_handle,
                                                   ReadCondition *    a_condition)
{
  return DataReader::take_next_instance_w_condition( (Sequence*)received_data,
                                                     sample_infos,
                                                     max_samples,
                                                     previous_handle,
                                                     a_condition);
}


/******************************************************************/
    
ReturnCode_t
GenerationControlProfileDataReader::return_loan( GenerationControlProfilePtrSeq   * received_data,
                                SampleInfoSeq  * sample_infos)
{
  return DataReader::return_loan( (Sequence*)received_data, sample_infos);
}


/******************************************************************/

ReturnCode_t
GenerationControlProfileDataReader::get_key_value( GenerationControlProfile            * key_holder, 
                                  InstanceHandle_t  handle)
{
  if ( ! key_holder )
      return RETCODE_BAD_PARAMETER;

  /* key: use DR to get it */
  return DataReader::get_key_value(  key_holder, handle );
}


/******************************************************************/
/* openfmb::generationmodule:: */
InstanceHandle_t 
GenerationControlProfileDataReader::lookup_instance( GenerationControlProfile       * instance_data)
{
  if ( ! instance_data )
      return HANDLE_NIL;

  /* Complex key: use DR to find it */
  return DataReader::lookup_instance(  instance_data );
}


}  /* namespace generationmodule */
/* END SCOPE: generationmodule */
/* START SCOPE: loadmodule */

namespace loadmodule {


/******************************************************************
 * openfmb::loadmodule:: DataReader Ops
 *****************************************************************/

/******************************************************************/
LoadControlFSCCDataReader::LoadControlFSCCDataReader()
{
}

/******************************************************************/
ReturnCode_t 
LoadControlFSCCDataReader::read( LoadControlFSCCPtrSeq    * received_data,
                         SampleInfoSeq   * sample_infos,
                         int               max_samples,
                         SampleStateMask   sample_states, 
                         ViewStateMask     view_states, 
                         InstanceStateMask instance_states)
{
  return DataReader::read( (Sequence*)received_data, 
			    sample_infos, 
			    max_samples, 
			    sample_states, 
			    view_states, 
			    instance_states );
}
  

/******************************************************************/

ReturnCode_t
LoadControlFSCCDataReader::take( LoadControlFSCCPtrSeq     * received_data,
                         SampleInfoSeq    * sample_infos,
                         int                max_samples,
                         SampleStateMask    sample_states, 
                         ViewStateMask      view_states, 
                         InstanceStateMask  instance_states)
{
  return DataReader::take( (Sequence*)received_data,
                           sample_infos,
                           max_samples,
                           sample_states, 
                           view_states, 
                           instance_states);
}


/******************************************************************/

ReturnCode_t 
LoadControlFSCCDataReader::read_w_condition( LoadControlFSCCPtrSeq  * received_data,
                                     SampleInfoSeq * sample_infos,
                                     int             max_samples,
                                     ReadCondition * a_condition)
{
  return DataReader::read_w_condition( (Sequence*)received_data,
                                       sample_infos,
                                       max_samples,
                                       a_condition);
}


/******************************************************************/
    
ReturnCode_t
LoadControlFSCCDataReader::take_w_condition( LoadControlFSCCPtrSeq   * received_data,
                                     SampleInfoSeq  * sample_infos,
                                     int              max_samples,
                                     ReadCondition *  a_condition)
{
  return DataReader::take_w_condition( (Sequence*)received_data,
                                       sample_infos,
                                       max_samples,
                                       a_condition);
}


/******************************************************************/
    
ReturnCode_t
LoadControlFSCCDataReader::read_next_sample( LoadControlFSCC     * received_data,
                                  SampleInfo     * sample_info)
{
  return DataReader::read_next_sample( (void*)received_data,
                                       sample_info);
}


/******************************************************************/
    
ReturnCode_t
LoadControlFSCCDataReader::take_next_sample( LoadControlFSCC      * received_data,
                                     SampleInfo      * sample_info)
{
  return DataReader::take_next_sample( (void*) received_data,
                                       sample_info);
}


/******************************************************************/
    
ReturnCode_t
LoadControlFSCCDataReader::read_instance( LoadControlFSCCPtrSeq       * received_data,
                                  SampleInfoSeq    * sample_infos,
                                  int                max_samples,
                                  InstanceHandle_t   a_handle,
                                  SampleStateMask    sample_states, 
                                  ViewStateMask      view_states, 
                                  InstanceStateMask  instance_states)
{
  return DataReader::read_instance( (Sequence*)received_data, 
                                    sample_infos, 
                                    max_samples, 
                                    a_handle, 
                                    sample_states, 
                                    view_states, 
                                    instance_states );
}


/******************************************************************/
    
ReturnCode_t
LoadControlFSCCDataReader::take_instance( LoadControlFSCCPtrSeq    * received_data,
                                  SampleInfoSeq   * sample_infos,
                                  int               max_samples,
                                  InstanceHandle_t  a_handle,
                                  SampleStateMask   sample_states, 
                                  ViewStateMask     view_states, 
                                  InstanceStateMask instance_states)
{
  return DataReader::take_instance( (Sequence*)received_data,
                                    sample_infos,
                                    max_samples,
                                    a_handle,
                                    sample_states, 
                                    view_states, 
                                    instance_states);
}


/******************************************************************/
    
ReturnCode_t
LoadControlFSCCDataReader::read_next_instance( LoadControlFSCCPtrSeq    * received_data,
                                       SampleInfoSeq   * sample_infos,
                                       int               max_samples,
                                       InstanceHandle_t  previous_handle,
                                       SampleStateMask   sample_states, 
                                       ViewStateMask     view_states, 
                                       InstanceStateMask instance_states)
{
  return DataReader::read_next_instance( (Sequence*)received_data,
                                         sample_infos,
                                         max_samples,
                                         previous_handle,
                                         sample_states, 
                                         view_states, 
                                         instance_states);
}


/******************************************************************/

ReturnCode_t
LoadControlFSCCDataReader::take_next_instance( LoadControlFSCCPtrSeq     * received_data,
                                       SampleInfoSeq    * sample_infos,
                                       int                max_samples,
                                       InstanceHandle_t   previous_handle,
                                       SampleStateMask    sample_states, 
                                       ViewStateMask      view_states, 
                                       InstanceStateMask  instance_states)
{
  return DataReader::take_next_instance( (Sequence*)received_data,
                                         sample_infos,
                                         max_samples,
                                         previous_handle,
                                         sample_states, 
                                         view_states, 
                                         instance_states);
}


/******************************************************************/
    
ReturnCode_t
LoadControlFSCCDataReader::read_next_instance_w_condition( LoadControlFSCCPtrSeq     * received_data,
                                                   SampleInfoSeq    * sample_infos,
                                                   int                max_samples,
                                                   InstanceHandle_t   previous_handle,
                                                   ReadCondition *    a_condition)
{
  return DataReader::read_next_instance_w_condition( (Sequence*)received_data,
                                                     sample_infos,
                                                     max_samples,
                                                     previous_handle,
                                                     a_condition);
}


/******************************************************************/
    
ReturnCode_t 
LoadControlFSCCDataReader::take_next_instance_w_condition( LoadControlFSCCPtrSeq     * received_data,
                                                   SampleInfoSeq    * sample_infos,
                                                   int                max_samples,
                                                   InstanceHandle_t   previous_handle,
                                                   ReadCondition *    a_condition)
{
  return DataReader::take_next_instance_w_condition( (Sequence*)received_data,
                                                     sample_infos,
                                                     max_samples,
                                                     previous_handle,
                                                     a_condition);
}


/******************************************************************/
    
ReturnCode_t
LoadControlFSCCDataReader::return_loan( LoadControlFSCCPtrSeq   * received_data,
                                SampleInfoSeq  * sample_infos)
{
  return DataReader::return_loan( (Sequence*)received_data, sample_infos);
}


/******************************************************************/

ReturnCode_t
LoadControlFSCCDataReader::get_key_value( LoadControlFSCC            * key_holder, 
                                  InstanceHandle_t  handle)
{
  if ( ! key_holder )
      return RETCODE_BAD_PARAMETER;

  /* No keys: no op */
  CDX_UNUSED(handle);
  key_holder->clear();
  return DDS::RETCODE_OK;
}


/******************************************************************/
/* openfmb::loadmodule:: */
InstanceHandle_t 
LoadControlFSCCDataReader::lookup_instance( LoadControlFSCC       * instance_data)
{
  if ( ! instance_data )
      return HANDLE_NIL;

  /* No keys */
  return DDS::HANDLE_DEFAULT;
}


/******************************************************************
 * openfmb::loadmodule:: DataReader Ops
 *****************************************************************/

/******************************************************************/
LoadReadingProfileDataReader::LoadReadingProfileDataReader()
{
}

/******************************************************************/
ReturnCode_t 
LoadReadingProfileDataReader::read( LoadReadingProfilePtrSeq    * received_data,
                         SampleInfoSeq   * sample_infos,
                         int               max_samples,
                         SampleStateMask   sample_states, 
                         ViewStateMask     view_states, 
                         InstanceStateMask instance_states)
{
  return DataReader::read( (Sequence*)received_data, 
			    sample_infos, 
			    max_samples, 
			    sample_states, 
			    view_states, 
			    instance_states );
}
  

/******************************************************************/

ReturnCode_t
LoadReadingProfileDataReader::take( LoadReadingProfilePtrSeq     * received_data,
                         SampleInfoSeq    * sample_infos,
                         int                max_samples,
                         SampleStateMask    sample_states, 
                         ViewStateMask      view_states, 
                         InstanceStateMask  instance_states)
{
  return DataReader::take( (Sequence*)received_data,
                           sample_infos,
                           max_samples,
                           sample_states, 
                           view_states, 
                           instance_states);
}


/******************************************************************/

ReturnCode_t 
LoadReadingProfileDataReader::read_w_condition( LoadReadingProfilePtrSeq  * received_data,
                                     SampleInfoSeq * sample_infos,
                                     int             max_samples,
                                     ReadCondition * a_condition)
{
  return DataReader::read_w_condition( (Sequence*)received_data,
                                       sample_infos,
                                       max_samples,
                                       a_condition);
}


/******************************************************************/
    
ReturnCode_t
LoadReadingProfileDataReader::take_w_condition( LoadReadingProfilePtrSeq   * received_data,
                                     SampleInfoSeq  * sample_infos,
                                     int              max_samples,
                                     ReadCondition *  a_condition)
{
  return DataReader::take_w_condition( (Sequence*)received_data,
                                       sample_infos,
                                       max_samples,
                                       a_condition);
}


/******************************************************************/
    
ReturnCode_t
LoadReadingProfileDataReader::read_next_sample( LoadReadingProfile     * received_data,
                                  SampleInfo     * sample_info)
{
  return DataReader::read_next_sample( (void*)received_data,
                                       sample_info);
}


/******************************************************************/
    
ReturnCode_t
LoadReadingProfileDataReader::take_next_sample( LoadReadingProfile      * received_data,
                                     SampleInfo      * sample_info)
{
  return DataReader::take_next_sample( (void*) received_data,
                                       sample_info);
}


/******************************************************************/
    
ReturnCode_t
LoadReadingProfileDataReader::read_instance( LoadReadingProfilePtrSeq       * received_data,
                                  SampleInfoSeq    * sample_infos,
                                  int                max_samples,
                                  InstanceHandle_t   a_handle,
                                  SampleStateMask    sample_states, 
                                  ViewStateMask      view_states, 
                                  InstanceStateMask  instance_states)
{
  return DataReader::read_instance( (Sequence*)received_data, 
                                    sample_infos, 
                                    max_samples, 
                                    a_handle, 
                                    sample_states, 
                                    view_states, 
                                    instance_states );
}


/******************************************************************/
    
ReturnCode_t
LoadReadingProfileDataReader::take_instance( LoadReadingProfilePtrSeq    * received_data,
                                  SampleInfoSeq   * sample_infos,
                                  int               max_samples,
                                  InstanceHandle_t  a_handle,
                                  SampleStateMask   sample_states, 
                                  ViewStateMask     view_states, 
                                  InstanceStateMask instance_states)
{
  return DataReader::take_instance( (Sequence*)received_data,
                                    sample_infos,
                                    max_samples,
                                    a_handle,
                                    sample_states, 
                                    view_states, 
                                    instance_states);
}


/******************************************************************/
    
ReturnCode_t
LoadReadingProfileDataReader::read_next_instance( LoadReadingProfilePtrSeq    * received_data,
                                       SampleInfoSeq   * sample_infos,
                                       int               max_samples,
                                       InstanceHandle_t  previous_handle,
                                       SampleStateMask   sample_states, 
                                       ViewStateMask     view_states, 
                                       InstanceStateMask instance_states)
{
  return DataReader::read_next_instance( (Sequence*)received_data,
                                         sample_infos,
                                         max_samples,
                                         previous_handle,
                                         sample_states, 
                                         view_states, 
                                         instance_states);
}


/******************************************************************/

ReturnCode_t
LoadReadingProfileDataReader::take_next_instance( LoadReadingProfilePtrSeq     * received_data,
                                       SampleInfoSeq    * sample_infos,
                                       int                max_samples,
                                       InstanceHandle_t   previous_handle,
                                       SampleStateMask    sample_states, 
                                       ViewStateMask      view_states, 
                                       InstanceStateMask  instance_states)
{
  return DataReader::take_next_instance( (Sequence*)received_data,
                                         sample_infos,
                                         max_samples,
                                         previous_handle,
                                         sample_states, 
                                         view_states, 
                                         instance_states);
}


/******************************************************************/
    
ReturnCode_t
LoadReadingProfileDataReader::read_next_instance_w_condition( LoadReadingProfilePtrSeq     * received_data,
                                                   SampleInfoSeq    * sample_infos,
                                                   int                max_samples,
                                                   InstanceHandle_t   previous_handle,
                                                   ReadCondition *    a_condition)
{
  return DataReader::read_next_instance_w_condition( (Sequence*)received_data,
                                                     sample_infos,
                                                     max_samples,
                                                     previous_handle,
                                                     a_condition);
}


/******************************************************************/
    
ReturnCode_t 
LoadReadingProfileDataReader::take_next_instance_w_condition( LoadReadingProfilePtrSeq     * received_data,
                                                   SampleInfoSeq    * sample_infos,
                                                   int                max_samples,
                                                   InstanceHandle_t   previous_handle,
                                                   ReadCondition *    a_condition)
{
  return DataReader::take_next_instance_w_condition( (Sequence*)received_data,
                                                     sample_infos,
                                                     max_samples,
                                                     previous_handle,
                                                     a_condition);
}


/******************************************************************/
    
ReturnCode_t
LoadReadingProfileDataReader::return_loan( LoadReadingProfilePtrSeq   * received_data,
                                SampleInfoSeq  * sample_infos)
{
  return DataReader::return_loan( (Sequence*)received_data, sample_infos);
}


/******************************************************************/

ReturnCode_t
LoadReadingProfileDataReader::get_key_value( LoadReadingProfile            * key_holder, 
                                  InstanceHandle_t  handle)
{
  if ( ! key_holder )
      return RETCODE_BAD_PARAMETER;

  /* key: use DR to get it */
  return DataReader::get_key_value(  key_holder, handle );
}


/******************************************************************/
/* openfmb::loadmodule:: */
InstanceHandle_t 
LoadReadingProfileDataReader::lookup_instance( LoadReadingProfile       * instance_data)
{
  if ( ! instance_data )
      return HANDLE_NIL;

  /* Complex key: use DR to find it */
  return DataReader::lookup_instance(  instance_data );
}


}  /* namespace loadmodule */
/* END SCOPE: loadmodule */
/* START SCOPE: reclosermodule */

namespace reclosermodule {


/******************************************************************
 * openfmb::reclosermodule:: DataReader Ops
 *****************************************************************/

/******************************************************************/
RecloserReadingProfileDataReader::RecloserReadingProfileDataReader()
{
}

/******************************************************************/
ReturnCode_t 
RecloserReadingProfileDataReader::read( RecloserReadingProfilePtrSeq    * received_data,
                         SampleInfoSeq   * sample_infos,
                         int               max_samples,
                         SampleStateMask   sample_states, 
                         ViewStateMask     view_states, 
                         InstanceStateMask instance_states)
{
  return DataReader::read( (Sequence*)received_data, 
			    sample_infos, 
			    max_samples, 
			    sample_states, 
			    view_states, 
			    instance_states );
}
  

/******************************************************************/

ReturnCode_t
RecloserReadingProfileDataReader::take( RecloserReadingProfilePtrSeq     * received_data,
                         SampleInfoSeq    * sample_infos,
                         int                max_samples,
                         SampleStateMask    sample_states, 
                         ViewStateMask      view_states, 
                         InstanceStateMask  instance_states)
{
  return DataReader::take( (Sequence*)received_data,
                           sample_infos,
                           max_samples,
                           sample_states, 
                           view_states, 
                           instance_states);
}


/******************************************************************/

ReturnCode_t 
RecloserReadingProfileDataReader::read_w_condition( RecloserReadingProfilePtrSeq  * received_data,
                                     SampleInfoSeq * sample_infos,
                                     int             max_samples,
                                     ReadCondition * a_condition)
{
  return DataReader::read_w_condition( (Sequence*)received_data,
                                       sample_infos,
                                       max_samples,
                                       a_condition);
}


/******************************************************************/
    
ReturnCode_t
RecloserReadingProfileDataReader::take_w_condition( RecloserReadingProfilePtrSeq   * received_data,
                                     SampleInfoSeq  * sample_infos,
                                     int              max_samples,
                                     ReadCondition *  a_condition)
{
  return DataReader::take_w_condition( (Sequence*)received_data,
                                       sample_infos,
                                       max_samples,
                                       a_condition);
}


/******************************************************************/
    
ReturnCode_t
RecloserReadingProfileDataReader::read_next_sample( RecloserReadingProfile     * received_data,
                                  SampleInfo     * sample_info)
{
  return DataReader::read_next_sample( (void*)received_data,
                                       sample_info);
}


/******************************************************************/
    
ReturnCode_t
RecloserReadingProfileDataReader::take_next_sample( RecloserReadingProfile      * received_data,
                                     SampleInfo      * sample_info)
{
  return DataReader::take_next_sample( (void*) received_data,
                                       sample_info);
}


/******************************************************************/
    
ReturnCode_t
RecloserReadingProfileDataReader::read_instance( RecloserReadingProfilePtrSeq       * received_data,
                                  SampleInfoSeq    * sample_infos,
                                  int                max_samples,
                                  InstanceHandle_t   a_handle,
                                  SampleStateMask    sample_states, 
                                  ViewStateMask      view_states, 
                                  InstanceStateMask  instance_states)
{
  return DataReader::read_instance( (Sequence*)received_data, 
                                    sample_infos, 
                                    max_samples, 
                                    a_handle, 
                                    sample_states, 
                                    view_states, 
                                    instance_states );
}


/******************************************************************/
    
ReturnCode_t
RecloserReadingProfileDataReader::take_instance( RecloserReadingProfilePtrSeq    * received_data,
                                  SampleInfoSeq   * sample_infos,
                                  int               max_samples,
                                  InstanceHandle_t  a_handle,
                                  SampleStateMask   sample_states, 
                                  ViewStateMask     view_states, 
                                  InstanceStateMask instance_states)
{
  return DataReader::take_instance( (Sequence*)received_data,
                                    sample_infos,
                                    max_samples,
                                    a_handle,
                                    sample_states, 
                                    view_states, 
                                    instance_states);
}


/******************************************************************/
    
ReturnCode_t
RecloserReadingProfileDataReader::read_next_instance( RecloserReadingProfilePtrSeq    * received_data,
                                       SampleInfoSeq   * sample_infos,
                                       int               max_samples,
                                       InstanceHandle_t  previous_handle,
                                       SampleStateMask   sample_states, 
                                       ViewStateMask     view_states, 
                                       InstanceStateMask instance_states)
{
  return DataReader::read_next_instance( (Sequence*)received_data,
                                         sample_infos,
                                         max_samples,
                                         previous_handle,
                                         sample_states, 
                                         view_states, 
                                         instance_states);
}


/******************************************************************/

ReturnCode_t
RecloserReadingProfileDataReader::take_next_instance( RecloserReadingProfilePtrSeq     * received_data,
                                       SampleInfoSeq    * sample_infos,
                                       int                max_samples,
                                       InstanceHandle_t   previous_handle,
                                       SampleStateMask    sample_states, 
                                       ViewStateMask      view_states, 
                                       InstanceStateMask  instance_states)
{
  return DataReader::take_next_instance( (Sequence*)received_data,
                                         sample_infos,
                                         max_samples,
                                         previous_handle,
                                         sample_states, 
                                         view_states, 
                                         instance_states);
}


/******************************************************************/
    
ReturnCode_t
RecloserReadingProfileDataReader::read_next_instance_w_condition( RecloserReadingProfilePtrSeq     * received_data,
                                                   SampleInfoSeq    * sample_infos,
                                                   int                max_samples,
                                                   InstanceHandle_t   previous_handle,
                                                   ReadCondition *    a_condition)
{
  return DataReader::read_next_instance_w_condition( (Sequence*)received_data,
                                                     sample_infos,
                                                     max_samples,
                                                     previous_handle,
                                                     a_condition);
}


/******************************************************************/
    
ReturnCode_t 
RecloserReadingProfileDataReader::take_next_instance_w_condition( RecloserReadingProfilePtrSeq     * received_data,
                                                   SampleInfoSeq    * sample_infos,
                                                   int                max_samples,
                                                   InstanceHandle_t   previous_handle,
                                                   ReadCondition *    a_condition)
{
  return DataReader::take_next_instance_w_condition( (Sequence*)received_data,
                                                     sample_infos,
                                                     max_samples,
                                                     previous_handle,
                                                     a_condition);
}


/******************************************************************/
    
ReturnCode_t
RecloserReadingProfileDataReader::return_loan( RecloserReadingProfilePtrSeq   * received_data,
                                SampleInfoSeq  * sample_infos)
{
  return DataReader::return_loan( (Sequence*)received_data, sample_infos);
}


/******************************************************************/

ReturnCode_t
RecloserReadingProfileDataReader::get_key_value( RecloserReadingProfile            * key_holder, 
                                  InstanceHandle_t  handle)
{
  if ( ! key_holder )
      return RETCODE_BAD_PARAMETER;

  /* key: use DR to get it */
  return DataReader::get_key_value(  key_holder, handle );
}


/******************************************************************/
/* openfmb::reclosermodule:: */
InstanceHandle_t 
RecloserReadingProfileDataReader::lookup_instance( RecloserReadingProfile       * instance_data)
{
  if ( ! instance_data )
      return HANDLE_NIL;

  /* Complex key: use DR to find it */
  return DataReader::lookup_instance(  instance_data );
}


}  /* namespace reclosermodule */
/* END SCOPE: reclosermodule */
/* START SCOPE: regulatormodule */

namespace regulatormodule {


/******************************************************************
 * openfmb::regulatormodule:: DataReader Ops
 *****************************************************************/

/******************************************************************/
RegulatorReadingProfileDataReader::RegulatorReadingProfileDataReader()
{
}

/******************************************************************/
ReturnCode_t 
RegulatorReadingProfileDataReader::read( RegulatorReadingProfilePtrSeq    * received_data,
                         SampleInfoSeq   * sample_infos,
                         int               max_samples,
                         SampleStateMask   sample_states, 
                         ViewStateMask     view_states, 
                         InstanceStateMask instance_states)
{
  return DataReader::read( (Sequence*)received_data, 
			    sample_infos, 
			    max_samples, 
			    sample_states, 
			    view_states, 
			    instance_states );
}
  

/******************************************************************/

ReturnCode_t
RegulatorReadingProfileDataReader::take( RegulatorReadingProfilePtrSeq     * received_data,
                         SampleInfoSeq    * sample_infos,
                         int                max_samples,
                         SampleStateMask    sample_states, 
                         ViewStateMask      view_states, 
                         InstanceStateMask  instance_states)
{
  return DataReader::take( (Sequence*)received_data,
                           sample_infos,
                           max_samples,
                           sample_states, 
                           view_states, 
                           instance_states);
}


/******************************************************************/

ReturnCode_t 
RegulatorReadingProfileDataReader::read_w_condition( RegulatorReadingProfilePtrSeq  * received_data,
                                     SampleInfoSeq * sample_infos,
                                     int             max_samples,
                                     ReadCondition * a_condition)
{
  return DataReader::read_w_condition( (Sequence*)received_data,
                                       sample_infos,
                                       max_samples,
                                       a_condition);
}


/******************************************************************/
    
ReturnCode_t
RegulatorReadingProfileDataReader::take_w_condition( RegulatorReadingProfilePtrSeq   * received_data,
                                     SampleInfoSeq  * sample_infos,
                                     int              max_samples,
                                     ReadCondition *  a_condition)
{
  return DataReader::take_w_condition( (Sequence*)received_data,
                                       sample_infos,
                                       max_samples,
                                       a_condition);
}


/******************************************************************/
    
ReturnCode_t
RegulatorReadingProfileDataReader::read_next_sample( RegulatorReadingProfile     * received_data,
                                  SampleInfo     * sample_info)
{
  return DataReader::read_next_sample( (void*)received_data,
                                       sample_info);
}


/******************************************************************/
    
ReturnCode_t
RegulatorReadingProfileDataReader::take_next_sample( RegulatorReadingProfile      * received_data,
                                     SampleInfo      * sample_info)
{
  return DataReader::take_next_sample( (void*) received_data,
                                       sample_info);
}


/******************************************************************/
    
ReturnCode_t
RegulatorReadingProfileDataReader::read_instance( RegulatorReadingProfilePtrSeq       * received_data,
                                  SampleInfoSeq    * sample_infos,
                                  int                max_samples,
                                  InstanceHandle_t   a_handle,
                                  SampleStateMask    sample_states, 
                                  ViewStateMask      view_states, 
                                  InstanceStateMask  instance_states)
{
  return DataReader::read_instance( (Sequence*)received_data, 
                                    sample_infos, 
                                    max_samples, 
                                    a_handle, 
                                    sample_states, 
                                    view_states, 
                                    instance_states );
}


/******************************************************************/
    
ReturnCode_t
RegulatorReadingProfileDataReader::take_instance( RegulatorReadingProfilePtrSeq    * received_data,
                                  SampleInfoSeq   * sample_infos,
                                  int               max_samples,
                                  InstanceHandle_t  a_handle,
                                  SampleStateMask   sample_states, 
                                  ViewStateMask     view_states, 
                                  InstanceStateMask instance_states)
{
  return DataReader::take_instance( (Sequence*)received_data,
                                    sample_infos,
                                    max_samples,
                                    a_handle,
                                    sample_states, 
                                    view_states, 
                                    instance_states);
}


/******************************************************************/
    
ReturnCode_t
RegulatorReadingProfileDataReader::read_next_instance( RegulatorReadingProfilePtrSeq    * received_data,
                                       SampleInfoSeq   * sample_infos,
                                       int               max_samples,
                                       InstanceHandle_t  previous_handle,
                                       SampleStateMask   sample_states, 
                                       ViewStateMask     view_states, 
                                       InstanceStateMask instance_states)
{
  return DataReader::read_next_instance( (Sequence*)received_data,
                                         sample_infos,
                                         max_samples,
                                         previous_handle,
                                         sample_states, 
                                         view_states, 
                                         instance_states);
}


/******************************************************************/

ReturnCode_t
RegulatorReadingProfileDataReader::take_next_instance( RegulatorReadingProfilePtrSeq     * received_data,
                                       SampleInfoSeq    * sample_infos,
                                       int                max_samples,
                                       InstanceHandle_t   previous_handle,
                                       SampleStateMask    sample_states, 
                                       ViewStateMask      view_states, 
                                       InstanceStateMask  instance_states)
{
  return DataReader::take_next_instance( (Sequence*)received_data,
                                         sample_infos,
                                         max_samples,
                                         previous_handle,
                                         sample_states, 
                                         view_states, 
                                         instance_states);
}


/******************************************************************/
    
ReturnCode_t
RegulatorReadingProfileDataReader::read_next_instance_w_condition( RegulatorReadingProfilePtrSeq     * received_data,
                                                   SampleInfoSeq    * sample_infos,
                                                   int                max_samples,
                                                   InstanceHandle_t   previous_handle,
                                                   ReadCondition *    a_condition)
{
  return DataReader::read_next_instance_w_condition( (Sequence*)received_data,
                                                     sample_infos,
                                                     max_samples,
                                                     previous_handle,
                                                     a_condition);
}


/******************************************************************/
    
ReturnCode_t 
RegulatorReadingProfileDataReader::take_next_instance_w_condition( RegulatorReadingProfilePtrSeq     * received_data,
                                                   SampleInfoSeq    * sample_infos,
                                                   int                max_samples,
                                                   InstanceHandle_t   previous_handle,
                                                   ReadCondition *    a_condition)
{
  return DataReader::take_next_instance_w_condition( (Sequence*)received_data,
                                                     sample_infos,
                                                     max_samples,
                                                     previous_handle,
                                                     a_condition);
}


/******************************************************************/
    
ReturnCode_t
RegulatorReadingProfileDataReader::return_loan( RegulatorReadingProfilePtrSeq   * received_data,
                                SampleInfoSeq  * sample_infos)
{
  return DataReader::return_loan( (Sequence*)received_data, sample_infos);
}


/******************************************************************/

ReturnCode_t
RegulatorReadingProfileDataReader::get_key_value( RegulatorReadingProfile            * key_holder, 
                                  InstanceHandle_t  handle)
{
  if ( ! key_holder )
      return RETCODE_BAD_PARAMETER;

  /* key: use DR to get it */
  return DataReader::get_key_value(  key_holder, handle );
}


/******************************************************************/
/* openfmb::regulatormodule:: */
InstanceHandle_t 
RegulatorReadingProfileDataReader::lookup_instance( RegulatorReadingProfile       * instance_data)
{
  if ( ! instance_data )
      return HANDLE_NIL;

  /* Complex key: use DR to find it */
  return DataReader::lookup_instance(  instance_data );
}


}  /* namespace regulatormodule */
/* END SCOPE: regulatormodule */
/* START SCOPE: resourcemodule */

namespace resourcemodule {


/******************************************************************
 * openfmb::resourcemodule:: DataReader Ops
 *****************************************************************/

/******************************************************************/
ResourceReadingProfileDataReader::ResourceReadingProfileDataReader()
{
}

/******************************************************************/
ReturnCode_t 
ResourceReadingProfileDataReader::read( ResourceReadingProfilePtrSeq    * received_data,
                         SampleInfoSeq   * sample_infos,
                         int               max_samples,
                         SampleStateMask   sample_states, 
                         ViewStateMask     view_states, 
                         InstanceStateMask instance_states)
{
  return DataReader::read( (Sequence*)received_data, 
			    sample_infos, 
			    max_samples, 
			    sample_states, 
			    view_states, 
			    instance_states );
}
  

/******************************************************************/

ReturnCode_t
ResourceReadingProfileDataReader::take( ResourceReadingProfilePtrSeq     * received_data,
                         SampleInfoSeq    * sample_infos,
                         int                max_samples,
                         SampleStateMask    sample_states, 
                         ViewStateMask      view_states, 
                         InstanceStateMask  instance_states)
{
  return DataReader::take( (Sequence*)received_data,
                           sample_infos,
                           max_samples,
                           sample_states, 
                           view_states, 
                           instance_states);
}


/******************************************************************/

ReturnCode_t 
ResourceReadingProfileDataReader::read_w_condition( ResourceReadingProfilePtrSeq  * received_data,
                                     SampleInfoSeq * sample_infos,
                                     int             max_samples,
                                     ReadCondition * a_condition)
{
  return DataReader::read_w_condition( (Sequence*)received_data,
                                       sample_infos,
                                       max_samples,
                                       a_condition);
}


/******************************************************************/
    
ReturnCode_t
ResourceReadingProfileDataReader::take_w_condition( ResourceReadingProfilePtrSeq   * received_data,
                                     SampleInfoSeq  * sample_infos,
                                     int              max_samples,
                                     ReadCondition *  a_condition)
{
  return DataReader::take_w_condition( (Sequence*)received_data,
                                       sample_infos,
                                       max_samples,
                                       a_condition);
}


/******************************************************************/
    
ReturnCode_t
ResourceReadingProfileDataReader::read_next_sample( ResourceReadingProfile     * received_data,
                                  SampleInfo     * sample_info)
{
  return DataReader::read_next_sample( (void*)received_data,
                                       sample_info);
}


/******************************************************************/
    
ReturnCode_t
ResourceReadingProfileDataReader::take_next_sample( ResourceReadingProfile      * received_data,
                                     SampleInfo      * sample_info)
{
  return DataReader::take_next_sample( (void*) received_data,
                                       sample_info);
}


/******************************************************************/
    
ReturnCode_t
ResourceReadingProfileDataReader::read_instance( ResourceReadingProfilePtrSeq       * received_data,
                                  SampleInfoSeq    * sample_infos,
                                  int                max_samples,
                                  InstanceHandle_t   a_handle,
                                  SampleStateMask    sample_states, 
                                  ViewStateMask      view_states, 
                                  InstanceStateMask  instance_states)
{
  return DataReader::read_instance( (Sequence*)received_data, 
                                    sample_infos, 
                                    max_samples, 
                                    a_handle, 
                                    sample_states, 
                                    view_states, 
                                    instance_states );
}


/******************************************************************/
    
ReturnCode_t
ResourceReadingProfileDataReader::take_instance( ResourceReadingProfilePtrSeq    * received_data,
                                  SampleInfoSeq   * sample_infos,
                                  int               max_samples,
                                  InstanceHandle_t  a_handle,
                                  SampleStateMask   sample_states, 
                                  ViewStateMask     view_states, 
                                  InstanceStateMask instance_states)
{
  return DataReader::take_instance( (Sequence*)received_data,
                                    sample_infos,
                                    max_samples,
                                    a_handle,
                                    sample_states, 
                                    view_states, 
                                    instance_states);
}


/******************************************************************/
    
ReturnCode_t
ResourceReadingProfileDataReader::read_next_instance( ResourceReadingProfilePtrSeq    * received_data,
                                       SampleInfoSeq   * sample_infos,
                                       int               max_samples,
                                       InstanceHandle_t  previous_handle,
                                       SampleStateMask   sample_states, 
                                       ViewStateMask     view_states, 
                                       InstanceStateMask instance_states)
{
  return DataReader::read_next_instance( (Sequence*)received_data,
                                         sample_infos,
                                         max_samples,
                                         previous_handle,
                                         sample_states, 
                                         view_states, 
                                         instance_states);
}


/******************************************************************/

ReturnCode_t
ResourceReadingProfileDataReader::take_next_instance( ResourceReadingProfilePtrSeq     * received_data,
                                       SampleInfoSeq    * sample_infos,
                                       int                max_samples,
                                       InstanceHandle_t   previous_handle,
                                       SampleStateMask    sample_states, 
                                       ViewStateMask      view_states, 
                                       InstanceStateMask  instance_states)
{
  return DataReader::take_next_instance( (Sequence*)received_data,
                                         sample_infos,
                                         max_samples,
                                         previous_handle,
                                         sample_states, 
                                         view_states, 
                                         instance_states);
}


/******************************************************************/
    
ReturnCode_t
ResourceReadingProfileDataReader::read_next_instance_w_condition( ResourceReadingProfilePtrSeq     * received_data,
                                                   SampleInfoSeq    * sample_infos,
                                                   int                max_samples,
                                                   InstanceHandle_t   previous_handle,
                                                   ReadCondition *    a_condition)
{
  return DataReader::read_next_instance_w_condition( (Sequence*)received_data,
                                                     sample_infos,
                                                     max_samples,
                                                     previous_handle,
                                                     a_condition);
}


/******************************************************************/
    
ReturnCode_t 
ResourceReadingProfileDataReader::take_next_instance_w_condition( ResourceReadingProfilePtrSeq     * received_data,
                                                   SampleInfoSeq    * sample_infos,
                                                   int                max_samples,
                                                   InstanceHandle_t   previous_handle,
                                                   ReadCondition *    a_condition)
{
  return DataReader::take_next_instance_w_condition( (Sequence*)received_data,
                                                     sample_infos,
                                                     max_samples,
                                                     previous_handle,
                                                     a_condition);
}


/******************************************************************/
    
ReturnCode_t
ResourceReadingProfileDataReader::return_loan( ResourceReadingProfilePtrSeq   * received_data,
                                SampleInfoSeq  * sample_infos)
{
  return DataReader::return_loan( (Sequence*)received_data, sample_infos);
}


/******************************************************************/

ReturnCode_t
ResourceReadingProfileDataReader::get_key_value( ResourceReadingProfile            * key_holder, 
                                  InstanceHandle_t  handle)
{
  if ( ! key_holder )
      return RETCODE_BAD_PARAMETER;

  /* key: use DR to get it */
  return DataReader::get_key_value(  key_holder, handle );
}


/******************************************************************/
/* openfmb::resourcemodule:: */
InstanceHandle_t 
ResourceReadingProfileDataReader::lookup_instance( ResourceReadingProfile       * instance_data)
{
  if ( ! instance_data )
      return HANDLE_NIL;

  /* Complex key: use DR to find it */
  return DataReader::lookup_instance(  instance_data );
}


}  /* namespace resourcemodule */
/* END SCOPE: resourcemodule */
/* START SCOPE: solarmodule */

namespace solarmodule {


/******************************************************************
 * openfmb::solarmodule:: DataReader Ops
 *****************************************************************/

/******************************************************************/
SolarControlFSCCDataReader::SolarControlFSCCDataReader()
{
}

/******************************************************************/
ReturnCode_t 
SolarControlFSCCDataReader::read( SolarControlFSCCPtrSeq    * received_data,
                         SampleInfoSeq   * sample_infos,
                         int               max_samples,
                         SampleStateMask   sample_states, 
                         ViewStateMask     view_states, 
                         InstanceStateMask instance_states)
{
  return DataReader::read( (Sequence*)received_data, 
			    sample_infos, 
			    max_samples, 
			    sample_states, 
			    view_states, 
			    instance_states );
}
  

/******************************************************************/

ReturnCode_t
SolarControlFSCCDataReader::take( SolarControlFSCCPtrSeq     * received_data,
                         SampleInfoSeq    * sample_infos,
                         int                max_samples,
                         SampleStateMask    sample_states, 
                         ViewStateMask      view_states, 
                         InstanceStateMask  instance_states)
{
  return DataReader::take( (Sequence*)received_data,
                           sample_infos,
                           max_samples,
                           sample_states, 
                           view_states, 
                           instance_states);
}


/******************************************************************/

ReturnCode_t 
SolarControlFSCCDataReader::read_w_condition( SolarControlFSCCPtrSeq  * received_data,
                                     SampleInfoSeq * sample_infos,
                                     int             max_samples,
                                     ReadCondition * a_condition)
{
  return DataReader::read_w_condition( (Sequence*)received_data,
                                       sample_infos,
                                       max_samples,
                                       a_condition);
}


/******************************************************************/
    
ReturnCode_t
SolarControlFSCCDataReader::take_w_condition( SolarControlFSCCPtrSeq   * received_data,
                                     SampleInfoSeq  * sample_infos,
                                     int              max_samples,
                                     ReadCondition *  a_condition)
{
  return DataReader::take_w_condition( (Sequence*)received_data,
                                       sample_infos,
                                       max_samples,
                                       a_condition);
}


/******************************************************************/
    
ReturnCode_t
SolarControlFSCCDataReader::read_next_sample( SolarControlFSCC     * received_data,
                                  SampleInfo     * sample_info)
{
  return DataReader::read_next_sample( (void*)received_data,
                                       sample_info);
}


/******************************************************************/
    
ReturnCode_t
SolarControlFSCCDataReader::take_next_sample( SolarControlFSCC      * received_data,
                                     SampleInfo      * sample_info)
{
  return DataReader::take_next_sample( (void*) received_data,
                                       sample_info);
}


/******************************************************************/
    
ReturnCode_t
SolarControlFSCCDataReader::read_instance( SolarControlFSCCPtrSeq       * received_data,
                                  SampleInfoSeq    * sample_infos,
                                  int                max_samples,
                                  InstanceHandle_t   a_handle,
                                  SampleStateMask    sample_states, 
                                  ViewStateMask      view_states, 
                                  InstanceStateMask  instance_states)
{
  return DataReader::read_instance( (Sequence*)received_data, 
                                    sample_infos, 
                                    max_samples, 
                                    a_handle, 
                                    sample_states, 
                                    view_states, 
                                    instance_states );
}


/******************************************************************/
    
ReturnCode_t
SolarControlFSCCDataReader::take_instance( SolarControlFSCCPtrSeq    * received_data,
                                  SampleInfoSeq   * sample_infos,
                                  int               max_samples,
                                  InstanceHandle_t  a_handle,
                                  SampleStateMask   sample_states, 
                                  ViewStateMask     view_states, 
                                  InstanceStateMask instance_states)
{
  return DataReader::take_instance( (Sequence*)received_data,
                                    sample_infos,
                                    max_samples,
                                    a_handle,
                                    sample_states, 
                                    view_states, 
                                    instance_states);
}


/******************************************************************/
    
ReturnCode_t
SolarControlFSCCDataReader::read_next_instance( SolarControlFSCCPtrSeq    * received_data,
                                       SampleInfoSeq   * sample_infos,
                                       int               max_samples,
                                       InstanceHandle_t  previous_handle,
                                       SampleStateMask   sample_states, 
                                       ViewStateMask     view_states, 
                                       InstanceStateMask instance_states)
{
  return DataReader::read_next_instance( (Sequence*)received_data,
                                         sample_infos,
                                         max_samples,
                                         previous_handle,
                                         sample_states, 
                                         view_states, 
                                         instance_states);
}


/******************************************************************/

ReturnCode_t
SolarControlFSCCDataReader::take_next_instance( SolarControlFSCCPtrSeq     * received_data,
                                       SampleInfoSeq    * sample_infos,
                                       int                max_samples,
                                       InstanceHandle_t   previous_handle,
                                       SampleStateMask    sample_states, 
                                       ViewStateMask      view_states, 
                                       InstanceStateMask  instance_states)
{
  return DataReader::take_next_instance( (Sequence*)received_data,
                                         sample_infos,
                                         max_samples,
                                         previous_handle,
                                         sample_states, 
                                         view_states, 
                                         instance_states);
}


/******************************************************************/
    
ReturnCode_t
SolarControlFSCCDataReader::read_next_instance_w_condition( SolarControlFSCCPtrSeq     * received_data,
                                                   SampleInfoSeq    * sample_infos,
                                                   int                max_samples,
                                                   InstanceHandle_t   previous_handle,
                                                   ReadCondition *    a_condition)
{
  return DataReader::read_next_instance_w_condition( (Sequence*)received_data,
                                                     sample_infos,
                                                     max_samples,
                                                     previous_handle,
                                                     a_condition);
}


/******************************************************************/
    
ReturnCode_t 
SolarControlFSCCDataReader::take_next_instance_w_condition( SolarControlFSCCPtrSeq     * received_data,
                                                   SampleInfoSeq    * sample_infos,
                                                   int                max_samples,
                                                   InstanceHandle_t   previous_handle,
                                                   ReadCondition *    a_condition)
{
  return DataReader::take_next_instance_w_condition( (Sequence*)received_data,
                                                     sample_infos,
                                                     max_samples,
                                                     previous_handle,
                                                     a_condition);
}


/******************************************************************/
    
ReturnCode_t
SolarControlFSCCDataReader::return_loan( SolarControlFSCCPtrSeq   * received_data,
                                SampleInfoSeq  * sample_infos)
{
  return DataReader::return_loan( (Sequence*)received_data, sample_infos);
}


/******************************************************************/

ReturnCode_t
SolarControlFSCCDataReader::get_key_value( SolarControlFSCC            * key_holder, 
                                  InstanceHandle_t  handle)
{
  if ( ! key_holder )
      return RETCODE_BAD_PARAMETER;

  /* No keys: no op */
  CDX_UNUSED(handle);
  key_holder->clear();
  return DDS::RETCODE_OK;
}


/******************************************************************/
/* openfmb::solarmodule:: */
InstanceHandle_t 
SolarControlFSCCDataReader::lookup_instance( SolarControlFSCC       * instance_data)
{
  if ( ! instance_data )
      return HANDLE_NIL;

  /* No keys */
  return DDS::HANDLE_DEFAULT;
}


/******************************************************************
 * openfmb::solarmodule:: DataReader Ops
 *****************************************************************/

/******************************************************************/
SolarReadingProfileDataReader::SolarReadingProfileDataReader()
{
}

/******************************************************************/
ReturnCode_t 
SolarReadingProfileDataReader::read( SolarReadingProfilePtrSeq    * received_data,
                         SampleInfoSeq   * sample_infos,
                         int               max_samples,
                         SampleStateMask   sample_states, 
                         ViewStateMask     view_states, 
                         InstanceStateMask instance_states)
{
  return DataReader::read( (Sequence*)received_data, 
			    sample_infos, 
			    max_samples, 
			    sample_states, 
			    view_states, 
			    instance_states );
}
  

/******************************************************************/

ReturnCode_t
SolarReadingProfileDataReader::take( SolarReadingProfilePtrSeq     * received_data,
                         SampleInfoSeq    * sample_infos,
                         int                max_samples,
                         SampleStateMask    sample_states, 
                         ViewStateMask      view_states, 
                         InstanceStateMask  instance_states)
{
  return DataReader::take( (Sequence*)received_data,
                           sample_infos,
                           max_samples,
                           sample_states, 
                           view_states, 
                           instance_states);
}


/******************************************************************/

ReturnCode_t 
SolarReadingProfileDataReader::read_w_condition( SolarReadingProfilePtrSeq  * received_data,
                                     SampleInfoSeq * sample_infos,
                                     int             max_samples,
                                     ReadCondition * a_condition)
{
  return DataReader::read_w_condition( (Sequence*)received_data,
                                       sample_infos,
                                       max_samples,
                                       a_condition);
}


/******************************************************************/
    
ReturnCode_t
SolarReadingProfileDataReader::take_w_condition( SolarReadingProfilePtrSeq   * received_data,
                                     SampleInfoSeq  * sample_infos,
                                     int              max_samples,
                                     ReadCondition *  a_condition)
{
  return DataReader::take_w_condition( (Sequence*)received_data,
                                       sample_infos,
                                       max_samples,
                                       a_condition);
}


/******************************************************************/
    
ReturnCode_t
SolarReadingProfileDataReader::read_next_sample( SolarReadingProfile     * received_data,
                                  SampleInfo     * sample_info)
{
  return DataReader::read_next_sample( (void*)received_data,
                                       sample_info);
}


/******************************************************************/
    
ReturnCode_t
SolarReadingProfileDataReader::take_next_sample( SolarReadingProfile      * received_data,
                                     SampleInfo      * sample_info)
{
  return DataReader::take_next_sample( (void*) received_data,
                                       sample_info);
}


/******************************************************************/
    
ReturnCode_t
SolarReadingProfileDataReader::read_instance( SolarReadingProfilePtrSeq       * received_data,
                                  SampleInfoSeq    * sample_infos,
                                  int                max_samples,
                                  InstanceHandle_t   a_handle,
                                  SampleStateMask    sample_states, 
                                  ViewStateMask      view_states, 
                                  InstanceStateMask  instance_states)
{
  return DataReader::read_instance( (Sequence*)received_data, 
                                    sample_infos, 
                                    max_samples, 
                                    a_handle, 
                                    sample_states, 
                                    view_states, 
                                    instance_states );
}


/******************************************************************/
    
ReturnCode_t
SolarReadingProfileDataReader::take_instance( SolarReadingProfilePtrSeq    * received_data,
                                  SampleInfoSeq   * sample_infos,
                                  int               max_samples,
                                  InstanceHandle_t  a_handle,
                                  SampleStateMask   sample_states, 
                                  ViewStateMask     view_states, 
                                  InstanceStateMask instance_states)
{
  return DataReader::take_instance( (Sequence*)received_data,
                                    sample_infos,
                                    max_samples,
                                    a_handle,
                                    sample_states, 
                                    view_states, 
                                    instance_states);
}


/******************************************************************/
    
ReturnCode_t
SolarReadingProfileDataReader::read_next_instance( SolarReadingProfilePtrSeq    * received_data,
                                       SampleInfoSeq   * sample_infos,
                                       int               max_samples,
                                       InstanceHandle_t  previous_handle,
                                       SampleStateMask   sample_states, 
                                       ViewStateMask     view_states, 
                                       InstanceStateMask instance_states)
{
  return DataReader::read_next_instance( (Sequence*)received_data,
                                         sample_infos,
                                         max_samples,
                                         previous_handle,
                                         sample_states, 
                                         view_states, 
                                         instance_states);
}


/******************************************************************/

ReturnCode_t
SolarReadingProfileDataReader::take_next_instance( SolarReadingProfilePtrSeq     * received_data,
                                       SampleInfoSeq    * sample_infos,
                                       int                max_samples,
                                       InstanceHandle_t   previous_handle,
                                       SampleStateMask    sample_states, 
                                       ViewStateMask      view_states, 
                                       InstanceStateMask  instance_states)
{
  return DataReader::take_next_instance( (Sequence*)received_data,
                                         sample_infos,
                                         max_samples,
                                         previous_handle,
                                         sample_states, 
                                         view_states, 
                                         instance_states);
}


/******************************************************************/
    
ReturnCode_t
SolarReadingProfileDataReader::read_next_instance_w_condition( SolarReadingProfilePtrSeq     * received_data,
                                                   SampleInfoSeq    * sample_infos,
                                                   int                max_samples,
                                                   InstanceHandle_t   previous_handle,
                                                   ReadCondition *    a_condition)
{
  return DataReader::read_next_instance_w_condition( (Sequence*)received_data,
                                                     sample_infos,
                                                     max_samples,
                                                     previous_handle,
                                                     a_condition);
}


/******************************************************************/
    
ReturnCode_t 
SolarReadingProfileDataReader::take_next_instance_w_condition( SolarReadingProfilePtrSeq     * received_data,
                                                   SampleInfoSeq    * sample_infos,
                                                   int                max_samples,
                                                   InstanceHandle_t   previous_handle,
                                                   ReadCondition *    a_condition)
{
  return DataReader::take_next_instance_w_condition( (Sequence*)received_data,
                                                     sample_infos,
                                                     max_samples,
                                                     previous_handle,
                                                     a_condition);
}


/******************************************************************/
    
ReturnCode_t
SolarReadingProfileDataReader::return_loan( SolarReadingProfilePtrSeq   * received_data,
                                SampleInfoSeq  * sample_infos)
{
  return DataReader::return_loan( (Sequence*)received_data, sample_infos);
}


/******************************************************************/

ReturnCode_t
SolarReadingProfileDataReader::get_key_value( SolarReadingProfile            * key_holder, 
                                  InstanceHandle_t  handle)
{
  if ( ! key_holder )
      return RETCODE_BAD_PARAMETER;

  /* key: use DR to get it */
  return DataReader::get_key_value(  key_holder, handle );
}


/******************************************************************/
/* openfmb::solarmodule:: */
InstanceHandle_t 
SolarReadingProfileDataReader::lookup_instance( SolarReadingProfile       * instance_data)
{
  if ( ! instance_data )
      return HANDLE_NIL;

  /* Complex key: use DR to find it */
  return DataReader::lookup_instance(  instance_data );
}


}  /* namespace solarmodule */
/* END SCOPE: solarmodule */
/* START SCOPE: switchmodule */

namespace switchmodule {


/******************************************************************
 * openfmb::switchmodule:: DataReader Ops
 *****************************************************************/

/******************************************************************/
SwitchReadingProfileDataReader::SwitchReadingProfileDataReader()
{
}

/******************************************************************/
ReturnCode_t 
SwitchReadingProfileDataReader::read( SwitchReadingProfilePtrSeq    * received_data,
                         SampleInfoSeq   * sample_infos,
                         int               max_samples,
                         SampleStateMask   sample_states, 
                         ViewStateMask     view_states, 
                         InstanceStateMask instance_states)
{
  return DataReader::read( (Sequence*)received_data, 
			    sample_infos, 
			    max_samples, 
			    sample_states, 
			    view_states, 
			    instance_states );
}
  

/******************************************************************/

ReturnCode_t
SwitchReadingProfileDataReader::take( SwitchReadingProfilePtrSeq     * received_data,
                         SampleInfoSeq    * sample_infos,
                         int                max_samples,
                         SampleStateMask    sample_states, 
                         ViewStateMask      view_states, 
                         InstanceStateMask  instance_states)
{
  return DataReader::take( (Sequence*)received_data,
                           sample_infos,
                           max_samples,
                           sample_states, 
                           view_states, 
                           instance_states);
}


/******************************************************************/

ReturnCode_t 
SwitchReadingProfileDataReader::read_w_condition( SwitchReadingProfilePtrSeq  * received_data,
                                     SampleInfoSeq * sample_infos,
                                     int             max_samples,
                                     ReadCondition * a_condition)
{
  return DataReader::read_w_condition( (Sequence*)received_data,
                                       sample_infos,
                                       max_samples,
                                       a_condition);
}


/******************************************************************/
    
ReturnCode_t
SwitchReadingProfileDataReader::take_w_condition( SwitchReadingProfilePtrSeq   * received_data,
                                     SampleInfoSeq  * sample_infos,
                                     int              max_samples,
                                     ReadCondition *  a_condition)
{
  return DataReader::take_w_condition( (Sequence*)received_data,
                                       sample_infos,
                                       max_samples,
                                       a_condition);
}


/******************************************************************/
    
ReturnCode_t
SwitchReadingProfileDataReader::read_next_sample( SwitchReadingProfile     * received_data,
                                  SampleInfo     * sample_info)
{
  return DataReader::read_next_sample( (void*)received_data,
                                       sample_info);
}


/******************************************************************/
    
ReturnCode_t
SwitchReadingProfileDataReader::take_next_sample( SwitchReadingProfile      * received_data,
                                     SampleInfo      * sample_info)
{
  return DataReader::take_next_sample( (void*) received_data,
                                       sample_info);
}


/******************************************************************/
    
ReturnCode_t
SwitchReadingProfileDataReader::read_instance( SwitchReadingProfilePtrSeq       * received_data,
                                  SampleInfoSeq    * sample_infos,
                                  int                max_samples,
                                  InstanceHandle_t   a_handle,
                                  SampleStateMask    sample_states, 
                                  ViewStateMask      view_states, 
                                  InstanceStateMask  instance_states)
{
  return DataReader::read_instance( (Sequence*)received_data, 
                                    sample_infos, 
                                    max_samples, 
                                    a_handle, 
                                    sample_states, 
                                    view_states, 
                                    instance_states );
}


/******************************************************************/
    
ReturnCode_t
SwitchReadingProfileDataReader::take_instance( SwitchReadingProfilePtrSeq    * received_data,
                                  SampleInfoSeq   * sample_infos,
                                  int               max_samples,
                                  InstanceHandle_t  a_handle,
                                  SampleStateMask   sample_states, 
                                  ViewStateMask     view_states, 
                                  InstanceStateMask instance_states)
{
  return DataReader::take_instance( (Sequence*)received_data,
                                    sample_infos,
                                    max_samples,
                                    a_handle,
                                    sample_states, 
                                    view_states, 
                                    instance_states);
}


/******************************************************************/
    
ReturnCode_t
SwitchReadingProfileDataReader::read_next_instance( SwitchReadingProfilePtrSeq    * received_data,
                                       SampleInfoSeq   * sample_infos,
                                       int               max_samples,
                                       InstanceHandle_t  previous_handle,
                                       SampleStateMask   sample_states, 
                                       ViewStateMask     view_states, 
                                       InstanceStateMask instance_states)
{
  return DataReader::read_next_instance( (Sequence*)received_data,
                                         sample_infos,
                                         max_samples,
                                         previous_handle,
                                         sample_states, 
                                         view_states, 
                                         instance_states);
}


/******************************************************************/

ReturnCode_t
SwitchReadingProfileDataReader::take_next_instance( SwitchReadingProfilePtrSeq     * received_data,
                                       SampleInfoSeq    * sample_infos,
                                       int                max_samples,
                                       InstanceHandle_t   previous_handle,
                                       SampleStateMask    sample_states, 
                                       ViewStateMask      view_states, 
                                       InstanceStateMask  instance_states)
{
  return DataReader::take_next_instance( (Sequence*)received_data,
                                         sample_infos,
                                         max_samples,
                                         previous_handle,
                                         sample_states, 
                                         view_states, 
                                         instance_states);
}


/******************************************************************/
    
ReturnCode_t
SwitchReadingProfileDataReader::read_next_instance_w_condition( SwitchReadingProfilePtrSeq     * received_data,
                                                   SampleInfoSeq    * sample_infos,
                                                   int                max_samples,
                                                   InstanceHandle_t   previous_handle,
                                                   ReadCondition *    a_condition)
{
  return DataReader::read_next_instance_w_condition( (Sequence*)received_data,
                                                     sample_infos,
                                                     max_samples,
                                                     previous_handle,
                                                     a_condition);
}


/******************************************************************/
    
ReturnCode_t 
SwitchReadingProfileDataReader::take_next_instance_w_condition( SwitchReadingProfilePtrSeq     * received_data,
                                                   SampleInfoSeq    * sample_infos,
                                                   int                max_samples,
                                                   InstanceHandle_t   previous_handle,
                                                   ReadCondition *    a_condition)
{
  return DataReader::take_next_instance_w_condition( (Sequence*)received_data,
                                                     sample_infos,
                                                     max_samples,
                                                     previous_handle,
                                                     a_condition);
}


/******************************************************************/
    
ReturnCode_t
SwitchReadingProfileDataReader::return_loan( SwitchReadingProfilePtrSeq   * received_data,
                                SampleInfoSeq  * sample_infos)
{
  return DataReader::return_loan( (Sequence*)received_data, sample_infos);
}


/******************************************************************/

ReturnCode_t
SwitchReadingProfileDataReader::get_key_value( SwitchReadingProfile            * key_holder, 
                                  InstanceHandle_t  handle)
{
  if ( ! key_holder )
      return RETCODE_BAD_PARAMETER;

  /* key: use DR to get it */
  return DataReader::get_key_value(  key_holder, handle );
}


/******************************************************************/
/* openfmb::switchmodule:: */
InstanceHandle_t 
SwitchReadingProfileDataReader::lookup_instance( SwitchReadingProfile       * instance_data)
{
  if ( ! instance_data )
      return HANDLE_NIL;

  /* Complex key: use DR to find it */
  return DataReader::lookup_instance(  instance_data );
}


}  /* namespace switchmodule */
/* END SCOPE: switchmodule */

}  /* namespace openfmb */
/* END SCOPE: openfmb */
/* START SCOPE: openfmb */

namespace openfmb {

/* START SCOPE: breakermodule */

namespace breakermodule {


/******************************************************************
 * openfmb::breakermodule:: DataReader Ops
 *****************************************************************/

/******************************************************************/
BreakerReadingProfileDataReader::BreakerReadingProfileDataReader()
{
}

/******************************************************************/
ReturnCode_t 
BreakerReadingProfileDataReader::read( BreakerReadingProfilePtrSeq    * received_data,
                         SampleInfoSeq   * sample_infos,
                         int               max_samples,
                         SampleStateMask   sample_states, 
                         ViewStateMask     view_states, 
                         InstanceStateMask instance_states)
{
  return DataReader::read( (Sequence*)received_data, 
			    sample_infos, 
			    max_samples, 
			    sample_states, 
			    view_states, 
			    instance_states );
}
  

/******************************************************************/

ReturnCode_t
BreakerReadingProfileDataReader::take( BreakerReadingProfilePtrSeq     * received_data,
                         SampleInfoSeq    * sample_infos,
                         int                max_samples,
                         SampleStateMask    sample_states, 
                         ViewStateMask      view_states, 
                         InstanceStateMask  instance_states)
{
  return DataReader::take( (Sequence*)received_data,
                           sample_infos,
                           max_samples,
                           sample_states, 
                           view_states, 
                           instance_states);
}


/******************************************************************/

ReturnCode_t 
BreakerReadingProfileDataReader::read_w_condition( BreakerReadingProfilePtrSeq  * received_data,
                                     SampleInfoSeq * sample_infos,
                                     int             max_samples,
                                     ReadCondition * a_condition)
{
  return DataReader::read_w_condition( (Sequence*)received_data,
                                       sample_infos,
                                       max_samples,
                                       a_condition);
}


/******************************************************************/
    
ReturnCode_t
BreakerReadingProfileDataReader::take_w_condition( BreakerReadingProfilePtrSeq   * received_data,
                                     SampleInfoSeq  * sample_infos,
                                     int              max_samples,
                                     ReadCondition *  a_condition)
{
  return DataReader::take_w_condition( (Sequence*)received_data,
                                       sample_infos,
                                       max_samples,
                                       a_condition);
}


/******************************************************************/
    
ReturnCode_t
BreakerReadingProfileDataReader::read_next_sample( BreakerReadingProfile     * received_data,
                                  SampleInfo     * sample_info)
{
  return DataReader::read_next_sample( (void*)received_data,
                                       sample_info);
}


/******************************************************************/
    
ReturnCode_t
BreakerReadingProfileDataReader::take_next_sample( BreakerReadingProfile      * received_data,
                                     SampleInfo      * sample_info)
{
  return DataReader::take_next_sample( (void*) received_data,
                                       sample_info);
}


/******************************************************************/
    
ReturnCode_t
BreakerReadingProfileDataReader::read_instance( BreakerReadingProfilePtrSeq       * received_data,
                                  SampleInfoSeq    * sample_infos,
                                  int                max_samples,
                                  InstanceHandle_t   a_handle,
                                  SampleStateMask    sample_states, 
                                  ViewStateMask      view_states, 
                                  InstanceStateMask  instance_states)
{
  return DataReader::read_instance( (Sequence*)received_data, 
                                    sample_infos, 
                                    max_samples, 
                                    a_handle, 
                                    sample_states, 
                                    view_states, 
                                    instance_states );
}


/******************************************************************/
    
ReturnCode_t
BreakerReadingProfileDataReader::take_instance( BreakerReadingProfilePtrSeq    * received_data,
                                  SampleInfoSeq   * sample_infos,
                                  int               max_samples,
                                  InstanceHandle_t  a_handle,
                                  SampleStateMask   sample_states, 
                                  ViewStateMask     view_states, 
                                  InstanceStateMask instance_states)
{
  return DataReader::take_instance( (Sequence*)received_data,
                                    sample_infos,
                                    max_samples,
                                    a_handle,
                                    sample_states, 
                                    view_states, 
                                    instance_states);
}


/******************************************************************/
    
ReturnCode_t
BreakerReadingProfileDataReader::read_next_instance( BreakerReadingProfilePtrSeq    * received_data,
                                       SampleInfoSeq   * sample_infos,
                                       int               max_samples,
                                       InstanceHandle_t  previous_handle,
                                       SampleStateMask   sample_states, 
                                       ViewStateMask     view_states, 
                                       InstanceStateMask instance_states)
{
  return DataReader::read_next_instance( (Sequence*)received_data,
                                         sample_infos,
                                         max_samples,
                                         previous_handle,
                                         sample_states, 
                                         view_states, 
                                         instance_states);
}


/******************************************************************/

ReturnCode_t
BreakerReadingProfileDataReader::take_next_instance( BreakerReadingProfilePtrSeq     * received_data,
                                       SampleInfoSeq    * sample_infos,
                                       int                max_samples,
                                       InstanceHandle_t   previous_handle,
                                       SampleStateMask    sample_states, 
                                       ViewStateMask      view_states, 
                                       InstanceStateMask  instance_states)
{
  return DataReader::take_next_instance( (Sequence*)received_data,
                                         sample_infos,
                                         max_samples,
                                         previous_handle,
                                         sample_states, 
                                         view_states, 
                                         instance_states);
}


/******************************************************************/
    
ReturnCode_t
BreakerReadingProfileDataReader::read_next_instance_w_condition( BreakerReadingProfilePtrSeq     * received_data,
                                                   SampleInfoSeq    * sample_infos,
                                                   int                max_samples,
                                                   InstanceHandle_t   previous_handle,
                                                   ReadCondition *    a_condition)
{
  return DataReader::read_next_instance_w_condition( (Sequence*)received_data,
                                                     sample_infos,
                                                     max_samples,
                                                     previous_handle,
                                                     a_condition);
}


/******************************************************************/
    
ReturnCode_t 
BreakerReadingProfileDataReader::take_next_instance_w_condition( BreakerReadingProfilePtrSeq     * received_data,
                                                   SampleInfoSeq    * sample_infos,
                                                   int                max_samples,
                                                   InstanceHandle_t   previous_handle,
                                                   ReadCondition *    a_condition)
{
  return DataReader::take_next_instance_w_condition( (Sequence*)received_data,
                                                     sample_infos,
                                                     max_samples,
                                                     previous_handle,
                                                     a_condition);
}


/******************************************************************/
    
ReturnCode_t
BreakerReadingProfileDataReader::return_loan( BreakerReadingProfilePtrSeq   * received_data,
                                SampleInfoSeq  * sample_infos)
{
  return DataReader::return_loan( (Sequence*)received_data, sample_infos);
}


/******************************************************************/

ReturnCode_t
BreakerReadingProfileDataReader::get_key_value( BreakerReadingProfile            * key_holder, 
                                  InstanceHandle_t  handle)
{
  if ( ! key_holder )
      return RETCODE_BAD_PARAMETER;

  /* key: use DR to get it */
  return DataReader::get_key_value(  key_holder, handle );
}


/******************************************************************/
/* openfmb::breakermodule:: */
InstanceHandle_t 
BreakerReadingProfileDataReader::lookup_instance( BreakerReadingProfile       * instance_data)
{
  if ( ! instance_data )
      return HANDLE_NIL;

  /* Complex key: use DR to find it */
  return DataReader::lookup_instance(  instance_data );
}


}  /* namespace breakermodule */
/* END SCOPE: breakermodule */
/* START SCOPE: loadmodule */

namespace loadmodule {


/******************************************************************
 * openfmb::loadmodule:: DataReader Ops
 *****************************************************************/

/******************************************************************/
LoadControlProfileDataReader::LoadControlProfileDataReader()
{
}

/******************************************************************/
ReturnCode_t 
LoadControlProfileDataReader::read( LoadControlProfilePtrSeq    * received_data,
                         SampleInfoSeq   * sample_infos,
                         int               max_samples,
                         SampleStateMask   sample_states, 
                         ViewStateMask     view_states, 
                         InstanceStateMask instance_states)
{
  return DataReader::read( (Sequence*)received_data, 
			    sample_infos, 
			    max_samples, 
			    sample_states, 
			    view_states, 
			    instance_states );
}
  

/******************************************************************/

ReturnCode_t
LoadControlProfileDataReader::take( LoadControlProfilePtrSeq     * received_data,
                         SampleInfoSeq    * sample_infos,
                         int                max_samples,
                         SampleStateMask    sample_states, 
                         ViewStateMask      view_states, 
                         InstanceStateMask  instance_states)
{
  return DataReader::take( (Sequence*)received_data,
                           sample_infos,
                           max_samples,
                           sample_states, 
                           view_states, 
                           instance_states);
}


/******************************************************************/

ReturnCode_t 
LoadControlProfileDataReader::read_w_condition( LoadControlProfilePtrSeq  * received_data,
                                     SampleInfoSeq * sample_infos,
                                     int             max_samples,
                                     ReadCondition * a_condition)
{
  return DataReader::read_w_condition( (Sequence*)received_data,
                                       sample_infos,
                                       max_samples,
                                       a_condition);
}


/******************************************************************/
    
ReturnCode_t
LoadControlProfileDataReader::take_w_condition( LoadControlProfilePtrSeq   * received_data,
                                     SampleInfoSeq  * sample_infos,
                                     int              max_samples,
                                     ReadCondition *  a_condition)
{
  return DataReader::take_w_condition( (Sequence*)received_data,
                                       sample_infos,
                                       max_samples,
                                       a_condition);
}


/******************************************************************/
    
ReturnCode_t
LoadControlProfileDataReader::read_next_sample( LoadControlProfile     * received_data,
                                  SampleInfo     * sample_info)
{
  return DataReader::read_next_sample( (void*)received_data,
                                       sample_info);
}


/******************************************************************/
    
ReturnCode_t
LoadControlProfileDataReader::take_next_sample( LoadControlProfile      * received_data,
                                     SampleInfo      * sample_info)
{
  return DataReader::take_next_sample( (void*) received_data,
                                       sample_info);
}


/******************************************************************/
    
ReturnCode_t
LoadControlProfileDataReader::read_instance( LoadControlProfilePtrSeq       * received_data,
                                  SampleInfoSeq    * sample_infos,
                                  int                max_samples,
                                  InstanceHandle_t   a_handle,
                                  SampleStateMask    sample_states, 
                                  ViewStateMask      view_states, 
                                  InstanceStateMask  instance_states)
{
  return DataReader::read_instance( (Sequence*)received_data, 
                                    sample_infos, 
                                    max_samples, 
                                    a_handle, 
                                    sample_states, 
                                    view_states, 
                                    instance_states );
}


/******************************************************************/
    
ReturnCode_t
LoadControlProfileDataReader::take_instance( LoadControlProfilePtrSeq    * received_data,
                                  SampleInfoSeq   * sample_infos,
                                  int               max_samples,
                                  InstanceHandle_t  a_handle,
                                  SampleStateMask   sample_states, 
                                  ViewStateMask     view_states, 
                                  InstanceStateMask instance_states)
{
  return DataReader::take_instance( (Sequence*)received_data,
                                    sample_infos,
                                    max_samples,
                                    a_handle,
                                    sample_states, 
                                    view_states, 
                                    instance_states);
}


/******************************************************************/
    
ReturnCode_t
LoadControlProfileDataReader::read_next_instance( LoadControlProfilePtrSeq    * received_data,
                                       SampleInfoSeq   * sample_infos,
                                       int               max_samples,
                                       InstanceHandle_t  previous_handle,
                                       SampleStateMask   sample_states, 
                                       ViewStateMask     view_states, 
                                       InstanceStateMask instance_states)
{
  return DataReader::read_next_instance( (Sequence*)received_data,
                                         sample_infos,
                                         max_samples,
                                         previous_handle,
                                         sample_states, 
                                         view_states, 
                                         instance_states);
}


/******************************************************************/

ReturnCode_t
LoadControlProfileDataReader::take_next_instance( LoadControlProfilePtrSeq     * received_data,
                                       SampleInfoSeq    * sample_infos,
                                       int                max_samples,
                                       InstanceHandle_t   previous_handle,
                                       SampleStateMask    sample_states, 
                                       ViewStateMask      view_states, 
                                       InstanceStateMask  instance_states)
{
  return DataReader::take_next_instance( (Sequence*)received_data,
                                         sample_infos,
                                         max_samples,
                                         previous_handle,
                                         sample_states, 
                                         view_states, 
                                         instance_states);
}


/******************************************************************/
    
ReturnCode_t
LoadControlProfileDataReader::read_next_instance_w_condition( LoadControlProfilePtrSeq     * received_data,
                                                   SampleInfoSeq    * sample_infos,
                                                   int                max_samples,
                                                   InstanceHandle_t   previous_handle,
                                                   ReadCondition *    a_condition)
{
  return DataReader::read_next_instance_w_condition( (Sequence*)received_data,
                                                     sample_infos,
                                                     max_samples,
                                                     previous_handle,
                                                     a_condition);
}


/******************************************************************/
    
ReturnCode_t 
LoadControlProfileDataReader::take_next_instance_w_condition( LoadControlProfilePtrSeq     * received_data,
                                                   SampleInfoSeq    * sample_infos,
                                                   int                max_samples,
                                                   InstanceHandle_t   previous_handle,
                                                   ReadCondition *    a_condition)
{
  return DataReader::take_next_instance_w_condition( (Sequence*)received_data,
                                                     sample_infos,
                                                     max_samples,
                                                     previous_handle,
                                                     a_condition);
}


/******************************************************************/
    
ReturnCode_t
LoadControlProfileDataReader::return_loan( LoadControlProfilePtrSeq   * received_data,
                                SampleInfoSeq  * sample_infos)
{
  return DataReader::return_loan( (Sequence*)received_data, sample_infos);
}


/******************************************************************/

ReturnCode_t
LoadControlProfileDataReader::get_key_value( LoadControlProfile            * key_holder, 
                                  InstanceHandle_t  handle)
{
  if ( ! key_holder )
      return RETCODE_BAD_PARAMETER;

  /* key: use DR to get it */
  return DataReader::get_key_value(  key_holder, handle );
}


/******************************************************************/
/* openfmb::loadmodule:: */
InstanceHandle_t 
LoadControlProfileDataReader::lookup_instance( LoadControlProfile       * instance_data)
{
  if ( ! instance_data )
      return HANDLE_NIL;

  /* Complex key: use DR to find it */
  return DataReader::lookup_instance(  instance_data );
}


}  /* namespace loadmodule */
/* END SCOPE: loadmodule */
/* START SCOPE: solarmodule */

namespace solarmodule {


/******************************************************************
 * openfmb::solarmodule:: DataReader Ops
 *****************************************************************/

/******************************************************************/
SolarControlProfileDataReader::SolarControlProfileDataReader()
{
}

/******************************************************************/
ReturnCode_t 
SolarControlProfileDataReader::read( SolarControlProfilePtrSeq    * received_data,
                         SampleInfoSeq   * sample_infos,
                         int               max_samples,
                         SampleStateMask   sample_states, 
                         ViewStateMask     view_states, 
                         InstanceStateMask instance_states)
{
  return DataReader::read( (Sequence*)received_data, 
			    sample_infos, 
			    max_samples, 
			    sample_states, 
			    view_states, 
			    instance_states );
}
  

/******************************************************************/

ReturnCode_t
SolarControlProfileDataReader::take( SolarControlProfilePtrSeq     * received_data,
                         SampleInfoSeq    * sample_infos,
                         int                max_samples,
                         SampleStateMask    sample_states, 
                         ViewStateMask      view_states, 
                         InstanceStateMask  instance_states)
{
  return DataReader::take( (Sequence*)received_data,
                           sample_infos,
                           max_samples,
                           sample_states, 
                           view_states, 
                           instance_states);
}


/******************************************************************/

ReturnCode_t 
SolarControlProfileDataReader::read_w_condition( SolarControlProfilePtrSeq  * received_data,
                                     SampleInfoSeq * sample_infos,
                                     int             max_samples,
                                     ReadCondition * a_condition)
{
  return DataReader::read_w_condition( (Sequence*)received_data,
                                       sample_infos,
                                       max_samples,
                                       a_condition);
}


/******************************************************************/
    
ReturnCode_t
SolarControlProfileDataReader::take_w_condition( SolarControlProfilePtrSeq   * received_data,
                                     SampleInfoSeq  * sample_infos,
                                     int              max_samples,
                                     ReadCondition *  a_condition)
{
  return DataReader::take_w_condition( (Sequence*)received_data,
                                       sample_infos,
                                       max_samples,
                                       a_condition);
}


/******************************************************************/
    
ReturnCode_t
SolarControlProfileDataReader::read_next_sample( SolarControlProfile     * received_data,
                                  SampleInfo     * sample_info)
{
  return DataReader::read_next_sample( (void*)received_data,
                                       sample_info);
}


/******************************************************************/
    
ReturnCode_t
SolarControlProfileDataReader::take_next_sample( SolarControlProfile      * received_data,
                                     SampleInfo      * sample_info)
{
  return DataReader::take_next_sample( (void*) received_data,
                                       sample_info);
}


/******************************************************************/
    
ReturnCode_t
SolarControlProfileDataReader::read_instance( SolarControlProfilePtrSeq       * received_data,
                                  SampleInfoSeq    * sample_infos,
                                  int                max_samples,
                                  InstanceHandle_t   a_handle,
                                  SampleStateMask    sample_states, 
                                  ViewStateMask      view_states, 
                                  InstanceStateMask  instance_states)
{
  return DataReader::read_instance( (Sequence*)received_data, 
                                    sample_infos, 
                                    max_samples, 
                                    a_handle, 
                                    sample_states, 
                                    view_states, 
                                    instance_states );
}


/******************************************************************/
    
ReturnCode_t
SolarControlProfileDataReader::take_instance( SolarControlProfilePtrSeq    * received_data,
                                  SampleInfoSeq   * sample_infos,
                                  int               max_samples,
                                  InstanceHandle_t  a_handle,
                                  SampleStateMask   sample_states, 
                                  ViewStateMask     view_states, 
                                  InstanceStateMask instance_states)
{
  return DataReader::take_instance( (Sequence*)received_data,
                                    sample_infos,
                                    max_samples,
                                    a_handle,
                                    sample_states, 
                                    view_states, 
                                    instance_states);
}


/******************************************************************/
    
ReturnCode_t
SolarControlProfileDataReader::read_next_instance( SolarControlProfilePtrSeq    * received_data,
                                       SampleInfoSeq   * sample_infos,
                                       int               max_samples,
                                       InstanceHandle_t  previous_handle,
                                       SampleStateMask   sample_states, 
                                       ViewStateMask     view_states, 
                                       InstanceStateMask instance_states)
{
  return DataReader::read_next_instance( (Sequence*)received_data,
                                         sample_infos,
                                         max_samples,
                                         previous_handle,
                                         sample_states, 
                                         view_states, 
                                         instance_states);
}


/******************************************************************/

ReturnCode_t
SolarControlProfileDataReader::take_next_instance( SolarControlProfilePtrSeq     * received_data,
                                       SampleInfoSeq    * sample_infos,
                                       int                max_samples,
                                       InstanceHandle_t   previous_handle,
                                       SampleStateMask    sample_states, 
                                       ViewStateMask      view_states, 
                                       InstanceStateMask  instance_states)
{
  return DataReader::take_next_instance( (Sequence*)received_data,
                                         sample_infos,
                                         max_samples,
                                         previous_handle,
                                         sample_states, 
                                         view_states, 
                                         instance_states);
}


/******************************************************************/
    
ReturnCode_t
SolarControlProfileDataReader::read_next_instance_w_condition( SolarControlProfilePtrSeq     * received_data,
                                                   SampleInfoSeq    * sample_infos,
                                                   int                max_samples,
                                                   InstanceHandle_t   previous_handle,
                                                   ReadCondition *    a_condition)
{
  return DataReader::read_next_instance_w_condition( (Sequence*)received_data,
                                                     sample_infos,
                                                     max_samples,
                                                     previous_handle,
                                                     a_condition);
}


/******************************************************************/
    
ReturnCode_t 
SolarControlProfileDataReader::take_next_instance_w_condition( SolarControlProfilePtrSeq     * received_data,
                                                   SampleInfoSeq    * sample_infos,
                                                   int                max_samples,
                                                   InstanceHandle_t   previous_handle,
                                                   ReadCondition *    a_condition)
{
  return DataReader::take_next_instance_w_condition( (Sequence*)received_data,
                                                     sample_infos,
                                                     max_samples,
                                                     previous_handle,
                                                     a_condition);
}


/******************************************************************/
    
ReturnCode_t
SolarControlProfileDataReader::return_loan( SolarControlProfilePtrSeq   * received_data,
                                SampleInfoSeq  * sample_infos)
{
  return DataReader::return_loan( (Sequence*)received_data, sample_infos);
}


/******************************************************************/

ReturnCode_t
SolarControlProfileDataReader::get_key_value( SolarControlProfile            * key_holder, 
                                  InstanceHandle_t  handle)
{
  if ( ! key_holder )
      return RETCODE_BAD_PARAMETER;

  /* key: use DR to get it */
  return DataReader::get_key_value(  key_holder, handle );
}


/******************************************************************/
/* openfmb::solarmodule:: */
InstanceHandle_t 
SolarControlProfileDataReader::lookup_instance( SolarControlProfile       * instance_data)
{
  if ( ! instance_data )
      return HANDLE_NIL;

  /* Complex key: use DR to find it */
  return DataReader::lookup_instance(  instance_data );
}


}  /* namespace solarmodule */
/* END SCOPE: solarmodule */

}  /* namespace openfmb */
/* END SCOPE: openfmb */
