/********************************************
 * Type specific DataWriter header file.    *
 * Autogenerated by CoreDX DDL compiler.    *
 * Do no edit - edits may be overwritten.   *
 ********************************************/

#ifndef _OPENFMB_DATAWRITER_HH
#define _OPENFMB_DATAWRITER_HH

#include <dds/dds.hh>
#include "OpenFMB.hh"

using namespace DDS;

/* START SCOPE: UML_Extension */

namespace UML_Extension {


}  /* namespace UML_Extension */
/* END SCOPE: UML_Extension */
/* START SCOPE: openfmb */

namespace openfmb {

/* START SCOPE: breakermodule */

namespace breakermodule {


}  /* namespace breakermodule */
/* END SCOPE: breakermodule */
/* START SCOPE: commonmodule */

namespace commonmodule {


}  /* namespace commonmodule */
/* END SCOPE: commonmodule */
/* START SCOPE: essmodule */

namespace essmodule {


}  /* namespace essmodule */
/* END SCOPE: essmodule */
/* START SCOPE: generationmodule */

namespace generationmodule {


}  /* namespace generationmodule */
/* END SCOPE: generationmodule */
/* START SCOPE: interconnectionmodule */

namespace interconnectionmodule {


}  /* namespace interconnectionmodule */
/* END SCOPE: interconnectionmodule */
/* START SCOPE: loadmodule */

namespace loadmodule {


}  /* namespace loadmodule */
/* END SCOPE: loadmodule */
/* START SCOPE: optimizermodule */

namespace optimizermodule {


}  /* namespace optimizermodule */
/* END SCOPE: optimizermodule */
/* START SCOPE: reclosermodule */

namespace reclosermodule {


}  /* namespace reclosermodule */
/* END SCOPE: reclosermodule */
/* START SCOPE: regulatormodule */

namespace regulatormodule {


}  /* namespace regulatormodule */
/* END SCOPE: regulatormodule */
/* START SCOPE: resourcemodule */

namespace resourcemodule {


}  /* namespace resourcemodule */
/* END SCOPE: resourcemodule */
/* START SCOPE: solarmodule */

namespace solarmodule {


}  /* namespace solarmodule */
/* END SCOPE: solarmodule */
/* START SCOPE: switchmodule */

namespace switchmodule {


}  /* namespace switchmodule */
/* END SCOPE: switchmodule */

}  /* namespace openfmb */
/* END SCOPE: openfmb */
/* START SCOPE: openfmb */

namespace openfmb {

/* START SCOPE: commonmodule */

namespace commonmodule {

class BCRTypeSupport;
/******************************************************************
 *   openfmb::commonmodule:: BCR DataWriter Class
 ******************************************************************/
class COREDX_TS_CLASS_EXPORT BCRDataWriter : public DataWriter
{
  friend class DDS::DomainParticipant;
  friend class BCRTypeSupport;

public:

  /* DataWriter Meathods */

  InstanceHandle_t register_instance( const BCR *  instance_data);
  
  InstanceHandle_t register_instance_w_timestamp( const BCR * instance_data,
                                                  const Time_t source_timestamp);
  
  ReturnCode_t unregister_instance( const BCR * instance_data, 
                                    const InstanceHandle_t  handle);
  
  ReturnCode_t unregister_instance_w_timestamp( const BCR * instance_data, 
                                                const InstanceHandle_t handle,
                                                const Time_t source_timestamp);
  
  ReturnCode_t write( const BCR * instance_data, 
                      const InstanceHandle_t  handle);

  ReturnCode_t write_w_timestamp( const BCR * instance_data, 
                                  const InstanceHandle_t handle,
                                  const Time_t source_timestamp);
  
  ReturnCode_t dispose( const BCR * instance_data, 
                        const InstanceHandle_t  instance_handle);
  
  ReturnCode_t dispose_w_timestamp( const BCR * instance_data, 
                                    const InstanceHandle_t  instance_handle, 
                                    const Time_t  source_timestamp);
  
  ReturnCode_t get_key_value( BCR * key_holder, 
                              const InstanceHandle_t  handle);
  
  InstanceHandle_t lookup_instance( const BCR * instance_data);

  static BCRDataWriter * narrow( DataWriter * dw) { return (BCRDataWriter *)dw; }
  BCRDataWriter        * narrow( void )           { return this; }
  
 protected:
 private:

  /* Constructor / Destructor -- use Publisher::create_datawriter() */

  BCRDataWriter();
  ~BCRDataWriter() {};

};

}  /* namespace commonmodule */
/* END SCOPE: commonmodule */
/* START SCOPE: essmodule */

namespace essmodule {

class ENC_ESSControlKindTypeSupport;
/******************************************************************
 *   openfmb::essmodule:: ENC_ESSControlKind DataWriter Class
 ******************************************************************/
class COREDX_TS_CLASS_EXPORT ENC_ESSControlKindDataWriter : public DataWriter
{
  friend class DDS::DomainParticipant;
  friend class ENC_ESSControlKindTypeSupport;

public:

  /* DataWriter Meathods */

  InstanceHandle_t register_instance( const ENC_ESSControlKind *  instance_data);
  
  InstanceHandle_t register_instance_w_timestamp( const ENC_ESSControlKind * instance_data,
                                                  const Time_t source_timestamp);
  
  ReturnCode_t unregister_instance( const ENC_ESSControlKind * instance_data, 
                                    const InstanceHandle_t  handle);
  
  ReturnCode_t unregister_instance_w_timestamp( const ENC_ESSControlKind * instance_data, 
                                                const InstanceHandle_t handle,
                                                const Time_t source_timestamp);
  
  ReturnCode_t write( const ENC_ESSControlKind * instance_data, 
                      const InstanceHandle_t  handle);

  ReturnCode_t write_w_timestamp( const ENC_ESSControlKind * instance_data, 
                                  const InstanceHandle_t handle,
                                  const Time_t source_timestamp);
  
  ReturnCode_t dispose( const ENC_ESSControlKind * instance_data, 
                        const InstanceHandle_t  instance_handle);
  
  ReturnCode_t dispose_w_timestamp( const ENC_ESSControlKind * instance_data, 
                                    const InstanceHandle_t  instance_handle, 
                                    const Time_t  source_timestamp);
  
  ReturnCode_t get_key_value( ENC_ESSControlKind * key_holder, 
                              const InstanceHandle_t  handle);
  
  InstanceHandle_t lookup_instance( const ENC_ESSControlKind * instance_data);

  static ENC_ESSControlKindDataWriter * narrow( DataWriter * dw) { return (ENC_ESSControlKindDataWriter *)dw; }
  ENC_ESSControlKindDataWriter        * narrow( void )           { return this; }
  
 protected:
 private:

  /* Constructor / Destructor -- use Publisher::create_datawriter() */

  ENC_ESSControlKindDataWriter();
  ~ENC_ESSControlKindDataWriter() {};

};

}  /* namespace essmodule */
/* END SCOPE: essmodule */
/* START SCOPE: generationmodule */

namespace generationmodule {

class GenerationControlScheduleProfileTypeSupport;
/******************************************************************
 *   openfmb::generationmodule:: GenerationControlScheduleProfile DataWriter Class
 ******************************************************************/
class COREDX_TS_CLASS_EXPORT GenerationControlScheduleProfileDataWriter : public DataWriter
{
  friend class DDS::DomainParticipant;
  friend class GenerationControlScheduleProfileTypeSupport;

public:

  /* DataWriter Meathods */

  InstanceHandle_t register_instance( const GenerationControlScheduleProfile *  instance_data);
  
  InstanceHandle_t register_instance_w_timestamp( const GenerationControlScheduleProfile * instance_data,
                                                  const Time_t source_timestamp);
  
  ReturnCode_t unregister_instance( const GenerationControlScheduleProfile * instance_data, 
                                    const InstanceHandle_t  handle);
  
  ReturnCode_t unregister_instance_w_timestamp( const GenerationControlScheduleProfile * instance_data, 
                                                const InstanceHandle_t handle,
                                                const Time_t source_timestamp);
  
  ReturnCode_t write( const GenerationControlScheduleProfile * instance_data, 
                      const InstanceHandle_t  handle);

  ReturnCode_t write_w_timestamp( const GenerationControlScheduleProfile * instance_data, 
                                  const InstanceHandle_t handle,
                                  const Time_t source_timestamp);
  
  ReturnCode_t dispose( const GenerationControlScheduleProfile * instance_data, 
                        const InstanceHandle_t  instance_handle);
  
  ReturnCode_t dispose_w_timestamp( const GenerationControlScheduleProfile * instance_data, 
                                    const InstanceHandle_t  instance_handle, 
                                    const Time_t  source_timestamp);
  
  ReturnCode_t get_key_value( GenerationControlScheduleProfile * key_holder, 
                              const InstanceHandle_t  handle);
  
  InstanceHandle_t lookup_instance( const GenerationControlScheduleProfile * instance_data);

  static GenerationControlScheduleProfileDataWriter * narrow( DataWriter * dw) { return (GenerationControlScheduleProfileDataWriter *)dw; }
  GenerationControlScheduleProfileDataWriter        * narrow( void )           { return this; }
  
 protected:
 private:

  /* Constructor / Destructor -- use Publisher::create_datawriter() */

  GenerationControlScheduleProfileDataWriter();
  ~GenerationControlScheduleProfileDataWriter() {};

};

}  /* namespace generationmodule */
/* END SCOPE: generationmodule */
/* START SCOPE: interconnectionmodule */

namespace interconnectionmodule {

class PlannedInterconnectionScheduleProfileTypeSupport;
/******************************************************************
 *   openfmb::interconnectionmodule:: PlannedInterconnectionScheduleProfile DataWriter Class
 ******************************************************************/
class COREDX_TS_CLASS_EXPORT PlannedInterconnectionScheduleProfileDataWriter : public DataWriter
{
  friend class DDS::DomainParticipant;
  friend class PlannedInterconnectionScheduleProfileTypeSupport;

public:

  /* DataWriter Meathods */

  InstanceHandle_t register_instance( const PlannedInterconnectionScheduleProfile *  instance_data);
  
  InstanceHandle_t register_instance_w_timestamp( const PlannedInterconnectionScheduleProfile * instance_data,
                                                  const Time_t source_timestamp);
  
  ReturnCode_t unregister_instance( const PlannedInterconnectionScheduleProfile * instance_data, 
                                    const InstanceHandle_t  handle);
  
  ReturnCode_t unregister_instance_w_timestamp( const PlannedInterconnectionScheduleProfile * instance_data, 
                                                const InstanceHandle_t handle,
                                                const Time_t source_timestamp);
  
  ReturnCode_t write( const PlannedInterconnectionScheduleProfile * instance_data, 
                      const InstanceHandle_t  handle);

  ReturnCode_t write_w_timestamp( const PlannedInterconnectionScheduleProfile * instance_data, 
                                  const InstanceHandle_t handle,
                                  const Time_t source_timestamp);
  
  ReturnCode_t dispose( const PlannedInterconnectionScheduleProfile * instance_data, 
                        const InstanceHandle_t  instance_handle);
  
  ReturnCode_t dispose_w_timestamp( const PlannedInterconnectionScheduleProfile * instance_data, 
                                    const InstanceHandle_t  instance_handle, 
                                    const Time_t  source_timestamp);
  
  ReturnCode_t get_key_value( PlannedInterconnectionScheduleProfile * key_holder, 
                              const InstanceHandle_t  handle);
  
  InstanceHandle_t lookup_instance( const PlannedInterconnectionScheduleProfile * instance_data);

  static PlannedInterconnectionScheduleProfileDataWriter * narrow( DataWriter * dw) { return (PlannedInterconnectionScheduleProfileDataWriter *)dw; }
  PlannedInterconnectionScheduleProfileDataWriter        * narrow( void )           { return this; }
  
 protected:
 private:

  /* Constructor / Destructor -- use Publisher::create_datawriter() */

  PlannedInterconnectionScheduleProfileDataWriter();
  ~PlannedInterconnectionScheduleProfileDataWriter() {};

};
class RequestedInterconnectionScheduleProfileTypeSupport;
/******************************************************************
 *   openfmb::interconnectionmodule:: RequestedInterconnectionScheduleProfile DataWriter Class
 ******************************************************************/
class COREDX_TS_CLASS_EXPORT RequestedInterconnectionScheduleProfileDataWriter : public DataWriter
{
  friend class DDS::DomainParticipant;
  friend class RequestedInterconnectionScheduleProfileTypeSupport;

public:

  /* DataWriter Meathods */

  InstanceHandle_t register_instance( const RequestedInterconnectionScheduleProfile *  instance_data);
  
  InstanceHandle_t register_instance_w_timestamp( const RequestedInterconnectionScheduleProfile * instance_data,
                                                  const Time_t source_timestamp);
  
  ReturnCode_t unregister_instance( const RequestedInterconnectionScheduleProfile * instance_data, 
                                    const InstanceHandle_t  handle);
  
  ReturnCode_t unregister_instance_w_timestamp( const RequestedInterconnectionScheduleProfile * instance_data, 
                                                const InstanceHandle_t handle,
                                                const Time_t source_timestamp);
  
  ReturnCode_t write( const RequestedInterconnectionScheduleProfile * instance_data, 
                      const InstanceHandle_t  handle);

  ReturnCode_t write_w_timestamp( const RequestedInterconnectionScheduleProfile * instance_data, 
                                  const InstanceHandle_t handle,
                                  const Time_t source_timestamp);
  
  ReturnCode_t dispose( const RequestedInterconnectionScheduleProfile * instance_data, 
                        const InstanceHandle_t  instance_handle);
  
  ReturnCode_t dispose_w_timestamp( const RequestedInterconnectionScheduleProfile * instance_data, 
                                    const InstanceHandle_t  instance_handle, 
                                    const Time_t  source_timestamp);
  
  ReturnCode_t get_key_value( RequestedInterconnectionScheduleProfile * key_holder, 
                              const InstanceHandle_t  handle);
  
  InstanceHandle_t lookup_instance( const RequestedInterconnectionScheduleProfile * instance_data);

  static RequestedInterconnectionScheduleProfileDataWriter * narrow( DataWriter * dw) { return (RequestedInterconnectionScheduleProfileDataWriter *)dw; }
  RequestedInterconnectionScheduleProfileDataWriter        * narrow( void )           { return this; }
  
 protected:
 private:

  /* Constructor / Destructor -- use Publisher::create_datawriter() */

  RequestedInterconnectionScheduleProfileDataWriter();
  ~RequestedInterconnectionScheduleProfileDataWriter() {};

};

}  /* namespace interconnectionmodule */
/* END SCOPE: interconnectionmodule */
/* START SCOPE: loadmodule */

namespace loadmodule {


}  /* namespace loadmodule */
/* END SCOPE: loadmodule */
/* START SCOPE: optimizermodule */

namespace optimizermodule {

class RequestedOptimizerScheduleProfileTypeSupport;
/******************************************************************
 *   openfmb::optimizermodule:: RequestedOptimizerScheduleProfile DataWriter Class
 ******************************************************************/
class COREDX_TS_CLASS_EXPORT RequestedOptimizerScheduleProfileDataWriter : public DataWriter
{
  friend class DDS::DomainParticipant;
  friend class RequestedOptimizerScheduleProfileTypeSupport;

public:

  /* DataWriter Meathods */

  InstanceHandle_t register_instance( const RequestedOptimizerScheduleProfile *  instance_data);
  
  InstanceHandle_t register_instance_w_timestamp( const RequestedOptimizerScheduleProfile * instance_data,
                                                  const Time_t source_timestamp);
  
  ReturnCode_t unregister_instance( const RequestedOptimizerScheduleProfile * instance_data, 
                                    const InstanceHandle_t  handle);
  
  ReturnCode_t unregister_instance_w_timestamp( const RequestedOptimizerScheduleProfile * instance_data, 
                                                const InstanceHandle_t handle,
                                                const Time_t source_timestamp);
  
  ReturnCode_t write( const RequestedOptimizerScheduleProfile * instance_data, 
                      const InstanceHandle_t  handle);

  ReturnCode_t write_w_timestamp( const RequestedOptimizerScheduleProfile * instance_data, 
                                  const InstanceHandle_t handle,
                                  const Time_t source_timestamp);
  
  ReturnCode_t dispose( const RequestedOptimizerScheduleProfile * instance_data, 
                        const InstanceHandle_t  instance_handle);
  
  ReturnCode_t dispose_w_timestamp( const RequestedOptimizerScheduleProfile * instance_data, 
                                    const InstanceHandle_t  instance_handle, 
                                    const Time_t  source_timestamp);
  
  ReturnCode_t get_key_value( RequestedOptimizerScheduleProfile * key_holder, 
                              const InstanceHandle_t  handle);
  
  InstanceHandle_t lookup_instance( const RequestedOptimizerScheduleProfile * instance_data);

  static RequestedOptimizerScheduleProfileDataWriter * narrow( DataWriter * dw) { return (RequestedOptimizerScheduleProfileDataWriter *)dw; }
  RequestedOptimizerScheduleProfileDataWriter        * narrow( void )           { return this; }
  
 protected:
 private:

  /* Constructor / Destructor -- use Publisher::create_datawriter() */

  RequestedOptimizerScheduleProfileDataWriter();
  ~RequestedOptimizerScheduleProfileDataWriter() {};

};

}  /* namespace optimizermodule */
/* END SCOPE: optimizermodule */
/* START SCOPE: reclosermodule */

namespace reclosermodule {


}  /* namespace reclosermodule */
/* END SCOPE: reclosermodule */
/* START SCOPE: switchmodule */

namespace switchmodule {

class SwitchControlXSWITypeSupport;
/******************************************************************
 *   openfmb::switchmodule:: SwitchControlXSWI DataWriter Class
 ******************************************************************/
class COREDX_TS_CLASS_EXPORT SwitchControlXSWIDataWriter : public DataWriter
{
  friend class DDS::DomainParticipant;
  friend class SwitchControlXSWITypeSupport;

public:

  /* DataWriter Meathods */

  InstanceHandle_t register_instance( const SwitchControlXSWI *  instance_data);
  
  InstanceHandle_t register_instance_w_timestamp( const SwitchControlXSWI * instance_data,
                                                  const Time_t source_timestamp);
  
  ReturnCode_t unregister_instance( const SwitchControlXSWI * instance_data, 
                                    const InstanceHandle_t  handle);
  
  ReturnCode_t unregister_instance_w_timestamp( const SwitchControlXSWI * instance_data, 
                                                const InstanceHandle_t handle,
                                                const Time_t source_timestamp);
  
  ReturnCode_t write( const SwitchControlXSWI * instance_data, 
                      const InstanceHandle_t  handle);

  ReturnCode_t write_w_timestamp( const SwitchControlXSWI * instance_data, 
                                  const InstanceHandle_t handle,
                                  const Time_t source_timestamp);
  
  ReturnCode_t dispose( const SwitchControlXSWI * instance_data, 
                        const InstanceHandle_t  instance_handle);
  
  ReturnCode_t dispose_w_timestamp( const SwitchControlXSWI * instance_data, 
                                    const InstanceHandle_t  instance_handle, 
                                    const Time_t  source_timestamp);
  
  ReturnCode_t get_key_value( SwitchControlXSWI * key_holder, 
                              const InstanceHandle_t  handle);
  
  InstanceHandle_t lookup_instance( const SwitchControlXSWI * instance_data);

  static SwitchControlXSWIDataWriter * narrow( DataWriter * dw) { return (SwitchControlXSWIDataWriter *)dw; }
  SwitchControlXSWIDataWriter        * narrow( void )           { return this; }
  
 protected:
 private:

  /* Constructor / Destructor -- use Publisher::create_datawriter() */

  SwitchControlXSWIDataWriter();
  ~SwitchControlXSWIDataWriter() {};

};

}  /* namespace switchmodule */
/* END SCOPE: switchmodule */

}  /* namespace openfmb */
/* END SCOPE: openfmb */
/* START SCOPE: openfmb */

namespace openfmb {

/* START SCOPE: breakermodule */

namespace breakermodule {


}  /* namespace breakermodule */
/* END SCOPE: breakermodule */
/* START SCOPE: commonmodule */

namespace commonmodule {


}  /* namespace commonmodule */
/* END SCOPE: commonmodule */
/* START SCOPE: essmodule */

namespace essmodule {

class EssEventZBATTypeSupport;
/******************************************************************
 *   openfmb::essmodule:: EssEventZBAT DataWriter Class
 ******************************************************************/
class COREDX_TS_CLASS_EXPORT EssEventZBATDataWriter : public DataWriter
{
  friend class DDS::DomainParticipant;
  friend class EssEventZBATTypeSupport;

public:

  /* DataWriter Meathods */

  InstanceHandle_t register_instance( const EssEventZBAT *  instance_data);
  
  InstanceHandle_t register_instance_w_timestamp( const EssEventZBAT * instance_data,
                                                  const Time_t source_timestamp);
  
  ReturnCode_t unregister_instance( const EssEventZBAT * instance_data, 
                                    const InstanceHandle_t  handle);
  
  ReturnCode_t unregister_instance_w_timestamp( const EssEventZBAT * instance_data, 
                                                const InstanceHandle_t handle,
                                                const Time_t source_timestamp);
  
  ReturnCode_t write( const EssEventZBAT * instance_data, 
                      const InstanceHandle_t  handle);

  ReturnCode_t write_w_timestamp( const EssEventZBAT * instance_data, 
                                  const InstanceHandle_t handle,
                                  const Time_t source_timestamp);
  
  ReturnCode_t dispose( const EssEventZBAT * instance_data, 
                        const InstanceHandle_t  instance_handle);
  
  ReturnCode_t dispose_w_timestamp( const EssEventZBAT * instance_data, 
                                    const InstanceHandle_t  instance_handle, 
                                    const Time_t  source_timestamp);
  
  ReturnCode_t get_key_value( EssEventZBAT * key_holder, 
                              const InstanceHandle_t  handle);
  
  InstanceHandle_t lookup_instance( const EssEventZBAT * instance_data);

  static EssEventZBATDataWriter * narrow( DataWriter * dw) { return (EssEventZBATDataWriter *)dw; }
  EssEventZBATDataWriter        * narrow( void )           { return this; }
  
 protected:
 private:

  /* Constructor / Destructor -- use Publisher::create_datawriter() */

  EssEventZBATDataWriter();
  ~EssEventZBATDataWriter() {};

};
class EssStatusZBATTypeSupport;
/******************************************************************
 *   openfmb::essmodule:: EssStatusZBAT DataWriter Class
 ******************************************************************/
class COREDX_TS_CLASS_EXPORT EssStatusZBATDataWriter : public DataWriter
{
  friend class DDS::DomainParticipant;
  friend class EssStatusZBATTypeSupport;

public:

  /* DataWriter Meathods */

  InstanceHandle_t register_instance( const EssStatusZBAT *  instance_data);
  
  InstanceHandle_t register_instance_w_timestamp( const EssStatusZBAT * instance_data,
                                                  const Time_t source_timestamp);
  
  ReturnCode_t unregister_instance( const EssStatusZBAT * instance_data, 
                                    const InstanceHandle_t  handle);
  
  ReturnCode_t unregister_instance_w_timestamp( const EssStatusZBAT * instance_data, 
                                                const InstanceHandle_t handle,
                                                const Time_t source_timestamp);
  
  ReturnCode_t write( const EssStatusZBAT * instance_data, 
                      const InstanceHandle_t  handle);

  ReturnCode_t write_w_timestamp( const EssStatusZBAT * instance_data, 
                                  const InstanceHandle_t handle,
                                  const Time_t source_timestamp);
  
  ReturnCode_t dispose( const EssStatusZBAT * instance_data, 
                        const InstanceHandle_t  instance_handle);
  
  ReturnCode_t dispose_w_timestamp( const EssStatusZBAT * instance_data, 
                                    const InstanceHandle_t  instance_handle, 
                                    const Time_t  source_timestamp);
  
  ReturnCode_t get_key_value( EssStatusZBAT * key_holder, 
                              const InstanceHandle_t  handle);
  
  InstanceHandle_t lookup_instance( const EssStatusZBAT * instance_data);

  static EssStatusZBATDataWriter * narrow( DataWriter * dw) { return (EssStatusZBATDataWriter *)dw; }
  EssStatusZBATDataWriter        * narrow( void )           { return this; }
  
 protected:
 private:

  /* Constructor / Destructor -- use Publisher::create_datawriter() */

  EssStatusZBATDataWriter();
  ~EssStatusZBATDataWriter() {};

};

}  /* namespace essmodule */
/* END SCOPE: essmodule */
/* START SCOPE: generationmodule */

namespace generationmodule {

class GenerationStatusProfileTypeSupport;
/******************************************************************
 *   openfmb::generationmodule:: GenerationStatusProfile DataWriter Class
 ******************************************************************/
class COREDX_TS_CLASS_EXPORT GenerationStatusProfileDataWriter : public DataWriter
{
  friend class DDS::DomainParticipant;
  friend class GenerationStatusProfileTypeSupport;

public:

  /* DataWriter Meathods */

  InstanceHandle_t register_instance( const GenerationStatusProfile *  instance_data);
  
  InstanceHandle_t register_instance_w_timestamp( const GenerationStatusProfile * instance_data,
                                                  const Time_t source_timestamp);
  
  ReturnCode_t unregister_instance( const GenerationStatusProfile * instance_data, 
                                    const InstanceHandle_t  handle);
  
  ReturnCode_t unregister_instance_w_timestamp( const GenerationStatusProfile * instance_data, 
                                                const InstanceHandle_t handle,
                                                const Time_t source_timestamp);
  
  ReturnCode_t write( const GenerationStatusProfile * instance_data, 
                      const InstanceHandle_t  handle);

  ReturnCode_t write_w_timestamp( const GenerationStatusProfile * instance_data, 
                                  const InstanceHandle_t handle,
                                  const Time_t source_timestamp);
  
  ReturnCode_t dispose( const GenerationStatusProfile * instance_data, 
                        const InstanceHandle_t  instance_handle);
  
  ReturnCode_t dispose_w_timestamp( const GenerationStatusProfile * instance_data, 
                                    const InstanceHandle_t  instance_handle, 
                                    const Time_t  source_timestamp);
  
  ReturnCode_t get_key_value( GenerationStatusProfile * key_holder, 
                              const InstanceHandle_t  handle);
  
  InstanceHandle_t lookup_instance( const GenerationStatusProfile * instance_data);

  static GenerationStatusProfileDataWriter * narrow( DataWriter * dw) { return (GenerationStatusProfileDataWriter *)dw; }
  GenerationStatusProfileDataWriter        * narrow( void )           { return this; }
  
 protected:
 private:

  /* Constructor / Destructor -- use Publisher::create_datawriter() */

  GenerationStatusProfileDataWriter();
  ~GenerationStatusProfileDataWriter() {};

};

}  /* namespace generationmodule */
/* END SCOPE: generationmodule */
/* START SCOPE: loadmodule */

namespace loadmodule {

class LoadStatusProfileTypeSupport;
/******************************************************************
 *   openfmb::loadmodule:: LoadStatusProfile DataWriter Class
 ******************************************************************/
class COREDX_TS_CLASS_EXPORT LoadStatusProfileDataWriter : public DataWriter
{
  friend class DDS::DomainParticipant;
  friend class LoadStatusProfileTypeSupport;

public:

  /* DataWriter Meathods */

  InstanceHandle_t register_instance( const LoadStatusProfile *  instance_data);
  
  InstanceHandle_t register_instance_w_timestamp( const LoadStatusProfile * instance_data,
                                                  const Time_t source_timestamp);
  
  ReturnCode_t unregister_instance( const LoadStatusProfile * instance_data, 
                                    const InstanceHandle_t  handle);
  
  ReturnCode_t unregister_instance_w_timestamp( const LoadStatusProfile * instance_data, 
                                                const InstanceHandle_t handle,
                                                const Time_t source_timestamp);
  
  ReturnCode_t write( const LoadStatusProfile * instance_data, 
                      const InstanceHandle_t  handle);

  ReturnCode_t write_w_timestamp( const LoadStatusProfile * instance_data, 
                                  const InstanceHandle_t handle,
                                  const Time_t source_timestamp);
  
  ReturnCode_t dispose( const LoadStatusProfile * instance_data, 
                        const InstanceHandle_t  instance_handle);
  
  ReturnCode_t dispose_w_timestamp( const LoadStatusProfile * instance_data, 
                                    const InstanceHandle_t  instance_handle, 
                                    const Time_t  source_timestamp);
  
  ReturnCode_t get_key_value( LoadStatusProfile * key_holder, 
                              const InstanceHandle_t  handle);
  
  InstanceHandle_t lookup_instance( const LoadStatusProfile * instance_data);

  static LoadStatusProfileDataWriter * narrow( DataWriter * dw) { return (LoadStatusProfileDataWriter *)dw; }
  LoadStatusProfileDataWriter        * narrow( void )           { return this; }
  
 protected:
 private:

  /* Constructor / Destructor -- use Publisher::create_datawriter() */

  LoadStatusProfileDataWriter();
  ~LoadStatusProfileDataWriter() {};

};

}  /* namespace loadmodule */
/* END SCOPE: loadmodule */
/* START SCOPE: optimizermodule */

namespace optimizermodule {

class PlannedOptimizerScheduleProfileTypeSupport;
/******************************************************************
 *   openfmb::optimizermodule:: PlannedOptimizerScheduleProfile DataWriter Class
 ******************************************************************/
class COREDX_TS_CLASS_EXPORT PlannedOptimizerScheduleProfileDataWriter : public DataWriter
{
  friend class DDS::DomainParticipant;
  friend class PlannedOptimizerScheduleProfileTypeSupport;

public:

  /* DataWriter Meathods */

  InstanceHandle_t register_instance( const PlannedOptimizerScheduleProfile *  instance_data);
  
  InstanceHandle_t register_instance_w_timestamp( const PlannedOptimizerScheduleProfile * instance_data,
                                                  const Time_t source_timestamp);
  
  ReturnCode_t unregister_instance( const PlannedOptimizerScheduleProfile * instance_data, 
                                    const InstanceHandle_t  handle);
  
  ReturnCode_t unregister_instance_w_timestamp( const PlannedOptimizerScheduleProfile * instance_data, 
                                                const InstanceHandle_t handle,
                                                const Time_t source_timestamp);
  
  ReturnCode_t write( const PlannedOptimizerScheduleProfile * instance_data, 
                      const InstanceHandle_t  handle);

  ReturnCode_t write_w_timestamp( const PlannedOptimizerScheduleProfile * instance_data, 
                                  const InstanceHandle_t handle,
                                  const Time_t source_timestamp);
  
  ReturnCode_t dispose( const PlannedOptimizerScheduleProfile * instance_data, 
                        const InstanceHandle_t  instance_handle);
  
  ReturnCode_t dispose_w_timestamp( const PlannedOptimizerScheduleProfile * instance_data, 
                                    const InstanceHandle_t  instance_handle, 
                                    const Time_t  source_timestamp);
  
  ReturnCode_t get_key_value( PlannedOptimizerScheduleProfile * key_holder, 
                              const InstanceHandle_t  handle);
  
  InstanceHandle_t lookup_instance( const PlannedOptimizerScheduleProfile * instance_data);

  static PlannedOptimizerScheduleProfileDataWriter * narrow( DataWriter * dw) { return (PlannedOptimizerScheduleProfileDataWriter *)dw; }
  PlannedOptimizerScheduleProfileDataWriter        * narrow( void )           { return this; }
  
 protected:
 private:

  /* Constructor / Destructor -- use Publisher::create_datawriter() */

  PlannedOptimizerScheduleProfileDataWriter();
  ~PlannedOptimizerScheduleProfileDataWriter() {};

};

}  /* namespace optimizermodule */
/* END SCOPE: optimizermodule */
/* START SCOPE: reclosermodule */

namespace reclosermodule {


}  /* namespace reclosermodule */
/* END SCOPE: reclosermodule */
/* START SCOPE: solarmodule */

namespace solarmodule {

class SolarEventZGENTypeSupport;
/******************************************************************
 *   openfmb::solarmodule:: SolarEventZGEN DataWriter Class
 ******************************************************************/
class COREDX_TS_CLASS_EXPORT SolarEventZGENDataWriter : public DataWriter
{
  friend class DDS::DomainParticipant;
  friend class SolarEventZGENTypeSupport;

public:

  /* DataWriter Meathods */

  InstanceHandle_t register_instance( const SolarEventZGEN *  instance_data);
  
  InstanceHandle_t register_instance_w_timestamp( const SolarEventZGEN * instance_data,
                                                  const Time_t source_timestamp);
  
  ReturnCode_t unregister_instance( const SolarEventZGEN * instance_data, 
                                    const InstanceHandle_t  handle);
  
  ReturnCode_t unregister_instance_w_timestamp( const SolarEventZGEN * instance_data, 
                                                const InstanceHandle_t handle,
                                                const Time_t source_timestamp);
  
  ReturnCode_t write( const SolarEventZGEN * instance_data, 
                      const InstanceHandle_t  handle);

  ReturnCode_t write_w_timestamp( const SolarEventZGEN * instance_data, 
                                  const InstanceHandle_t handle,
                                  const Time_t source_timestamp);
  
  ReturnCode_t dispose( const SolarEventZGEN * instance_data, 
                        const InstanceHandle_t  instance_handle);
  
  ReturnCode_t dispose_w_timestamp( const SolarEventZGEN * instance_data, 
                                    const InstanceHandle_t  instance_handle, 
                                    const Time_t  source_timestamp);
  
  ReturnCode_t get_key_value( SolarEventZGEN * key_holder, 
                              const InstanceHandle_t  handle);
  
  InstanceHandle_t lookup_instance( const SolarEventZGEN * instance_data);

  static SolarEventZGENDataWriter * narrow( DataWriter * dw) { return (SolarEventZGENDataWriter *)dw; }
  SolarEventZGENDataWriter        * narrow( void )           { return this; }
  
 protected:
 private:

  /* Constructor / Destructor -- use Publisher::create_datawriter() */

  SolarEventZGENDataWriter();
  ~SolarEventZGENDataWriter() {};

};
class SolarStatusZGENTypeSupport;
/******************************************************************
 *   openfmb::solarmodule:: SolarStatusZGEN DataWriter Class
 ******************************************************************/
class COREDX_TS_CLASS_EXPORT SolarStatusZGENDataWriter : public DataWriter
{
  friend class DDS::DomainParticipant;
  friend class SolarStatusZGENTypeSupport;

public:

  /* DataWriter Meathods */

  InstanceHandle_t register_instance( const SolarStatusZGEN *  instance_data);
  
  InstanceHandle_t register_instance_w_timestamp( const SolarStatusZGEN * instance_data,
                                                  const Time_t source_timestamp);
  
  ReturnCode_t unregister_instance( const SolarStatusZGEN * instance_data, 
                                    const InstanceHandle_t  handle);
  
  ReturnCode_t unregister_instance_w_timestamp( const SolarStatusZGEN * instance_data, 
                                                const InstanceHandle_t handle,
                                                const Time_t source_timestamp);
  
  ReturnCode_t write( const SolarStatusZGEN * instance_data, 
                      const InstanceHandle_t  handle);

  ReturnCode_t write_w_timestamp( const SolarStatusZGEN * instance_data, 
                                  const InstanceHandle_t handle,
                                  const Time_t source_timestamp);
  
  ReturnCode_t dispose( const SolarStatusZGEN * instance_data, 
                        const InstanceHandle_t  instance_handle);
  
  ReturnCode_t dispose_w_timestamp( const SolarStatusZGEN * instance_data, 
                                    const InstanceHandle_t  instance_handle, 
                                    const Time_t  source_timestamp);
  
  ReturnCode_t get_key_value( SolarStatusZGEN * key_holder, 
                              const InstanceHandle_t  handle);
  
  InstanceHandle_t lookup_instance( const SolarStatusZGEN * instance_data);

  static SolarStatusZGENDataWriter * narrow( DataWriter * dw) { return (SolarStatusZGENDataWriter *)dw; }
  SolarStatusZGENDataWriter        * narrow( void )           { return this; }
  
 protected:
 private:

  /* Constructor / Destructor -- use Publisher::create_datawriter() */

  SolarStatusZGENDataWriter();
  ~SolarStatusZGENDataWriter() {};

};

}  /* namespace solarmodule */
/* END SCOPE: solarmodule */
/* START SCOPE: switchmodule */

namespace switchmodule {


}  /* namespace switchmodule */
/* END SCOPE: switchmodule */

}  /* namespace openfmb */
/* END SCOPE: openfmb */
/* START SCOPE: openfmb */

namespace openfmb {

/* START SCOPE: breakermodule */

namespace breakermodule {


}  /* namespace breakermodule */
/* END SCOPE: breakermodule */
/* START SCOPE: commonmodule */

namespace commonmodule {


}  /* namespace commonmodule */
/* END SCOPE: commonmodule */
/* START SCOPE: essmodule */

namespace essmodule {

class ESSEventProfileTypeSupport;
/******************************************************************
 *   openfmb::essmodule:: ESSEventProfile DataWriter Class
 ******************************************************************/
class COREDX_TS_CLASS_EXPORT ESSEventProfileDataWriter : public DataWriter
{
  friend class DDS::DomainParticipant;
  friend class ESSEventProfileTypeSupport;

public:

  /* DataWriter Meathods */

  InstanceHandle_t register_instance( const ESSEventProfile *  instance_data);
  
  InstanceHandle_t register_instance_w_timestamp( const ESSEventProfile * instance_data,
                                                  const Time_t source_timestamp);
  
  ReturnCode_t unregister_instance( const ESSEventProfile * instance_data, 
                                    const InstanceHandle_t  handle);
  
  ReturnCode_t unregister_instance_w_timestamp( const ESSEventProfile * instance_data, 
                                                const InstanceHandle_t handle,
                                                const Time_t source_timestamp);
  
  ReturnCode_t write( const ESSEventProfile * instance_data, 
                      const InstanceHandle_t  handle);

  ReturnCode_t write_w_timestamp( const ESSEventProfile * instance_data, 
                                  const InstanceHandle_t handle,
                                  const Time_t source_timestamp);
  
  ReturnCode_t dispose( const ESSEventProfile * instance_data, 
                        const InstanceHandle_t  instance_handle);
  
  ReturnCode_t dispose_w_timestamp( const ESSEventProfile * instance_data, 
                                    const InstanceHandle_t  instance_handle, 
                                    const Time_t  source_timestamp);
  
  ReturnCode_t get_key_value( ESSEventProfile * key_holder, 
                              const InstanceHandle_t  handle);
  
  InstanceHandle_t lookup_instance( const ESSEventProfile * instance_data);

  static ESSEventProfileDataWriter * narrow( DataWriter * dw) { return (ESSEventProfileDataWriter *)dw; }
  ESSEventProfileDataWriter        * narrow( void )           { return this; }
  
 protected:
 private:

  /* Constructor / Destructor -- use Publisher::create_datawriter() */

  ESSEventProfileDataWriter();
  ~ESSEventProfileDataWriter() {};

};
class ESSReadingValueTypeSupport;
/******************************************************************
 *   openfmb::essmodule:: ESSReadingValue DataWriter Class
 ******************************************************************/
class COREDX_TS_CLASS_EXPORT ESSReadingValueDataWriter : public DataWriter
{
  friend class DDS::DomainParticipant;
  friend class ESSReadingValueTypeSupport;

public:

  /* DataWriter Meathods */

  InstanceHandle_t register_instance( const ESSReadingValue *  instance_data);
  
  InstanceHandle_t register_instance_w_timestamp( const ESSReadingValue * instance_data,
                                                  const Time_t source_timestamp);
  
  ReturnCode_t unregister_instance( const ESSReadingValue * instance_data, 
                                    const InstanceHandle_t  handle);
  
  ReturnCode_t unregister_instance_w_timestamp( const ESSReadingValue * instance_data, 
                                                const InstanceHandle_t handle,
                                                const Time_t source_timestamp);
  
  ReturnCode_t write( const ESSReadingValue * instance_data, 
                      const InstanceHandle_t  handle);

  ReturnCode_t write_w_timestamp( const ESSReadingValue * instance_data, 
                                  const InstanceHandle_t handle,
                                  const Time_t source_timestamp);
  
  ReturnCode_t dispose( const ESSReadingValue * instance_data, 
                        const InstanceHandle_t  instance_handle);
  
  ReturnCode_t dispose_w_timestamp( const ESSReadingValue * instance_data, 
                                    const InstanceHandle_t  instance_handle, 
                                    const Time_t  source_timestamp);
  
  ReturnCode_t get_key_value( ESSReadingValue * key_holder, 
                              const InstanceHandle_t  handle);
  
  InstanceHandle_t lookup_instance( const ESSReadingValue * instance_data);

  static ESSReadingValueDataWriter * narrow( DataWriter * dw) { return (ESSReadingValueDataWriter *)dw; }
  ESSReadingValueDataWriter        * narrow( void )           { return this; }
  
 protected:
 private:

  /* Constructor / Destructor -- use Publisher::create_datawriter() */

  ESSReadingValueDataWriter();
  ~ESSReadingValueDataWriter() {};

};
class ESSStatusProfileTypeSupport;
/******************************************************************
 *   openfmb::essmodule:: ESSStatusProfile DataWriter Class
 ******************************************************************/
class COREDX_TS_CLASS_EXPORT ESSStatusProfileDataWriter : public DataWriter
{
  friend class DDS::DomainParticipant;
  friend class ESSStatusProfileTypeSupport;

public:

  /* DataWriter Meathods */

  InstanceHandle_t register_instance( const ESSStatusProfile *  instance_data);
  
  InstanceHandle_t register_instance_w_timestamp( const ESSStatusProfile * instance_data,
                                                  const Time_t source_timestamp);
  
  ReturnCode_t unregister_instance( const ESSStatusProfile * instance_data, 
                                    const InstanceHandle_t  handle);
  
  ReturnCode_t unregister_instance_w_timestamp( const ESSStatusProfile * instance_data, 
                                                const InstanceHandle_t handle,
                                                const Time_t source_timestamp);
  
  ReturnCode_t write( const ESSStatusProfile * instance_data, 
                      const InstanceHandle_t  handle);

  ReturnCode_t write_w_timestamp( const ESSStatusProfile * instance_data, 
                                  const InstanceHandle_t handle,
                                  const Time_t source_timestamp);
  
  ReturnCode_t dispose( const ESSStatusProfile * instance_data, 
                        const InstanceHandle_t  instance_handle);
  
  ReturnCode_t dispose_w_timestamp( const ESSStatusProfile * instance_data, 
                                    const InstanceHandle_t  instance_handle, 
                                    const Time_t  source_timestamp);
  
  ReturnCode_t get_key_value( ESSStatusProfile * key_holder, 
                              const InstanceHandle_t  handle);
  
  InstanceHandle_t lookup_instance( const ESSStatusProfile * instance_data);

  static ESSStatusProfileDataWriter * narrow( DataWriter * dw) { return (ESSStatusProfileDataWriter *)dw; }
  ESSStatusProfileDataWriter        * narrow( void )           { return this; }
  
 protected:
 private:

  /* Constructor / Destructor -- use Publisher::create_datawriter() */

  ESSStatusProfileDataWriter();
  ~ESSStatusProfileDataWriter() {};

};

}  /* namespace essmodule */
/* END SCOPE: essmodule */
/* START SCOPE: generationmodule */

namespace generationmodule {

class GenerationReadingValueTypeSupport;
/******************************************************************
 *   openfmb::generationmodule:: GenerationReadingValue DataWriter Class
 ******************************************************************/
class COREDX_TS_CLASS_EXPORT GenerationReadingValueDataWriter : public DataWriter
{
  friend class DDS::DomainParticipant;
  friend class GenerationReadingValueTypeSupport;

public:

  /* DataWriter Meathods */

  InstanceHandle_t register_instance( const GenerationReadingValue *  instance_data);
  
  InstanceHandle_t register_instance_w_timestamp( const GenerationReadingValue * instance_data,
                                                  const Time_t source_timestamp);
  
  ReturnCode_t unregister_instance( const GenerationReadingValue * instance_data, 
                                    const InstanceHandle_t  handle);
  
  ReturnCode_t unregister_instance_w_timestamp( const GenerationReadingValue * instance_data, 
                                                const InstanceHandle_t handle,
                                                const Time_t source_timestamp);
  
  ReturnCode_t write( const GenerationReadingValue * instance_data, 
                      const InstanceHandle_t  handle);

  ReturnCode_t write_w_timestamp( const GenerationReadingValue * instance_data, 
                                  const InstanceHandle_t handle,
                                  const Time_t source_timestamp);
  
  ReturnCode_t dispose( const GenerationReadingValue * instance_data, 
                        const InstanceHandle_t  instance_handle);
  
  ReturnCode_t dispose_w_timestamp( const GenerationReadingValue * instance_data, 
                                    const InstanceHandle_t  instance_handle, 
                                    const Time_t  source_timestamp);
  
  ReturnCode_t get_key_value( GenerationReadingValue * key_holder, 
                              const InstanceHandle_t  handle);
  
  InstanceHandle_t lookup_instance( const GenerationReadingValue * instance_data);

  static GenerationReadingValueDataWriter * narrow( DataWriter * dw) { return (GenerationReadingValueDataWriter *)dw; }
  GenerationReadingValueDataWriter        * narrow( void )           { return this; }
  
 protected:
 private:

  /* Constructor / Destructor -- use Publisher::create_datawriter() */

  GenerationReadingValueDataWriter();
  ~GenerationReadingValueDataWriter() {};

};
class GenerationReadingProfileTypeSupport;
/******************************************************************
 *   openfmb::generationmodule:: GenerationReadingProfile DataWriter Class
 ******************************************************************/
class COREDX_TS_CLASS_EXPORT GenerationReadingProfileDataWriter : public DataWriter
{
  friend class DDS::DomainParticipant;
  friend class GenerationReadingProfileTypeSupport;

public:

  /* DataWriter Meathods */

  InstanceHandle_t register_instance( const GenerationReadingProfile *  instance_data);
  
  InstanceHandle_t register_instance_w_timestamp( const GenerationReadingProfile * instance_data,
                                                  const Time_t source_timestamp);
  
  ReturnCode_t unregister_instance( const GenerationReadingProfile * instance_data, 
                                    const InstanceHandle_t  handle);
  
  ReturnCode_t unregister_instance_w_timestamp( const GenerationReadingProfile * instance_data, 
                                                const InstanceHandle_t handle,
                                                const Time_t source_timestamp);
  
  ReturnCode_t write( const GenerationReadingProfile * instance_data, 
                      const InstanceHandle_t  handle);

  ReturnCode_t write_w_timestamp( const GenerationReadingProfile * instance_data, 
                                  const InstanceHandle_t handle,
                                  const Time_t source_timestamp);
  
  ReturnCode_t dispose( const GenerationReadingProfile * instance_data, 
                        const InstanceHandle_t  instance_handle);
  
  ReturnCode_t dispose_w_timestamp( const GenerationReadingProfile * instance_data, 
                                    const InstanceHandle_t  instance_handle, 
                                    const Time_t  source_timestamp);
  
  ReturnCode_t get_key_value( GenerationReadingProfile * key_holder, 
                              const InstanceHandle_t  handle);
  
  InstanceHandle_t lookup_instance( const GenerationReadingProfile * instance_data);

  static GenerationReadingProfileDataWriter * narrow( DataWriter * dw) { return (GenerationReadingProfileDataWriter *)dw; }
  GenerationReadingProfileDataWriter        * narrow( void )           { return this; }
  
 protected:
 private:

  /* Constructor / Destructor -- use Publisher::create_datawriter() */

  GenerationReadingProfileDataWriter();
  ~GenerationReadingProfileDataWriter() {};

};
class GenerationEventProfileTypeSupport;
/******************************************************************
 *   openfmb::generationmodule:: GenerationEventProfile DataWriter Class
 ******************************************************************/
class COREDX_TS_CLASS_EXPORT GenerationEventProfileDataWriter : public DataWriter
{
  friend class DDS::DomainParticipant;
  friend class GenerationEventProfileTypeSupport;

public:

  /* DataWriter Meathods */

  InstanceHandle_t register_instance( const GenerationEventProfile *  instance_data);
  
  InstanceHandle_t register_instance_w_timestamp( const GenerationEventProfile * instance_data,
                                                  const Time_t source_timestamp);
  
  ReturnCode_t unregister_instance( const GenerationEventProfile * instance_data, 
                                    const InstanceHandle_t  handle);
  
  ReturnCode_t unregister_instance_w_timestamp( const GenerationEventProfile * instance_data, 
                                                const InstanceHandle_t handle,
                                                const Time_t source_timestamp);
  
  ReturnCode_t write( const GenerationEventProfile * instance_data, 
                      const InstanceHandle_t  handle);

  ReturnCode_t write_w_timestamp( const GenerationEventProfile * instance_data, 
                                  const InstanceHandle_t handle,
                                  const Time_t source_timestamp);
  
  ReturnCode_t dispose( const GenerationEventProfile * instance_data, 
                        const InstanceHandle_t  instance_handle);
  
  ReturnCode_t dispose_w_timestamp( const GenerationEventProfile * instance_data, 
                                    const InstanceHandle_t  instance_handle, 
                                    const Time_t  source_timestamp);
  
  ReturnCode_t get_key_value( GenerationEventProfile * key_holder, 
                              const InstanceHandle_t  handle);
  
  InstanceHandle_t lookup_instance( const GenerationEventProfile * instance_data);

  static GenerationEventProfileDataWriter * narrow( DataWriter * dw) { return (GenerationEventProfileDataWriter *)dw; }
  GenerationEventProfileDataWriter        * narrow( void )           { return this; }
  
 protected:
 private:

  /* Constructor / Destructor -- use Publisher::create_datawriter() */

  GenerationEventProfileDataWriter();
  ~GenerationEventProfileDataWriter() {};

};

}  /* namespace generationmodule */
/* END SCOPE: generationmodule */
/* START SCOPE: loadmodule */

namespace loadmodule {

class LoadEventProfileTypeSupport;
/******************************************************************
 *   openfmb::loadmodule:: LoadEventProfile DataWriter Class
 ******************************************************************/
class COREDX_TS_CLASS_EXPORT LoadEventProfileDataWriter : public DataWriter
{
  friend class DDS::DomainParticipant;
  friend class LoadEventProfileTypeSupport;

public:

  /* DataWriter Meathods */

  InstanceHandle_t register_instance( const LoadEventProfile *  instance_data);
  
  InstanceHandle_t register_instance_w_timestamp( const LoadEventProfile * instance_data,
                                                  const Time_t source_timestamp);
  
  ReturnCode_t unregister_instance( const LoadEventProfile * instance_data, 
                                    const InstanceHandle_t  handle);
  
  ReturnCode_t unregister_instance_w_timestamp( const LoadEventProfile * instance_data, 
                                                const InstanceHandle_t handle,
                                                const Time_t source_timestamp);
  
  ReturnCode_t write( const LoadEventProfile * instance_data, 
                      const InstanceHandle_t  handle);

  ReturnCode_t write_w_timestamp( const LoadEventProfile * instance_data, 
                                  const InstanceHandle_t handle,
                                  const Time_t source_timestamp);
  
  ReturnCode_t dispose( const LoadEventProfile * instance_data, 
                        const InstanceHandle_t  instance_handle);
  
  ReturnCode_t dispose_w_timestamp( const LoadEventProfile * instance_data, 
                                    const InstanceHandle_t  instance_handle, 
                                    const Time_t  source_timestamp);
  
  ReturnCode_t get_key_value( LoadEventProfile * key_holder, 
                              const InstanceHandle_t  handle);
  
  InstanceHandle_t lookup_instance( const LoadEventProfile * instance_data);

  static LoadEventProfileDataWriter * narrow( DataWriter * dw) { return (LoadEventProfileDataWriter *)dw; }
  LoadEventProfileDataWriter        * narrow( void )           { return this; }
  
 protected:
 private:

  /* Constructor / Destructor -- use Publisher::create_datawriter() */

  LoadEventProfileDataWriter();
  ~LoadEventProfileDataWriter() {};

};
class LoadReadingValueTypeSupport;
/******************************************************************
 *   openfmb::loadmodule:: LoadReadingValue DataWriter Class
 ******************************************************************/
class COREDX_TS_CLASS_EXPORT LoadReadingValueDataWriter : public DataWriter
{
  friend class DDS::DomainParticipant;
  friend class LoadReadingValueTypeSupport;

public:

  /* DataWriter Meathods */

  InstanceHandle_t register_instance( const LoadReadingValue *  instance_data);
  
  InstanceHandle_t register_instance_w_timestamp( const LoadReadingValue * instance_data,
                                                  const Time_t source_timestamp);
  
  ReturnCode_t unregister_instance( const LoadReadingValue * instance_data, 
                                    const InstanceHandle_t  handle);
  
  ReturnCode_t unregister_instance_w_timestamp( const LoadReadingValue * instance_data, 
                                                const InstanceHandle_t handle,
                                                const Time_t source_timestamp);
  
  ReturnCode_t write( const LoadReadingValue * instance_data, 
                      const InstanceHandle_t  handle);

  ReturnCode_t write_w_timestamp( const LoadReadingValue * instance_data, 
                                  const InstanceHandle_t handle,
                                  const Time_t source_timestamp);
  
  ReturnCode_t dispose( const LoadReadingValue * instance_data, 
                        const InstanceHandle_t  instance_handle);
  
  ReturnCode_t dispose_w_timestamp( const LoadReadingValue * instance_data, 
                                    const InstanceHandle_t  instance_handle, 
                                    const Time_t  source_timestamp);
  
  ReturnCode_t get_key_value( LoadReadingValue * key_holder, 
                              const InstanceHandle_t  handle);
  
  InstanceHandle_t lookup_instance( const LoadReadingValue * instance_data);

  static LoadReadingValueDataWriter * narrow( DataWriter * dw) { return (LoadReadingValueDataWriter *)dw; }
  LoadReadingValueDataWriter        * narrow( void )           { return this; }
  
 protected:
 private:

  /* Constructor / Destructor -- use Publisher::create_datawriter() */

  LoadReadingValueDataWriter();
  ~LoadReadingValueDataWriter() {};

};

}  /* namespace loadmodule */
/* END SCOPE: loadmodule */
/* START SCOPE: reclosermodule */

namespace reclosermodule {

class RecloserControlProfileTypeSupport;
/******************************************************************
 *   openfmb::reclosermodule:: RecloserControlProfile DataWriter Class
 ******************************************************************/
class COREDX_TS_CLASS_EXPORT RecloserControlProfileDataWriter : public DataWriter
{
  friend class DDS::DomainParticipant;
  friend class RecloserControlProfileTypeSupport;

public:

  /* DataWriter Meathods */

  InstanceHandle_t register_instance( const RecloserControlProfile *  instance_data);
  
  InstanceHandle_t register_instance_w_timestamp( const RecloserControlProfile * instance_data,
                                                  const Time_t source_timestamp);
  
  ReturnCode_t unregister_instance( const RecloserControlProfile * instance_data, 
                                    const InstanceHandle_t  handle);
  
  ReturnCode_t unregister_instance_w_timestamp( const RecloserControlProfile * instance_data, 
                                                const InstanceHandle_t handle,
                                                const Time_t source_timestamp);
  
  ReturnCode_t write( const RecloserControlProfile * instance_data, 
                      const InstanceHandle_t  handle);

  ReturnCode_t write_w_timestamp( const RecloserControlProfile * instance_data, 
                                  const InstanceHandle_t handle,
                                  const Time_t source_timestamp);
  
  ReturnCode_t dispose( const RecloserControlProfile * instance_data, 
                        const InstanceHandle_t  instance_handle);
  
  ReturnCode_t dispose_w_timestamp( const RecloserControlProfile * instance_data, 
                                    const InstanceHandle_t  instance_handle, 
                                    const Time_t  source_timestamp);
  
  ReturnCode_t get_key_value( RecloserControlProfile * key_holder, 
                              const InstanceHandle_t  handle);
  
  InstanceHandle_t lookup_instance( const RecloserControlProfile * instance_data);

  static RecloserControlProfileDataWriter * narrow( DataWriter * dw) { return (RecloserControlProfileDataWriter *)dw; }
  RecloserControlProfileDataWriter        * narrow( void )           { return this; }
  
 protected:
 private:

  /* Constructor / Destructor -- use Publisher::create_datawriter() */

  RecloserControlProfileDataWriter();
  ~RecloserControlProfileDataWriter() {};

};
class RecloserEventProfileTypeSupport;
/******************************************************************
 *   openfmb::reclosermodule:: RecloserEventProfile DataWriter Class
 ******************************************************************/
class COREDX_TS_CLASS_EXPORT RecloserEventProfileDataWriter : public DataWriter
{
  friend class DDS::DomainParticipant;
  friend class RecloserEventProfileTypeSupport;

public:

  /* DataWriter Meathods */

  InstanceHandle_t register_instance( const RecloserEventProfile *  instance_data);
  
  InstanceHandle_t register_instance_w_timestamp( const RecloserEventProfile * instance_data,
                                                  const Time_t source_timestamp);
  
  ReturnCode_t unregister_instance( const RecloserEventProfile * instance_data, 
                                    const InstanceHandle_t  handle);
  
  ReturnCode_t unregister_instance_w_timestamp( const RecloserEventProfile * instance_data, 
                                                const InstanceHandle_t handle,
                                                const Time_t source_timestamp);
  
  ReturnCode_t write( const RecloserEventProfile * instance_data, 
                      const InstanceHandle_t  handle);

  ReturnCode_t write_w_timestamp( const RecloserEventProfile * instance_data, 
                                  const InstanceHandle_t handle,
                                  const Time_t source_timestamp);
  
  ReturnCode_t dispose( const RecloserEventProfile * instance_data, 
                        const InstanceHandle_t  instance_handle);
  
  ReturnCode_t dispose_w_timestamp( const RecloserEventProfile * instance_data, 
                                    const InstanceHandle_t  instance_handle, 
                                    const Time_t  source_timestamp);
  
  ReturnCode_t get_key_value( RecloserEventProfile * key_holder, 
                              const InstanceHandle_t  handle);
  
  InstanceHandle_t lookup_instance( const RecloserEventProfile * instance_data);

  static RecloserEventProfileDataWriter * narrow( DataWriter * dw) { return (RecloserEventProfileDataWriter *)dw; }
  RecloserEventProfileDataWriter        * narrow( void )           { return this; }
  
 protected:
 private:

  /* Constructor / Destructor -- use Publisher::create_datawriter() */

  RecloserEventProfileDataWriter();
  ~RecloserEventProfileDataWriter() {};

};
class RecloserReadingValueTypeSupport;
/******************************************************************
 *   openfmb::reclosermodule:: RecloserReadingValue DataWriter Class
 ******************************************************************/
class COREDX_TS_CLASS_EXPORT RecloserReadingValueDataWriter : public DataWriter
{
  friend class DDS::DomainParticipant;
  friend class RecloserReadingValueTypeSupport;

public:

  /* DataWriter Meathods */

  InstanceHandle_t register_instance( const RecloserReadingValue *  instance_data);
  
  InstanceHandle_t register_instance_w_timestamp( const RecloserReadingValue * instance_data,
                                                  const Time_t source_timestamp);
  
  ReturnCode_t unregister_instance( const RecloserReadingValue * instance_data, 
                                    const InstanceHandle_t  handle);
  
  ReturnCode_t unregister_instance_w_timestamp( const RecloserReadingValue * instance_data, 
                                                const InstanceHandle_t handle,
                                                const Time_t source_timestamp);
  
  ReturnCode_t write( const RecloserReadingValue * instance_data, 
                      const InstanceHandle_t  handle);

  ReturnCode_t write_w_timestamp( const RecloserReadingValue * instance_data, 
                                  const InstanceHandle_t handle,
                                  const Time_t source_timestamp);
  
  ReturnCode_t dispose( const RecloserReadingValue * instance_data, 
                        const InstanceHandle_t  instance_handle);
  
  ReturnCode_t dispose_w_timestamp( const RecloserReadingValue * instance_data, 
                                    const InstanceHandle_t  instance_handle, 
                                    const Time_t  source_timestamp);
  
  ReturnCode_t get_key_value( RecloserReadingValue * key_holder, 
                              const InstanceHandle_t  handle);
  
  InstanceHandle_t lookup_instance( const RecloserReadingValue * instance_data);

  static RecloserReadingValueDataWriter * narrow( DataWriter * dw) { return (RecloserReadingValueDataWriter *)dw; }
  RecloserReadingValueDataWriter        * narrow( void )           { return this; }
  
 protected:
 private:

  /* Constructor / Destructor -- use Publisher::create_datawriter() */

  RecloserReadingValueDataWriter();
  ~RecloserReadingValueDataWriter() {};

};
class RecloserStatusProfileTypeSupport;
/******************************************************************
 *   openfmb::reclosermodule:: RecloserStatusProfile DataWriter Class
 ******************************************************************/
class COREDX_TS_CLASS_EXPORT RecloserStatusProfileDataWriter : public DataWriter
{
  friend class DDS::DomainParticipant;
  friend class RecloserStatusProfileTypeSupport;

public:

  /* DataWriter Meathods */

  InstanceHandle_t register_instance( const RecloserStatusProfile *  instance_data);
  
  InstanceHandle_t register_instance_w_timestamp( const RecloserStatusProfile * instance_data,
                                                  const Time_t source_timestamp);
  
  ReturnCode_t unregister_instance( const RecloserStatusProfile * instance_data, 
                                    const InstanceHandle_t  handle);
  
  ReturnCode_t unregister_instance_w_timestamp( const RecloserStatusProfile * instance_data, 
                                                const InstanceHandle_t handle,
                                                const Time_t source_timestamp);
  
  ReturnCode_t write( const RecloserStatusProfile * instance_data, 
                      const InstanceHandle_t  handle);

  ReturnCode_t write_w_timestamp( const RecloserStatusProfile * instance_data, 
                                  const InstanceHandle_t handle,
                                  const Time_t source_timestamp);
  
  ReturnCode_t dispose( const RecloserStatusProfile * instance_data, 
                        const InstanceHandle_t  instance_handle);
  
  ReturnCode_t dispose_w_timestamp( const RecloserStatusProfile * instance_data, 
                                    const InstanceHandle_t  instance_handle, 
                                    const Time_t  source_timestamp);
  
  ReturnCode_t get_key_value( RecloserStatusProfile * key_holder, 
                              const InstanceHandle_t  handle);
  
  InstanceHandle_t lookup_instance( const RecloserStatusProfile * instance_data);

  static RecloserStatusProfileDataWriter * narrow( DataWriter * dw) { return (RecloserStatusProfileDataWriter *)dw; }
  RecloserStatusProfileDataWriter        * narrow( void )           { return this; }
  
 protected:
 private:

  /* Constructor / Destructor -- use Publisher::create_datawriter() */

  RecloserStatusProfileDataWriter();
  ~RecloserStatusProfileDataWriter() {};

};

}  /* namespace reclosermodule */
/* END SCOPE: reclosermodule */
/* START SCOPE: regulatormodule */

namespace regulatormodule {

class RegulatorReadingValueTypeSupport;
/******************************************************************
 *   openfmb::regulatormodule:: RegulatorReadingValue DataWriter Class
 ******************************************************************/
class COREDX_TS_CLASS_EXPORT RegulatorReadingValueDataWriter : public DataWriter
{
  friend class DDS::DomainParticipant;
  friend class RegulatorReadingValueTypeSupport;

public:

  /* DataWriter Meathods */

  InstanceHandle_t register_instance( const RegulatorReadingValue *  instance_data);
  
  InstanceHandle_t register_instance_w_timestamp( const RegulatorReadingValue * instance_data,
                                                  const Time_t source_timestamp);
  
  ReturnCode_t unregister_instance( const RegulatorReadingValue * instance_data, 
                                    const InstanceHandle_t  handle);
  
  ReturnCode_t unregister_instance_w_timestamp( const RegulatorReadingValue * instance_data, 
                                                const InstanceHandle_t handle,
                                                const Time_t source_timestamp);
  
  ReturnCode_t write( const RegulatorReadingValue * instance_data, 
                      const InstanceHandle_t  handle);

  ReturnCode_t write_w_timestamp( const RegulatorReadingValue * instance_data, 
                                  const InstanceHandle_t handle,
                                  const Time_t source_timestamp);
  
  ReturnCode_t dispose( const RegulatorReadingValue * instance_data, 
                        const InstanceHandle_t  instance_handle);
  
  ReturnCode_t dispose_w_timestamp( const RegulatorReadingValue * instance_data, 
                                    const InstanceHandle_t  instance_handle, 
                                    const Time_t  source_timestamp);
  
  ReturnCode_t get_key_value( RegulatorReadingValue * key_holder, 
                              const InstanceHandle_t  handle);
  
  InstanceHandle_t lookup_instance( const RegulatorReadingValue * instance_data);

  static RegulatorReadingValueDataWriter * narrow( DataWriter * dw) { return (RegulatorReadingValueDataWriter *)dw; }
  RegulatorReadingValueDataWriter        * narrow( void )           { return this; }
  
 protected:
 private:

  /* Constructor / Destructor -- use Publisher::create_datawriter() */

  RegulatorReadingValueDataWriter();
  ~RegulatorReadingValueDataWriter() {};

};

}  /* namespace regulatormodule */
/* END SCOPE: regulatormodule */
/* START SCOPE: resourcemodule */

namespace resourcemodule {

class ResourceReadingValueTypeSupport;
/******************************************************************
 *   openfmb::resourcemodule:: ResourceReadingValue DataWriter Class
 ******************************************************************/
class COREDX_TS_CLASS_EXPORT ResourceReadingValueDataWriter : public DataWriter
{
  friend class DDS::DomainParticipant;
  friend class ResourceReadingValueTypeSupport;

public:

  /* DataWriter Meathods */

  InstanceHandle_t register_instance( const ResourceReadingValue *  instance_data);
  
  InstanceHandle_t register_instance_w_timestamp( const ResourceReadingValue * instance_data,
                                                  const Time_t source_timestamp);
  
  ReturnCode_t unregister_instance( const ResourceReadingValue * instance_data, 
                                    const InstanceHandle_t  handle);
  
  ReturnCode_t unregister_instance_w_timestamp( const ResourceReadingValue * instance_data, 
                                                const InstanceHandle_t handle,
                                                const Time_t source_timestamp);
  
  ReturnCode_t write( const ResourceReadingValue * instance_data, 
                      const InstanceHandle_t  handle);

  ReturnCode_t write_w_timestamp( const ResourceReadingValue * instance_data, 
                                  const InstanceHandle_t handle,
                                  const Time_t source_timestamp);
  
  ReturnCode_t dispose( const ResourceReadingValue * instance_data, 
                        const InstanceHandle_t  instance_handle);
  
  ReturnCode_t dispose_w_timestamp( const ResourceReadingValue * instance_data, 
                                    const InstanceHandle_t  instance_handle, 
                                    const Time_t  source_timestamp);
  
  ReturnCode_t get_key_value( ResourceReadingValue * key_holder, 
                              const InstanceHandle_t  handle);
  
  InstanceHandle_t lookup_instance( const ResourceReadingValue * instance_data);

  static ResourceReadingValueDataWriter * narrow( DataWriter * dw) { return (ResourceReadingValueDataWriter *)dw; }
  ResourceReadingValueDataWriter        * narrow( void )           { return this; }
  
 protected:
 private:

  /* Constructor / Destructor -- use Publisher::create_datawriter() */

  ResourceReadingValueDataWriter();
  ~ResourceReadingValueDataWriter() {};

};

}  /* namespace resourcemodule */
/* END SCOPE: resourcemodule */
/* START SCOPE: solarmodule */

namespace solarmodule {

class SolarEventProfileTypeSupport;
/******************************************************************
 *   openfmb::solarmodule:: SolarEventProfile DataWriter Class
 ******************************************************************/
class COREDX_TS_CLASS_EXPORT SolarEventProfileDataWriter : public DataWriter
{
  friend class DDS::DomainParticipant;
  friend class SolarEventProfileTypeSupport;

public:

  /* DataWriter Meathods */

  InstanceHandle_t register_instance( const SolarEventProfile *  instance_data);
  
  InstanceHandle_t register_instance_w_timestamp( const SolarEventProfile * instance_data,
                                                  const Time_t source_timestamp);
  
  ReturnCode_t unregister_instance( const SolarEventProfile * instance_data, 
                                    const InstanceHandle_t  handle);
  
  ReturnCode_t unregister_instance_w_timestamp( const SolarEventProfile * instance_data, 
                                                const InstanceHandle_t handle,
                                                const Time_t source_timestamp);
  
  ReturnCode_t write( const SolarEventProfile * instance_data, 
                      const InstanceHandle_t  handle);

  ReturnCode_t write_w_timestamp( const SolarEventProfile * instance_data, 
                                  const InstanceHandle_t handle,
                                  const Time_t source_timestamp);
  
  ReturnCode_t dispose( const SolarEventProfile * instance_data, 
                        const InstanceHandle_t  instance_handle);
  
  ReturnCode_t dispose_w_timestamp( const SolarEventProfile * instance_data, 
                                    const InstanceHandle_t  instance_handle, 
                                    const Time_t  source_timestamp);
  
  ReturnCode_t get_key_value( SolarEventProfile * key_holder, 
                              const InstanceHandle_t  handle);
  
  InstanceHandle_t lookup_instance( const SolarEventProfile * instance_data);

  static SolarEventProfileDataWriter * narrow( DataWriter * dw) { return (SolarEventProfileDataWriter *)dw; }
  SolarEventProfileDataWriter        * narrow( void )           { return this; }
  
 protected:
 private:

  /* Constructor / Destructor -- use Publisher::create_datawriter() */

  SolarEventProfileDataWriter();
  ~SolarEventProfileDataWriter() {};

};
class SolarReadingValueTypeSupport;
/******************************************************************
 *   openfmb::solarmodule:: SolarReadingValue DataWriter Class
 ******************************************************************/
class COREDX_TS_CLASS_EXPORT SolarReadingValueDataWriter : public DataWriter
{
  friend class DDS::DomainParticipant;
  friend class SolarReadingValueTypeSupport;

public:

  /* DataWriter Meathods */

  InstanceHandle_t register_instance( const SolarReadingValue *  instance_data);
  
  InstanceHandle_t register_instance_w_timestamp( const SolarReadingValue * instance_data,
                                                  const Time_t source_timestamp);
  
  ReturnCode_t unregister_instance( const SolarReadingValue * instance_data, 
                                    const InstanceHandle_t  handle);
  
  ReturnCode_t unregister_instance_w_timestamp( const SolarReadingValue * instance_data, 
                                                const InstanceHandle_t handle,
                                                const Time_t source_timestamp);
  
  ReturnCode_t write( const SolarReadingValue * instance_data, 
                      const InstanceHandle_t  handle);

  ReturnCode_t write_w_timestamp( const SolarReadingValue * instance_data, 
                                  const InstanceHandle_t handle,
                                  const Time_t source_timestamp);
  
  ReturnCode_t dispose( const SolarReadingValue * instance_data, 
                        const InstanceHandle_t  instance_handle);
  
  ReturnCode_t dispose_w_timestamp( const SolarReadingValue * instance_data, 
                                    const InstanceHandle_t  instance_handle, 
                                    const Time_t  source_timestamp);
  
  ReturnCode_t get_key_value( SolarReadingValue * key_holder, 
                              const InstanceHandle_t  handle);
  
  InstanceHandle_t lookup_instance( const SolarReadingValue * instance_data);

  static SolarReadingValueDataWriter * narrow( DataWriter * dw) { return (SolarReadingValueDataWriter *)dw; }
  SolarReadingValueDataWriter        * narrow( void )           { return this; }
  
 protected:
 private:

  /* Constructor / Destructor -- use Publisher::create_datawriter() */

  SolarReadingValueDataWriter();
  ~SolarReadingValueDataWriter() {};

};
class SolarStatusProfileTypeSupport;
/******************************************************************
 *   openfmb::solarmodule:: SolarStatusProfile DataWriter Class
 ******************************************************************/
class COREDX_TS_CLASS_EXPORT SolarStatusProfileDataWriter : public DataWriter
{
  friend class DDS::DomainParticipant;
  friend class SolarStatusProfileTypeSupport;

public:

  /* DataWriter Meathods */

  InstanceHandle_t register_instance( const SolarStatusProfile *  instance_data);
  
  InstanceHandle_t register_instance_w_timestamp( const SolarStatusProfile * instance_data,
                                                  const Time_t source_timestamp);
  
  ReturnCode_t unregister_instance( const SolarStatusProfile * instance_data, 
                                    const InstanceHandle_t  handle);
  
  ReturnCode_t unregister_instance_w_timestamp( const SolarStatusProfile * instance_data, 
                                                const InstanceHandle_t handle,
                                                const Time_t source_timestamp);
  
  ReturnCode_t write( const SolarStatusProfile * instance_data, 
                      const InstanceHandle_t  handle);

  ReturnCode_t write_w_timestamp( const SolarStatusProfile * instance_data, 
                                  const InstanceHandle_t handle,
                                  const Time_t source_timestamp);
  
  ReturnCode_t dispose( const SolarStatusProfile * instance_data, 
                        const InstanceHandle_t  instance_handle);
  
  ReturnCode_t dispose_w_timestamp( const SolarStatusProfile * instance_data, 
                                    const InstanceHandle_t  instance_handle, 
                                    const Time_t  source_timestamp);
  
  ReturnCode_t get_key_value( SolarStatusProfile * key_holder, 
                              const InstanceHandle_t  handle);
  
  InstanceHandle_t lookup_instance( const SolarStatusProfile * instance_data);

  static SolarStatusProfileDataWriter * narrow( DataWriter * dw) { return (SolarStatusProfileDataWriter *)dw; }
  SolarStatusProfileDataWriter        * narrow( void )           { return this; }
  
 protected:
 private:

  /* Constructor / Destructor -- use Publisher::create_datawriter() */

  SolarStatusProfileDataWriter();
  ~SolarStatusProfileDataWriter() {};

};

}  /* namespace solarmodule */
/* END SCOPE: solarmodule */
/* START SCOPE: switchmodule */

namespace switchmodule {

class SwitchControlProfileTypeSupport;
/******************************************************************
 *   openfmb::switchmodule:: SwitchControlProfile DataWriter Class
 ******************************************************************/
class COREDX_TS_CLASS_EXPORT SwitchControlProfileDataWriter : public DataWriter
{
  friend class DDS::DomainParticipant;
  friend class SwitchControlProfileTypeSupport;

public:

  /* DataWriter Meathods */

  InstanceHandle_t register_instance( const SwitchControlProfile *  instance_data);
  
  InstanceHandle_t register_instance_w_timestamp( const SwitchControlProfile * instance_data,
                                                  const Time_t source_timestamp);
  
  ReturnCode_t unregister_instance( const SwitchControlProfile * instance_data, 
                                    const InstanceHandle_t  handle);
  
  ReturnCode_t unregister_instance_w_timestamp( const SwitchControlProfile * instance_data, 
                                                const InstanceHandle_t handle,
                                                const Time_t source_timestamp);
  
  ReturnCode_t write( const SwitchControlProfile * instance_data, 
                      const InstanceHandle_t  handle);

  ReturnCode_t write_w_timestamp( const SwitchControlProfile * instance_data, 
                                  const InstanceHandle_t handle,
                                  const Time_t source_timestamp);
  
  ReturnCode_t dispose( const SwitchControlProfile * instance_data, 
                        const InstanceHandle_t  instance_handle);
  
  ReturnCode_t dispose_w_timestamp( const SwitchControlProfile * instance_data, 
                                    const InstanceHandle_t  instance_handle, 
                                    const Time_t  source_timestamp);
  
  ReturnCode_t get_key_value( SwitchControlProfile * key_holder, 
                              const InstanceHandle_t  handle);
  
  InstanceHandle_t lookup_instance( const SwitchControlProfile * instance_data);

  static SwitchControlProfileDataWriter * narrow( DataWriter * dw) { return (SwitchControlProfileDataWriter *)dw; }
  SwitchControlProfileDataWriter        * narrow( void )           { return this; }
  
 protected:
 private:

  /* Constructor / Destructor -- use Publisher::create_datawriter() */

  SwitchControlProfileDataWriter();
  ~SwitchControlProfileDataWriter() {};

};
class SwitchEventProfileTypeSupport;
/******************************************************************
 *   openfmb::switchmodule:: SwitchEventProfile DataWriter Class
 ******************************************************************/
class COREDX_TS_CLASS_EXPORT SwitchEventProfileDataWriter : public DataWriter
{
  friend class DDS::DomainParticipant;
  friend class SwitchEventProfileTypeSupport;

public:

  /* DataWriter Meathods */

  InstanceHandle_t register_instance( const SwitchEventProfile *  instance_data);
  
  InstanceHandle_t register_instance_w_timestamp( const SwitchEventProfile * instance_data,
                                                  const Time_t source_timestamp);
  
  ReturnCode_t unregister_instance( const SwitchEventProfile * instance_data, 
                                    const InstanceHandle_t  handle);
  
  ReturnCode_t unregister_instance_w_timestamp( const SwitchEventProfile * instance_data, 
                                                const InstanceHandle_t handle,
                                                const Time_t source_timestamp);
  
  ReturnCode_t write( const SwitchEventProfile * instance_data, 
                      const InstanceHandle_t  handle);

  ReturnCode_t write_w_timestamp( const SwitchEventProfile * instance_data, 
                                  const InstanceHandle_t handle,
                                  const Time_t source_timestamp);
  
  ReturnCode_t dispose( const SwitchEventProfile * instance_data, 
                        const InstanceHandle_t  instance_handle);
  
  ReturnCode_t dispose_w_timestamp( const SwitchEventProfile * instance_data, 
                                    const InstanceHandle_t  instance_handle, 
                                    const Time_t  source_timestamp);
  
  ReturnCode_t get_key_value( SwitchEventProfile * key_holder, 
                              const InstanceHandle_t  handle);
  
  InstanceHandle_t lookup_instance( const SwitchEventProfile * instance_data);

  static SwitchEventProfileDataWriter * narrow( DataWriter * dw) { return (SwitchEventProfileDataWriter *)dw; }
  SwitchEventProfileDataWriter        * narrow( void )           { return this; }
  
 protected:
 private:

  /* Constructor / Destructor -- use Publisher::create_datawriter() */

  SwitchEventProfileDataWriter();
  ~SwitchEventProfileDataWriter() {};

};
class SwitchReadingValueTypeSupport;
/******************************************************************
 *   openfmb::switchmodule:: SwitchReadingValue DataWriter Class
 ******************************************************************/
class COREDX_TS_CLASS_EXPORT SwitchReadingValueDataWriter : public DataWriter
{
  friend class DDS::DomainParticipant;
  friend class SwitchReadingValueTypeSupport;

public:

  /* DataWriter Meathods */

  InstanceHandle_t register_instance( const SwitchReadingValue *  instance_data);
  
  InstanceHandle_t register_instance_w_timestamp( const SwitchReadingValue * instance_data,
                                                  const Time_t source_timestamp);
  
  ReturnCode_t unregister_instance( const SwitchReadingValue * instance_data, 
                                    const InstanceHandle_t  handle);
  
  ReturnCode_t unregister_instance_w_timestamp( const SwitchReadingValue * instance_data, 
                                                const InstanceHandle_t handle,
                                                const Time_t source_timestamp);
  
  ReturnCode_t write( const SwitchReadingValue * instance_data, 
                      const InstanceHandle_t  handle);

  ReturnCode_t write_w_timestamp( const SwitchReadingValue * instance_data, 
                                  const InstanceHandle_t handle,
                                  const Time_t source_timestamp);
  
  ReturnCode_t dispose( const SwitchReadingValue * instance_data, 
                        const InstanceHandle_t  instance_handle);
  
  ReturnCode_t dispose_w_timestamp( const SwitchReadingValue * instance_data, 
                                    const InstanceHandle_t  instance_handle, 
                                    const Time_t  source_timestamp);
  
  ReturnCode_t get_key_value( SwitchReadingValue * key_holder, 
                              const InstanceHandle_t  handle);
  
  InstanceHandle_t lookup_instance( const SwitchReadingValue * instance_data);

  static SwitchReadingValueDataWriter * narrow( DataWriter * dw) { return (SwitchReadingValueDataWriter *)dw; }
  SwitchReadingValueDataWriter        * narrow( void )           { return this; }
  
 protected:
 private:

  /* Constructor / Destructor -- use Publisher::create_datawriter() */

  SwitchReadingValueDataWriter();
  ~SwitchReadingValueDataWriter() {};

};
class SwitchStatusProfileTypeSupport;
/******************************************************************
 *   openfmb::switchmodule:: SwitchStatusProfile DataWriter Class
 ******************************************************************/
class COREDX_TS_CLASS_EXPORT SwitchStatusProfileDataWriter : public DataWriter
{
  friend class DDS::DomainParticipant;
  friend class SwitchStatusProfileTypeSupport;

public:

  /* DataWriter Meathods */

  InstanceHandle_t register_instance( const SwitchStatusProfile *  instance_data);
  
  InstanceHandle_t register_instance_w_timestamp( const SwitchStatusProfile * instance_data,
                                                  const Time_t source_timestamp);
  
  ReturnCode_t unregister_instance( const SwitchStatusProfile * instance_data, 
                                    const InstanceHandle_t  handle);
  
  ReturnCode_t unregister_instance_w_timestamp( const SwitchStatusProfile * instance_data, 
                                                const InstanceHandle_t handle,
                                                const Time_t source_timestamp);
  
  ReturnCode_t write( const SwitchStatusProfile * instance_data, 
                      const InstanceHandle_t  handle);

  ReturnCode_t write_w_timestamp( const SwitchStatusProfile * instance_data, 
                                  const InstanceHandle_t handle,
                                  const Time_t source_timestamp);
  
  ReturnCode_t dispose( const SwitchStatusProfile * instance_data, 
                        const InstanceHandle_t  instance_handle);
  
  ReturnCode_t dispose_w_timestamp( const SwitchStatusProfile * instance_data, 
                                    const InstanceHandle_t  instance_handle, 
                                    const Time_t  source_timestamp);
  
  ReturnCode_t get_key_value( SwitchStatusProfile * key_holder, 
                              const InstanceHandle_t  handle);
  
  InstanceHandle_t lookup_instance( const SwitchStatusProfile * instance_data);

  static SwitchStatusProfileDataWriter * narrow( DataWriter * dw) { return (SwitchStatusProfileDataWriter *)dw; }
  SwitchStatusProfileDataWriter        * narrow( void )           { return this; }
  
 protected:
 private:

  /* Constructor / Destructor -- use Publisher::create_datawriter() */

  SwitchStatusProfileDataWriter();
  ~SwitchStatusProfileDataWriter() {};

};

}  /* namespace switchmodule */
/* END SCOPE: switchmodule */

}  /* namespace openfmb */
/* END SCOPE: openfmb */
/* START SCOPE: openfmb */

namespace openfmb {

/* START SCOPE: breakermodule */

namespace breakermodule {

class BreakerControlProfileTypeSupport;
/******************************************************************
 *   openfmb::breakermodule:: BreakerControlProfile DataWriter Class
 ******************************************************************/
class COREDX_TS_CLASS_EXPORT BreakerControlProfileDataWriter : public DataWriter
{
  friend class DDS::DomainParticipant;
  friend class BreakerControlProfileTypeSupport;

public:

  /* DataWriter Meathods */

  InstanceHandle_t register_instance( const BreakerControlProfile *  instance_data);
  
  InstanceHandle_t register_instance_w_timestamp( const BreakerControlProfile * instance_data,
                                                  const Time_t source_timestamp);
  
  ReturnCode_t unregister_instance( const BreakerControlProfile * instance_data, 
                                    const InstanceHandle_t  handle);
  
  ReturnCode_t unregister_instance_w_timestamp( const BreakerControlProfile * instance_data, 
                                                const InstanceHandle_t handle,
                                                const Time_t source_timestamp);
  
  ReturnCode_t write( const BreakerControlProfile * instance_data, 
                      const InstanceHandle_t  handle);

  ReturnCode_t write_w_timestamp( const BreakerControlProfile * instance_data, 
                                  const InstanceHandle_t handle,
                                  const Time_t source_timestamp);
  
  ReturnCode_t dispose( const BreakerControlProfile * instance_data, 
                        const InstanceHandle_t  instance_handle);
  
  ReturnCode_t dispose_w_timestamp( const BreakerControlProfile * instance_data, 
                                    const InstanceHandle_t  instance_handle, 
                                    const Time_t  source_timestamp);
  
  ReturnCode_t get_key_value( BreakerControlProfile * key_holder, 
                              const InstanceHandle_t  handle);
  
  InstanceHandle_t lookup_instance( const BreakerControlProfile * instance_data);

  static BreakerControlProfileDataWriter * narrow( DataWriter * dw) { return (BreakerControlProfileDataWriter *)dw; }
  BreakerControlProfileDataWriter        * narrow( void )           { return this; }
  
 protected:
 private:

  /* Constructor / Destructor -- use Publisher::create_datawriter() */

  BreakerControlProfileDataWriter();
  ~BreakerControlProfileDataWriter() {};

};
class BreakerEventProfileTypeSupport;
/******************************************************************
 *   openfmb::breakermodule:: BreakerEventProfile DataWriter Class
 ******************************************************************/
class COREDX_TS_CLASS_EXPORT BreakerEventProfileDataWriter : public DataWriter
{
  friend class DDS::DomainParticipant;
  friend class BreakerEventProfileTypeSupport;

public:

  /* DataWriter Meathods */

  InstanceHandle_t register_instance( const BreakerEventProfile *  instance_data);
  
  InstanceHandle_t register_instance_w_timestamp( const BreakerEventProfile * instance_data,
                                                  const Time_t source_timestamp);
  
  ReturnCode_t unregister_instance( const BreakerEventProfile * instance_data, 
                                    const InstanceHandle_t  handle);
  
  ReturnCode_t unregister_instance_w_timestamp( const BreakerEventProfile * instance_data, 
                                                const InstanceHandle_t handle,
                                                const Time_t source_timestamp);
  
  ReturnCode_t write( const BreakerEventProfile * instance_data, 
                      const InstanceHandle_t  handle);

  ReturnCode_t write_w_timestamp( const BreakerEventProfile * instance_data, 
                                  const InstanceHandle_t handle,
                                  const Time_t source_timestamp);
  
  ReturnCode_t dispose( const BreakerEventProfile * instance_data, 
                        const InstanceHandle_t  instance_handle);
  
  ReturnCode_t dispose_w_timestamp( const BreakerEventProfile * instance_data, 
                                    const InstanceHandle_t  instance_handle, 
                                    const Time_t  source_timestamp);
  
  ReturnCode_t get_key_value( BreakerEventProfile * key_holder, 
                              const InstanceHandle_t  handle);
  
  InstanceHandle_t lookup_instance( const BreakerEventProfile * instance_data);

  static BreakerEventProfileDataWriter * narrow( DataWriter * dw) { return (BreakerEventProfileDataWriter *)dw; }
  BreakerEventProfileDataWriter        * narrow( void )           { return this; }
  
 protected:
 private:

  /* Constructor / Destructor -- use Publisher::create_datawriter() */

  BreakerEventProfileDataWriter();
  ~BreakerEventProfileDataWriter() {};

};
class BreakerReadingValueTypeSupport;
/******************************************************************
 *   openfmb::breakermodule:: BreakerReadingValue DataWriter Class
 ******************************************************************/
class COREDX_TS_CLASS_EXPORT BreakerReadingValueDataWriter : public DataWriter
{
  friend class DDS::DomainParticipant;
  friend class BreakerReadingValueTypeSupport;

public:

  /* DataWriter Meathods */

  InstanceHandle_t register_instance( const BreakerReadingValue *  instance_data);
  
  InstanceHandle_t register_instance_w_timestamp( const BreakerReadingValue * instance_data,
                                                  const Time_t source_timestamp);
  
  ReturnCode_t unregister_instance( const BreakerReadingValue * instance_data, 
                                    const InstanceHandle_t  handle);
  
  ReturnCode_t unregister_instance_w_timestamp( const BreakerReadingValue * instance_data, 
                                                const InstanceHandle_t handle,
                                                const Time_t source_timestamp);
  
  ReturnCode_t write( const BreakerReadingValue * instance_data, 
                      const InstanceHandle_t  handle);

  ReturnCode_t write_w_timestamp( const BreakerReadingValue * instance_data, 
                                  const InstanceHandle_t handle,
                                  const Time_t source_timestamp);
  
  ReturnCode_t dispose( const BreakerReadingValue * instance_data, 
                        const InstanceHandle_t  instance_handle);
  
  ReturnCode_t dispose_w_timestamp( const BreakerReadingValue * instance_data, 
                                    const InstanceHandle_t  instance_handle, 
                                    const Time_t  source_timestamp);
  
  ReturnCode_t get_key_value( BreakerReadingValue * key_holder, 
                              const InstanceHandle_t  handle);
  
  InstanceHandle_t lookup_instance( const BreakerReadingValue * instance_data);

  static BreakerReadingValueDataWriter * narrow( DataWriter * dw) { return (BreakerReadingValueDataWriter *)dw; }
  BreakerReadingValueDataWriter        * narrow( void )           { return this; }
  
 protected:
 private:

  /* Constructor / Destructor -- use Publisher::create_datawriter() */

  BreakerReadingValueDataWriter();
  ~BreakerReadingValueDataWriter() {};

};
class BreakerStatusProfileTypeSupport;
/******************************************************************
 *   openfmb::breakermodule:: BreakerStatusProfile DataWriter Class
 ******************************************************************/
class COREDX_TS_CLASS_EXPORT BreakerStatusProfileDataWriter : public DataWriter
{
  friend class DDS::DomainParticipant;
  friend class BreakerStatusProfileTypeSupport;

public:

  /* DataWriter Meathods */

  InstanceHandle_t register_instance( const BreakerStatusProfile *  instance_data);
  
  InstanceHandle_t register_instance_w_timestamp( const BreakerStatusProfile * instance_data,
                                                  const Time_t source_timestamp);
  
  ReturnCode_t unregister_instance( const BreakerStatusProfile * instance_data, 
                                    const InstanceHandle_t  handle);
  
  ReturnCode_t unregister_instance_w_timestamp( const BreakerStatusProfile * instance_data, 
                                                const InstanceHandle_t handle,
                                                const Time_t source_timestamp);
  
  ReturnCode_t write( const BreakerStatusProfile * instance_data, 
                      const InstanceHandle_t  handle);

  ReturnCode_t write_w_timestamp( const BreakerStatusProfile * instance_data, 
                                  const InstanceHandle_t handle,
                                  const Time_t source_timestamp);
  
  ReturnCode_t dispose( const BreakerStatusProfile * instance_data, 
                        const InstanceHandle_t  instance_handle);
  
  ReturnCode_t dispose_w_timestamp( const BreakerStatusProfile * instance_data, 
                                    const InstanceHandle_t  instance_handle, 
                                    const Time_t  source_timestamp);
  
  ReturnCode_t get_key_value( BreakerStatusProfile * key_holder, 
                              const InstanceHandle_t  handle);
  
  InstanceHandle_t lookup_instance( const BreakerStatusProfile * instance_data);

  static BreakerStatusProfileDataWriter * narrow( DataWriter * dw) { return (BreakerStatusProfileDataWriter *)dw; }
  BreakerStatusProfileDataWriter        * narrow( void )           { return this; }
  
 protected:
 private:

  /* Constructor / Destructor -- use Publisher::create_datawriter() */

  BreakerStatusProfileDataWriter();
  ~BreakerStatusProfileDataWriter() {};

};

}  /* namespace breakermodule */
/* END SCOPE: breakermodule */
/* START SCOPE: commonmodule */

namespace commonmodule {


}  /* namespace commonmodule */
/* END SCOPE: commonmodule */
/* START SCOPE: essmodule */

namespace essmodule {

class EssControlFSCCTypeSupport;
/******************************************************************
 *   openfmb::essmodule:: EssControlFSCC DataWriter Class
 ******************************************************************/
class COREDX_TS_CLASS_EXPORT EssControlFSCCDataWriter : public DataWriter
{
  friend class DDS::DomainParticipant;
  friend class EssControlFSCCTypeSupport;

public:

  /* DataWriter Meathods */

  InstanceHandle_t register_instance( const EssControlFSCC *  instance_data);
  
  InstanceHandle_t register_instance_w_timestamp( const EssControlFSCC * instance_data,
                                                  const Time_t source_timestamp);
  
  ReturnCode_t unregister_instance( const EssControlFSCC * instance_data, 
                                    const InstanceHandle_t  handle);
  
  ReturnCode_t unregister_instance_w_timestamp( const EssControlFSCC * instance_data, 
                                                const InstanceHandle_t handle,
                                                const Time_t source_timestamp);
  
  ReturnCode_t write( const EssControlFSCC * instance_data, 
                      const InstanceHandle_t  handle);

  ReturnCode_t write_w_timestamp( const EssControlFSCC * instance_data, 
                                  const InstanceHandle_t handle,
                                  const Time_t source_timestamp);
  
  ReturnCode_t dispose( const EssControlFSCC * instance_data, 
                        const InstanceHandle_t  instance_handle);
  
  ReturnCode_t dispose_w_timestamp( const EssControlFSCC * instance_data, 
                                    const InstanceHandle_t  instance_handle, 
                                    const Time_t  source_timestamp);
  
  ReturnCode_t get_key_value( EssControlFSCC * key_holder, 
                              const InstanceHandle_t  handle);
  
  InstanceHandle_t lookup_instance( const EssControlFSCC * instance_data);

  static EssControlFSCCDataWriter * narrow( DataWriter * dw) { return (EssControlFSCCDataWriter *)dw; }
  EssControlFSCCDataWriter        * narrow( void )           { return this; }
  
 protected:
 private:

  /* Constructor / Destructor -- use Publisher::create_datawriter() */

  EssControlFSCCDataWriter();
  ~EssControlFSCCDataWriter() {};

};
class ESSReadingProfileTypeSupport;
/******************************************************************
 *   openfmb::essmodule:: ESSReadingProfile DataWriter Class
 ******************************************************************/
class COREDX_TS_CLASS_EXPORT ESSReadingProfileDataWriter : public DataWriter
{
  friend class DDS::DomainParticipant;
  friend class ESSReadingProfileTypeSupport;

public:

  /* DataWriter Meathods */

  InstanceHandle_t register_instance( const ESSReadingProfile *  instance_data);
  
  InstanceHandle_t register_instance_w_timestamp( const ESSReadingProfile * instance_data,
                                                  const Time_t source_timestamp);
  
  ReturnCode_t unregister_instance( const ESSReadingProfile * instance_data, 
                                    const InstanceHandle_t  handle);
  
  ReturnCode_t unregister_instance_w_timestamp( const ESSReadingProfile * instance_data, 
                                                const InstanceHandle_t handle,
                                                const Time_t source_timestamp);
  
  ReturnCode_t write( const ESSReadingProfile * instance_data, 
                      const InstanceHandle_t  handle);

  ReturnCode_t write_w_timestamp( const ESSReadingProfile * instance_data, 
                                  const InstanceHandle_t handle,
                                  const Time_t source_timestamp);
  
  ReturnCode_t dispose( const ESSReadingProfile * instance_data, 
                        const InstanceHandle_t  instance_handle);
  
  ReturnCode_t dispose_w_timestamp( const ESSReadingProfile * instance_data, 
                                    const InstanceHandle_t  instance_handle, 
                                    const Time_t  source_timestamp);
  
  ReturnCode_t get_key_value( ESSReadingProfile * key_holder, 
                              const InstanceHandle_t  handle);
  
  InstanceHandle_t lookup_instance( const ESSReadingProfile * instance_data);

  static ESSReadingProfileDataWriter * narrow( DataWriter * dw) { return (ESSReadingProfileDataWriter *)dw; }
  ESSReadingProfileDataWriter        * narrow( void )           { return this; }
  
 protected:
 private:

  /* Constructor / Destructor -- use Publisher::create_datawriter() */

  ESSReadingProfileDataWriter();
  ~ESSReadingProfileDataWriter() {};

};
class ESSControlTypeSupport;
/******************************************************************
 *   openfmb::essmodule:: ESSControl DataWriter Class
 ******************************************************************/
class COREDX_TS_CLASS_EXPORT ESSControlDataWriter : public DataWriter
{
  friend class DDS::DomainParticipant;
  friend class ESSControlTypeSupport;

public:

  /* DataWriter Meathods */

  InstanceHandle_t register_instance( const ESSControl *  instance_data);
  
  InstanceHandle_t register_instance_w_timestamp( const ESSControl * instance_data,
                                                  const Time_t source_timestamp);
  
  ReturnCode_t unregister_instance( const ESSControl * instance_data, 
                                    const InstanceHandle_t  handle);
  
  ReturnCode_t unregister_instance_w_timestamp( const ESSControl * instance_data, 
                                                const InstanceHandle_t handle,
                                                const Time_t source_timestamp);
  
  ReturnCode_t write( const ESSControl * instance_data, 
                      const InstanceHandle_t  handle);

  ReturnCode_t write_w_timestamp( const ESSControl * instance_data, 
                                  const InstanceHandle_t handle,
                                  const Time_t source_timestamp);
  
  ReturnCode_t dispose( const ESSControl * instance_data, 
                        const InstanceHandle_t  instance_handle);
  
  ReturnCode_t dispose_w_timestamp( const ESSControl * instance_data, 
                                    const InstanceHandle_t  instance_handle, 
                                    const Time_t  source_timestamp);
  
  ReturnCode_t get_key_value( ESSControl * key_holder, 
                              const InstanceHandle_t  handle);
  
  InstanceHandle_t lookup_instance( const ESSControl * instance_data);

  static ESSControlDataWriter * narrow( DataWriter * dw) { return (ESSControlDataWriter *)dw; }
  ESSControlDataWriter        * narrow( void )           { return this; }
  
 protected:
 private:

  /* Constructor / Destructor -- use Publisher::create_datawriter() */

  ESSControlDataWriter();
  ~ESSControlDataWriter() {};

};
class ESSControlProfileTypeSupport;
/******************************************************************
 *   openfmb::essmodule:: ESSControlProfile DataWriter Class
 ******************************************************************/
class COREDX_TS_CLASS_EXPORT ESSControlProfileDataWriter : public DataWriter
{
  friend class DDS::DomainParticipant;
  friend class ESSControlProfileTypeSupport;

public:

  /* DataWriter Meathods */

  InstanceHandle_t register_instance( const ESSControlProfile *  instance_data);
  
  InstanceHandle_t register_instance_w_timestamp( const ESSControlProfile * instance_data,
                                                  const Time_t source_timestamp);
  
  ReturnCode_t unregister_instance( const ESSControlProfile * instance_data, 
                                    const InstanceHandle_t  handle);
  
  ReturnCode_t unregister_instance_w_timestamp( const ESSControlProfile * instance_data, 
                                                const InstanceHandle_t handle,
                                                const Time_t source_timestamp);
  
  ReturnCode_t write( const ESSControlProfile * instance_data, 
                      const InstanceHandle_t  handle);

  ReturnCode_t write_w_timestamp( const ESSControlProfile * instance_data, 
                                  const InstanceHandle_t handle,
                                  const Time_t source_timestamp);
  
  ReturnCode_t dispose( const ESSControlProfile * instance_data, 
                        const InstanceHandle_t  instance_handle);
  
  ReturnCode_t dispose_w_timestamp( const ESSControlProfile * instance_data, 
                                    const InstanceHandle_t  instance_handle, 
                                    const Time_t  source_timestamp);
  
  ReturnCode_t get_key_value( ESSControlProfile * key_holder, 
                              const InstanceHandle_t  handle);
  
  InstanceHandle_t lookup_instance( const ESSControlProfile * instance_data);

  static ESSControlProfileDataWriter * narrow( DataWriter * dw) { return (ESSControlProfileDataWriter *)dw; }
  ESSControlProfileDataWriter        * narrow( void )           { return this; }
  
 protected:
 private:

  /* Constructor / Destructor -- use Publisher::create_datawriter() */

  ESSControlProfileDataWriter();
  ~ESSControlProfileDataWriter() {};

};

}  /* namespace essmodule */
/* END SCOPE: essmodule */
/* START SCOPE: generationmodule */

namespace generationmodule {

class GenerationControlProfileTypeSupport;
/******************************************************************
 *   openfmb::generationmodule:: GenerationControlProfile DataWriter Class
 ******************************************************************/
class COREDX_TS_CLASS_EXPORT GenerationControlProfileDataWriter : public DataWriter
{
  friend class DDS::DomainParticipant;
  friend class GenerationControlProfileTypeSupport;

public:

  /* DataWriter Meathods */

  InstanceHandle_t register_instance( const GenerationControlProfile *  instance_data);
  
  InstanceHandle_t register_instance_w_timestamp( const GenerationControlProfile * instance_data,
                                                  const Time_t source_timestamp);
  
  ReturnCode_t unregister_instance( const GenerationControlProfile * instance_data, 
                                    const InstanceHandle_t  handle);
  
  ReturnCode_t unregister_instance_w_timestamp( const GenerationControlProfile * instance_data, 
                                                const InstanceHandle_t handle,
                                                const Time_t source_timestamp);
  
  ReturnCode_t write( const GenerationControlProfile * instance_data, 
                      const InstanceHandle_t  handle);

  ReturnCode_t write_w_timestamp( const GenerationControlProfile * instance_data, 
                                  const InstanceHandle_t handle,
                                  const Time_t source_timestamp);
  
  ReturnCode_t dispose( const GenerationControlProfile * instance_data, 
                        const InstanceHandle_t  instance_handle);
  
  ReturnCode_t dispose_w_timestamp( const GenerationControlProfile * instance_data, 
                                    const InstanceHandle_t  instance_handle, 
                                    const Time_t  source_timestamp);
  
  ReturnCode_t get_key_value( GenerationControlProfile * key_holder, 
                              const InstanceHandle_t  handle);
  
  InstanceHandle_t lookup_instance( const GenerationControlProfile * instance_data);

  static GenerationControlProfileDataWriter * narrow( DataWriter * dw) { return (GenerationControlProfileDataWriter *)dw; }
  GenerationControlProfileDataWriter        * narrow( void )           { return this; }
  
 protected:
 private:

  /* Constructor / Destructor -- use Publisher::create_datawriter() */

  GenerationControlProfileDataWriter();
  ~GenerationControlProfileDataWriter() {};

};

}  /* namespace generationmodule */
/* END SCOPE: generationmodule */
/* START SCOPE: loadmodule */

namespace loadmodule {

class LoadControlFSCCTypeSupport;
/******************************************************************
 *   openfmb::loadmodule:: LoadControlFSCC DataWriter Class
 ******************************************************************/
class COREDX_TS_CLASS_EXPORT LoadControlFSCCDataWriter : public DataWriter
{
  friend class DDS::DomainParticipant;
  friend class LoadControlFSCCTypeSupport;

public:

  /* DataWriter Meathods */

  InstanceHandle_t register_instance( const LoadControlFSCC *  instance_data);
  
  InstanceHandle_t register_instance_w_timestamp( const LoadControlFSCC * instance_data,
                                                  const Time_t source_timestamp);
  
  ReturnCode_t unregister_instance( const LoadControlFSCC * instance_data, 
                                    const InstanceHandle_t  handle);
  
  ReturnCode_t unregister_instance_w_timestamp( const LoadControlFSCC * instance_data, 
                                                const InstanceHandle_t handle,
                                                const Time_t source_timestamp);
  
  ReturnCode_t write( const LoadControlFSCC * instance_data, 
                      const InstanceHandle_t  handle);

  ReturnCode_t write_w_timestamp( const LoadControlFSCC * instance_data, 
                                  const InstanceHandle_t handle,
                                  const Time_t source_timestamp);
  
  ReturnCode_t dispose( const LoadControlFSCC * instance_data, 
                        const InstanceHandle_t  instance_handle);
  
  ReturnCode_t dispose_w_timestamp( const LoadControlFSCC * instance_data, 
                                    const InstanceHandle_t  instance_handle, 
                                    const Time_t  source_timestamp);
  
  ReturnCode_t get_key_value( LoadControlFSCC * key_holder, 
                              const InstanceHandle_t  handle);
  
  InstanceHandle_t lookup_instance( const LoadControlFSCC * instance_data);

  static LoadControlFSCCDataWriter * narrow( DataWriter * dw) { return (LoadControlFSCCDataWriter *)dw; }
  LoadControlFSCCDataWriter        * narrow( void )           { return this; }
  
 protected:
 private:

  /* Constructor / Destructor -- use Publisher::create_datawriter() */

  LoadControlFSCCDataWriter();
  ~LoadControlFSCCDataWriter() {};

};
class LoadReadingProfileTypeSupport;
/******************************************************************
 *   openfmb::loadmodule:: LoadReadingProfile DataWriter Class
 ******************************************************************/
class COREDX_TS_CLASS_EXPORT LoadReadingProfileDataWriter : public DataWriter
{
  friend class DDS::DomainParticipant;
  friend class LoadReadingProfileTypeSupport;

public:

  /* DataWriter Meathods */

  InstanceHandle_t register_instance( const LoadReadingProfile *  instance_data);
  
  InstanceHandle_t register_instance_w_timestamp( const LoadReadingProfile * instance_data,
                                                  const Time_t source_timestamp);
  
  ReturnCode_t unregister_instance( const LoadReadingProfile * instance_data, 
                                    const InstanceHandle_t  handle);
  
  ReturnCode_t unregister_instance_w_timestamp( const LoadReadingProfile * instance_data, 
                                                const InstanceHandle_t handle,
                                                const Time_t source_timestamp);
  
  ReturnCode_t write( const LoadReadingProfile * instance_data, 
                      const InstanceHandle_t  handle);

  ReturnCode_t write_w_timestamp( const LoadReadingProfile * instance_data, 
                                  const InstanceHandle_t handle,
                                  const Time_t source_timestamp);
  
  ReturnCode_t dispose( const LoadReadingProfile * instance_data, 
                        const InstanceHandle_t  instance_handle);
  
  ReturnCode_t dispose_w_timestamp( const LoadReadingProfile * instance_data, 
                                    const InstanceHandle_t  instance_handle, 
                                    const Time_t  source_timestamp);
  
  ReturnCode_t get_key_value( LoadReadingProfile * key_holder, 
                              const InstanceHandle_t  handle);
  
  InstanceHandle_t lookup_instance( const LoadReadingProfile * instance_data);

  static LoadReadingProfileDataWriter * narrow( DataWriter * dw) { return (LoadReadingProfileDataWriter *)dw; }
  LoadReadingProfileDataWriter        * narrow( void )           { return this; }
  
 protected:
 private:

  /* Constructor / Destructor -- use Publisher::create_datawriter() */

  LoadReadingProfileDataWriter();
  ~LoadReadingProfileDataWriter() {};

};

}  /* namespace loadmodule */
/* END SCOPE: loadmodule */
/* START SCOPE: reclosermodule */

namespace reclosermodule {

class RecloserReadingProfileTypeSupport;
/******************************************************************
 *   openfmb::reclosermodule:: RecloserReadingProfile DataWriter Class
 ******************************************************************/
class COREDX_TS_CLASS_EXPORT RecloserReadingProfileDataWriter : public DataWriter
{
  friend class DDS::DomainParticipant;
  friend class RecloserReadingProfileTypeSupport;

public:

  /* DataWriter Meathods */

  InstanceHandle_t register_instance( const RecloserReadingProfile *  instance_data);
  
  InstanceHandle_t register_instance_w_timestamp( const RecloserReadingProfile * instance_data,
                                                  const Time_t source_timestamp);
  
  ReturnCode_t unregister_instance( const RecloserReadingProfile * instance_data, 
                                    const InstanceHandle_t  handle);
  
  ReturnCode_t unregister_instance_w_timestamp( const RecloserReadingProfile * instance_data, 
                                                const InstanceHandle_t handle,
                                                const Time_t source_timestamp);
  
  ReturnCode_t write( const RecloserReadingProfile * instance_data, 
                      const InstanceHandle_t  handle);

  ReturnCode_t write_w_timestamp( const RecloserReadingProfile * instance_data, 
                                  const InstanceHandle_t handle,
                                  const Time_t source_timestamp);
  
  ReturnCode_t dispose( const RecloserReadingProfile * instance_data, 
                        const InstanceHandle_t  instance_handle);
  
  ReturnCode_t dispose_w_timestamp( const RecloserReadingProfile * instance_data, 
                                    const InstanceHandle_t  instance_handle, 
                                    const Time_t  source_timestamp);
  
  ReturnCode_t get_key_value( RecloserReadingProfile * key_holder, 
                              const InstanceHandle_t  handle);
  
  InstanceHandle_t lookup_instance( const RecloserReadingProfile * instance_data);

  static RecloserReadingProfileDataWriter * narrow( DataWriter * dw) { return (RecloserReadingProfileDataWriter *)dw; }
  RecloserReadingProfileDataWriter        * narrow( void )           { return this; }
  
 protected:
 private:

  /* Constructor / Destructor -- use Publisher::create_datawriter() */

  RecloserReadingProfileDataWriter();
  ~RecloserReadingProfileDataWriter() {};

};

}  /* namespace reclosermodule */
/* END SCOPE: reclosermodule */
/* START SCOPE: regulatormodule */

namespace regulatormodule {

class RegulatorReadingProfileTypeSupport;
/******************************************************************
 *   openfmb::regulatormodule:: RegulatorReadingProfile DataWriter Class
 ******************************************************************/
class COREDX_TS_CLASS_EXPORT RegulatorReadingProfileDataWriter : public DataWriter
{
  friend class DDS::DomainParticipant;
  friend class RegulatorReadingProfileTypeSupport;

public:

  /* DataWriter Meathods */

  InstanceHandle_t register_instance( const RegulatorReadingProfile *  instance_data);
  
  InstanceHandle_t register_instance_w_timestamp( const RegulatorReadingProfile * instance_data,
                                                  const Time_t source_timestamp);
  
  ReturnCode_t unregister_instance( const RegulatorReadingProfile * instance_data, 
                                    const InstanceHandle_t  handle);
  
  ReturnCode_t unregister_instance_w_timestamp( const RegulatorReadingProfile * instance_data, 
                                                const InstanceHandle_t handle,
                                                const Time_t source_timestamp);
  
  ReturnCode_t write( const RegulatorReadingProfile * instance_data, 
                      const InstanceHandle_t  handle);

  ReturnCode_t write_w_timestamp( const RegulatorReadingProfile * instance_data, 
                                  const InstanceHandle_t handle,
                                  const Time_t source_timestamp);
  
  ReturnCode_t dispose( const RegulatorReadingProfile * instance_data, 
                        const InstanceHandle_t  instance_handle);
  
  ReturnCode_t dispose_w_timestamp( const RegulatorReadingProfile * instance_data, 
                                    const InstanceHandle_t  instance_handle, 
                                    const Time_t  source_timestamp);
  
  ReturnCode_t get_key_value( RegulatorReadingProfile * key_holder, 
                              const InstanceHandle_t  handle);
  
  InstanceHandle_t lookup_instance( const RegulatorReadingProfile * instance_data);

  static RegulatorReadingProfileDataWriter * narrow( DataWriter * dw) { return (RegulatorReadingProfileDataWriter *)dw; }
  RegulatorReadingProfileDataWriter        * narrow( void )           { return this; }
  
 protected:
 private:

  /* Constructor / Destructor -- use Publisher::create_datawriter() */

  RegulatorReadingProfileDataWriter();
  ~RegulatorReadingProfileDataWriter() {};

};

}  /* namespace regulatormodule */
/* END SCOPE: regulatormodule */
/* START SCOPE: resourcemodule */

namespace resourcemodule {

class ResourceReadingProfileTypeSupport;
/******************************************************************
 *   openfmb::resourcemodule:: ResourceReadingProfile DataWriter Class
 ******************************************************************/
class COREDX_TS_CLASS_EXPORT ResourceReadingProfileDataWriter : public DataWriter
{
  friend class DDS::DomainParticipant;
  friend class ResourceReadingProfileTypeSupport;

public:

  /* DataWriter Meathods */

  InstanceHandle_t register_instance( const ResourceReadingProfile *  instance_data);
  
  InstanceHandle_t register_instance_w_timestamp( const ResourceReadingProfile * instance_data,
                                                  const Time_t source_timestamp);
  
  ReturnCode_t unregister_instance( const ResourceReadingProfile * instance_data, 
                                    const InstanceHandle_t  handle);
  
  ReturnCode_t unregister_instance_w_timestamp( const ResourceReadingProfile * instance_data, 
                                                const InstanceHandle_t handle,
                                                const Time_t source_timestamp);
  
  ReturnCode_t write( const ResourceReadingProfile * instance_data, 
                      const InstanceHandle_t  handle);

  ReturnCode_t write_w_timestamp( const ResourceReadingProfile * instance_data, 
                                  const InstanceHandle_t handle,
                                  const Time_t source_timestamp);
  
  ReturnCode_t dispose( const ResourceReadingProfile * instance_data, 
                        const InstanceHandle_t  instance_handle);
  
  ReturnCode_t dispose_w_timestamp( const ResourceReadingProfile * instance_data, 
                                    const InstanceHandle_t  instance_handle, 
                                    const Time_t  source_timestamp);
  
  ReturnCode_t get_key_value( ResourceReadingProfile * key_holder, 
                              const InstanceHandle_t  handle);
  
  InstanceHandle_t lookup_instance( const ResourceReadingProfile * instance_data);

  static ResourceReadingProfileDataWriter * narrow( DataWriter * dw) { return (ResourceReadingProfileDataWriter *)dw; }
  ResourceReadingProfileDataWriter        * narrow( void )           { return this; }
  
 protected:
 private:

  /* Constructor / Destructor -- use Publisher::create_datawriter() */

  ResourceReadingProfileDataWriter();
  ~ResourceReadingProfileDataWriter() {};

};

}  /* namespace resourcemodule */
/* END SCOPE: resourcemodule */
/* START SCOPE: solarmodule */

namespace solarmodule {

class SolarControlFSCCTypeSupport;
/******************************************************************
 *   openfmb::solarmodule:: SolarControlFSCC DataWriter Class
 ******************************************************************/
class COREDX_TS_CLASS_EXPORT SolarControlFSCCDataWriter : public DataWriter
{
  friend class DDS::DomainParticipant;
  friend class SolarControlFSCCTypeSupport;

public:

  /* DataWriter Meathods */

  InstanceHandle_t register_instance( const SolarControlFSCC *  instance_data);
  
  InstanceHandle_t register_instance_w_timestamp( const SolarControlFSCC * instance_data,
                                                  const Time_t source_timestamp);
  
  ReturnCode_t unregister_instance( const SolarControlFSCC * instance_data, 
                                    const InstanceHandle_t  handle);
  
  ReturnCode_t unregister_instance_w_timestamp( const SolarControlFSCC * instance_data, 
                                                const InstanceHandle_t handle,
                                                const Time_t source_timestamp);
  
  ReturnCode_t write( const SolarControlFSCC * instance_data, 
                      const InstanceHandle_t  handle);

  ReturnCode_t write_w_timestamp( const SolarControlFSCC * instance_data, 
                                  const InstanceHandle_t handle,
                                  const Time_t source_timestamp);
  
  ReturnCode_t dispose( const SolarControlFSCC * instance_data, 
                        const InstanceHandle_t  instance_handle);
  
  ReturnCode_t dispose_w_timestamp( const SolarControlFSCC * instance_data, 
                                    const InstanceHandle_t  instance_handle, 
                                    const Time_t  source_timestamp);
  
  ReturnCode_t get_key_value( SolarControlFSCC * key_holder, 
                              const InstanceHandle_t  handle);
  
  InstanceHandle_t lookup_instance( const SolarControlFSCC * instance_data);

  static SolarControlFSCCDataWriter * narrow( DataWriter * dw) { return (SolarControlFSCCDataWriter *)dw; }
  SolarControlFSCCDataWriter        * narrow( void )           { return this; }
  
 protected:
 private:

  /* Constructor / Destructor -- use Publisher::create_datawriter() */

  SolarControlFSCCDataWriter();
  ~SolarControlFSCCDataWriter() {};

};
class SolarReadingProfileTypeSupport;
/******************************************************************
 *   openfmb::solarmodule:: SolarReadingProfile DataWriter Class
 ******************************************************************/
class COREDX_TS_CLASS_EXPORT SolarReadingProfileDataWriter : public DataWriter
{
  friend class DDS::DomainParticipant;
  friend class SolarReadingProfileTypeSupport;

public:

  /* DataWriter Meathods */

  InstanceHandle_t register_instance( const SolarReadingProfile *  instance_data);
  
  InstanceHandle_t register_instance_w_timestamp( const SolarReadingProfile * instance_data,
                                                  const Time_t source_timestamp);
  
  ReturnCode_t unregister_instance( const SolarReadingProfile * instance_data, 
                                    const InstanceHandle_t  handle);
  
  ReturnCode_t unregister_instance_w_timestamp( const SolarReadingProfile * instance_data, 
                                                const InstanceHandle_t handle,
                                                const Time_t source_timestamp);
  
  ReturnCode_t write( const SolarReadingProfile * instance_data, 
                      const InstanceHandle_t  handle);

  ReturnCode_t write_w_timestamp( const SolarReadingProfile * instance_data, 
                                  const InstanceHandle_t handle,
                                  const Time_t source_timestamp);
  
  ReturnCode_t dispose( const SolarReadingProfile * instance_data, 
                        const InstanceHandle_t  instance_handle);
  
  ReturnCode_t dispose_w_timestamp( const SolarReadingProfile * instance_data, 
                                    const InstanceHandle_t  instance_handle, 
                                    const Time_t  source_timestamp);
  
  ReturnCode_t get_key_value( SolarReadingProfile * key_holder, 
                              const InstanceHandle_t  handle);
  
  InstanceHandle_t lookup_instance( const SolarReadingProfile * instance_data);

  static SolarReadingProfileDataWriter * narrow( DataWriter * dw) { return (SolarReadingProfileDataWriter *)dw; }
  SolarReadingProfileDataWriter        * narrow( void )           { return this; }
  
 protected:
 private:

  /* Constructor / Destructor -- use Publisher::create_datawriter() */

  SolarReadingProfileDataWriter();
  ~SolarReadingProfileDataWriter() {};

};

}  /* namespace solarmodule */
/* END SCOPE: solarmodule */
/* START SCOPE: switchmodule */

namespace switchmodule {

class SwitchReadingProfileTypeSupport;
/******************************************************************
 *   openfmb::switchmodule:: SwitchReadingProfile DataWriter Class
 ******************************************************************/
class COREDX_TS_CLASS_EXPORT SwitchReadingProfileDataWriter : public DataWriter
{
  friend class DDS::DomainParticipant;
  friend class SwitchReadingProfileTypeSupport;

public:

  /* DataWriter Meathods */

  InstanceHandle_t register_instance( const SwitchReadingProfile *  instance_data);
  
  InstanceHandle_t register_instance_w_timestamp( const SwitchReadingProfile * instance_data,
                                                  const Time_t source_timestamp);
  
  ReturnCode_t unregister_instance( const SwitchReadingProfile * instance_data, 
                                    const InstanceHandle_t  handle);
  
  ReturnCode_t unregister_instance_w_timestamp( const SwitchReadingProfile * instance_data, 
                                                const InstanceHandle_t handle,
                                                const Time_t source_timestamp);
  
  ReturnCode_t write( const SwitchReadingProfile * instance_data, 
                      const InstanceHandle_t  handle);

  ReturnCode_t write_w_timestamp( const SwitchReadingProfile * instance_data, 
                                  const InstanceHandle_t handle,
                                  const Time_t source_timestamp);
  
  ReturnCode_t dispose( const SwitchReadingProfile * instance_data, 
                        const InstanceHandle_t  instance_handle);
  
  ReturnCode_t dispose_w_timestamp( const SwitchReadingProfile * instance_data, 
                                    const InstanceHandle_t  instance_handle, 
                                    const Time_t  source_timestamp);
  
  ReturnCode_t get_key_value( SwitchReadingProfile * key_holder, 
                              const InstanceHandle_t  handle);
  
  InstanceHandle_t lookup_instance( const SwitchReadingProfile * instance_data);

  static SwitchReadingProfileDataWriter * narrow( DataWriter * dw) { return (SwitchReadingProfileDataWriter *)dw; }
  SwitchReadingProfileDataWriter        * narrow( void )           { return this; }
  
 protected:
 private:

  /* Constructor / Destructor -- use Publisher::create_datawriter() */

  SwitchReadingProfileDataWriter();
  ~SwitchReadingProfileDataWriter() {};

};

}  /* namespace switchmodule */
/* END SCOPE: switchmodule */

}  /* namespace openfmb */
/* END SCOPE: openfmb */
/* START SCOPE: openfmb */

namespace openfmb {

/* START SCOPE: breakermodule */

namespace breakermodule {

class BreakerReadingProfileTypeSupport;
/******************************************************************
 *   openfmb::breakermodule:: BreakerReadingProfile DataWriter Class
 ******************************************************************/
class COREDX_TS_CLASS_EXPORT BreakerReadingProfileDataWriter : public DataWriter
{
  friend class DDS::DomainParticipant;
  friend class BreakerReadingProfileTypeSupport;

public:

  /* DataWriter Meathods */

  InstanceHandle_t register_instance( const BreakerReadingProfile *  instance_data);
  
  InstanceHandle_t register_instance_w_timestamp( const BreakerReadingProfile * instance_data,
                                                  const Time_t source_timestamp);
  
  ReturnCode_t unregister_instance( const BreakerReadingProfile * instance_data, 
                                    const InstanceHandle_t  handle);
  
  ReturnCode_t unregister_instance_w_timestamp( const BreakerReadingProfile * instance_data, 
                                                const InstanceHandle_t handle,
                                                const Time_t source_timestamp);
  
  ReturnCode_t write( const BreakerReadingProfile * instance_data, 
                      const InstanceHandle_t  handle);

  ReturnCode_t write_w_timestamp( const BreakerReadingProfile * instance_data, 
                                  const InstanceHandle_t handle,
                                  const Time_t source_timestamp);
  
  ReturnCode_t dispose( const BreakerReadingProfile * instance_data, 
                        const InstanceHandle_t  instance_handle);
  
  ReturnCode_t dispose_w_timestamp( const BreakerReadingProfile * instance_data, 
                                    const InstanceHandle_t  instance_handle, 
                                    const Time_t  source_timestamp);
  
  ReturnCode_t get_key_value( BreakerReadingProfile * key_holder, 
                              const InstanceHandle_t  handle);
  
  InstanceHandle_t lookup_instance( const BreakerReadingProfile * instance_data);

  static BreakerReadingProfileDataWriter * narrow( DataWriter * dw) { return (BreakerReadingProfileDataWriter *)dw; }
  BreakerReadingProfileDataWriter        * narrow( void )           { return this; }
  
 protected:
 private:

  /* Constructor / Destructor -- use Publisher::create_datawriter() */

  BreakerReadingProfileDataWriter();
  ~BreakerReadingProfileDataWriter() {};

};

}  /* namespace breakermodule */
/* END SCOPE: breakermodule */
/* START SCOPE: loadmodule */

namespace loadmodule {

class LoadControlProfileTypeSupport;
/******************************************************************
 *   openfmb::loadmodule:: LoadControlProfile DataWriter Class
 ******************************************************************/
class COREDX_TS_CLASS_EXPORT LoadControlProfileDataWriter : public DataWriter
{
  friend class DDS::DomainParticipant;
  friend class LoadControlProfileTypeSupport;

public:

  /* DataWriter Meathods */

  InstanceHandle_t register_instance( const LoadControlProfile *  instance_data);
  
  InstanceHandle_t register_instance_w_timestamp( const LoadControlProfile * instance_data,
                                                  const Time_t source_timestamp);
  
  ReturnCode_t unregister_instance( const LoadControlProfile * instance_data, 
                                    const InstanceHandle_t  handle);
  
  ReturnCode_t unregister_instance_w_timestamp( const LoadControlProfile * instance_data, 
                                                const InstanceHandle_t handle,
                                                const Time_t source_timestamp);
  
  ReturnCode_t write( const LoadControlProfile * instance_data, 
                      const InstanceHandle_t  handle);

  ReturnCode_t write_w_timestamp( const LoadControlProfile * instance_data, 
                                  const InstanceHandle_t handle,
                                  const Time_t source_timestamp);
  
  ReturnCode_t dispose( const LoadControlProfile * instance_data, 
                        const InstanceHandle_t  instance_handle);
  
  ReturnCode_t dispose_w_timestamp( const LoadControlProfile * instance_data, 
                                    const InstanceHandle_t  instance_handle, 
                                    const Time_t  source_timestamp);
  
  ReturnCode_t get_key_value( LoadControlProfile * key_holder, 
                              const InstanceHandle_t  handle);
  
  InstanceHandle_t lookup_instance( const LoadControlProfile * instance_data);

  static LoadControlProfileDataWriter * narrow( DataWriter * dw) { return (LoadControlProfileDataWriter *)dw; }
  LoadControlProfileDataWriter        * narrow( void )           { return this; }
  
 protected:
 private:

  /* Constructor / Destructor -- use Publisher::create_datawriter() */

  LoadControlProfileDataWriter();
  ~LoadControlProfileDataWriter() {};

};

}  /* namespace loadmodule */
/* END SCOPE: loadmodule */
/* START SCOPE: solarmodule */

namespace solarmodule {

class SolarControlProfileTypeSupport;
/******************************************************************
 *   openfmb::solarmodule:: SolarControlProfile DataWriter Class
 ******************************************************************/
class COREDX_TS_CLASS_EXPORT SolarControlProfileDataWriter : public DataWriter
{
  friend class DDS::DomainParticipant;
  friend class SolarControlProfileTypeSupport;

public:

  /* DataWriter Meathods */

  InstanceHandle_t register_instance( const SolarControlProfile *  instance_data);
  
  InstanceHandle_t register_instance_w_timestamp( const SolarControlProfile * instance_data,
                                                  const Time_t source_timestamp);
  
  ReturnCode_t unregister_instance( const SolarControlProfile * instance_data, 
                                    const InstanceHandle_t  handle);
  
  ReturnCode_t unregister_instance_w_timestamp( const SolarControlProfile * instance_data, 
                                                const InstanceHandle_t handle,
                                                const Time_t source_timestamp);
  
  ReturnCode_t write( const SolarControlProfile * instance_data, 
                      const InstanceHandle_t  handle);

  ReturnCode_t write_w_timestamp( const SolarControlProfile * instance_data, 
                                  const InstanceHandle_t handle,
                                  const Time_t source_timestamp);
  
  ReturnCode_t dispose( const SolarControlProfile * instance_data, 
                        const InstanceHandle_t  instance_handle);
  
  ReturnCode_t dispose_w_timestamp( const SolarControlProfile * instance_data, 
                                    const InstanceHandle_t  instance_handle, 
                                    const Time_t  source_timestamp);
  
  ReturnCode_t get_key_value( SolarControlProfile * key_holder, 
                              const InstanceHandle_t  handle);
  
  InstanceHandle_t lookup_instance( const SolarControlProfile * instance_data);

  static SolarControlProfileDataWriter * narrow( DataWriter * dw) { return (SolarControlProfileDataWriter *)dw; }
  SolarControlProfileDataWriter        * narrow( void )           { return this; }
  
 protected:
 private:

  /* Constructor / Destructor -- use Publisher::create_datawriter() */

  SolarControlProfileDataWriter();
  ~SolarControlProfileDataWriter() {};

};

}  /* namespace solarmodule */
/* END SCOPE: solarmodule */

}  /* namespace openfmb */
/* END SCOPE: openfmb */

#endif
