/*
 *  IDL file generated by RTI Connext DDS Enterprise Architect IDL 4 Add-in version 1.0
 *      Enterprise Architect File:  C:\Xtensible\Projects\Duke Energy\2017 OpenFMB work\IEC 61850\OpenFMB 61850 PoC\OpenFMB 61850 PoC - 2017-10-12.eap
 *      Date: 10/12/2017 8:49:17 AM
 */
 
/* ******************************************************************* */
/* Note: No configuration used. Reason: Cannot find file "C:\Program Files (x86)\idl4_ea_extension-1.23\IDL4GeneratorConfig.txt" */

/* ******************************************************************* */
/* These are UML builtin primitive types that are not primitive in IDL */
module UML_Extension { 
    // Place the type declarations below
    typedef string    ErrorUnresolvedType; 
    typedef long long dateTime;
    typedef long long date;
    typedef string token;
    typedef string NMTOKEN;
};

/* ******************************************************************* */
/* These are Types defined in the model */

/* -----  Model: "Model"  ----- */
module openfmb {
    module breakermodule {
        struct BreakerControl;
        struct BreakerControlProfile;
        struct BreakerControlXCBR;
        struct BreakerEvent;
        struct BreakerEventProfile;
        struct BreakerEventXCBR;
        struct BreakerReadingProfile;
        struct BreakerReadingValue;
        struct BreakerStatus;
        struct BreakerStatusProfile;
        struct BreakerStatusXCBR;
    }; /* module breakermodule */

    module commonmodule {
        struct AnalogueValue;
        struct AnalogueValueCtl;
        struct ASG;
        struct BCR;
        enum BehaviourModeKind {
            @value(1)             BehaviourModeKind_on,
            @value(2)             BehaviourModeKind_blocked,
            @value(3)             BehaviourModeKind_test,
            @value(4)             BehaviourModeKind_test_blocked,
            @value(5)             BehaviourModeKind_off
        };
        enum CalcMethodKind {
            @value(11)             CalcMethodKind_P_CLASS,
            @value(12)             CalcMethodKind_M_CLASS
        };
        struct CheckConditions;
        struct CMV;
        struct ControlDPC;
        struct ControlFSCC;
        struct ControlIED;
        struct ControlScheduleFSCH;
        struct ControlValue;
        struct ControlValueSource;
        struct CSG;
        struct DateTimeInterval;
        struct DEL;
        enum DERGeneratorStateKind {
            @value(1)             DERGeneratorStateKind_Not_operating,
            @value(2)             DERGeneratorStateKind_Operating,
            @value(3)             DERGeneratorStateKind_Starting_up,
            @value(4)             DERGeneratorStateKind_Shutting_down,
            @value(5)             DERGeneratorStateKind_At_disconnect_level,
            @value(6)             DERGeneratorStateKind_Ramping_in_power,
            @value(7)             DERGeneratorStateKind_Ramping_in_reactive_power,
            @value(98)             DERGeneratorStateKind_Not_applicable_Unknown,
            @value(99)             DERGeneratorStateKind_Other
        };
        struct ENC_SolarControlKind;
        struct ENG_CalcMethodKind;
        struct ENG_GridConnectModeKind;
        struct ENS_BehaviourModeKind;
        struct ENS_DERGeneratorStateKind;
        struct ENS_SolarStateKind;
        struct EventIED;
        struct EventValue;
        struct EventValueSource;
        struct ForecastIED;
        struct ForecastValue;
        struct ForecastValueSource;
        struct GenerationControlFSCC;
        struct GenerationEventZGEN;
        struct GenerationStatusZGEN;
        enum GridConnectModeKind {
            @value(1)             GridConnectModeKind_CSI,
            @value(2)             GridConnectModeKind_VC_VSI,
            @value(3)             GridConnectModeKind_CC_VSI,
            @value(98)             GridConnectModeKind_none,
            @value(99)             GridConnectModeKind_other,
            @value(2000)             GridConnectModeKind_VSI_PQ,
            @value(2001)             GridConnectModeKind_VSI_VF,
            @value(2002)             GridConnectModeKind_VSI_ISO
        };
        struct IdentifiedObject;
        struct InverterEventAndStatusZGEN;
        struct LogicalNode;
        struct LogicalNodeForControl;
        struct LogicalNodeForEventAndStatus;
        struct MeasurementIED;
        struct MeasurementValue;
        struct MeasurementValueSource;
        struct MV;
        struct ORS;
        struct Point;
        struct ReadingMMTR;
        struct ReadingMMXU;
        struct StatusDPS;
        struct StatusIED;
        struct StatusSPS;
        struct StatusValue;
        struct StatusValueSource;
        struct Unit;
        struct Vector;
        struct WYE;
        enum DbPosKind {
            @value(3)             DbPosKind_invalid,
            @value(2)             DbPosKind_open,
            @value(0)             DbPosKind_transient,
            @value(1)             DbPosKind_closed
        };
        enum SolarControlKind {
            @value(4)             SolarControlKind_powerRequest,
            @value(2)             SolarControlKind_disconnect,
            @value(3)             SolarControlKind_connect,
            @value(0)             SolarControlKind_none,
            @value(1)             SolarControlKind_other
        };
        enum SolarStateKind {
            @value(4)             SolarStateKind_powerRequest,
            @value(2)             SolarStateKind_disconnect,
            @value(3)             SolarStateKind_connect,
            @value(0)             SolarStateKind_none,
            @value(1)             SolarStateKind_other
        };
        enum UnitMultiplierKind {
            @value(2)             UnitMultiplierKind_centi,
            @value(3)             UnitMultiplierKind_deci,
            @value(4)             UnitMultiplierKind_Giga,
            @value(5)             UnitMultiplierKind_kilo,
            @value(8)             UnitMultiplierKind_milli,
            @value(6)             UnitMultiplierKind_Mega,
            @value(7)             UnitMultiplierKind_micro,
            @value(9)             UnitMultiplierKind_nano,
            @value(0)             UnitMultiplierKind_none,
            @value(10)             UnitMultiplierKind_pico,
            @value(11)             UnitMultiplierKind_Tera,
            @value(1)             UnitMultiplierKind_other
        };
        enum UnitSymbolKind {
            @value(5)             UnitSymbolKind_Amp,
            @value(9)             UnitSymbolKind_deg,
            @value(23)             UnitSymbolKind_degC,
            @value(279)             UnitSymbolKind_degF,
            @value(25)             UnitSymbolKind_Farad,
            @value(3)             UnitSymbolKind_gram,
            @value(160)             UnitSymbolKind_hour,
            @value(28)             UnitSymbolKind_Henry,
            @value(33)             UnitSymbolKind_Hz,
            @value(31)             UnitSymbolKind_Joule,
            @value(2)             UnitSymbolKind_meter,
            @value(41)             UnitSymbolKind_m2,
            @value(166)             UnitSymbolKind_m3,
            @value(159)             UnitSymbolKind_min,
            @value(500)             UnitSymbolKind_mph,
            @value(32)             UnitSymbolKind_Newton,
            @value(0)             UnitSymbolKind_none,
            @value(30)             UnitSymbolKind_ohm,
            @value(39)             UnitSymbolKind_Pa,
            @value(10)             UnitSymbolKind_rad,
            @value(53)             UnitSymbolKind_Siemens,
            @value(27)             UnitSymbolKind_sec,
            @value(29)             UnitSymbolKind_V,
            @value(61)             UnitSymbolKind_VA,
            @value(71)             UnitSymbolKind_VAh,
            @value(63)             UnitSymbolKind_VAr,
            @value(73)             UnitSymbolKind_VArh,
            @value(38)             UnitSymbolKind_W,
            @value(72)             UnitSymbolKind_Wh,
            @value(65)             UnitSymbolKind_wPerVA,
            @value(179)             UnitSymbolKind_wPerM2,
            @value(75)             UnitSymbolKind_hzPerS,
            @value(81)             UnitSymbolKind_wPerS,
            @value(100)             UnitSymbolKind_other
        };
        typedef float FLOAT32;
        typedef octet HexBinary16[2];
        typedef long INT32;
        typedef long INT64;
        typedef sequence<string,129> ObjRef;
        typedef octet Quality[2];
        typedef octet Timestamp[8];
        typedef sequence<string,255> Unicode255;
        typedef string uuidType;
        typedef sequence<string,255> VisString255;
    }; /* module commonmodule */

    module essmodule {
        struct ENC_ESSControlKind;
        struct EssControlFSCC;
        struct ESSEvent;
        struct ESSEventProfile;
        struct EssEventZBAT;
        struct ESSEventZGEN;
        struct ESSEventZGLD;
        struct ESSReadingProfile;
        struct ESSReadingValue;
        struct ESSStatus;
        struct ESSStatusProfile;
        struct EssStatusZBAT;
        struct ESSStatusZGEN;
        struct ESSStatusZGLD;
        struct ESSControl;
        struct ESSControlProfile;
        enum ESSControlKind {
            @value(8)             ESSControlKind_powerRequest,
            @value(2)             ESSControlKind_island,
            @value(3)             ESSControlKind_resynchronization,
            @value(4)             ESSControlKind_maintainSOC,
            @value(5)             ESSControlKind_standby,
            @value(6)             ESSControlKind_firm,
            @value(0)             ESSControlKind_none,
            @value(7)             ESSControlKind_loadFollowing,
            @value(1)             ESSControlKind_other
        };
    }; /* module essmodule */

    module generationmodule {
        struct GenerationControl;
        struct GenerationControlProfile;
        struct GenerationEvent;
        struct GenerationEventAndStatusZGEN;
        struct GenerationReadingValue;
        struct GenerationStatus;
        struct GenerationControlScheduleProfile;
        struct GenerationReadingProfile;
        struct GenerationEventProfile;
        struct GenerationStatusProfile;
    }; /* module generationmodule */

    module interconnectionmodule {
        struct PlannedInterconnectionScheduleProfile;
        struct RequestedInterconnectionScheduleProfile;
    }; /* module interconnectionmodule */

    module loadmodule {
        struct LoadControl;
        struct LoadControlFSCC;
        struct LoadControlProfile;
        struct LoadEvent;
        struct LoadEventAndStatusZGLD;
        struct LoadEventProfile;
        struct LoadEventZGLD;
        struct LoadReadingProfile;
        struct LoadReadingValue;
        struct LoadStatus;
        struct LoadStatusProfile;
        struct LoadStatusZGLD;
    }; /* module loadmodule */

    module optimizermodule {
        struct ESSControlScheduleProfileList;
        struct LoadControlScheduleProfileList;
        struct PlannedInterconnectionScheduleProfileList;
        struct PlannedOptimizerScheduleProfile;
        struct RegulatorControlScheduleProfileList;
        struct RequestedInterconnectionScheduleProfileList;
        struct SolarControlScheduleProfileList;
        struct RequestedOptimizerScheduleProfile;
    }; /* module optimizermodule */

    module reclosermodule {
        struct RecloserControl;
        struct RecloserControlProfile;
        struct RecloserControlXCBR;
        struct RecloserEvent;
        struct RecloserEventProfile;
        struct RecloserEventXCBR;
        struct RecloserReadingProfile;
        struct RecloserReadingValue;
        struct RecloserStatus;
        struct RecloserStatusProfile;
        struct RecloserStatusXCBR;
    }; /* module reclosermodule */

    module regulatormodule {
        struct RegulatorReadingProfile;
        struct RegulatorReadingValue;
    }; /* module regulatormodule */

    module resourcemodule {
        struct ResourceReadingProfile;
        struct ResourceReadingValue;
    }; /* module resourcemodule */

    module solarmodule {
        struct SolarControl;
        struct SolarControlFSCC;
        struct SolarControlProfile;
        struct SolarEvent;
        struct SolarEventProfile;
        struct SolarEventZGEN;
        struct SolarReadingProfile;
        struct SolarReadingValue;
        struct SolarStatus;
        struct SolarStatusProfile;
        struct SolarStatusZGEN;
    }; /* module solarmodule */

    module switchmodule {
        struct SwitchControl;
        struct SwitchControlProfile;
        struct SwitchControlXSWI;
        struct SwitchEvent;
        struct SwitchEventProfile;
        struct SwitchEventXSWI;
        struct SwitchReadingProfile;
        struct SwitchReadingValue;
        struct SwitchStatus;
        struct SwitchStatusProfile;
        struct SwitchStatusXSWI;
    }; /* module switchmodule */

}; /* module openfmb */

module openfmb {
    module commonmodule {
        @nested(TRUE) 
        struct AnalogueValue {
            @optional            openfmb::commonmodule::INT32 i;
            @optional            openfmb::commonmodule::FLOAT32 f;
        };
        @nested(TRUE) 
        struct AnalogueValueCtl {
            @optional            openfmb::commonmodule::INT32 i;
            @optional            openfmb::commonmodule::FLOAT32 f;
        };
        struct BCR {
            @optional            openfmb::commonmodule::INT64 actVal;
            openfmb::commonmodule::Quality q;
            @optional            openfmb::commonmodule::Timestamp t;
            @optional            openfmb::commonmodule::UnitSymbolKind units;
        };
        @nested(TRUE) 
        struct CheckConditions {
            @optional            boolean synchroCheck;
            @optional            boolean interlockCheck;
        };
        @nested(TRUE) 
        struct ControlDPC {
            boolean ctlVal;
        };
        @nested(TRUE) 
        struct DateTimeInterval {
            @optional            UML_Extension::dateTime end;
            @optional            UML_Extension::dateTime start;
        };
        @nested(TRUE) 
        struct ENC_SolarControlKind {
            openfmb::commonmodule::Quality q;
            openfmb::commonmodule::Timestamp t;
            @optional            openfmb::commonmodule::SolarControlKind ctlVal;
        };
        @nested(TRUE) 
        struct ENG_CalcMethodKind {
            openfmb::commonmodule::CalcMethodKind setVal;
        };
        @nested(TRUE) 
        struct ENG_GridConnectModeKind {
            openfmb::commonmodule::GridConnectModeKind setVal;
            string setValExtension;
        };
        @nested(TRUE) 
        struct ENS_BehaviourModeKind {
            openfmb::commonmodule::BehaviourModeKind stVal;
            openfmb::commonmodule::Quality q;
            openfmb::commonmodule::Timestamp t;
        };
        @nested(TRUE) 
        struct ENS_DERGeneratorStateKind {
            openfmb::commonmodule::DERGeneratorStateKind stVal;
            openfmb::commonmodule::Quality q;
            openfmb::commonmodule::Timestamp t;
        };
        @nested(TRUE) 
        struct ENS_SolarStateKind {
            openfmb::commonmodule::Quality q;
            openfmb::commonmodule::Timestamp t;
            @optional            openfmb::commonmodule::SolarStateKind stVal;
        };
        @nested(TRUE) 
        struct IdentifiedObject {
            @optional            openfmb::commonmodule::uuidType mRID;
            @optional            string description;
            @optional            string name;
        };
        @nested(TRUE) 
        struct LogicalNode : openfmb::commonmodule::IdentifiedObject {
            octet __dummy_prevent_empty_class_LogicalNode;
        };
        @nested(TRUE) 
        struct LogicalNodeForControl : openfmb::commonmodule::LogicalNode {
            octet __dummy_prevent_empty_class_LogicalNodeForControl;
        };
        @nested(TRUE) 
        struct LogicalNodeForEventAndStatus : openfmb::commonmodule::LogicalNode {
            openfmb::commonmodule::ENS_BehaviourModeKind Beh;
        };
        @nested(TRUE) 
        struct MeasurementValue : openfmb::commonmodule::IdentifiedObject {
            octet __dummy_prevent_empty_class_MeasurementValue;
        };
        @nested(TRUE) 
        struct MeasurementValueSource : openfmb::commonmodule::IdentifiedObject {
            octet __dummy_prevent_empty_class_MeasurementValueSource;
        };
        @nested(TRUE) 
        struct ORS {
            openfmb::commonmodule::ObjRef stVal;
            openfmb::commonmodule::Quality q;
            openfmb::commonmodule::Timestamp t;
        };
        @nested(TRUE) 
        struct Point {
            openfmb::commonmodule::FLOAT32 xVal;
            openfmb::commonmodule::FLOAT32 yVal;
            @optional            openfmb::commonmodule::FLOAT32 zVal;
        };
        @nested(TRUE) 
        struct ReadingMMTR : openfmb::commonmodule::LogicalNode {
            @optional            openfmb::commonmodule::BCR TotVAh;
            @optional            openfmb::commonmodule::BCR TotWh;
            @optional            openfmb::commonmodule::BCR TotVArh;
            @optional            openfmb::commonmodule::BCR SupWh;
            @optional            openfmb::commonmodule::BCR SupVArh;
            @optional            openfmb::commonmodule::BCR DmdWh;
            @optional            openfmb::commonmodule::BCR DmdVArh;
        };
        @nested(TRUE) 
        struct StatusDPS {
            openfmb::commonmodule::DbPosKind stVal;
            openfmb::commonmodule::Quality q;
            openfmb::commonmodule::Timestamp t;
        };
        @nested(TRUE) 
        struct StatusSPS {
            @optional            openfmb::commonmodule::Quality q;
            boolean stVal;
            @optional            openfmb::commonmodule::Timestamp t;
        };
        @nested(TRUE) 
        struct StatusValue : openfmb::commonmodule::IdentifiedObject {
            octet __dummy_prevent_empty_class_StatusValue;
        };
        @nested(TRUE) 
        struct StatusValueSource : openfmb::commonmodule::IdentifiedObject {
            octet __dummy_prevent_empty_class_StatusValueSource;
        };
        @nested(TRUE) 
        struct Unit {
            openfmb::commonmodule::UnitSymbolKind SIUnit;
            @optional            openfmb::commonmodule::UnitMultiplierKind multiplier;
        };
        @nested(TRUE) 
        struct Vector {
            openfmb::commonmodule::AnalogueValue mag;
            @optional            openfmb::commonmodule::AnalogueValue ang;
        };
    }; /* module commonmodule */

    module essmodule {
        struct ENC_ESSControlKind {
            openfmb::commonmodule::Quality q;
            openfmb::commonmodule::Timestamp t;
            @optional            openfmb::essmodule::ESSControlKind ctlVal;
        };
    }; /* module essmodule */

    module generationmodule {
        @nested(TRUE) 
        struct GenerationEventAndStatusZGEN : openfmb::commonmodule::LogicalNodeForEventAndStatus {
            openfmb::commonmodule::ENS_DERGeneratorStateKind GnOpSt;
            @optional            openfmb::commonmodule::StatusSPS GnSynSt;
            @optional            openfmb::commonmodule::StatusSPS ParSt;
            @optional            openfmb::commonmodule::StatusSPS RampLodSw;
            @optional            openfmb::commonmodule::StatusSPS DCPwrSt;
            @optional            openfmb::commonmodule::StatusSPS EmgStop;
            @optional            openfmb::commonmodule::StatusDPS GnCtl;
        };
        @nested(FALSE) 
        struct GenerationControlScheduleProfile {
            octet __dummy_prevent_empty_class_GenerationControlScheduleProfile;
        };
    }; /* module generationmodule */

    module interconnectionmodule {
        @nested(FALSE) 
        struct PlannedInterconnectionScheduleProfile {
            octet __dummy_prevent_empty_class_PlannedInterconnectionScheduleProfile;
        };
        @nested(FALSE) 
        struct RequestedInterconnectionScheduleProfile {
            octet __dummy_prevent_empty_class_RequestedInterconnectionScheduleProfile;
        };
    }; /* module interconnectionmodule */

    module loadmodule {
        @nested(TRUE) 
        struct LoadEventAndStatusZGLD : openfmb::commonmodule::LogicalNodeForEventAndStatus {
            openfmb::commonmodule::ENS_DERGeneratorStateKind LdOpSt;
            @optional            openfmb::commonmodule::StatusSPS RampLodSw;
            @optional            openfmb::commonmodule::StatusSPS Stdby;
            @optional            openfmb::commonmodule::StatusSPS DCPwrSt;
            @optional            openfmb::commonmodule::StatusSPS EmgStop;
            @optional            openfmb::commonmodule::StatusDPS LdCtl;
        };
        @nested(TRUE) 
        struct LoadEventZGLD : openfmb::loadmodule::LoadEventAndStatusZGLD {
            octet __dummy_prevent_empty_class_LoadEventZGLD;
        };
        @nested(TRUE) 
        struct LoadStatusZGLD : openfmb::loadmodule::LoadEventAndStatusZGLD {
            octet __dummy_prevent_empty_class_LoadStatusZGLD;
        };
    }; /* module loadmodule */

    module optimizermodule {
        @nested(TRUE) 
        struct ESSControlScheduleProfileList {
            octet __dummy_prevent_empty_class_ESSControlScheduleProfileList;
        };
        @nested(TRUE) 
        struct LoadControlScheduleProfileList {
            octet __dummy_prevent_empty_class_LoadControlScheduleProfileList;
        };
        @nested(TRUE) 
        struct PlannedInterconnectionScheduleProfileList {
            octet __dummy_prevent_empty_class_PlannedInterconnectionScheduleProfileList;
        };
        @nested(TRUE) 
        struct RegulatorControlScheduleProfileList {
            octet __dummy_prevent_empty_class_RegulatorControlScheduleProfileList;
        };
        @nested(TRUE) 
        struct RequestedInterconnectionScheduleProfileList {
            octet __dummy_prevent_empty_class_RequestedInterconnectionScheduleProfileList;
        };
        @nested(TRUE) 
        struct SolarControlScheduleProfileList {
            octet __dummy_prevent_empty_class_SolarControlScheduleProfileList;
        };
        @nested(FALSE) 
        struct RequestedOptimizerScheduleProfile {
            @optional openfmb::optimizermodule::RegulatorControlScheduleProfileList  regulatorControlScheduleProfileList; 
            @optional openfmb::optimizermodule::SolarControlScheduleProfileList  solarControlScheduleProfileList; 
            @optional openfmb::optimizermodule::LoadControlScheduleProfileList  loadControlScheduleProfileList; 
            @optional openfmb::optimizermodule::RequestedInterconnectionScheduleProfileList  requestedInterconnectionScheduleProfileList; 
            @optional openfmb::optimizermodule::ESSControlScheduleProfileList  essControlScheduleProfileList; 
        };
    }; /* module optimizermodule */

    module reclosermodule {
        @nested(TRUE) 
        struct RecloserControlXCBR : openfmb::commonmodule::LogicalNodeForControl {
            @optional            openfmb::commonmodule::ControlDPC Pos;
        };
        @nested(TRUE) 
        struct RecloserEventXCBR : openfmb::commonmodule::LogicalNodeForEventAndStatus {
            openfmb::commonmodule::StatusDPS Pos;
        };
        @nested(TRUE) 
        struct RecloserStatusXCBR : openfmb::commonmodule::LogicalNodeForEventAndStatus {
            openfmb::commonmodule::StatusDPS Pos;
        };
    }; /* module reclosermodule */

    module switchmodule {
        struct SwitchControlXSWI : openfmb::commonmodule::LogicalNodeForControl {
            @optional            openfmb::commonmodule::ControlDPC Pos;
        };
        @nested(TRUE) 
        struct SwitchEventXSWI : openfmb::commonmodule::LogicalNodeForEventAndStatus {
            openfmb::commonmodule::StatusDPS Pos;
        };
        @nested(TRUE) 
        struct SwitchStatusXSWI : openfmb::commonmodule::LogicalNodeForEventAndStatus {
            openfmb::commonmodule::StatusDPS Pos;
        };
    }; /* module switchmodule */

}; /* module openfmb */

module openfmb {
    module breakermodule {
        @nested(TRUE) 
        struct BreakerControlXCBR : openfmb::commonmodule::LogicalNodeForControl {
            @optional            openfmb::commonmodule::ControlDPC Pos;
        };
        @nested(TRUE) 
        struct BreakerEventXCBR : openfmb::commonmodule::LogicalNodeForEventAndStatus {
            openfmb::commonmodule::StatusDPS Pos;
        };
        @nested(TRUE) 
        struct BreakerStatusXCBR : openfmb::commonmodule::LogicalNodeForEventAndStatus {
            openfmb::commonmodule::StatusDPS Pos;
        };
    }; /* module breakermodule */

    module commonmodule {
        @nested(TRUE) 
        struct ASG {
            openfmb::commonmodule::AnalogueValueCtl setMag;
            @optional            openfmb::commonmodule::Unit units;
        };
        @nested(TRUE) 
        struct CMV {
            openfmb::commonmodule::Vector cVal;
            openfmb::commonmodule::Quality q;
            openfmb::commonmodule::Timestamp t;
            @optional            openfmb::commonmodule::Unit units;
        };
        @nested(TRUE) 
        struct ControlValue : openfmb::commonmodule::IdentifiedObject {
            @optional            boolean modBlk;
        };
        @nested(TRUE) 
        struct ControlValueSource : openfmb::commonmodule::IdentifiedObject {
            octet __dummy_prevent_empty_class_ControlValueSource;
        };
        @nested(TRUE) 
        struct CSG {
            sequence<openfmb::commonmodule::Point> crvPts;
            openfmb::commonmodule::Unit xUnits;
            openfmb::commonmodule::Unit yUnits;
            @optional            openfmb::commonmodule::Unit zUnits;
            openfmb::commonmodule::VisString255 xD;
            @optional            openfmb::commonmodule::Unicode255 xDU;
            openfmb::commonmodule::VisString255 yD;
            @optional            openfmb::commonmodule::Unicode255 yDU;
            @optional            openfmb::commonmodule::VisString255 zD;
            @optional            openfmb::commonmodule::Unicode255 zDU;
        };
        @nested(TRUE) 
        struct DEL {
            @optional            openfmb::commonmodule::CMV phsAB;
            @optional            openfmb::commonmodule::CMV phsBC;
            @optional            openfmb::commonmodule::CMV phsCA;
        };
        @nested(TRUE) 
        struct EventValue : openfmb::commonmodule::IdentifiedObject {
            octet __dummy_prevent_empty_class_EventValue;
        };
        @nested(TRUE) 
        struct EventValueSource : openfmb::commonmodule::IdentifiedObject {
            octet __dummy_prevent_empty_class_EventValueSource;
        };
        @nested(TRUE) 
        struct ForecastValue : openfmb::commonmodule::IdentifiedObject {
            octet __dummy_prevent_empty_class_ForecastValue;
        };
        @nested(TRUE) 
        struct ForecastValueSource : openfmb::commonmodule::IdentifiedObject {
            octet __dummy_prevent_empty_class_ForecastValueSource;
        };
        @nested(TRUE) 
        struct GenerationEventZGEN : openfmb::generationmodule::GenerationEventAndStatusZGEN {
            octet __dummy_prevent_empty_class_GenerationEventZGEN;
        };
        @nested(TRUE) 
        struct GenerationStatusZGEN : openfmb::generationmodule::GenerationEventAndStatusZGEN {
            octet __dummy_prevent_empty_class_GenerationStatusZGEN;
        };
        @nested(TRUE) 
        struct InverterEventAndStatusZGEN : openfmb::commonmodule::LogicalNodeForEventAndStatus {
            openfmb::commonmodule::ENS_DERGeneratorStateKind GnOpSt;
            @optional            openfmb::commonmodule::StatusSPS GnSynSt;
            @optional            openfmb::commonmodule::StatusSPS ParSt;
            @optional            openfmb::commonmodule::StatusSPS RampLodSw;
            @optional            openfmb::commonmodule::StatusSPS DCPwrSt;
            @optional            openfmb::commonmodule::StatusSPS EmgStop;
            @optional            openfmb::commonmodule::StatusDPS GnCtl;
        };
        @nested(TRUE) 
        struct MeasurementIED : openfmb::commonmodule::MeasurementValueSource {
            @key            string sourceApplicationID;
            UML_Extension::dateTime sourceDateTime;
        };
        @nested(TRUE) 
        struct MV {
            openfmb::commonmodule::AnalogueValue mag;
            openfmb::commonmodule::Quality q;
            openfmb::commonmodule::Timestamp t;
            @optional            openfmb::commonmodule::Unit units;
        };
        @nested(TRUE) 
        struct StatusIED : openfmb::commonmodule::StatusValueSource {
            @key            string sourceApplicationID;
            UML_Extension::dateTime sourceDateTime;
        };
        @nested(TRUE) 
        struct WYE {
            @optional            openfmb::commonmodule::CMV phsA;
            @optional            openfmb::commonmodule::CMV phsB;
            @optional            openfmb::commonmodule::CMV phsC;
            @optional            openfmb::commonmodule::CMV neut;
            @optional            openfmb::commonmodule::CMV net;
        };
    }; /* module commonmodule */

    module essmodule {
        struct EssEventZBAT : openfmb::commonmodule::LogicalNodeForEventAndStatus {
            @optional            openfmb::commonmodule::StatusSPS BatHi;
            @optional            openfmb::commonmodule::StatusSPS BatLo;
            @optional            openfmb::commonmodule::MV SocAhr;
            @optional            openfmb::commonmodule::StatusSPS BatSt;
            @optional            openfmb::commonmodule::StatusSPS Stdby;
            @optional            openfmb::commonmodule::ENG_GridConnectModeKind GriMod;
        };
        @nested(TRUE) 
        struct ESSEventZGEN : openfmb::commonmodule::InverterEventAndStatusZGEN {
            octet __dummy_prevent_empty_class_ESSEventZGEN;
        };
        @nested(TRUE) 
        struct ESSEventZGLD : openfmb::loadmodule::LoadEventAndStatusZGLD {
            octet __dummy_prevent_empty_class_ESSEventZGLD;
        };
        struct EssStatusZBAT : openfmb::commonmodule::LogicalNodeForEventAndStatus {
            openfmb::commonmodule::StatusSPS BatSt;
            @optional            openfmb::commonmodule::StatusSPS Stdby;
            @optional            openfmb::commonmodule::ENG_GridConnectModeKind GriMod;
            @optional            openfmb::commonmodule::MV SocAhr;
        };
        @nested(TRUE) 
        struct ESSStatusZGEN : openfmb::commonmodule::InverterEventAndStatusZGEN {
            octet __dummy_prevent_empty_class_ESSStatusZGEN;
        };
        @nested(TRUE) 
        struct ESSStatusZGLD : openfmb::loadmodule::LoadEventAndStatusZGLD {
            octet __dummy_prevent_empty_class_ESSStatusZGLD;
        };
    }; /* module essmodule */

    module generationmodule {
        @nested(TRUE) 
        struct GenerationEvent : openfmb::commonmodule::EventValue {
            @optional openfmb::commonmodule::GenerationEventZGEN  generationEventZGEN; 
        };
        @nested(TRUE) 
        struct GenerationStatus : openfmb::commonmodule::StatusValue {
            @optional @shared openfmb::commonmodule::GenerationStatusZGEN  generationStatusZGEN; 
        };
        @nested(FALSE) 
        struct GenerationStatusProfile : openfmb::commonmodule::StatusIED {
            openfmb::generationmodule::GenerationStatus  generationStatus;
        };
    }; /* module generationmodule */

    module loadmodule {
        @nested(TRUE) 
        struct LoadEvent : openfmb::commonmodule::EventValue {
            @optional openfmb::loadmodule::LoadEventZGLD  loadEventZGLD; 
        };
        @nested(TRUE) 
        struct LoadStatus : openfmb::commonmodule::StatusValue {
            @optional @shared openfmb::loadmodule::LoadStatusZGLD  loadStatusZGLD; 
        };
        @nested(FALSE) 
        struct LoadStatusProfile : openfmb::commonmodule::StatusIED {
            openfmb::loadmodule::LoadStatus  loadStatus;
        };
    }; /* module loadmodule */

    module optimizermodule {
        @nested(FALSE) 
        struct PlannedOptimizerScheduleProfile {
            @optional openfmb::optimizermodule::RegulatorControlScheduleProfileList  regulatorControlScheduleProfileList; 
            @optional openfmb::optimizermodule::SolarControlScheduleProfileList  solarControlScheduleProfileList; 
            @optional openfmb::optimizermodule::PlannedInterconnectionScheduleProfileList  plannedInterconnectionScheduleProfileList; 
            @optional openfmb::optimizermodule::LoadControlScheduleProfileList  loadControlScheduleProfileList; 
            @optional openfmb::optimizermodule::ESSControlScheduleProfileList  essControlScheduleProfileList; 
        };
    }; /* module optimizermodule */

    module reclosermodule {
        @nested(TRUE) 
        struct RecloserControl : openfmb::commonmodule::ControlValue {
            @optional            openfmb::commonmodule::CheckConditions check;
            openfmb::reclosermodule::RecloserControlXCBR  recloserControlXCBR;
        };
        @nested(TRUE) 
        struct RecloserEvent : openfmb::commonmodule::EventValue {
            openfmb::reclosermodule::RecloserEventXCBR  recloserEventXCBR;
        };
        @nested(TRUE) 
        struct RecloserStatus : openfmb::commonmodule::EventValue {
            @optional openfmb::reclosermodule::RecloserStatusXCBR  recloserStatusXCBR; 
        };
    }; /* module reclosermodule */

    module solarmodule {
        struct SolarEventZGEN : openfmb::commonmodule::InverterEventAndStatusZGEN {
            @optional            openfmb::commonmodule::ENG_GridConnectModeKind GriMod;
            openfmb::commonmodule::ENS_SolarStateKind SolarSt;
        };
        struct SolarStatusZGEN : openfmb::commonmodule::InverterEventAndStatusZGEN {
            @optional            openfmb::commonmodule::ENG_GridConnectModeKind GriMod;
            openfmb::commonmodule::ENS_SolarStateKind SolarSt;
        };
    }; /* module solarmodule */

    module switchmodule {
        @nested(TRUE) 
        struct SwitchControl : openfmb::commonmodule::ControlValue {
            @optional            openfmb::commonmodule::CheckConditions check;
            @optional openfmb::switchmodule::SwitchControlXSWI  switchControlXSWI; 
        };
        @nested(TRUE) 
        struct SwitchEvent : openfmb::commonmodule::EventValue {
            openfmb::switchmodule::SwitchEventXSWI  switchEventXCBR;
        };
        @nested(TRUE) 
        struct SwitchStatus : openfmb::commonmodule::StatusValue {
            openfmb::switchmodule::SwitchStatusXSWI  switchStatusXCBR;
        };
    }; /* module switchmodule */

}; /* module openfmb */

module openfmb {
    module breakermodule {
        @nested(TRUE) 
        struct BreakerControl : openfmb::commonmodule::ControlValue {
            @optional            openfmb::commonmodule::CheckConditions check;
            openfmb::breakermodule::BreakerControlXCBR  breakerControlXCBR;
        };
        @nested(TRUE) 
        struct BreakerEvent : openfmb::commonmodule::EventValue {
            openfmb::breakermodule::BreakerEventXCBR  breakerEventXCBR;
        };
        @nested(TRUE) 
        struct BreakerStatus : openfmb::commonmodule::EventValue {
            @optional openfmb::breakermodule::BreakerStatusXCBR  breakerStatusXCBR; 
        };
    }; /* module breakermodule */

    module commonmodule {
        @nested(TRUE) 
        struct ControlIED : openfmb::commonmodule::ControlValueSource {
            string sourceApplicationID;
            UML_Extension::dateTime sourceDateTime;
        };
        @nested(TRUE) 
        struct ControlScheduleFSCH {
            openfmb::commonmodule::CSG ValACSG;
        };
        @nested(TRUE) 
        struct EventIED : openfmb::commonmodule::EventValueSource {
            @key            string sourceApplicationID;
            UML_Extension::dateTime sourceDateTime;
        };
        @nested(TRUE) 
        struct ForecastIED : openfmb::commonmodule::ForecastValueSource {
            string sourceApplicationID;
            UML_Extension::dateTime sourceDateTime;
        };
        @nested(TRUE) 
        struct ReadingMMXU : openfmb::commonmodule::LogicalNode {
            @optional            openfmb::commonmodule::MV Hz;
            @optional            openfmb::commonmodule::DEL PPV;
            @optional            openfmb::commonmodule::ENG_CalcMethodKind ClcMth;
            @optional            openfmb::commonmodule::WYE PhV;
            @optional            openfmb::commonmodule::WYE A;
            @optional            openfmb::commonmodule::WYE W;
            @optional            openfmb::commonmodule::WYE VAr;
            @optional            openfmb::commonmodule::WYE VA;
        };
    }; /* module commonmodule */

    module essmodule {
        @nested(TRUE) 
        struct ESSEvent : openfmb::commonmodule::EventValue {
            @optional openfmb::essmodule::EssEventZBAT  essEventZBAT; 
            @optional openfmb::essmodule::ESSEventZGEN  essEventZGEN; 
            @optional openfmb::essmodule::ESSEventZGLD  essEventZGLD; 
        };
        @nested(FALSE) 
        struct ESSEventProfile : openfmb::commonmodule::EventIED {
            openfmb::essmodule::ESSEvent  essEvent;
        };
        struct ESSReadingValue : openfmb::commonmodule::MeasurementValue {
            @optional            string terminalID;
            @optional openfmb::commonmodule::ReadingMMXU  readingMMXU; 
            @optional openfmb::commonmodule::ReadingMMTR  readingMMTR; 
        };
        @nested(TRUE) 
        struct ESSStatus : openfmb::commonmodule::StatusValue {
            @optional openfmb::essmodule::EssStatusZBAT  essStatusZBAT; 
            @optional @shared openfmb::essmodule::ESSStatusZGEN  essStatusZGEN; 
            @optional openfmb::essmodule::ESSStatusZGLD  essStatusZGLD; 
        };
        @nested(FALSE) 
        struct ESSStatusProfile : openfmb::commonmodule::StatusIED {
            openfmb::essmodule::ESSStatus  essStatus;
        };
    }; /* module essmodule */

    module generationmodule {
        struct GenerationReadingValue : openfmb::commonmodule::MeasurementValue {
            @optional            string terminalID;
            @optional openfmb::commonmodule::ReadingMMXU  readingMMXU; 
            @optional openfmb::commonmodule::ReadingMMTR  readingMMTR; 
        };
        @nested(FALSE) 
        struct GenerationReadingProfile : openfmb::commonmodule::MeasurementIED {
            sequence<openfmb::generationmodule::GenerationReadingValue>  generationReadingValue;
        };
        @nested(FALSE) 
        struct GenerationEventProfile : openfmb::commonmodule::EventIED {
            openfmb::generationmodule::GenerationEvent  generationEvent;
        };
    }; /* module generationmodule */

    module loadmodule {
        @nested(FALSE) 
        struct LoadEventProfile : openfmb::commonmodule::EventIED {
            openfmb::loadmodule::LoadEvent  loadEvent;
        };
        struct LoadReadingValue : openfmb::commonmodule::MeasurementValue {
            @optional            string terminalID;
            @optional openfmb::commonmodule::ReadingMMXU  readingMMXU; 
            @optional openfmb::commonmodule::ReadingMMTR  readingMMTR; 
        };
    }; /* module loadmodule */

    module reclosermodule {
        @nested(FALSE) 
        struct RecloserControlProfile : openfmb::commonmodule::ControlIED {
            @key            string targetBreakerSystemID;
            openfmb::reclosermodule::RecloserControl  recloserControl;
        };
        @nested(FALSE) 
        struct RecloserEventProfile : openfmb::commonmodule::EventIED {
            openfmb::reclosermodule::RecloserEvent  recloserEvent;
        };
        struct RecloserReadingValue : openfmb::commonmodule::MeasurementValue {
            @optional            string terminalID;
            @optional openfmb::commonmodule::ReadingMMXU  readingMMXU; 
            @optional openfmb::commonmodule::ReadingMMTR  readingMMTR; 
        };
        @nested(FALSE) 
        struct RecloserStatusProfile : openfmb::commonmodule::EventIED {
            @optional openfmb::reclosermodule::RecloserStatus  recloserStatus; 
        };
    }; /* module reclosermodule */

    module regulatormodule {
        struct RegulatorReadingValue : openfmb::commonmodule::MeasurementValue {
            @optional            string terminalID;
            @optional openfmb::commonmodule::ReadingMMXU  readingMMXU; 
            @optional openfmb::commonmodule::ReadingMMTR  readingMMTR; 
        };
    }; /* module regulatormodule */

    module resourcemodule {
        struct ResourceReadingValue : openfmb::commonmodule::MeasurementValue {
            @optional            string terminalID;
            @optional openfmb::commonmodule::ReadingMMXU  readingMMXU; 
            @optional openfmb::commonmodule::ReadingMMTR  readingMMTR; 
        };
    }; /* module resourcemodule */

    module solarmodule {
        @nested(TRUE) 
        struct SolarEvent : openfmb::commonmodule::EventValue {
            @optional openfmb::solarmodule::SolarEventZGEN  solarEventZGEN; 
        };
        @nested(FALSE) 
        struct SolarEventProfile : openfmb::commonmodule::StatusIED {
            @optional openfmb::solarmodule::SolarEvent  solarEvent; 
        };
        struct SolarReadingValue : openfmb::commonmodule::MeasurementValue {
            @optional            string terminalID;
            @optional openfmb::commonmodule::ReadingMMXU  readingMMXU; 
            @optional openfmb::commonmodule::ReadingMMTR  readingMMTR; 
        };
        @nested(TRUE) 
        struct SolarStatus : openfmb::commonmodule::StatusValue {
            @optional openfmb::solarmodule::SolarStatusZGEN  solarStatusZGEN; 
        };
        @nested(FALSE) 
        struct SolarStatusProfile : openfmb::commonmodule::StatusIED {
            @optional openfmb::solarmodule::SolarStatus  solarStatus; 
        };
    }; /* module solarmodule */

    module switchmodule {
        @nested(FALSE) 
        struct SwitchControlProfile : openfmb::commonmodule::ControlIED {
            @key            string targetSwitchSystemID;
            openfmb::switchmodule::SwitchControl  switchControl;
        };
        @nested(FALSE) 
        struct SwitchEventProfile : openfmb::commonmodule::EventIED {
            openfmb::switchmodule::SwitchEvent  switchEvent;
        };
        struct SwitchReadingValue : openfmb::commonmodule::MeasurementValue {
            @optional            string terminalID;
            @optional openfmb::commonmodule::ReadingMMXU  readingMMXU; 
            @optional openfmb::commonmodule::ReadingMMTR  readingMMTR; 
        };
        @nested(FALSE) 
        struct SwitchStatusProfile : openfmb::commonmodule::EventIED {
            openfmb::switchmodule::SwitchStatus  switchStatus;
        };
    }; /* module switchmodule */

}; /* module openfmb */

module openfmb {
    module breakermodule {
        @nested(FALSE) 
        struct BreakerControlProfile : openfmb::commonmodule::ControlIED {
            @key            string targetBreakerSystemID;
            openfmb::breakermodule::BreakerControl  breakerControl;
        };
        @nested(FALSE) 
        struct BreakerEventProfile : openfmb::commonmodule::EventIED {
            openfmb::breakermodule::BreakerEvent  breakerEvent;
        };
        struct BreakerReadingValue : openfmb::commonmodule::MeasurementValue {
            @optional            string terminalID;
            @optional openfmb::commonmodule::ReadingMMXU  readingMMXU; 
            @optional openfmb::commonmodule::ReadingMMTR  readingMMTR; 
        };
        @nested(FALSE) 
        struct BreakerStatusProfile : openfmb::commonmodule::EventIED {
            @optional openfmb::breakermodule::BreakerStatus  breakerStatus; 
        };
    }; /* module breakermodule */

    module commonmodule {
        @nested(TRUE) 
        struct ControlFSCC : openfmb::commonmodule::LogicalNodeForControl {
            @optional            openfmb::commonmodule::ASG WRtg;
            @optional            openfmb::commonmodule::ASG VARtg;
            @optional @shared openfmb::commonmodule::ControlScheduleFSCH  controlScheduleFSCH; 
        };
        @nested(TRUE) 
        struct GenerationControlFSCC : openfmb::commonmodule::ControlFSCC {
            @optional            openfmb::commonmodule::ControlDPC GnCtl;
        };
    }; /* module commonmodule */

    module essmodule {
        struct EssControlFSCC : openfmb::commonmodule::ControlFSCC {
            openfmb::essmodule::ENC_ESSControlKind ESSControlMod;
        };
        @nested(FALSE) 
        struct ESSReadingProfile : openfmb::commonmodule::MeasurementIED {
            sequence<openfmb::essmodule::ESSReadingValue>  essReadingValue;
        };
        @nested(FALSE) 
        struct ESSControl : openfmb::commonmodule::ControlValue {
            @optional            openfmb::commonmodule::CheckConditions check;
            openfmb::essmodule::EssControlFSCC  essControlFSCC;
        };
        @nested(FALSE) 
        struct ESSControlProfile : openfmb::commonmodule::ControlIED {
            @key            string targetESSSystemID;
            openfmb::essmodule::ESSControl  essControl;
        };
    }; /* module essmodule */

    module generationmodule {
        @nested(TRUE) 
        struct GenerationControl : openfmb::commonmodule::ControlValue {
            @optional            openfmb::commonmodule::CheckConditions check;
            openfmb::commonmodule::GenerationControlFSCC  generationControlFSCC;
        };
        @nested(FALSE) 
        struct GenerationControlProfile : openfmb::commonmodule::ControlIED {
            @key            string targetGenerationSystemID;
            openfmb::generationmodule::GenerationControl  generationControl;
        };
    }; /* module generationmodule */

    module loadmodule {
        struct LoadControlFSCC : openfmb::commonmodule::ControlFSCC {
            octet __dummy_prevent_empty_class_LoadControlFSCC;
        };
        @nested(FALSE) 
        struct LoadReadingProfile : openfmb::commonmodule::MeasurementIED {
            sequence<openfmb::loadmodule::LoadReadingValue>  loadReadingValue;
        };
    }; /* module loadmodule */

    module reclosermodule {
        @nested(FALSE) 
        struct RecloserReadingProfile : openfmb::commonmodule::MeasurementIED {
            sequence<openfmb::reclosermodule::RecloserReadingValue>  recloserReadingValue;
        };
    }; /* module reclosermodule */

    module regulatormodule {
        @nested(FALSE) 
        struct RegulatorReadingProfile : openfmb::commonmodule::MeasurementIED {
            sequence<openfmb::regulatormodule::RegulatorReadingValue>  regulatorReadingValue;
        };
    }; /* module regulatormodule */

    module resourcemodule {
        struct ResourceReadingProfile : openfmb::commonmodule::MeasurementIED {
            sequence<openfmb::resourcemodule::ResourceReadingValue>  resourceReadingValue;
        };
    }; /* module resourcemodule */

    module solarmodule {
        struct SolarControlFSCC : openfmb::commonmodule::ControlFSCC {
            openfmb::commonmodule::ENC_SolarControlKind SolarControlMod;
        };
        @nested(FALSE) 
        struct SolarReadingProfile : openfmb::commonmodule::MeasurementIED {
            sequence<openfmb::solarmodule::SolarReadingValue>  solarReadingValue;
        };
    }; /* module solarmodule */

    module switchmodule {
        @nested(FALSE) 
        struct SwitchReadingProfile : openfmb::commonmodule::MeasurementIED {
            sequence<openfmb::switchmodule::SwitchReadingValue>  switchReadingValue;
        };
    }; /* module switchmodule */

}; /* module openfmb */

module openfmb {
    module breakermodule {
        @nested(FALSE) 
        struct BreakerReadingProfile : openfmb::commonmodule::MeasurementIED {
            sequence<openfmb::breakermodule::BreakerReadingValue>  breakerReadingValue;
        };
    }; /* module breakermodule */

    module loadmodule {
        @nested(TRUE) 
        struct LoadControl : openfmb::commonmodule::ControlValue {
            @optional            openfmb::commonmodule::CheckConditions check;
            openfmb::loadmodule::LoadControlFSCC  loadControlFSCC;
        };
        @nested(FALSE) 
        struct LoadControlProfile : openfmb::commonmodule::ControlIED {
            @key            string targetLoadSystemID;
            openfmb::loadmodule::LoadControl  loadControl;
        };
    }; /* module loadmodule */

    module solarmodule {
        @nested(TRUE) 
        struct SolarControl : openfmb::commonmodule::ControlValue {
            @optional            openfmb::commonmodule::CheckConditions check;
            @optional openfmb::solarmodule::SolarControlFSCC  solarControlFSCC; 
        };
        @nested(FALSE) 
        struct SolarControlProfile : openfmb::commonmodule::ControlIED {
            @key            string targetSolarSystemID;
            openfmb::solarmodule::SolarControl  solarControl;
        };
    }; /* module solarmodule */

}; /* module openfmb */

