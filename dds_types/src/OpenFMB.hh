/********************************************
 * DDS type specific header file.           *
 * Autogenerated by CoreDX DDL compiler.    *
 * Do no edit - edits may be overwritten.   *
 ********************************************/

#ifndef _OPENFMB_HH
#define _OPENFMB_HH
#include <string.h>
#include <dds/dds.hh>
#include <dds/dds_marsh.h>
#ifdef _MSC_VER
#  pragma warning(push)
#  pragma warning(disable:4251)
#  pragma warning(disable:4996)
#endif

#  define  OPENFMB_DDL_VERSION_MAJOR       4
#  define  OPENFMB_DDL_VERSION_MINOR       0
#  define  OPENFMB_DDL_VERSION_PATCH       6
#  define  OPENFMB_DDL_VERSION_MAJOR_STR  "4"
#  define  OPENFMB_DDL_VERSION_MINOR_STR  "0"
#  define  OPENFMB_DDL_VERSION_PATCH_STR  "6"


  namespace UML_Extension {

    typedef char * ErrorUnresolvedType; /* ns: UML_Extension:: */

    typedef int64_t dateTime; /* ns: UML_Extension:: */

    typedef int64_t date; /* ns: UML_Extension:: */

    typedef char * token; /* ns: UML_Extension:: */

    typedef char * NMTOKEN; /* ns: UML_Extension:: */


  }  /* namespace UML_Extension */

  namespace openfmb {


    namespace breakermodule {

      /* forward decl: openfmb::breakermodule::BreakerControl */
      struct COREDX_TS_STRUCT_EXPORT BreakerControl;
      /* forward decl: openfmb::breakermodule::BreakerControlProfile */
      struct COREDX_TS_STRUCT_EXPORT BreakerControlProfile;
      /* forward decl: openfmb::breakermodule::BreakerControlXCBR */
      struct COREDX_TS_STRUCT_EXPORT BreakerControlXCBR;
      /* forward decl: openfmb::breakermodule::BreakerEvent */
      struct COREDX_TS_STRUCT_EXPORT BreakerEvent;
      /* forward decl: openfmb::breakermodule::BreakerEventProfile */
      struct COREDX_TS_STRUCT_EXPORT BreakerEventProfile;
      /* forward decl: openfmb::breakermodule::BreakerEventXCBR */
      struct COREDX_TS_STRUCT_EXPORT BreakerEventXCBR;
      /* forward decl: openfmb::breakermodule::BreakerReadingProfile */
      struct COREDX_TS_STRUCT_EXPORT BreakerReadingProfile;
      /* forward decl: openfmb::breakermodule::BreakerReadingValue */
      struct COREDX_TS_STRUCT_EXPORT BreakerReadingValue;
      /* forward decl: openfmb::breakermodule::BreakerStatus */
      struct COREDX_TS_STRUCT_EXPORT BreakerStatus;
      /* forward decl: openfmb::breakermodule::BreakerStatusProfile */
      struct COREDX_TS_STRUCT_EXPORT BreakerStatusProfile;
      /* forward decl: openfmb::breakermodule::BreakerStatusXCBR */
      struct COREDX_TS_STRUCT_EXPORT BreakerStatusXCBR;

    }  /* namespace breakermodule */

    namespace commonmodule {

      /* forward decl: openfmb::commonmodule::AnalogueValue */
      struct COREDX_TS_STRUCT_EXPORT AnalogueValue;
      /* forward decl: openfmb::commonmodule::AnalogueValueCtl */
      struct COREDX_TS_STRUCT_EXPORT AnalogueValueCtl;
      /* forward decl: openfmb::commonmodule::ASG */
      struct COREDX_TS_STRUCT_EXPORT ASG;
      /* forward decl: openfmb::commonmodule::BCR */
      struct COREDX_TS_STRUCT_EXPORT BCR;

      enum BehaviourModeKind { //unsigned int
        BehaviourModeKind_on = 1, 
        BehaviourModeKind_blocked = 2, 
        BehaviourModeKind_test = 3, 
        BehaviourModeKind_test_blocked = 4, 
        BehaviourModeKind_off = 5
 };


      enum CalcMethodKind { //unsigned int
        CalcMethodKind_P_CLASS = 11, 
        CalcMethodKind_M_CLASS = 12
 };

      /* forward decl: openfmb::commonmodule::CheckConditions */
      struct COREDX_TS_STRUCT_EXPORT CheckConditions;
      /* forward decl: openfmb::commonmodule::CMV */
      struct COREDX_TS_STRUCT_EXPORT CMV;
      /* forward decl: openfmb::commonmodule::ControlDPC */
      struct COREDX_TS_STRUCT_EXPORT ControlDPC;
      /* forward decl: openfmb::commonmodule::ControlFSCC */
      struct COREDX_TS_STRUCT_EXPORT ControlFSCC;
      /* forward decl: openfmb::commonmodule::ControlIED */
      struct COREDX_TS_STRUCT_EXPORT ControlIED;
      /* forward decl: openfmb::commonmodule::ControlScheduleFSCH */
      struct COREDX_TS_STRUCT_EXPORT ControlScheduleFSCH;
      /* forward decl: openfmb::commonmodule::ControlValue */
      struct COREDX_TS_STRUCT_EXPORT ControlValue;
      /* forward decl: openfmb::commonmodule::ControlValueSource */
      struct COREDX_TS_STRUCT_EXPORT ControlValueSource;
      /* forward decl: openfmb::commonmodule::CSG */
      struct COREDX_TS_STRUCT_EXPORT CSG;
      /* forward decl: openfmb::commonmodule::DateTimeInterval */
      struct COREDX_TS_STRUCT_EXPORT DateTimeInterval;
      /* forward decl: openfmb::commonmodule::DEL */
      struct COREDX_TS_STRUCT_EXPORT DEL;

      enum DERGeneratorStateKind { //unsigned int
        DERGeneratorStateKind_Not_operating = 1, 
        DERGeneratorStateKind_Operating = 2, 
        DERGeneratorStateKind_Starting_up = 3, 
        DERGeneratorStateKind_Shutting_down = 4, 
        DERGeneratorStateKind_At_disconnect_level = 5, 
        DERGeneratorStateKind_Ramping_in_power = 6, 
        DERGeneratorStateKind_Ramping_in_reactive_power = 7, 
        DERGeneratorStateKind_Not_applicable_Unknown = 98, 
        DERGeneratorStateKind_Other = 99
 };

      /* forward decl: openfmb::commonmodule::ENC_SolarControlKind */
      struct COREDX_TS_STRUCT_EXPORT ENC_SolarControlKind;
      /* forward decl: openfmb::commonmodule::ENG_CalcMethodKind */
      struct COREDX_TS_STRUCT_EXPORT ENG_CalcMethodKind;
      /* forward decl: openfmb::commonmodule::ENG_GridConnectModeKind */
      struct COREDX_TS_STRUCT_EXPORT ENG_GridConnectModeKind;
      /* forward decl: openfmb::commonmodule::ENS_BehaviourModeKind */
      struct COREDX_TS_STRUCT_EXPORT ENS_BehaviourModeKind;
      /* forward decl: openfmb::commonmodule::ENS_DERGeneratorStateKind */
      struct COREDX_TS_STRUCT_EXPORT ENS_DERGeneratorStateKind;
      /* forward decl: openfmb::commonmodule::ENS_SolarStateKind */
      struct COREDX_TS_STRUCT_EXPORT ENS_SolarStateKind;
      /* forward decl: openfmb::commonmodule::EventIED */
      struct COREDX_TS_STRUCT_EXPORT EventIED;
      /* forward decl: openfmb::commonmodule::EventValue */
      struct COREDX_TS_STRUCT_EXPORT EventValue;
      /* forward decl: openfmb::commonmodule::EventValueSource */
      struct COREDX_TS_STRUCT_EXPORT EventValueSource;
      /* forward decl: openfmb::commonmodule::ForecastIED */
      struct COREDX_TS_STRUCT_EXPORT ForecastIED;
      /* forward decl: openfmb::commonmodule::ForecastValue */
      struct COREDX_TS_STRUCT_EXPORT ForecastValue;
      /* forward decl: openfmb::commonmodule::ForecastValueSource */
      struct COREDX_TS_STRUCT_EXPORT ForecastValueSource;
      /* forward decl: openfmb::commonmodule::GenerationControlFSCC */
      struct COREDX_TS_STRUCT_EXPORT GenerationControlFSCC;
      /* forward decl: openfmb::commonmodule::GenerationEventZGEN */
      struct COREDX_TS_STRUCT_EXPORT GenerationEventZGEN;
      /* forward decl: openfmb::commonmodule::GenerationStatusZGEN */
      struct COREDX_TS_STRUCT_EXPORT GenerationStatusZGEN;

      enum GridConnectModeKind { //unsigned int
        GridConnectModeKind_CSI = 1, 
        GridConnectModeKind_VC_VSI = 2, 
        GridConnectModeKind_CC_VSI = 3, 
        GridConnectModeKind_none = 98, 
        GridConnectModeKind_other = 99, 
        GridConnectModeKind_VSI_PQ = 2000, 
        GridConnectModeKind_VSI_VF = 2001, 
        GridConnectModeKind_VSI_ISO = 2002
 };

      /* forward decl: openfmb::commonmodule::IdentifiedObject */
      struct COREDX_TS_STRUCT_EXPORT IdentifiedObject;
      /* forward decl: openfmb::commonmodule::InverterEventAndStatusZGEN */
      struct COREDX_TS_STRUCT_EXPORT InverterEventAndStatusZGEN;
      /* forward decl: openfmb::commonmodule::LogicalNode */
      struct COREDX_TS_STRUCT_EXPORT LogicalNode;
      /* forward decl: openfmb::commonmodule::LogicalNodeForControl */
      struct COREDX_TS_STRUCT_EXPORT LogicalNodeForControl;
      /* forward decl: openfmb::commonmodule::LogicalNodeForEventAndStatus */
      struct COREDX_TS_STRUCT_EXPORT LogicalNodeForEventAndStatus;
      /* forward decl: openfmb::commonmodule::MeasurementIED */
      struct COREDX_TS_STRUCT_EXPORT MeasurementIED;
      /* forward decl: openfmb::commonmodule::MeasurementValue */
      struct COREDX_TS_STRUCT_EXPORT MeasurementValue;
      /* forward decl: openfmb::commonmodule::MeasurementValueSource */
      struct COREDX_TS_STRUCT_EXPORT MeasurementValueSource;
      /* forward decl: openfmb::commonmodule::MV */
      struct COREDX_TS_STRUCT_EXPORT MV;
      /* forward decl: openfmb::commonmodule::ORS */
      struct COREDX_TS_STRUCT_EXPORT ORS;
      /* forward decl: openfmb::commonmodule::Point */
      struct COREDX_TS_STRUCT_EXPORT Point;
      /* forward decl: openfmb::commonmodule::ReadingMMTR */
      struct COREDX_TS_STRUCT_EXPORT ReadingMMTR;
      /* forward decl: openfmb::commonmodule::ReadingMMXU */
      struct COREDX_TS_STRUCT_EXPORT ReadingMMXU;
      /* forward decl: openfmb::commonmodule::StatusDPS */
      struct COREDX_TS_STRUCT_EXPORT StatusDPS;
      /* forward decl: openfmb::commonmodule::StatusIED */
      struct COREDX_TS_STRUCT_EXPORT StatusIED;
      /* forward decl: openfmb::commonmodule::StatusSPS */
      struct COREDX_TS_STRUCT_EXPORT StatusSPS;
      /* forward decl: openfmb::commonmodule::StatusValue */
      struct COREDX_TS_STRUCT_EXPORT StatusValue;
      /* forward decl: openfmb::commonmodule::StatusValueSource */
      struct COREDX_TS_STRUCT_EXPORT StatusValueSource;
      /* forward decl: openfmb::commonmodule::Unit */
      struct COREDX_TS_STRUCT_EXPORT Unit;
      /* forward decl: openfmb::commonmodule::Vector */
      struct COREDX_TS_STRUCT_EXPORT Vector;
      /* forward decl: openfmb::commonmodule::WYE */
      struct COREDX_TS_STRUCT_EXPORT WYE;

      enum DbPosKind { //unsigned int
        DbPosKind_invalid = 3, 
        DbPosKind_open = 2, 
        DbPosKind_transient = 0, 
        DbPosKind_closed = 1
 };


      enum SolarControlKind { //unsigned int
        SolarControlKind_powerRequest = 4, 
        SolarControlKind_disconnect = 2, 
        SolarControlKind_connect = 3, 
        SolarControlKind_none = 0, 
        SolarControlKind_other = 1
 };


      enum SolarStateKind { //unsigned int
        SolarStateKind_powerRequest = 4, 
        SolarStateKind_disconnect = 2, 
        SolarStateKind_connect = 3, 
        SolarStateKind_none = 0, 
        SolarStateKind_other = 1
 };


      enum UnitMultiplierKind { //unsigned int
        UnitMultiplierKind_centi = 2, 
        UnitMultiplierKind_deci = 3, 
        UnitMultiplierKind_Giga = 4, 
        UnitMultiplierKind_kilo = 5, 
        UnitMultiplierKind_milli = 8, 
        UnitMultiplierKind_Mega = 6, 
        UnitMultiplierKind_micro = 7, 
        UnitMultiplierKind_nano = 9, 
        UnitMultiplierKind_none = 0, 
        UnitMultiplierKind_pico = 10, 
        UnitMultiplierKind_Tera = 11, 
        UnitMultiplierKind_other = 1
 };


      enum UnitSymbolKind { //unsigned int
        UnitSymbolKind_Amp = 5, 
        UnitSymbolKind_deg = 9, 
        UnitSymbolKind_degC = 23, 
        UnitSymbolKind_degF = 279, 
        UnitSymbolKind_Farad = 25, 
        UnitSymbolKind_gram = 3, 
        UnitSymbolKind_hour = 160, 
        UnitSymbolKind_Henry = 28, 
        UnitSymbolKind_Hz = 33, 
        UnitSymbolKind_Joule = 31, 
        UnitSymbolKind_meter = 2, 
        UnitSymbolKind_m2 = 41, 
        UnitSymbolKind_m3 = 166, 
        UnitSymbolKind_min = 159, 
        UnitSymbolKind_mph = 500, 
        UnitSymbolKind_Newton = 32, 
        UnitSymbolKind_none = 0, 
        UnitSymbolKind_ohm = 30, 
        UnitSymbolKind_Pa = 39, 
        UnitSymbolKind_rad = 10, 
        UnitSymbolKind_Siemens = 53, 
        UnitSymbolKind_sec = 27, 
        UnitSymbolKind_V = 29, 
        UnitSymbolKind_VA = 61, 
        UnitSymbolKind_VAh = 71, 
        UnitSymbolKind_VAr = 63, 
        UnitSymbolKind_VArh = 73, 
        UnitSymbolKind_W = 38, 
        UnitSymbolKind_Wh = 72, 
        UnitSymbolKind_wPerVA = 65, 
        UnitSymbolKind_wPerM2 = 179, 
        UnitSymbolKind_hzPerS = 75, 
        UnitSymbolKind_wPerS = 81, 
        UnitSymbolKind_other = 100
 };

      typedef float FLOAT32; /* ns: openfmb::commonmodule:: */

      typedef unsigned char HexBinary16[2];
      typedef unsigned char HexBinary16_slice;
      typedef int INT32; /* ns: openfmb::commonmodule:: */

      typedef int INT64; /* ns: openfmb::commonmodule:: */

#ifndef _DDS_SEQ_cpp_openfmb_commonmodule_openfmb_commonmodule_stringSeq_defined
#define _DDS_SEQ_cpp_openfmb_commonmodule_openfmb_commonmodule_stringSeq_defined
      DECLARE_CPP_UNBOUNDED_SEQ( char * , openfmb_commonmodule_stringSeq );
#endif /* User Defined SEQUENCE: sequence openfmb::commonmodule::stringSeq */

      DECLARE_CPP_UNBOUNDED_SEQ( char * , ObjRef );
      typedef unsigned char Quality[2];
      typedef unsigned char Quality_slice;
      typedef unsigned char Timestamp[8];
      typedef unsigned char Timestamp_slice;
#ifndef _DDS_SEQ_cpp_openfmb_commonmodule_openfmb_commonmodule_stringSeq_defined
#define _DDS_SEQ_cpp_openfmb_commonmodule_openfmb_commonmodule_stringSeq_defined
      DECLARE_CPP_UNBOUNDED_SEQ( char * , openfmb_commonmodule_stringSeq );
#endif /* User Defined SEQUENCE: sequence openfmb::commonmodule::stringSeq */

      DECLARE_CPP_UNBOUNDED_SEQ( char * , Unicode255 );
      typedef char * uuidType; /* ns: openfmb::commonmodule:: */

#ifndef _DDS_SEQ_cpp_openfmb_commonmodule_openfmb_commonmodule_stringSeq_defined
#define _DDS_SEQ_cpp_openfmb_commonmodule_openfmb_commonmodule_stringSeq_defined
      DECLARE_CPP_UNBOUNDED_SEQ( char * , openfmb_commonmodule_stringSeq );
#endif /* User Defined SEQUENCE: sequence openfmb::commonmodule::stringSeq */

      DECLARE_CPP_UNBOUNDED_SEQ( char * , VisString255 );

    }  /* namespace commonmodule */

    namespace essmodule {

      /* forward decl: openfmb::essmodule::ENC_ESSControlKind */
      struct COREDX_TS_STRUCT_EXPORT ENC_ESSControlKind;
      /* forward decl: openfmb::essmodule::EssControlFSCC */
      struct COREDX_TS_STRUCT_EXPORT EssControlFSCC;
      /* forward decl: openfmb::essmodule::ESSEvent */
      struct COREDX_TS_STRUCT_EXPORT ESSEvent;
      /* forward decl: openfmb::essmodule::ESSEventProfile */
      struct COREDX_TS_STRUCT_EXPORT ESSEventProfile;
      /* forward decl: openfmb::essmodule::EssEventZBAT */
      struct COREDX_TS_STRUCT_EXPORT EssEventZBAT;
      /* forward decl: openfmb::essmodule::ESSEventZGEN */
      struct COREDX_TS_STRUCT_EXPORT ESSEventZGEN;
      /* forward decl: openfmb::essmodule::ESSEventZGLD */
      struct COREDX_TS_STRUCT_EXPORT ESSEventZGLD;
      /* forward decl: openfmb::essmodule::ESSReadingProfile */
      struct COREDX_TS_STRUCT_EXPORT ESSReadingProfile;
      /* forward decl: openfmb::essmodule::ESSReadingValue */
      struct COREDX_TS_STRUCT_EXPORT ESSReadingValue;
      /* forward decl: openfmb::essmodule::ESSStatus */
      struct COREDX_TS_STRUCT_EXPORT ESSStatus;
      /* forward decl: openfmb::essmodule::ESSStatusProfile */
      struct COREDX_TS_STRUCT_EXPORT ESSStatusProfile;
      /* forward decl: openfmb::essmodule::EssStatusZBAT */
      struct COREDX_TS_STRUCT_EXPORT EssStatusZBAT;
      /* forward decl: openfmb::essmodule::ESSStatusZGEN */
      struct COREDX_TS_STRUCT_EXPORT ESSStatusZGEN;
      /* forward decl: openfmb::essmodule::ESSStatusZGLD */
      struct COREDX_TS_STRUCT_EXPORT ESSStatusZGLD;
      /* forward decl: openfmb::essmodule::ESSControl */
      struct COREDX_TS_STRUCT_EXPORT ESSControl;
      /* forward decl: openfmb::essmodule::ESSControlProfile */
      struct COREDX_TS_STRUCT_EXPORT ESSControlProfile;

      enum ESSControlKind { //unsigned int
        ESSControlKind_powerRequest = 8, 
        ESSControlKind_island = 2, 
        ESSControlKind_resynchronization = 3, 
        ESSControlKind_maintainSOC = 4, 
        ESSControlKind_standby = 5, 
        ESSControlKind_firm = 6, 
        ESSControlKind_none = 0, 
        ESSControlKind_loadFollowing = 7, 
        ESSControlKind_other = 1
 };


    }  /* namespace essmodule */

    namespace generationmodule {

      /* forward decl: openfmb::generationmodule::GenerationControl */
      struct COREDX_TS_STRUCT_EXPORT GenerationControl;
      /* forward decl: openfmb::generationmodule::GenerationControlProfile */
      struct COREDX_TS_STRUCT_EXPORT GenerationControlProfile;
      /* forward decl: openfmb::generationmodule::GenerationEvent */
      struct COREDX_TS_STRUCT_EXPORT GenerationEvent;
      /* forward decl: openfmb::generationmodule::GenerationEventAndStatusZGEN */
      struct COREDX_TS_STRUCT_EXPORT GenerationEventAndStatusZGEN;
      /* forward decl: openfmb::generationmodule::GenerationReadingValue */
      struct COREDX_TS_STRUCT_EXPORT GenerationReadingValue;
      /* forward decl: openfmb::generationmodule::GenerationStatus */
      struct COREDX_TS_STRUCT_EXPORT GenerationStatus;
      /* forward decl: openfmb::generationmodule::GenerationControlScheduleProfile */
      struct COREDX_TS_STRUCT_EXPORT GenerationControlScheduleProfile;
      /* forward decl: openfmb::generationmodule::GenerationReadingProfile */
      struct COREDX_TS_STRUCT_EXPORT GenerationReadingProfile;
      /* forward decl: openfmb::generationmodule::GenerationEventProfile */
      struct COREDX_TS_STRUCT_EXPORT GenerationEventProfile;
      /* forward decl: openfmb::generationmodule::GenerationStatusProfile */
      struct COREDX_TS_STRUCT_EXPORT GenerationStatusProfile;

    }  /* namespace generationmodule */

    namespace interconnectionmodule {

      /* forward decl: openfmb::interconnectionmodule::PlannedInterconnectionScheduleProfile */
      struct COREDX_TS_STRUCT_EXPORT PlannedInterconnectionScheduleProfile;
      /* forward decl: openfmb::interconnectionmodule::RequestedInterconnectionScheduleProfile */
      struct COREDX_TS_STRUCT_EXPORT RequestedInterconnectionScheduleProfile;

    }  /* namespace interconnectionmodule */

    namespace loadmodule {

      /* forward decl: openfmb::loadmodule::LoadControl */
      struct COREDX_TS_STRUCT_EXPORT LoadControl;
      /* forward decl: openfmb::loadmodule::LoadControlFSCC */
      struct COREDX_TS_STRUCT_EXPORT LoadControlFSCC;
      /* forward decl: openfmb::loadmodule::LoadControlProfile */
      struct COREDX_TS_STRUCT_EXPORT LoadControlProfile;
      /* forward decl: openfmb::loadmodule::LoadEvent */
      struct COREDX_TS_STRUCT_EXPORT LoadEvent;
      /* forward decl: openfmb::loadmodule::LoadEventAndStatusZGLD */
      struct COREDX_TS_STRUCT_EXPORT LoadEventAndStatusZGLD;
      /* forward decl: openfmb::loadmodule::LoadEventProfile */
      struct COREDX_TS_STRUCT_EXPORT LoadEventProfile;
      /* forward decl: openfmb::loadmodule::LoadEventZGLD */
      struct COREDX_TS_STRUCT_EXPORT LoadEventZGLD;
      /* forward decl: openfmb::loadmodule::LoadReadingProfile */
      struct COREDX_TS_STRUCT_EXPORT LoadReadingProfile;
      /* forward decl: openfmb::loadmodule::LoadReadingValue */
      struct COREDX_TS_STRUCT_EXPORT LoadReadingValue;
      /* forward decl: openfmb::loadmodule::LoadStatus */
      struct COREDX_TS_STRUCT_EXPORT LoadStatus;
      /* forward decl: openfmb::loadmodule::LoadStatusProfile */
      struct COREDX_TS_STRUCT_EXPORT LoadStatusProfile;
      /* forward decl: openfmb::loadmodule::LoadStatusZGLD */
      struct COREDX_TS_STRUCT_EXPORT LoadStatusZGLD;

    }  /* namespace loadmodule */

    namespace optimizermodule {

      /* forward decl: openfmb::optimizermodule::ESSControlScheduleProfileList */
      struct COREDX_TS_STRUCT_EXPORT ESSControlScheduleProfileList;
      /* forward decl: openfmb::optimizermodule::LoadControlScheduleProfileList */
      struct COREDX_TS_STRUCT_EXPORT LoadControlScheduleProfileList;
      /* forward decl: openfmb::optimizermodule::PlannedInterconnectionScheduleProfileList */
      struct COREDX_TS_STRUCT_EXPORT PlannedInterconnectionScheduleProfileList;
      /* forward decl: openfmb::optimizermodule::PlannedOptimizerScheduleProfile */
      struct COREDX_TS_STRUCT_EXPORT PlannedOptimizerScheduleProfile;
      /* forward decl: openfmb::optimizermodule::RegulatorControlScheduleProfileList */
      struct COREDX_TS_STRUCT_EXPORT RegulatorControlScheduleProfileList;
      /* forward decl: openfmb::optimizermodule::RequestedInterconnectionScheduleProfileList */
      struct COREDX_TS_STRUCT_EXPORT RequestedInterconnectionScheduleProfileList;
      /* forward decl: openfmb::optimizermodule::SolarControlScheduleProfileList */
      struct COREDX_TS_STRUCT_EXPORT SolarControlScheduleProfileList;
      /* forward decl: openfmb::optimizermodule::RequestedOptimizerScheduleProfile */
      struct COREDX_TS_STRUCT_EXPORT RequestedOptimizerScheduleProfile;

    }  /* namespace optimizermodule */

    namespace reclosermodule {

      /* forward decl: openfmb::reclosermodule::RecloserControl */
      struct COREDX_TS_STRUCT_EXPORT RecloserControl;
      /* forward decl: openfmb::reclosermodule::RecloserControlProfile */
      struct COREDX_TS_STRUCT_EXPORT RecloserControlProfile;
      /* forward decl: openfmb::reclosermodule::RecloserControlXCBR */
      struct COREDX_TS_STRUCT_EXPORT RecloserControlXCBR;
      /* forward decl: openfmb::reclosermodule::RecloserEvent */
      struct COREDX_TS_STRUCT_EXPORT RecloserEvent;
      /* forward decl: openfmb::reclosermodule::RecloserEventProfile */
      struct COREDX_TS_STRUCT_EXPORT RecloserEventProfile;
      /* forward decl: openfmb::reclosermodule::RecloserEventXCBR */
      struct COREDX_TS_STRUCT_EXPORT RecloserEventXCBR;
      /* forward decl: openfmb::reclosermodule::RecloserReadingProfile */
      struct COREDX_TS_STRUCT_EXPORT RecloserReadingProfile;
      /* forward decl: openfmb::reclosermodule::RecloserReadingValue */
      struct COREDX_TS_STRUCT_EXPORT RecloserReadingValue;
      /* forward decl: openfmb::reclosermodule::RecloserStatus */
      struct COREDX_TS_STRUCT_EXPORT RecloserStatus;
      /* forward decl: openfmb::reclosermodule::RecloserStatusProfile */
      struct COREDX_TS_STRUCT_EXPORT RecloserStatusProfile;
      /* forward decl: openfmb::reclosermodule::RecloserStatusXCBR */
      struct COREDX_TS_STRUCT_EXPORT RecloserStatusXCBR;

    }  /* namespace reclosermodule */

    namespace regulatormodule {

      /* forward decl: openfmb::regulatormodule::RegulatorReadingProfile */
      struct COREDX_TS_STRUCT_EXPORT RegulatorReadingProfile;
      /* forward decl: openfmb::regulatormodule::RegulatorReadingValue */
      struct COREDX_TS_STRUCT_EXPORT RegulatorReadingValue;

    }  /* namespace regulatormodule */

    namespace resourcemodule {

      /* forward decl: openfmb::resourcemodule::ResourceReadingProfile */
      struct COREDX_TS_STRUCT_EXPORT ResourceReadingProfile;
      /* forward decl: openfmb::resourcemodule::ResourceReadingValue */
      struct COREDX_TS_STRUCT_EXPORT ResourceReadingValue;

    }  /* namespace resourcemodule */

    namespace solarmodule {

      /* forward decl: openfmb::solarmodule::SolarControl */
      struct COREDX_TS_STRUCT_EXPORT SolarControl;
      /* forward decl: openfmb::solarmodule::SolarControlFSCC */
      struct COREDX_TS_STRUCT_EXPORT SolarControlFSCC;
      /* forward decl: openfmb::solarmodule::SolarControlProfile */
      struct COREDX_TS_STRUCT_EXPORT SolarControlProfile;
      /* forward decl: openfmb::solarmodule::SolarEvent */
      struct COREDX_TS_STRUCT_EXPORT SolarEvent;
      /* forward decl: openfmb::solarmodule::SolarEventProfile */
      struct COREDX_TS_STRUCT_EXPORT SolarEventProfile;
      /* forward decl: openfmb::solarmodule::SolarEventZGEN */
      struct COREDX_TS_STRUCT_EXPORT SolarEventZGEN;
      /* forward decl: openfmb::solarmodule::SolarReadingProfile */
      struct COREDX_TS_STRUCT_EXPORT SolarReadingProfile;
      /* forward decl: openfmb::solarmodule::SolarReadingValue */
      struct COREDX_TS_STRUCT_EXPORT SolarReadingValue;
      /* forward decl: openfmb::solarmodule::SolarStatus */
      struct COREDX_TS_STRUCT_EXPORT SolarStatus;
      /* forward decl: openfmb::solarmodule::SolarStatusProfile */
      struct COREDX_TS_STRUCT_EXPORT SolarStatusProfile;
      /* forward decl: openfmb::solarmodule::SolarStatusZGEN */
      struct COREDX_TS_STRUCT_EXPORT SolarStatusZGEN;

    }  /* namespace solarmodule */

    namespace switchmodule {

      /* forward decl: openfmb::switchmodule::SwitchControl */
      struct COREDX_TS_STRUCT_EXPORT SwitchControl;
      /* forward decl: openfmb::switchmodule::SwitchControlProfile */
      struct COREDX_TS_STRUCT_EXPORT SwitchControlProfile;
      /* forward decl: openfmb::switchmodule::SwitchControlXSWI */
      struct COREDX_TS_STRUCT_EXPORT SwitchControlXSWI;
      /* forward decl: openfmb::switchmodule::SwitchEvent */
      struct COREDX_TS_STRUCT_EXPORT SwitchEvent;
      /* forward decl: openfmb::switchmodule::SwitchEventProfile */
      struct COREDX_TS_STRUCT_EXPORT SwitchEventProfile;
      /* forward decl: openfmb::switchmodule::SwitchEventXSWI */
      struct COREDX_TS_STRUCT_EXPORT SwitchEventXSWI;
      /* forward decl: openfmb::switchmodule::SwitchReadingProfile */
      struct COREDX_TS_STRUCT_EXPORT SwitchReadingProfile;
      /* forward decl: openfmb::switchmodule::SwitchReadingValue */
      struct COREDX_TS_STRUCT_EXPORT SwitchReadingValue;
      /* forward decl: openfmb::switchmodule::SwitchStatus */
      struct COREDX_TS_STRUCT_EXPORT SwitchStatus;
      /* forward decl: openfmb::switchmodule::SwitchStatusProfile */
      struct COREDX_TS_STRUCT_EXPORT SwitchStatusProfile;
      /* forward decl: openfmb::switchmodule::SwitchStatusXSWI */
      struct COREDX_TS_STRUCT_EXPORT SwitchStatusXSWI;

    }  /* namespace switchmodule */

  }  /* namespace openfmb */

  namespace openfmb {


    namespace commonmodule {

      struct AnalogueValue;
      class AnalogueValueTypeSupport;
      class AnalogueValueDataReader;
      class AnalogueValueDataWriter;

/* DDS Data Type SEQUENCE: sequence<openfmb::commonmodule::AnalogueValue *> */
#ifndef _DDS_sequence_cpp_openfmb_commonmodule_AnalogueValuePtr_defined
#define _DDS_sequence_cpp_openfmb_commonmodule_AnalogueValuePtr_defined
      DECLARE_CPP_UNBOUNDED_SEQ( openfmb::commonmodule::AnalogueValue * , AnalogueValuePtrSeq );
#endif /* DDS Data Type SEQUENCE: sequence<AnalogueValuePtrSeq *> */

      struct COREDX_TS_STRUCT_EXPORT AnalogueValue {
        public:
          /** Constructor, Copy Constructor, Destructor, Assignment operator */
          AnalogueValue();
          ~AnalogueValue();
          AnalogueValue( const AnalogueValue & other );
          AnalogueValue& operator=( const AnalogueValue & other);

          void init();
          void clear();
          void copy( const openfmb::commonmodule::AnalogueValue * instance );

          int  get_marshal_size(int offset, int just_keys) const ;
          int  marshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys) const ;
          int  marshal_key_hash(unsigned char *buf, int offset, int stream_len) const;
          int  unmarshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys);
          int  unmarshal_key_hash(unsigned char *buf, int offset, int stream_len);

          /* Member vars*/
          static unsigned char get_field_def(const char  * fieldname, 
                                             CoreDX_FieldDef_t * field_def);
          openfmb::commonmodule::INT32  * i;
          openfmb::commonmodule::FLOAT32  * f;

          typedef AnalogueValueTypeSupport TypeSupport;
          typedef AnalogueValueDataReader DataReader;
          typedef AnalogueValueDataWriter DataWriter;
          typedef AnalogueValuePtrSeq Seq;

        private:

      }; //openfmb::commonmodule::AnalogueValue

      struct AnalogueValueCtl;
      class AnalogueValueCtlTypeSupport;
      class AnalogueValueCtlDataReader;
      class AnalogueValueCtlDataWriter;

/* DDS Data Type SEQUENCE: sequence<openfmb::commonmodule::AnalogueValueCtl *> */
#ifndef _DDS_sequence_cpp_openfmb_commonmodule_AnalogueValueCtlPtr_defined
#define _DDS_sequence_cpp_openfmb_commonmodule_AnalogueValueCtlPtr_defined
      DECLARE_CPP_UNBOUNDED_SEQ( openfmb::commonmodule::AnalogueValueCtl * , AnalogueValueCtlPtrSeq );
#endif /* DDS Data Type SEQUENCE: sequence<AnalogueValueCtlPtrSeq *> */

      struct COREDX_TS_STRUCT_EXPORT AnalogueValueCtl {
        public:
          /** Constructor, Copy Constructor, Destructor, Assignment operator */
          AnalogueValueCtl();
          ~AnalogueValueCtl();
          AnalogueValueCtl( const AnalogueValueCtl & other );
          AnalogueValueCtl& operator=( const AnalogueValueCtl & other);

          void init();
          void clear();
          void copy( const openfmb::commonmodule::AnalogueValueCtl * instance );

          int  get_marshal_size(int offset, int just_keys) const ;
          int  marshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys) const ;
          int  marshal_key_hash(unsigned char *buf, int offset, int stream_len) const;
          int  unmarshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys);
          int  unmarshal_key_hash(unsigned char *buf, int offset, int stream_len);

          /* Member vars*/
          static unsigned char get_field_def(const char  * fieldname, 
                                             CoreDX_FieldDef_t * field_def);
          openfmb::commonmodule::INT32  * i;
          openfmb::commonmodule::FLOAT32  * f;

          typedef AnalogueValueCtlTypeSupport TypeSupport;
          typedef AnalogueValueCtlDataReader DataReader;
          typedef AnalogueValueCtlDataWriter DataWriter;
          typedef AnalogueValueCtlPtrSeq Seq;

        private:

      }; //openfmb::commonmodule::AnalogueValueCtl

      struct BCR;
      class BCRTypeSupport;
      class BCRDataReader;
      class BCRDataWriter;

/* DDS Data Type SEQUENCE: sequence<openfmb::commonmodule::BCR *> */
#ifndef _DDS_sequence_cpp_openfmb_commonmodule_BCRPtr_defined
#define _DDS_sequence_cpp_openfmb_commonmodule_BCRPtr_defined
      DECLARE_CPP_UNBOUNDED_SEQ( openfmb::commonmodule::BCR * , BCRPtrSeq );
#endif /* DDS Data Type SEQUENCE: sequence<BCRPtrSeq *> */

      struct COREDX_TS_STRUCT_EXPORT BCR {
        public:
          /** Constructor, Copy Constructor, Destructor, Assignment operator */
          BCR();
          ~BCR();
          BCR( const BCR & other );
          BCR& operator=( const BCR & other);

          void init();
          void clear();
          void copy( const openfmb::commonmodule::BCR * instance );

          int  get_marshal_size(int offset, int just_keys) const ;
          int  marshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys) const ;
          int  marshal_key_hash(unsigned char *buf, int offset, int stream_len) const;
          int  unmarshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys);
          int  unmarshal_key_hash(unsigned char *buf, int offset, int stream_len);

          /* Member vars*/
          static unsigned char get_field_def(const char  * fieldname, 
                                             CoreDX_FieldDef_t * field_def);
          openfmb::commonmodule::INT64  * actVal;
          openfmb::commonmodule::Quality  q;
          openfmb::commonmodule::Timestamp  * t;
          enum openfmb::commonmodule::UnitSymbolKind   * units;

          typedef BCRTypeSupport TypeSupport;
          typedef BCRDataReader DataReader;
          typedef BCRDataWriter DataWriter;
          typedef BCRPtrSeq Seq;

        private:

      }; //openfmb::commonmodule::BCR

      struct CheckConditions;
      class CheckConditionsTypeSupport;
      class CheckConditionsDataReader;
      class CheckConditionsDataWriter;

/* DDS Data Type SEQUENCE: sequence<openfmb::commonmodule::CheckConditions *> */
#ifndef _DDS_sequence_cpp_openfmb_commonmodule_CheckConditionsPtr_defined
#define _DDS_sequence_cpp_openfmb_commonmodule_CheckConditionsPtr_defined
      DECLARE_CPP_UNBOUNDED_SEQ( openfmb::commonmodule::CheckConditions * , CheckConditionsPtrSeq );
#endif /* DDS Data Type SEQUENCE: sequence<CheckConditionsPtrSeq *> */

      struct COREDX_TS_STRUCT_EXPORT CheckConditions {
        public:
          /** Constructor, Copy Constructor, Destructor, Assignment operator */
          CheckConditions();
          ~CheckConditions();
          CheckConditions( const CheckConditions & other );
          CheckConditions& operator=( const CheckConditions & other);

          void init();
          void clear();
          void copy( const openfmb::commonmodule::CheckConditions * instance );

          int  get_marshal_size(int offset, int just_keys) const ;
          int  marshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys) const ;
          int  marshal_key_hash(unsigned char *buf, int offset, int stream_len) const;
          int  unmarshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys);
          int  unmarshal_key_hash(unsigned char *buf, int offset, int stream_len);

          /* Member vars*/
          static unsigned char get_field_def(const char  * fieldname, 
                                             CoreDX_FieldDef_t * field_def);
          unsigned char  * synchroCheck;
          unsigned char  * interlockCheck;

          typedef CheckConditionsTypeSupport TypeSupport;
          typedef CheckConditionsDataReader DataReader;
          typedef CheckConditionsDataWriter DataWriter;
          typedef CheckConditionsPtrSeq Seq;

        private:

      }; //openfmb::commonmodule::CheckConditions

      struct ControlDPC;
      class ControlDPCTypeSupport;
      class ControlDPCDataReader;
      class ControlDPCDataWriter;

/* DDS Data Type SEQUENCE: sequence<openfmb::commonmodule::ControlDPC *> */
#ifndef _DDS_sequence_cpp_openfmb_commonmodule_ControlDPCPtr_defined
#define _DDS_sequence_cpp_openfmb_commonmodule_ControlDPCPtr_defined
      DECLARE_CPP_UNBOUNDED_SEQ( openfmb::commonmodule::ControlDPC * , ControlDPCPtrSeq );
#endif /* DDS Data Type SEQUENCE: sequence<ControlDPCPtrSeq *> */

      struct COREDX_TS_STRUCT_EXPORT ControlDPC {
        public:
          /** Constructor, Copy Constructor, Destructor, Assignment operator */
          ControlDPC();
          ~ControlDPC();
          ControlDPC( const ControlDPC & other );
          ControlDPC& operator=( const ControlDPC & other);

          void init();
          void clear();
          void copy( const openfmb::commonmodule::ControlDPC * instance );

          int  get_marshal_size(int offset, int just_keys) const ;
          int  marshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys) const ;
          int  marshal_key_hash(unsigned char *buf, int offset, int stream_len) const;
          int  unmarshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys);
          int  unmarshal_key_hash(unsigned char *buf, int offset, int stream_len);

          /* Member vars*/
          static unsigned char get_field_def(const char  * fieldname, 
                                             CoreDX_FieldDef_t * field_def);
          unsigned char  ctlVal;

          typedef ControlDPCTypeSupport TypeSupport;
          typedef ControlDPCDataReader DataReader;
          typedef ControlDPCDataWriter DataWriter;
          typedef ControlDPCPtrSeq Seq;

        private:

      }; //openfmb::commonmodule::ControlDPC

      struct DateTimeInterval;
      class DateTimeIntervalTypeSupport;
      class DateTimeIntervalDataReader;
      class DateTimeIntervalDataWriter;

/* DDS Data Type SEQUENCE: sequence<openfmb::commonmodule::DateTimeInterval *> */
#ifndef _DDS_sequence_cpp_openfmb_commonmodule_DateTimeIntervalPtr_defined
#define _DDS_sequence_cpp_openfmb_commonmodule_DateTimeIntervalPtr_defined
      DECLARE_CPP_UNBOUNDED_SEQ( openfmb::commonmodule::DateTimeInterval * , DateTimeIntervalPtrSeq );
#endif /* DDS Data Type SEQUENCE: sequence<DateTimeIntervalPtrSeq *> */

      struct COREDX_TS_STRUCT_EXPORT DateTimeInterval {
        public:
          /** Constructor, Copy Constructor, Destructor, Assignment operator */
          DateTimeInterval();
          ~DateTimeInterval();
          DateTimeInterval( const DateTimeInterval & other );
          DateTimeInterval& operator=( const DateTimeInterval & other);

          void init();
          void clear();
          void copy( const openfmb::commonmodule::DateTimeInterval * instance );

          int  get_marshal_size(int offset, int just_keys) const ;
          int  marshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys) const ;
          int  marshal_key_hash(unsigned char *buf, int offset, int stream_len) const;
          int  unmarshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys);
          int  unmarshal_key_hash(unsigned char *buf, int offset, int stream_len);

          /* Member vars*/
          static unsigned char get_field_def(const char  * fieldname, 
                                             CoreDX_FieldDef_t * field_def);
          UML_Extension::dateTime  * end;
          UML_Extension::dateTime  * start;

          typedef DateTimeIntervalTypeSupport TypeSupport;
          typedef DateTimeIntervalDataReader DataReader;
          typedef DateTimeIntervalDataWriter DataWriter;
          typedef DateTimeIntervalPtrSeq Seq;

        private:

      }; //openfmb::commonmodule::DateTimeInterval

      struct ENC_SolarControlKind;
      class ENC_SolarControlKindTypeSupport;
      class ENC_SolarControlKindDataReader;
      class ENC_SolarControlKindDataWriter;

/* DDS Data Type SEQUENCE: sequence<openfmb::commonmodule::ENC_SolarControlKind *> */
#ifndef _DDS_sequence_cpp_openfmb_commonmodule_ENC_SolarControlKindPtr_defined
#define _DDS_sequence_cpp_openfmb_commonmodule_ENC_SolarControlKindPtr_defined
      DECLARE_CPP_UNBOUNDED_SEQ( openfmb::commonmodule::ENC_SolarControlKind * , ENC_SolarControlKindPtrSeq );
#endif /* DDS Data Type SEQUENCE: sequence<ENC_SolarControlKindPtrSeq *> */

      struct COREDX_TS_STRUCT_EXPORT ENC_SolarControlKind {
        public:
          /** Constructor, Copy Constructor, Destructor, Assignment operator */
          ENC_SolarControlKind();
          ~ENC_SolarControlKind();
          ENC_SolarControlKind( const ENC_SolarControlKind & other );
          ENC_SolarControlKind& operator=( const ENC_SolarControlKind & other);

          void init();
          void clear();
          void copy( const openfmb::commonmodule::ENC_SolarControlKind * instance );

          int  get_marshal_size(int offset, int just_keys) const ;
          int  marshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys) const ;
          int  marshal_key_hash(unsigned char *buf, int offset, int stream_len) const;
          int  unmarshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys);
          int  unmarshal_key_hash(unsigned char *buf, int offset, int stream_len);

          /* Member vars*/
          static unsigned char get_field_def(const char  * fieldname, 
                                             CoreDX_FieldDef_t * field_def);
          openfmb::commonmodule::Quality  q;
          openfmb::commonmodule::Timestamp  t;
          enum openfmb::commonmodule::SolarControlKind   * ctlVal;

          typedef ENC_SolarControlKindTypeSupport TypeSupport;
          typedef ENC_SolarControlKindDataReader DataReader;
          typedef ENC_SolarControlKindDataWriter DataWriter;
          typedef ENC_SolarControlKindPtrSeq Seq;

        private:

      }; //openfmb::commonmodule::ENC_SolarControlKind

      struct ENG_CalcMethodKind;
      class ENG_CalcMethodKindTypeSupport;
      class ENG_CalcMethodKindDataReader;
      class ENG_CalcMethodKindDataWriter;

/* DDS Data Type SEQUENCE: sequence<openfmb::commonmodule::ENG_CalcMethodKind *> */
#ifndef _DDS_sequence_cpp_openfmb_commonmodule_ENG_CalcMethodKindPtr_defined
#define _DDS_sequence_cpp_openfmb_commonmodule_ENG_CalcMethodKindPtr_defined
      DECLARE_CPP_UNBOUNDED_SEQ( openfmb::commonmodule::ENG_CalcMethodKind * , ENG_CalcMethodKindPtrSeq );
#endif /* DDS Data Type SEQUENCE: sequence<ENG_CalcMethodKindPtrSeq *> */

      struct COREDX_TS_STRUCT_EXPORT ENG_CalcMethodKind {
        public:
          /** Constructor, Copy Constructor, Destructor, Assignment operator */
          ENG_CalcMethodKind();
          ~ENG_CalcMethodKind();
          ENG_CalcMethodKind( const ENG_CalcMethodKind & other );
          ENG_CalcMethodKind& operator=( const ENG_CalcMethodKind & other);

          void init();
          void clear();
          void copy( const openfmb::commonmodule::ENG_CalcMethodKind * instance );

          int  get_marshal_size(int offset, int just_keys) const ;
          int  marshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys) const ;
          int  marshal_key_hash(unsigned char *buf, int offset, int stream_len) const;
          int  unmarshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys);
          int  unmarshal_key_hash(unsigned char *buf, int offset, int stream_len);

          /* Member vars*/
          static unsigned char get_field_def(const char  * fieldname, 
                                             CoreDX_FieldDef_t * field_def);
          enum openfmb::commonmodule::CalcMethodKind   setVal;

          typedef ENG_CalcMethodKindTypeSupport TypeSupport;
          typedef ENG_CalcMethodKindDataReader DataReader;
          typedef ENG_CalcMethodKindDataWriter DataWriter;
          typedef ENG_CalcMethodKindPtrSeq Seq;

        private:

      }; //openfmb::commonmodule::ENG_CalcMethodKind

      struct ENG_GridConnectModeKind;
      class ENG_GridConnectModeKindTypeSupport;
      class ENG_GridConnectModeKindDataReader;
      class ENG_GridConnectModeKindDataWriter;

/* DDS Data Type SEQUENCE: sequence<openfmb::commonmodule::ENG_GridConnectModeKind *> */
#ifndef _DDS_sequence_cpp_openfmb_commonmodule_ENG_GridConnectModeKindPtr_defined
#define _DDS_sequence_cpp_openfmb_commonmodule_ENG_GridConnectModeKindPtr_defined
      DECLARE_CPP_UNBOUNDED_SEQ( openfmb::commonmodule::ENG_GridConnectModeKind * , ENG_GridConnectModeKindPtrSeq );
#endif /* DDS Data Type SEQUENCE: sequence<ENG_GridConnectModeKindPtrSeq *> */

      struct COREDX_TS_STRUCT_EXPORT ENG_GridConnectModeKind {
        public:
          /** Constructor, Copy Constructor, Destructor, Assignment operator */
          ENG_GridConnectModeKind();
          ~ENG_GridConnectModeKind();
          ENG_GridConnectModeKind( const ENG_GridConnectModeKind & other );
          ENG_GridConnectModeKind& operator=( const ENG_GridConnectModeKind & other);

          void init();
          void clear();
          void copy( const openfmb::commonmodule::ENG_GridConnectModeKind * instance );

          int  get_marshal_size(int offset, int just_keys) const ;
          int  marshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys) const ;
          int  marshal_key_hash(unsigned char *buf, int offset, int stream_len) const;
          int  unmarshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys);
          int  unmarshal_key_hash(unsigned char *buf, int offset, int stream_len);

          /* Member vars*/
          static unsigned char get_field_def(const char  * fieldname, 
                                             CoreDX_FieldDef_t * field_def);
          enum openfmb::commonmodule::GridConnectModeKind   setVal;
          char *  setValExtension;

          typedef ENG_GridConnectModeKindTypeSupport TypeSupport;
          typedef ENG_GridConnectModeKindDataReader DataReader;
          typedef ENG_GridConnectModeKindDataWriter DataWriter;
          typedef ENG_GridConnectModeKindPtrSeq Seq;

        private:

      }; //openfmb::commonmodule::ENG_GridConnectModeKind

      struct ENS_BehaviourModeKind;
      class ENS_BehaviourModeKindTypeSupport;
      class ENS_BehaviourModeKindDataReader;
      class ENS_BehaviourModeKindDataWriter;

/* DDS Data Type SEQUENCE: sequence<openfmb::commonmodule::ENS_BehaviourModeKind *> */
#ifndef _DDS_sequence_cpp_openfmb_commonmodule_ENS_BehaviourModeKindPtr_defined
#define _DDS_sequence_cpp_openfmb_commonmodule_ENS_BehaviourModeKindPtr_defined
      DECLARE_CPP_UNBOUNDED_SEQ( openfmb::commonmodule::ENS_BehaviourModeKind * , ENS_BehaviourModeKindPtrSeq );
#endif /* DDS Data Type SEQUENCE: sequence<ENS_BehaviourModeKindPtrSeq *> */

      struct COREDX_TS_STRUCT_EXPORT ENS_BehaviourModeKind {
        public:
          /** Constructor, Copy Constructor, Destructor, Assignment operator */
          ENS_BehaviourModeKind();
          ~ENS_BehaviourModeKind();
          ENS_BehaviourModeKind( const ENS_BehaviourModeKind & other );
          ENS_BehaviourModeKind& operator=( const ENS_BehaviourModeKind & other);

          void init();
          void clear();
          void copy( const openfmb::commonmodule::ENS_BehaviourModeKind * instance );

          int  get_marshal_size(int offset, int just_keys) const ;
          int  marshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys) const ;
          int  marshal_key_hash(unsigned char *buf, int offset, int stream_len) const;
          int  unmarshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys);
          int  unmarshal_key_hash(unsigned char *buf, int offset, int stream_len);

          /* Member vars*/
          static unsigned char get_field_def(const char  * fieldname, 
                                             CoreDX_FieldDef_t * field_def);
          enum openfmb::commonmodule::BehaviourModeKind   stVal;
          openfmb::commonmodule::Quality  q;
          openfmb::commonmodule::Timestamp  t;

          typedef ENS_BehaviourModeKindTypeSupport TypeSupport;
          typedef ENS_BehaviourModeKindDataReader DataReader;
          typedef ENS_BehaviourModeKindDataWriter DataWriter;
          typedef ENS_BehaviourModeKindPtrSeq Seq;

        private:

      }; //openfmb::commonmodule::ENS_BehaviourModeKind

      struct ENS_DERGeneratorStateKind;
      class ENS_DERGeneratorStateKindTypeSupport;
      class ENS_DERGeneratorStateKindDataReader;
      class ENS_DERGeneratorStateKindDataWriter;

/* DDS Data Type SEQUENCE: sequence<openfmb::commonmodule::ENS_DERGeneratorStateKind *> */
#ifndef _DDS_sequence_cpp_openfmb_commonmodule_ENS_DERGeneratorStateKindPtr_defined
#define _DDS_sequence_cpp_openfmb_commonmodule_ENS_DERGeneratorStateKindPtr_defined
      DECLARE_CPP_UNBOUNDED_SEQ( openfmb::commonmodule::ENS_DERGeneratorStateKind * , ENS_DERGeneratorStateKindPtrSeq );
#endif /* DDS Data Type SEQUENCE: sequence<ENS_DERGeneratorStateKindPtrSeq *> */

      struct COREDX_TS_STRUCT_EXPORT ENS_DERGeneratorStateKind {
        public:
          /** Constructor, Copy Constructor, Destructor, Assignment operator */
          ENS_DERGeneratorStateKind();
          ~ENS_DERGeneratorStateKind();
          ENS_DERGeneratorStateKind( const ENS_DERGeneratorStateKind & other );
          ENS_DERGeneratorStateKind& operator=( const ENS_DERGeneratorStateKind & other);

          void init();
          void clear();
          void copy( const openfmb::commonmodule::ENS_DERGeneratorStateKind * instance );

          int  get_marshal_size(int offset, int just_keys) const ;
          int  marshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys) const ;
          int  marshal_key_hash(unsigned char *buf, int offset, int stream_len) const;
          int  unmarshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys);
          int  unmarshal_key_hash(unsigned char *buf, int offset, int stream_len);

          /* Member vars*/
          static unsigned char get_field_def(const char  * fieldname, 
                                             CoreDX_FieldDef_t * field_def);
          enum openfmb::commonmodule::DERGeneratorStateKind   stVal;
          openfmb::commonmodule::Quality  q;
          openfmb::commonmodule::Timestamp  t;

          typedef ENS_DERGeneratorStateKindTypeSupport TypeSupport;
          typedef ENS_DERGeneratorStateKindDataReader DataReader;
          typedef ENS_DERGeneratorStateKindDataWriter DataWriter;
          typedef ENS_DERGeneratorStateKindPtrSeq Seq;

        private:

      }; //openfmb::commonmodule::ENS_DERGeneratorStateKind

      struct ENS_SolarStateKind;
      class ENS_SolarStateKindTypeSupport;
      class ENS_SolarStateKindDataReader;
      class ENS_SolarStateKindDataWriter;

/* DDS Data Type SEQUENCE: sequence<openfmb::commonmodule::ENS_SolarStateKind *> */
#ifndef _DDS_sequence_cpp_openfmb_commonmodule_ENS_SolarStateKindPtr_defined
#define _DDS_sequence_cpp_openfmb_commonmodule_ENS_SolarStateKindPtr_defined
      DECLARE_CPP_UNBOUNDED_SEQ( openfmb::commonmodule::ENS_SolarStateKind * , ENS_SolarStateKindPtrSeq );
#endif /* DDS Data Type SEQUENCE: sequence<ENS_SolarStateKindPtrSeq *> */

      struct COREDX_TS_STRUCT_EXPORT ENS_SolarStateKind {
        public:
          /** Constructor, Copy Constructor, Destructor, Assignment operator */
          ENS_SolarStateKind();
          ~ENS_SolarStateKind();
          ENS_SolarStateKind( const ENS_SolarStateKind & other );
          ENS_SolarStateKind& operator=( const ENS_SolarStateKind & other);

          void init();
          void clear();
          void copy( const openfmb::commonmodule::ENS_SolarStateKind * instance );

          int  get_marshal_size(int offset, int just_keys) const ;
          int  marshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys) const ;
          int  marshal_key_hash(unsigned char *buf, int offset, int stream_len) const;
          int  unmarshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys);
          int  unmarshal_key_hash(unsigned char *buf, int offset, int stream_len);

          /* Member vars*/
          static unsigned char get_field_def(const char  * fieldname, 
                                             CoreDX_FieldDef_t * field_def);
          openfmb::commonmodule::Quality  q;
          openfmb::commonmodule::Timestamp  t;
          enum openfmb::commonmodule::SolarStateKind   * stVal;

          typedef ENS_SolarStateKindTypeSupport TypeSupport;
          typedef ENS_SolarStateKindDataReader DataReader;
          typedef ENS_SolarStateKindDataWriter DataWriter;
          typedef ENS_SolarStateKindPtrSeq Seq;

        private:

      }; //openfmb::commonmodule::ENS_SolarStateKind

      struct IdentifiedObject;
      class IdentifiedObjectTypeSupport;
      class IdentifiedObjectDataReader;
      class IdentifiedObjectDataWriter;

/* DDS Data Type SEQUENCE: sequence<openfmb::commonmodule::IdentifiedObject *> */
#ifndef _DDS_sequence_cpp_openfmb_commonmodule_IdentifiedObjectPtr_defined
#define _DDS_sequence_cpp_openfmb_commonmodule_IdentifiedObjectPtr_defined
      DECLARE_CPP_UNBOUNDED_SEQ( openfmb::commonmodule::IdentifiedObject * , IdentifiedObjectPtrSeq );
#endif /* DDS Data Type SEQUENCE: sequence<IdentifiedObjectPtrSeq *> */

      struct COREDX_TS_STRUCT_EXPORT IdentifiedObject {
        public:
          /** Constructor, Copy Constructor, Destructor, Assignment operator */
          IdentifiedObject();
          ~IdentifiedObject();
          IdentifiedObject( const IdentifiedObject & other );
          IdentifiedObject& operator=( const IdentifiedObject & other);

          void init();
          void clear();
          void copy( const openfmb::commonmodule::IdentifiedObject * instance );

          int  get_marshal_size(int offset, int just_keys) const ;
          int  marshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys) const ;
          int  marshal_key_hash(unsigned char *buf, int offset, int stream_len) const;
          int  unmarshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys);
          int  unmarshal_key_hash(unsigned char *buf, int offset, int stream_len);

          /* Member vars*/
          static unsigned char get_field_def(const char  * fieldname, 
                                             CoreDX_FieldDef_t * field_def);
          openfmb::commonmodule::uuidType  mRID;
          char *  description;
          char *  name;

          typedef IdentifiedObjectTypeSupport TypeSupport;
          typedef IdentifiedObjectDataReader DataReader;
          typedef IdentifiedObjectDataWriter DataWriter;
          typedef IdentifiedObjectPtrSeq Seq;

        private:

      }; //openfmb::commonmodule::IdentifiedObject

      struct LogicalNode;
      class LogicalNodeTypeSupport;
      class LogicalNodeDataReader;
      class LogicalNodeDataWriter;

/* DDS Data Type SEQUENCE: sequence<openfmb::commonmodule::LogicalNode *> */
#ifndef _DDS_sequence_cpp_openfmb_commonmodule_LogicalNodePtr_defined
#define _DDS_sequence_cpp_openfmb_commonmodule_LogicalNodePtr_defined
      DECLARE_CPP_UNBOUNDED_SEQ( openfmb::commonmodule::LogicalNode * , LogicalNodePtrSeq );
#endif /* DDS Data Type SEQUENCE: sequence<LogicalNodePtrSeq *> */

      struct COREDX_TS_STRUCT_EXPORT LogicalNode : public openfmb::commonmodule::IdentifiedObject {
        public:
          /** Constructor, Copy Constructor, Destructor, Assignment operator */
          LogicalNode();
          ~LogicalNode();
          LogicalNode( const LogicalNode & other );
          LogicalNode& operator=( const LogicalNode & other);

          void init();
          void clear();
          void copy( const openfmb::commonmodule::LogicalNode * instance );

          int  get_marshal_size(int offset, int just_keys) const ;
          int  marshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys) const ;
          int  marshal_key_hash(unsigned char *buf, int offset, int stream_len) const;
          int  unmarshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys);
          int  unmarshal_key_hash(unsigned char *buf, int offset, int stream_len);

          /* Member vars*/
          static unsigned char get_field_def(const char  * fieldname, 
                                             CoreDX_FieldDef_t * field_def);
          unsigned char  __dummy_prevent_empty_class_LogicalNode;

          typedef LogicalNodeTypeSupport TypeSupport;
          typedef LogicalNodeDataReader DataReader;
          typedef LogicalNodeDataWriter DataWriter;
          typedef LogicalNodePtrSeq Seq;

        private:

      }; //openfmb::commonmodule::LogicalNode

      struct LogicalNodeForControl;
      class LogicalNodeForControlTypeSupport;
      class LogicalNodeForControlDataReader;
      class LogicalNodeForControlDataWriter;

/* DDS Data Type SEQUENCE: sequence<openfmb::commonmodule::LogicalNodeForControl *> */
#ifndef _DDS_sequence_cpp_openfmb_commonmodule_LogicalNodeForControlPtr_defined
#define _DDS_sequence_cpp_openfmb_commonmodule_LogicalNodeForControlPtr_defined
      DECLARE_CPP_UNBOUNDED_SEQ( openfmb::commonmodule::LogicalNodeForControl * , LogicalNodeForControlPtrSeq );
#endif /* DDS Data Type SEQUENCE: sequence<LogicalNodeForControlPtrSeq *> */

      struct COREDX_TS_STRUCT_EXPORT LogicalNodeForControl : public openfmb::commonmodule::LogicalNode {
        public:
          /** Constructor, Copy Constructor, Destructor, Assignment operator */
          LogicalNodeForControl();
          ~LogicalNodeForControl();
          LogicalNodeForControl( const LogicalNodeForControl & other );
          LogicalNodeForControl& operator=( const LogicalNodeForControl & other);

          void init();
          void clear();
          void copy( const openfmb::commonmodule::LogicalNodeForControl * instance );

          int  get_marshal_size(int offset, int just_keys) const ;
          int  marshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys) const ;
          int  marshal_key_hash(unsigned char *buf, int offset, int stream_len) const;
          int  unmarshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys);
          int  unmarshal_key_hash(unsigned char *buf, int offset, int stream_len);

          /* Member vars*/
          static unsigned char get_field_def(const char  * fieldname, 
                                             CoreDX_FieldDef_t * field_def);
          unsigned char  __dummy_prevent_empty_class_LogicalNodeForControl;

          typedef LogicalNodeForControlTypeSupport TypeSupport;
          typedef LogicalNodeForControlDataReader DataReader;
          typedef LogicalNodeForControlDataWriter DataWriter;
          typedef LogicalNodeForControlPtrSeq Seq;

        private:

      }; //openfmb::commonmodule::LogicalNodeForControl

      struct LogicalNodeForEventAndStatus;
      class LogicalNodeForEventAndStatusTypeSupport;
      class LogicalNodeForEventAndStatusDataReader;
      class LogicalNodeForEventAndStatusDataWriter;

/* DDS Data Type SEQUENCE: sequence<openfmb::commonmodule::LogicalNodeForEventAndStatus *> */
#ifndef _DDS_sequence_cpp_openfmb_commonmodule_LogicalNodeForEventAndStatusPtr_defined
#define _DDS_sequence_cpp_openfmb_commonmodule_LogicalNodeForEventAndStatusPtr_defined
      DECLARE_CPP_UNBOUNDED_SEQ( openfmb::commonmodule::LogicalNodeForEventAndStatus * , LogicalNodeForEventAndStatusPtrSeq );
#endif /* DDS Data Type SEQUENCE: sequence<LogicalNodeForEventAndStatusPtrSeq *> */

      struct COREDX_TS_STRUCT_EXPORT LogicalNodeForEventAndStatus : public openfmb::commonmodule::LogicalNode {
        public:
          /** Constructor, Copy Constructor, Destructor, Assignment operator */
          LogicalNodeForEventAndStatus();
          ~LogicalNodeForEventAndStatus();
          LogicalNodeForEventAndStatus( const LogicalNodeForEventAndStatus & other );
          LogicalNodeForEventAndStatus& operator=( const LogicalNodeForEventAndStatus & other);

          void init();
          void clear();
          void copy( const openfmb::commonmodule::LogicalNodeForEventAndStatus * instance );

          int  get_marshal_size(int offset, int just_keys) const ;
          int  marshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys) const ;
          int  marshal_key_hash(unsigned char *buf, int offset, int stream_len) const;
          int  unmarshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys);
          int  unmarshal_key_hash(unsigned char *buf, int offset, int stream_len);

          /* Member vars*/
          static unsigned char get_field_def(const char  * fieldname, 
                                             CoreDX_FieldDef_t * field_def);
          struct openfmb::commonmodule::ENS_BehaviourModeKind  Beh;

          typedef LogicalNodeForEventAndStatusTypeSupport TypeSupport;
          typedef LogicalNodeForEventAndStatusDataReader DataReader;
          typedef LogicalNodeForEventAndStatusDataWriter DataWriter;
          typedef LogicalNodeForEventAndStatusPtrSeq Seq;

        private:

      }; //openfmb::commonmodule::LogicalNodeForEventAndStatus

      struct MeasurementValue;
      class MeasurementValueTypeSupport;
      class MeasurementValueDataReader;
      class MeasurementValueDataWriter;

/* DDS Data Type SEQUENCE: sequence<openfmb::commonmodule::MeasurementValue *> */
#ifndef _DDS_sequence_cpp_openfmb_commonmodule_MeasurementValuePtr_defined
#define _DDS_sequence_cpp_openfmb_commonmodule_MeasurementValuePtr_defined
      DECLARE_CPP_UNBOUNDED_SEQ( openfmb::commonmodule::MeasurementValue * , MeasurementValuePtrSeq );
#endif /* DDS Data Type SEQUENCE: sequence<MeasurementValuePtrSeq *> */

      struct COREDX_TS_STRUCT_EXPORT MeasurementValue : public openfmb::commonmodule::IdentifiedObject {
        public:
          /** Constructor, Copy Constructor, Destructor, Assignment operator */
          MeasurementValue();
          ~MeasurementValue();
          MeasurementValue( const MeasurementValue & other );
          MeasurementValue& operator=( const MeasurementValue & other);

          void init();
          void clear();
          void copy( const openfmb::commonmodule::MeasurementValue * instance );

          int  get_marshal_size(int offset, int just_keys) const ;
          int  marshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys) const ;
          int  marshal_key_hash(unsigned char *buf, int offset, int stream_len) const;
          int  unmarshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys);
          int  unmarshal_key_hash(unsigned char *buf, int offset, int stream_len);

          /* Member vars*/
          static unsigned char get_field_def(const char  * fieldname, 
                                             CoreDX_FieldDef_t * field_def);
          unsigned char  __dummy_prevent_empty_class_MeasurementValue;

          typedef MeasurementValueTypeSupport TypeSupport;
          typedef MeasurementValueDataReader DataReader;
          typedef MeasurementValueDataWriter DataWriter;
          typedef MeasurementValuePtrSeq Seq;

        private:

      }; //openfmb::commonmodule::MeasurementValue

      struct MeasurementValueSource;
      class MeasurementValueSourceTypeSupport;
      class MeasurementValueSourceDataReader;
      class MeasurementValueSourceDataWriter;

/* DDS Data Type SEQUENCE: sequence<openfmb::commonmodule::MeasurementValueSource *> */
#ifndef _DDS_sequence_cpp_openfmb_commonmodule_MeasurementValueSourcePtr_defined
#define _DDS_sequence_cpp_openfmb_commonmodule_MeasurementValueSourcePtr_defined
      DECLARE_CPP_UNBOUNDED_SEQ( openfmb::commonmodule::MeasurementValueSource * , MeasurementValueSourcePtrSeq );
#endif /* DDS Data Type SEQUENCE: sequence<MeasurementValueSourcePtrSeq *> */

      struct COREDX_TS_STRUCT_EXPORT MeasurementValueSource : public openfmb::commonmodule::IdentifiedObject {
        public:
          /** Constructor, Copy Constructor, Destructor, Assignment operator */
          MeasurementValueSource();
          ~MeasurementValueSource();
          MeasurementValueSource( const MeasurementValueSource & other );
          MeasurementValueSource& operator=( const MeasurementValueSource & other);

          void init();
          void clear();
          void copy( const openfmb::commonmodule::MeasurementValueSource * instance );

          int  get_marshal_size(int offset, int just_keys) const ;
          int  marshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys) const ;
          int  marshal_key_hash(unsigned char *buf, int offset, int stream_len) const;
          int  unmarshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys);
          int  unmarshal_key_hash(unsigned char *buf, int offset, int stream_len);

          /* Member vars*/
          static unsigned char get_field_def(const char  * fieldname, 
                                             CoreDX_FieldDef_t * field_def);
          unsigned char  __dummy_prevent_empty_class_MeasurementValueSource;

          typedef MeasurementValueSourceTypeSupport TypeSupport;
          typedef MeasurementValueSourceDataReader DataReader;
          typedef MeasurementValueSourceDataWriter DataWriter;
          typedef MeasurementValueSourcePtrSeq Seq;

        private:

      }; //openfmb::commonmodule::MeasurementValueSource

      struct ORS;
      class ORSTypeSupport;
      class ORSDataReader;
      class ORSDataWriter;

/* DDS Data Type SEQUENCE: sequence<openfmb::commonmodule::ORS *> */
#ifndef _DDS_sequence_cpp_openfmb_commonmodule_ORSPtr_defined
#define _DDS_sequence_cpp_openfmb_commonmodule_ORSPtr_defined
      DECLARE_CPP_UNBOUNDED_SEQ( openfmb::commonmodule::ORS * , ORSPtrSeq );
#endif /* DDS Data Type SEQUENCE: sequence<ORSPtrSeq *> */

      struct COREDX_TS_STRUCT_EXPORT ORS {
        public:
          /** Constructor, Copy Constructor, Destructor, Assignment operator */
          ORS();
          ~ORS();
          ORS( const ORS & other );
          ORS& operator=( const ORS & other);

          void init();
          void clear();
          void copy( const openfmb::commonmodule::ORS * instance );

          int  get_marshal_size(int offset, int just_keys) const ;
          int  marshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys) const ;
          int  marshal_key_hash(unsigned char *buf, int offset, int stream_len) const;
          int  unmarshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys);
          int  unmarshal_key_hash(unsigned char *buf, int offset, int stream_len);

          /* Member vars*/
          static unsigned char get_field_def(const char  * fieldname, 
                                             CoreDX_FieldDef_t * field_def);
          openfmb::commonmodule::ObjRef  stVal;
          openfmb::commonmodule::Quality  q;
          openfmb::commonmodule::Timestamp  t;

          typedef ORSTypeSupport TypeSupport;
          typedef ORSDataReader DataReader;
          typedef ORSDataWriter DataWriter;
          typedef ORSPtrSeq Seq;

        private:

      }; //openfmb::commonmodule::ORS

      struct Point;
      class PointTypeSupport;
      class PointDataReader;
      class PointDataWriter;

/* DDS Data Type SEQUENCE: sequence<openfmb::commonmodule::Point *> */
#ifndef _DDS_sequence_cpp_openfmb_commonmodule_PointPtr_defined
#define _DDS_sequence_cpp_openfmb_commonmodule_PointPtr_defined
      DECLARE_CPP_UNBOUNDED_SEQ( openfmb::commonmodule::Point * , PointPtrSeq );
#endif /* DDS Data Type SEQUENCE: sequence<PointPtrSeq *> */

      struct COREDX_TS_STRUCT_EXPORT Point {
        public:
          /** Constructor, Copy Constructor, Destructor, Assignment operator */
          Point();
          ~Point();
          Point( const Point & other );
          Point& operator=( const Point & other);

          void init();
          void clear();
          void copy( const openfmb::commonmodule::Point * instance );

          int  get_marshal_size(int offset, int just_keys) const ;
          int  marshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys) const ;
          int  marshal_key_hash(unsigned char *buf, int offset, int stream_len) const;
          int  unmarshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys);
          int  unmarshal_key_hash(unsigned char *buf, int offset, int stream_len);

          /* Member vars*/
          static unsigned char get_field_def(const char  * fieldname, 
                                             CoreDX_FieldDef_t * field_def);
          openfmb::commonmodule::FLOAT32  xVal;
          openfmb::commonmodule::FLOAT32  yVal;
          openfmb::commonmodule::FLOAT32  * zVal;

          typedef PointTypeSupport TypeSupport;
          typedef PointDataReader DataReader;
          typedef PointDataWriter DataWriter;
          typedef PointPtrSeq Seq;

        private:

      }; //openfmb::commonmodule::Point

      struct ReadingMMTR;
      class ReadingMMTRTypeSupport;
      class ReadingMMTRDataReader;
      class ReadingMMTRDataWriter;

/* DDS Data Type SEQUENCE: sequence<openfmb::commonmodule::ReadingMMTR *> */
#ifndef _DDS_sequence_cpp_openfmb_commonmodule_ReadingMMTRPtr_defined
#define _DDS_sequence_cpp_openfmb_commonmodule_ReadingMMTRPtr_defined
      DECLARE_CPP_UNBOUNDED_SEQ( openfmb::commonmodule::ReadingMMTR * , ReadingMMTRPtrSeq );
#endif /* DDS Data Type SEQUENCE: sequence<ReadingMMTRPtrSeq *> */

      struct COREDX_TS_STRUCT_EXPORT ReadingMMTR : public openfmb::commonmodule::LogicalNode {
        public:
          /** Constructor, Copy Constructor, Destructor, Assignment operator */
          ReadingMMTR();
          ~ReadingMMTR();
          ReadingMMTR( const ReadingMMTR & other );
          ReadingMMTR& operator=( const ReadingMMTR & other);

          void init();
          void clear();
          void copy( const openfmb::commonmodule::ReadingMMTR * instance );

          int  get_marshal_size(int offset, int just_keys) const ;
          int  marshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys) const ;
          int  marshal_key_hash(unsigned char *buf, int offset, int stream_len) const;
          int  unmarshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys);
          int  unmarshal_key_hash(unsigned char *buf, int offset, int stream_len);

          /* Member vars*/
          static unsigned char get_field_def(const char  * fieldname, 
                                             CoreDX_FieldDef_t * field_def);
          struct openfmb::commonmodule::BCR  * TotVAh;
          struct openfmb::commonmodule::BCR  * TotWh;
          struct openfmb::commonmodule::BCR  * TotVArh;
          struct openfmb::commonmodule::BCR  * SupWh;
          struct openfmb::commonmodule::BCR  * SupVArh;
          struct openfmb::commonmodule::BCR  * DmdWh;
          struct openfmb::commonmodule::BCR  * DmdVArh;

          typedef ReadingMMTRTypeSupport TypeSupport;
          typedef ReadingMMTRDataReader DataReader;
          typedef ReadingMMTRDataWriter DataWriter;
          typedef ReadingMMTRPtrSeq Seq;

        private:

      }; //openfmb::commonmodule::ReadingMMTR

      struct StatusDPS;
      class StatusDPSTypeSupport;
      class StatusDPSDataReader;
      class StatusDPSDataWriter;

/* DDS Data Type SEQUENCE: sequence<openfmb::commonmodule::StatusDPS *> */
#ifndef _DDS_sequence_cpp_openfmb_commonmodule_StatusDPSPtr_defined
#define _DDS_sequence_cpp_openfmb_commonmodule_StatusDPSPtr_defined
      DECLARE_CPP_UNBOUNDED_SEQ( openfmb::commonmodule::StatusDPS * , StatusDPSPtrSeq );
#endif /* DDS Data Type SEQUENCE: sequence<StatusDPSPtrSeq *> */

      struct COREDX_TS_STRUCT_EXPORT StatusDPS {
        public:
          /** Constructor, Copy Constructor, Destructor, Assignment operator */
          StatusDPS();
          ~StatusDPS();
          StatusDPS( const StatusDPS & other );
          StatusDPS& operator=( const StatusDPS & other);

          void init();
          void clear();
          void copy( const openfmb::commonmodule::StatusDPS * instance );

          int  get_marshal_size(int offset, int just_keys) const ;
          int  marshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys) const ;
          int  marshal_key_hash(unsigned char *buf, int offset, int stream_len) const;
          int  unmarshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys);
          int  unmarshal_key_hash(unsigned char *buf, int offset, int stream_len);

          /* Member vars*/
          static unsigned char get_field_def(const char  * fieldname, 
                                             CoreDX_FieldDef_t * field_def);
          enum openfmb::commonmodule::DbPosKind   stVal;
          openfmb::commonmodule::Quality  q;
          openfmb::commonmodule::Timestamp  t;

          typedef StatusDPSTypeSupport TypeSupport;
          typedef StatusDPSDataReader DataReader;
          typedef StatusDPSDataWriter DataWriter;
          typedef StatusDPSPtrSeq Seq;

        private:

      }; //openfmb::commonmodule::StatusDPS

      struct StatusSPS;
      class StatusSPSTypeSupport;
      class StatusSPSDataReader;
      class StatusSPSDataWriter;

/* DDS Data Type SEQUENCE: sequence<openfmb::commonmodule::StatusSPS *> */
#ifndef _DDS_sequence_cpp_openfmb_commonmodule_StatusSPSPtr_defined
#define _DDS_sequence_cpp_openfmb_commonmodule_StatusSPSPtr_defined
      DECLARE_CPP_UNBOUNDED_SEQ( openfmb::commonmodule::StatusSPS * , StatusSPSPtrSeq );
#endif /* DDS Data Type SEQUENCE: sequence<StatusSPSPtrSeq *> */

      struct COREDX_TS_STRUCT_EXPORT StatusSPS {
        public:
          /** Constructor, Copy Constructor, Destructor, Assignment operator */
          StatusSPS();
          ~StatusSPS();
          StatusSPS( const StatusSPS & other );
          StatusSPS& operator=( const StatusSPS & other);

          void init();
          void clear();
          void copy( const openfmb::commonmodule::StatusSPS * instance );

          int  get_marshal_size(int offset, int just_keys) const ;
          int  marshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys) const ;
          int  marshal_key_hash(unsigned char *buf, int offset, int stream_len) const;
          int  unmarshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys);
          int  unmarshal_key_hash(unsigned char *buf, int offset, int stream_len);

          /* Member vars*/
          static unsigned char get_field_def(const char  * fieldname, 
                                             CoreDX_FieldDef_t * field_def);
          openfmb::commonmodule::Quality  * q;
          unsigned char  stVal;
          openfmb::commonmodule::Timestamp  * t;

          typedef StatusSPSTypeSupport TypeSupport;
          typedef StatusSPSDataReader DataReader;
          typedef StatusSPSDataWriter DataWriter;
          typedef StatusSPSPtrSeq Seq;

        private:

      }; //openfmb::commonmodule::StatusSPS

      struct StatusValue;
      class StatusValueTypeSupport;
      class StatusValueDataReader;
      class StatusValueDataWriter;

/* DDS Data Type SEQUENCE: sequence<openfmb::commonmodule::StatusValue *> */
#ifndef _DDS_sequence_cpp_openfmb_commonmodule_StatusValuePtr_defined
#define _DDS_sequence_cpp_openfmb_commonmodule_StatusValuePtr_defined
      DECLARE_CPP_UNBOUNDED_SEQ( openfmb::commonmodule::StatusValue * , StatusValuePtrSeq );
#endif /* DDS Data Type SEQUENCE: sequence<StatusValuePtrSeq *> */

      struct COREDX_TS_STRUCT_EXPORT StatusValue : public openfmb::commonmodule::IdentifiedObject {
        public:
          /** Constructor, Copy Constructor, Destructor, Assignment operator */
          StatusValue();
          ~StatusValue();
          StatusValue( const StatusValue & other );
          StatusValue& operator=( const StatusValue & other);

          void init();
          void clear();
          void copy( const openfmb::commonmodule::StatusValue * instance );

          int  get_marshal_size(int offset, int just_keys) const ;
          int  marshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys) const ;
          int  marshal_key_hash(unsigned char *buf, int offset, int stream_len) const;
          int  unmarshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys);
          int  unmarshal_key_hash(unsigned char *buf, int offset, int stream_len);

          /* Member vars*/
          static unsigned char get_field_def(const char  * fieldname, 
                                             CoreDX_FieldDef_t * field_def);
          unsigned char  __dummy_prevent_empty_class_StatusValue;

          typedef StatusValueTypeSupport TypeSupport;
          typedef StatusValueDataReader DataReader;
          typedef StatusValueDataWriter DataWriter;
          typedef StatusValuePtrSeq Seq;

        private:

      }; //openfmb::commonmodule::StatusValue

      struct StatusValueSource;
      class StatusValueSourceTypeSupport;
      class StatusValueSourceDataReader;
      class StatusValueSourceDataWriter;

/* DDS Data Type SEQUENCE: sequence<openfmb::commonmodule::StatusValueSource *> */
#ifndef _DDS_sequence_cpp_openfmb_commonmodule_StatusValueSourcePtr_defined
#define _DDS_sequence_cpp_openfmb_commonmodule_StatusValueSourcePtr_defined
      DECLARE_CPP_UNBOUNDED_SEQ( openfmb::commonmodule::StatusValueSource * , StatusValueSourcePtrSeq );
#endif /* DDS Data Type SEQUENCE: sequence<StatusValueSourcePtrSeq *> */

      struct COREDX_TS_STRUCT_EXPORT StatusValueSource : public openfmb::commonmodule::IdentifiedObject {
        public:
          /** Constructor, Copy Constructor, Destructor, Assignment operator */
          StatusValueSource();
          ~StatusValueSource();
          StatusValueSource( const StatusValueSource & other );
          StatusValueSource& operator=( const StatusValueSource & other);

          void init();
          void clear();
          void copy( const openfmb::commonmodule::StatusValueSource * instance );

          int  get_marshal_size(int offset, int just_keys) const ;
          int  marshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys) const ;
          int  marshal_key_hash(unsigned char *buf, int offset, int stream_len) const;
          int  unmarshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys);
          int  unmarshal_key_hash(unsigned char *buf, int offset, int stream_len);

          /* Member vars*/
          static unsigned char get_field_def(const char  * fieldname, 
                                             CoreDX_FieldDef_t * field_def);
          unsigned char  __dummy_prevent_empty_class_StatusValueSource;

          typedef StatusValueSourceTypeSupport TypeSupport;
          typedef StatusValueSourceDataReader DataReader;
          typedef StatusValueSourceDataWriter DataWriter;
          typedef StatusValueSourcePtrSeq Seq;

        private:

      }; //openfmb::commonmodule::StatusValueSource

      struct Unit;
      class UnitTypeSupport;
      class UnitDataReader;
      class UnitDataWriter;

/* DDS Data Type SEQUENCE: sequence<openfmb::commonmodule::Unit *> */
#ifndef _DDS_sequence_cpp_openfmb_commonmodule_UnitPtr_defined
#define _DDS_sequence_cpp_openfmb_commonmodule_UnitPtr_defined
      DECLARE_CPP_UNBOUNDED_SEQ( openfmb::commonmodule::Unit * , UnitPtrSeq );
#endif /* DDS Data Type SEQUENCE: sequence<UnitPtrSeq *> */

      struct COREDX_TS_STRUCT_EXPORT Unit {
        public:
          /** Constructor, Copy Constructor, Destructor, Assignment operator */
          Unit();
          ~Unit();
          Unit( const Unit & other );
          Unit& operator=( const Unit & other);

          void init();
          void clear();
          void copy( const openfmb::commonmodule::Unit * instance );

          int  get_marshal_size(int offset, int just_keys) const ;
          int  marshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys) const ;
          int  marshal_key_hash(unsigned char *buf, int offset, int stream_len) const;
          int  unmarshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys);
          int  unmarshal_key_hash(unsigned char *buf, int offset, int stream_len);

          /* Member vars*/
          static unsigned char get_field_def(const char  * fieldname, 
                                             CoreDX_FieldDef_t * field_def);
          enum openfmb::commonmodule::UnitSymbolKind   SIUnit;
          enum openfmb::commonmodule::UnitMultiplierKind   * multiplier;

          typedef UnitTypeSupport TypeSupport;
          typedef UnitDataReader DataReader;
          typedef UnitDataWriter DataWriter;
          typedef UnitPtrSeq Seq;

        private:

      }; //openfmb::commonmodule::Unit

      struct Vector;
      class VectorTypeSupport;
      class VectorDataReader;
      class VectorDataWriter;

/* DDS Data Type SEQUENCE: sequence<openfmb::commonmodule::Vector *> */
#ifndef _DDS_sequence_cpp_openfmb_commonmodule_VectorPtr_defined
#define _DDS_sequence_cpp_openfmb_commonmodule_VectorPtr_defined
      DECLARE_CPP_UNBOUNDED_SEQ( openfmb::commonmodule::Vector * , VectorPtrSeq );
#endif /* DDS Data Type SEQUENCE: sequence<VectorPtrSeq *> */

      struct COREDX_TS_STRUCT_EXPORT Vector {
        public:
          /** Constructor, Copy Constructor, Destructor, Assignment operator */
          Vector();
          ~Vector();
          Vector( const Vector & other );
          Vector& operator=( const Vector & other);

          void init();
          void clear();
          void copy( const openfmb::commonmodule::Vector * instance );

          int  get_marshal_size(int offset, int just_keys) const ;
          int  marshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys) const ;
          int  marshal_key_hash(unsigned char *buf, int offset, int stream_len) const;
          int  unmarshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys);
          int  unmarshal_key_hash(unsigned char *buf, int offset, int stream_len);

          /* Member vars*/
          static unsigned char get_field_def(const char  * fieldname, 
                                             CoreDX_FieldDef_t * field_def);
          struct openfmb::commonmodule::AnalogueValue  mag;
          struct openfmb::commonmodule::AnalogueValue  * ang;

          typedef VectorTypeSupport TypeSupport;
          typedef VectorDataReader DataReader;
          typedef VectorDataWriter DataWriter;
          typedef VectorPtrSeq Seq;

        private:

      }; //openfmb::commonmodule::Vector


    }  /* namespace commonmodule */

    namespace essmodule {

      struct ENC_ESSControlKind;
      class ENC_ESSControlKindTypeSupport;
      class ENC_ESSControlKindDataReader;
      class ENC_ESSControlKindDataWriter;

/* DDS Data Type SEQUENCE: sequence<openfmb::essmodule::ENC_ESSControlKind *> */
#ifndef _DDS_sequence_cpp_openfmb_essmodule_ENC_ESSControlKindPtr_defined
#define _DDS_sequence_cpp_openfmb_essmodule_ENC_ESSControlKindPtr_defined
      DECLARE_CPP_UNBOUNDED_SEQ( openfmb::essmodule::ENC_ESSControlKind * , ENC_ESSControlKindPtrSeq );
#endif /* DDS Data Type SEQUENCE: sequence<ENC_ESSControlKindPtrSeq *> */

      struct COREDX_TS_STRUCT_EXPORT ENC_ESSControlKind {
        public:
          /** Constructor, Copy Constructor, Destructor, Assignment operator */
          ENC_ESSControlKind();
          ~ENC_ESSControlKind();
          ENC_ESSControlKind( const ENC_ESSControlKind & other );
          ENC_ESSControlKind& operator=( const ENC_ESSControlKind & other);

          void init();
          void clear();
          void copy( const openfmb::essmodule::ENC_ESSControlKind * instance );

          int  get_marshal_size(int offset, int just_keys) const ;
          int  marshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys) const ;
          int  marshal_key_hash(unsigned char *buf, int offset, int stream_len) const;
          int  unmarshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys);
          int  unmarshal_key_hash(unsigned char *buf, int offset, int stream_len);

          /* Member vars*/
          static unsigned char get_field_def(const char  * fieldname, 
                                             CoreDX_FieldDef_t * field_def);
          openfmb::commonmodule::Quality  q;
          openfmb::commonmodule::Timestamp  t;
          enum openfmb::essmodule::ESSControlKind   * ctlVal;

          typedef ENC_ESSControlKindTypeSupport TypeSupport;
          typedef ENC_ESSControlKindDataReader DataReader;
          typedef ENC_ESSControlKindDataWriter DataWriter;
          typedef ENC_ESSControlKindPtrSeq Seq;

        private:

      }; //openfmb::essmodule::ENC_ESSControlKind


    }  /* namespace essmodule */

    namespace generationmodule {

      struct GenerationEventAndStatusZGEN;
      class GenerationEventAndStatusZGENTypeSupport;
      class GenerationEventAndStatusZGENDataReader;
      class GenerationEventAndStatusZGENDataWriter;

/* DDS Data Type SEQUENCE: sequence<openfmb::generationmodule::GenerationEventAndStatusZGEN *> */
#ifndef _DDS_sequence_cpp_openfmb_generationmodule_GenerationEventAndStatusZGENPtr_defined
#define _DDS_sequence_cpp_openfmb_generationmodule_GenerationEventAndStatusZGENPtr_defined
      DECLARE_CPP_UNBOUNDED_SEQ( openfmb::generationmodule::GenerationEventAndStatusZGEN * , GenerationEventAndStatusZGENPtrSeq );
#endif /* DDS Data Type SEQUENCE: sequence<GenerationEventAndStatusZGENPtrSeq *> */

      struct COREDX_TS_STRUCT_EXPORT GenerationEventAndStatusZGEN : public openfmb::commonmodule::LogicalNodeForEventAndStatus {
        public:
          /** Constructor, Copy Constructor, Destructor, Assignment operator */
          GenerationEventAndStatusZGEN();
          ~GenerationEventAndStatusZGEN();
          GenerationEventAndStatusZGEN( const GenerationEventAndStatusZGEN & other );
          GenerationEventAndStatusZGEN& operator=( const GenerationEventAndStatusZGEN & other);

          void init();
          void clear();
          void copy( const openfmb::generationmodule::GenerationEventAndStatusZGEN * instance );

          int  get_marshal_size(int offset, int just_keys) const ;
          int  marshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys) const ;
          int  marshal_key_hash(unsigned char *buf, int offset, int stream_len) const;
          int  unmarshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys);
          int  unmarshal_key_hash(unsigned char *buf, int offset, int stream_len);

          /* Member vars*/
          static unsigned char get_field_def(const char  * fieldname, 
                                             CoreDX_FieldDef_t * field_def);
          struct openfmb::commonmodule::ENS_DERGeneratorStateKind  GnOpSt;
          struct openfmb::commonmodule::StatusSPS  * GnSynSt;
          struct openfmb::commonmodule::StatusSPS  * ParSt;
          struct openfmb::commonmodule::StatusSPS  * RampLodSw;
          struct openfmb::commonmodule::StatusSPS  * DCPwrSt;
          struct openfmb::commonmodule::StatusSPS  * EmgStop;
          struct openfmb::commonmodule::StatusDPS  * GnCtl;

          typedef GenerationEventAndStatusZGENTypeSupport TypeSupport;
          typedef GenerationEventAndStatusZGENDataReader DataReader;
          typedef GenerationEventAndStatusZGENDataWriter DataWriter;
          typedef GenerationEventAndStatusZGENPtrSeq Seq;

        private:

      }; //openfmb::generationmodule::GenerationEventAndStatusZGEN

      struct GenerationControlScheduleProfile;
      class GenerationControlScheduleProfileTypeSupport;
      class GenerationControlScheduleProfileDataReader;
      class GenerationControlScheduleProfileDataWriter;

/* DDS Data Type SEQUENCE: sequence<openfmb::generationmodule::GenerationControlScheduleProfile *> */
#ifndef _DDS_sequence_cpp_openfmb_generationmodule_GenerationControlScheduleProfilePtr_defined
#define _DDS_sequence_cpp_openfmb_generationmodule_GenerationControlScheduleProfilePtr_defined
      DECLARE_CPP_UNBOUNDED_SEQ( openfmb::generationmodule::GenerationControlScheduleProfile * , GenerationControlScheduleProfilePtrSeq );
#endif /* DDS Data Type SEQUENCE: sequence<GenerationControlScheduleProfilePtrSeq *> */

      struct COREDX_TS_STRUCT_EXPORT GenerationControlScheduleProfile {
        public:
          /** Constructor, Copy Constructor, Destructor, Assignment operator */
          GenerationControlScheduleProfile();
          ~GenerationControlScheduleProfile();
          GenerationControlScheduleProfile( const GenerationControlScheduleProfile & other );
          GenerationControlScheduleProfile& operator=( const GenerationControlScheduleProfile & other);

          void init();
          void clear();
          void copy( const openfmb::generationmodule::GenerationControlScheduleProfile * instance );

          int  get_marshal_size(int offset, int just_keys) const ;
          int  marshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys) const ;
          int  marshal_key_hash(unsigned char *buf, int offset, int stream_len) const;
          int  unmarshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys);
          int  unmarshal_key_hash(unsigned char *buf, int offset, int stream_len);

          /* Member vars*/
          static unsigned char get_field_def(const char  * fieldname, 
                                             CoreDX_FieldDef_t * field_def);
          unsigned char  __dummy_prevent_empty_class_GenerationControlScheduleProfile;

          typedef GenerationControlScheduleProfileTypeSupport TypeSupport;
          typedef GenerationControlScheduleProfileDataReader DataReader;
          typedef GenerationControlScheduleProfileDataWriter DataWriter;
          typedef GenerationControlScheduleProfilePtrSeq Seq;

        private:

      }; //openfmb::generationmodule::GenerationControlScheduleProfile


    }  /* namespace generationmodule */

    namespace interconnectionmodule {

      struct PlannedInterconnectionScheduleProfile;
      class PlannedInterconnectionScheduleProfileTypeSupport;
      class PlannedInterconnectionScheduleProfileDataReader;
      class PlannedInterconnectionScheduleProfileDataWriter;

/* DDS Data Type SEQUENCE: sequence<openfmb::interconnectionmodule::PlannedInterconnectionScheduleProfile *> */
#ifndef _DDS_sequence_cpp_openfmb_interconnectionmodule_PlannedInterconnectionScheduleProfilePtr_defined
#define _DDS_sequence_cpp_openfmb_interconnectionmodule_PlannedInterconnectionScheduleProfilePtr_defined
      DECLARE_CPP_UNBOUNDED_SEQ( openfmb::interconnectionmodule::PlannedInterconnectionScheduleProfile * , PlannedInterconnectionScheduleProfilePtrSeq );
#endif /* DDS Data Type SEQUENCE: sequence<PlannedInterconnectionScheduleProfilePtrSeq *> */

      struct COREDX_TS_STRUCT_EXPORT PlannedInterconnectionScheduleProfile {
        public:
          /** Constructor, Copy Constructor, Destructor, Assignment operator */
          PlannedInterconnectionScheduleProfile();
          ~PlannedInterconnectionScheduleProfile();
          PlannedInterconnectionScheduleProfile( const PlannedInterconnectionScheduleProfile & other );
          PlannedInterconnectionScheduleProfile& operator=( const PlannedInterconnectionScheduleProfile & other);

          void init();
          void clear();
          void copy( const openfmb::interconnectionmodule::PlannedInterconnectionScheduleProfile * instance );

          int  get_marshal_size(int offset, int just_keys) const ;
          int  marshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys) const ;
          int  marshal_key_hash(unsigned char *buf, int offset, int stream_len) const;
          int  unmarshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys);
          int  unmarshal_key_hash(unsigned char *buf, int offset, int stream_len);

          /* Member vars*/
          static unsigned char get_field_def(const char  * fieldname, 
                                             CoreDX_FieldDef_t * field_def);
          unsigned char  __dummy_prevent_empty_class_PlannedInterconnectionScheduleProfile;

          typedef PlannedInterconnectionScheduleProfileTypeSupport TypeSupport;
          typedef PlannedInterconnectionScheduleProfileDataReader DataReader;
          typedef PlannedInterconnectionScheduleProfileDataWriter DataWriter;
          typedef PlannedInterconnectionScheduleProfilePtrSeq Seq;

        private:

      }; //openfmb::interconnectionmodule::PlannedInterconnectionScheduleProfile

      struct RequestedInterconnectionScheduleProfile;
      class RequestedInterconnectionScheduleProfileTypeSupport;
      class RequestedInterconnectionScheduleProfileDataReader;
      class RequestedInterconnectionScheduleProfileDataWriter;

/* DDS Data Type SEQUENCE: sequence<openfmb::interconnectionmodule::RequestedInterconnectionScheduleProfile *> */
#ifndef _DDS_sequence_cpp_openfmb_interconnectionmodule_RequestedInterconnectionScheduleProfilePtr_defined
#define _DDS_sequence_cpp_openfmb_interconnectionmodule_RequestedInterconnectionScheduleProfilePtr_defined
      DECLARE_CPP_UNBOUNDED_SEQ( openfmb::interconnectionmodule::RequestedInterconnectionScheduleProfile * , RequestedInterconnectionScheduleProfilePtrSeq );
#endif /* DDS Data Type SEQUENCE: sequence<RequestedInterconnectionScheduleProfilePtrSeq *> */

      struct COREDX_TS_STRUCT_EXPORT RequestedInterconnectionScheduleProfile {
        public:
          /** Constructor, Copy Constructor, Destructor, Assignment operator */
          RequestedInterconnectionScheduleProfile();
          ~RequestedInterconnectionScheduleProfile();
          RequestedInterconnectionScheduleProfile( const RequestedInterconnectionScheduleProfile & other );
          RequestedInterconnectionScheduleProfile& operator=( const RequestedInterconnectionScheduleProfile & other);

          void init();
          void clear();
          void copy( const openfmb::interconnectionmodule::RequestedInterconnectionScheduleProfile * instance );

          int  get_marshal_size(int offset, int just_keys) const ;
          int  marshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys) const ;
          int  marshal_key_hash(unsigned char *buf, int offset, int stream_len) const;
          int  unmarshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys);
          int  unmarshal_key_hash(unsigned char *buf, int offset, int stream_len);

          /* Member vars*/
          static unsigned char get_field_def(const char  * fieldname, 
                                             CoreDX_FieldDef_t * field_def);
          unsigned char  __dummy_prevent_empty_class_RequestedInterconnectionScheduleProfile;

          typedef RequestedInterconnectionScheduleProfileTypeSupport TypeSupport;
          typedef RequestedInterconnectionScheduleProfileDataReader DataReader;
          typedef RequestedInterconnectionScheduleProfileDataWriter DataWriter;
          typedef RequestedInterconnectionScheduleProfilePtrSeq Seq;

        private:

      }; //openfmb::interconnectionmodule::RequestedInterconnectionScheduleProfile


    }  /* namespace interconnectionmodule */

    namespace loadmodule {

      struct LoadEventAndStatusZGLD;
      class LoadEventAndStatusZGLDTypeSupport;
      class LoadEventAndStatusZGLDDataReader;
      class LoadEventAndStatusZGLDDataWriter;

/* DDS Data Type SEQUENCE: sequence<openfmb::loadmodule::LoadEventAndStatusZGLD *> */
#ifndef _DDS_sequence_cpp_openfmb_loadmodule_LoadEventAndStatusZGLDPtr_defined
#define _DDS_sequence_cpp_openfmb_loadmodule_LoadEventAndStatusZGLDPtr_defined
      DECLARE_CPP_UNBOUNDED_SEQ( openfmb::loadmodule::LoadEventAndStatusZGLD * , LoadEventAndStatusZGLDPtrSeq );
#endif /* DDS Data Type SEQUENCE: sequence<LoadEventAndStatusZGLDPtrSeq *> */

      struct COREDX_TS_STRUCT_EXPORT LoadEventAndStatusZGLD : public openfmb::commonmodule::LogicalNodeForEventAndStatus {
        public:
          /** Constructor, Copy Constructor, Destructor, Assignment operator */
          LoadEventAndStatusZGLD();
          ~LoadEventAndStatusZGLD();
          LoadEventAndStatusZGLD( const LoadEventAndStatusZGLD & other );
          LoadEventAndStatusZGLD& operator=( const LoadEventAndStatusZGLD & other);

          void init();
          void clear();
          void copy( const openfmb::loadmodule::LoadEventAndStatusZGLD * instance );

          int  get_marshal_size(int offset, int just_keys) const ;
          int  marshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys) const ;
          int  marshal_key_hash(unsigned char *buf, int offset, int stream_len) const;
          int  unmarshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys);
          int  unmarshal_key_hash(unsigned char *buf, int offset, int stream_len);

          /* Member vars*/
          static unsigned char get_field_def(const char  * fieldname, 
                                             CoreDX_FieldDef_t * field_def);
          struct openfmb::commonmodule::ENS_DERGeneratorStateKind  LdOpSt;
          struct openfmb::commonmodule::StatusSPS  * RampLodSw;
          struct openfmb::commonmodule::StatusSPS  * Stdby;
          struct openfmb::commonmodule::StatusSPS  * DCPwrSt;
          struct openfmb::commonmodule::StatusSPS  * EmgStop;
          struct openfmb::commonmodule::StatusDPS  * LdCtl;

          typedef LoadEventAndStatusZGLDTypeSupport TypeSupport;
          typedef LoadEventAndStatusZGLDDataReader DataReader;
          typedef LoadEventAndStatusZGLDDataWriter DataWriter;
          typedef LoadEventAndStatusZGLDPtrSeq Seq;

        private:

      }; //openfmb::loadmodule::LoadEventAndStatusZGLD

      struct LoadEventZGLD;
      class LoadEventZGLDTypeSupport;
      class LoadEventZGLDDataReader;
      class LoadEventZGLDDataWriter;

/* DDS Data Type SEQUENCE: sequence<openfmb::loadmodule::LoadEventZGLD *> */
#ifndef _DDS_sequence_cpp_openfmb_loadmodule_LoadEventZGLDPtr_defined
#define _DDS_sequence_cpp_openfmb_loadmodule_LoadEventZGLDPtr_defined
      DECLARE_CPP_UNBOUNDED_SEQ( openfmb::loadmodule::LoadEventZGLD * , LoadEventZGLDPtrSeq );
#endif /* DDS Data Type SEQUENCE: sequence<LoadEventZGLDPtrSeq *> */

      struct COREDX_TS_STRUCT_EXPORT LoadEventZGLD : public openfmb::loadmodule::LoadEventAndStatusZGLD {
        public:
          /** Constructor, Copy Constructor, Destructor, Assignment operator */
          LoadEventZGLD();
          ~LoadEventZGLD();
          LoadEventZGLD( const LoadEventZGLD & other );
          LoadEventZGLD& operator=( const LoadEventZGLD & other);

          void init();
          void clear();
          void copy( const openfmb::loadmodule::LoadEventZGLD * instance );

          int  get_marshal_size(int offset, int just_keys) const ;
          int  marshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys) const ;
          int  marshal_key_hash(unsigned char *buf, int offset, int stream_len) const;
          int  unmarshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys);
          int  unmarshal_key_hash(unsigned char *buf, int offset, int stream_len);

          /* Member vars*/
          static unsigned char get_field_def(const char  * fieldname, 
                                             CoreDX_FieldDef_t * field_def);
          unsigned char  __dummy_prevent_empty_class_LoadEventZGLD;

          typedef LoadEventZGLDTypeSupport TypeSupport;
          typedef LoadEventZGLDDataReader DataReader;
          typedef LoadEventZGLDDataWriter DataWriter;
          typedef LoadEventZGLDPtrSeq Seq;

        private:

      }; //openfmb::loadmodule::LoadEventZGLD

      struct LoadStatusZGLD;
      class LoadStatusZGLDTypeSupport;
      class LoadStatusZGLDDataReader;
      class LoadStatusZGLDDataWriter;

/* DDS Data Type SEQUENCE: sequence<openfmb::loadmodule::LoadStatusZGLD *> */
#ifndef _DDS_sequence_cpp_openfmb_loadmodule_LoadStatusZGLDPtr_defined
#define _DDS_sequence_cpp_openfmb_loadmodule_LoadStatusZGLDPtr_defined
      DECLARE_CPP_UNBOUNDED_SEQ( openfmb::loadmodule::LoadStatusZGLD * , LoadStatusZGLDPtrSeq );
#endif /* DDS Data Type SEQUENCE: sequence<LoadStatusZGLDPtrSeq *> */

      struct COREDX_TS_STRUCT_EXPORT LoadStatusZGLD : public openfmb::loadmodule::LoadEventAndStatusZGLD {
        public:
          /** Constructor, Copy Constructor, Destructor, Assignment operator */
          LoadStatusZGLD();
          ~LoadStatusZGLD();
          LoadStatusZGLD( const LoadStatusZGLD & other );
          LoadStatusZGLD& operator=( const LoadStatusZGLD & other);

          void init();
          void clear();
          void copy( const openfmb::loadmodule::LoadStatusZGLD * instance );

          int  get_marshal_size(int offset, int just_keys) const ;
          int  marshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys) const ;
          int  marshal_key_hash(unsigned char *buf, int offset, int stream_len) const;
          int  unmarshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys);
          int  unmarshal_key_hash(unsigned char *buf, int offset, int stream_len);

          /* Member vars*/
          static unsigned char get_field_def(const char  * fieldname, 
                                             CoreDX_FieldDef_t * field_def);
          unsigned char  __dummy_prevent_empty_class_LoadStatusZGLD;

          typedef LoadStatusZGLDTypeSupport TypeSupport;
          typedef LoadStatusZGLDDataReader DataReader;
          typedef LoadStatusZGLDDataWriter DataWriter;
          typedef LoadStatusZGLDPtrSeq Seq;

        private:

      }; //openfmb::loadmodule::LoadStatusZGLD


    }  /* namespace loadmodule */

    namespace optimizermodule {

      struct ESSControlScheduleProfileList;
      class ESSControlScheduleProfileListTypeSupport;
      class ESSControlScheduleProfileListDataReader;
      class ESSControlScheduleProfileListDataWriter;

/* DDS Data Type SEQUENCE: sequence<openfmb::optimizermodule::ESSControlScheduleProfileList *> */
#ifndef _DDS_sequence_cpp_openfmb_optimizermodule_ESSControlScheduleProfileListPtr_defined
#define _DDS_sequence_cpp_openfmb_optimizermodule_ESSControlScheduleProfileListPtr_defined
      DECLARE_CPP_UNBOUNDED_SEQ( openfmb::optimizermodule::ESSControlScheduleProfileList * , ESSControlScheduleProfileListPtrSeq );
#endif /* DDS Data Type SEQUENCE: sequence<ESSControlScheduleProfileListPtrSeq *> */

      struct COREDX_TS_STRUCT_EXPORT ESSControlScheduleProfileList {
        public:
          /** Constructor, Copy Constructor, Destructor, Assignment operator */
          ESSControlScheduleProfileList();
          ~ESSControlScheduleProfileList();
          ESSControlScheduleProfileList( const ESSControlScheduleProfileList & other );
          ESSControlScheduleProfileList& operator=( const ESSControlScheduleProfileList & other);

          void init();
          void clear();
          void copy( const openfmb::optimizermodule::ESSControlScheduleProfileList * instance );

          int  get_marshal_size(int offset, int just_keys) const ;
          int  marshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys) const ;
          int  marshal_key_hash(unsigned char *buf, int offset, int stream_len) const;
          int  unmarshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys);
          int  unmarshal_key_hash(unsigned char *buf, int offset, int stream_len);

          /* Member vars*/
          static unsigned char get_field_def(const char  * fieldname, 
                                             CoreDX_FieldDef_t * field_def);
          unsigned char  __dummy_prevent_empty_class_ESSControlScheduleProfileList;

          typedef ESSControlScheduleProfileListTypeSupport TypeSupport;
          typedef ESSControlScheduleProfileListDataReader DataReader;
          typedef ESSControlScheduleProfileListDataWriter DataWriter;
          typedef ESSControlScheduleProfileListPtrSeq Seq;

        private:

      }; //openfmb::optimizermodule::ESSControlScheduleProfileList

      struct LoadControlScheduleProfileList;
      class LoadControlScheduleProfileListTypeSupport;
      class LoadControlScheduleProfileListDataReader;
      class LoadControlScheduleProfileListDataWriter;

/* DDS Data Type SEQUENCE: sequence<openfmb::optimizermodule::LoadControlScheduleProfileList *> */
#ifndef _DDS_sequence_cpp_openfmb_optimizermodule_LoadControlScheduleProfileListPtr_defined
#define _DDS_sequence_cpp_openfmb_optimizermodule_LoadControlScheduleProfileListPtr_defined
      DECLARE_CPP_UNBOUNDED_SEQ( openfmb::optimizermodule::LoadControlScheduleProfileList * , LoadControlScheduleProfileListPtrSeq );
#endif /* DDS Data Type SEQUENCE: sequence<LoadControlScheduleProfileListPtrSeq *> */

      struct COREDX_TS_STRUCT_EXPORT LoadControlScheduleProfileList {
        public:
          /** Constructor, Copy Constructor, Destructor, Assignment operator */
          LoadControlScheduleProfileList();
          ~LoadControlScheduleProfileList();
          LoadControlScheduleProfileList( const LoadControlScheduleProfileList & other );
          LoadControlScheduleProfileList& operator=( const LoadControlScheduleProfileList & other);

          void init();
          void clear();
          void copy( const openfmb::optimizermodule::LoadControlScheduleProfileList * instance );

          int  get_marshal_size(int offset, int just_keys) const ;
          int  marshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys) const ;
          int  marshal_key_hash(unsigned char *buf, int offset, int stream_len) const;
          int  unmarshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys);
          int  unmarshal_key_hash(unsigned char *buf, int offset, int stream_len);

          /* Member vars*/
          static unsigned char get_field_def(const char  * fieldname, 
                                             CoreDX_FieldDef_t * field_def);
          unsigned char  __dummy_prevent_empty_class_LoadControlScheduleProfileList;

          typedef LoadControlScheduleProfileListTypeSupport TypeSupport;
          typedef LoadControlScheduleProfileListDataReader DataReader;
          typedef LoadControlScheduleProfileListDataWriter DataWriter;
          typedef LoadControlScheduleProfileListPtrSeq Seq;

        private:

      }; //openfmb::optimizermodule::LoadControlScheduleProfileList

      struct PlannedInterconnectionScheduleProfileList;
      class PlannedInterconnectionScheduleProfileListTypeSupport;
      class PlannedInterconnectionScheduleProfileListDataReader;
      class PlannedInterconnectionScheduleProfileListDataWriter;

/* DDS Data Type SEQUENCE: sequence<openfmb::optimizermodule::PlannedInterconnectionScheduleProfileList *> */
#ifndef _DDS_sequence_cpp_openfmb_optimizermodule_PlannedInterconnectionScheduleProfileListPtr_defined
#define _DDS_sequence_cpp_openfmb_optimizermodule_PlannedInterconnectionScheduleProfileListPtr_defined
      DECLARE_CPP_UNBOUNDED_SEQ( openfmb::optimizermodule::PlannedInterconnectionScheduleProfileList * , PlannedInterconnectionScheduleProfileListPtrSeq );
#endif /* DDS Data Type SEQUENCE: sequence<PlannedInterconnectionScheduleProfileListPtrSeq *> */

      struct COREDX_TS_STRUCT_EXPORT PlannedInterconnectionScheduleProfileList {
        public:
          /** Constructor, Copy Constructor, Destructor, Assignment operator */
          PlannedInterconnectionScheduleProfileList();
          ~PlannedInterconnectionScheduleProfileList();
          PlannedInterconnectionScheduleProfileList( const PlannedInterconnectionScheduleProfileList & other );
          PlannedInterconnectionScheduleProfileList& operator=( const PlannedInterconnectionScheduleProfileList & other);

          void init();
          void clear();
          void copy( const openfmb::optimizermodule::PlannedInterconnectionScheduleProfileList * instance );

          int  get_marshal_size(int offset, int just_keys) const ;
          int  marshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys) const ;
          int  marshal_key_hash(unsigned char *buf, int offset, int stream_len) const;
          int  unmarshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys);
          int  unmarshal_key_hash(unsigned char *buf, int offset, int stream_len);

          /* Member vars*/
          static unsigned char get_field_def(const char  * fieldname, 
                                             CoreDX_FieldDef_t * field_def);
          unsigned char  __dummy_prevent_empty_class_PlannedInterconnectionScheduleProfileList;

          typedef PlannedInterconnectionScheduleProfileListTypeSupport TypeSupport;
          typedef PlannedInterconnectionScheduleProfileListDataReader DataReader;
          typedef PlannedInterconnectionScheduleProfileListDataWriter DataWriter;
          typedef PlannedInterconnectionScheduleProfileListPtrSeq Seq;

        private:

      }; //openfmb::optimizermodule::PlannedInterconnectionScheduleProfileList

      struct RegulatorControlScheduleProfileList;
      class RegulatorControlScheduleProfileListTypeSupport;
      class RegulatorControlScheduleProfileListDataReader;
      class RegulatorControlScheduleProfileListDataWriter;

/* DDS Data Type SEQUENCE: sequence<openfmb::optimizermodule::RegulatorControlScheduleProfileList *> */
#ifndef _DDS_sequence_cpp_openfmb_optimizermodule_RegulatorControlScheduleProfileListPtr_defined
#define _DDS_sequence_cpp_openfmb_optimizermodule_RegulatorControlScheduleProfileListPtr_defined
      DECLARE_CPP_UNBOUNDED_SEQ( openfmb::optimizermodule::RegulatorControlScheduleProfileList * , RegulatorControlScheduleProfileListPtrSeq );
#endif /* DDS Data Type SEQUENCE: sequence<RegulatorControlScheduleProfileListPtrSeq *> */

      struct COREDX_TS_STRUCT_EXPORT RegulatorControlScheduleProfileList {
        public:
          /** Constructor, Copy Constructor, Destructor, Assignment operator */
          RegulatorControlScheduleProfileList();
          ~RegulatorControlScheduleProfileList();
          RegulatorControlScheduleProfileList( const RegulatorControlScheduleProfileList & other );
          RegulatorControlScheduleProfileList& operator=( const RegulatorControlScheduleProfileList & other);

          void init();
          void clear();
          void copy( const openfmb::optimizermodule::RegulatorControlScheduleProfileList * instance );

          int  get_marshal_size(int offset, int just_keys) const ;
          int  marshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys) const ;
          int  marshal_key_hash(unsigned char *buf, int offset, int stream_len) const;
          int  unmarshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys);
          int  unmarshal_key_hash(unsigned char *buf, int offset, int stream_len);

          /* Member vars*/
          static unsigned char get_field_def(const char  * fieldname, 
                                             CoreDX_FieldDef_t * field_def);
          unsigned char  __dummy_prevent_empty_class_RegulatorControlScheduleProfileList;

          typedef RegulatorControlScheduleProfileListTypeSupport TypeSupport;
          typedef RegulatorControlScheduleProfileListDataReader DataReader;
          typedef RegulatorControlScheduleProfileListDataWriter DataWriter;
          typedef RegulatorControlScheduleProfileListPtrSeq Seq;

        private:

      }; //openfmb::optimizermodule::RegulatorControlScheduleProfileList

      struct RequestedInterconnectionScheduleProfileList;
      class RequestedInterconnectionScheduleProfileListTypeSupport;
      class RequestedInterconnectionScheduleProfileListDataReader;
      class RequestedInterconnectionScheduleProfileListDataWriter;

/* DDS Data Type SEQUENCE: sequence<openfmb::optimizermodule::RequestedInterconnectionScheduleProfileList *> */
#ifndef _DDS_sequence_cpp_openfmb_optimizermodule_RequestedInterconnectionScheduleProfileListPtr_defined
#define _DDS_sequence_cpp_openfmb_optimizermodule_RequestedInterconnectionScheduleProfileListPtr_defined
      DECLARE_CPP_UNBOUNDED_SEQ( openfmb::optimizermodule::RequestedInterconnectionScheduleProfileList * , RequestedInterconnectionScheduleProfileListPtrSeq );
#endif /* DDS Data Type SEQUENCE: sequence<RequestedInterconnectionScheduleProfileListPtrSeq *> */

      struct COREDX_TS_STRUCT_EXPORT RequestedInterconnectionScheduleProfileList {
        public:
          /** Constructor, Copy Constructor, Destructor, Assignment operator */
          RequestedInterconnectionScheduleProfileList();
          ~RequestedInterconnectionScheduleProfileList();
          RequestedInterconnectionScheduleProfileList( const RequestedInterconnectionScheduleProfileList & other );
          RequestedInterconnectionScheduleProfileList& operator=( const RequestedInterconnectionScheduleProfileList & other);

          void init();
          void clear();
          void copy( const openfmb::optimizermodule::RequestedInterconnectionScheduleProfileList * instance );

          int  get_marshal_size(int offset, int just_keys) const ;
          int  marshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys) const ;
          int  marshal_key_hash(unsigned char *buf, int offset, int stream_len) const;
          int  unmarshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys);
          int  unmarshal_key_hash(unsigned char *buf, int offset, int stream_len);

          /* Member vars*/
          static unsigned char get_field_def(const char  * fieldname, 
                                             CoreDX_FieldDef_t * field_def);
          unsigned char  __dummy_prevent_empty_class_RequestedInterconnectionScheduleProfileList;

          typedef RequestedInterconnectionScheduleProfileListTypeSupport TypeSupport;
          typedef RequestedInterconnectionScheduleProfileListDataReader DataReader;
          typedef RequestedInterconnectionScheduleProfileListDataWriter DataWriter;
          typedef RequestedInterconnectionScheduleProfileListPtrSeq Seq;

        private:

      }; //openfmb::optimizermodule::RequestedInterconnectionScheduleProfileList

      struct SolarControlScheduleProfileList;
      class SolarControlScheduleProfileListTypeSupport;
      class SolarControlScheduleProfileListDataReader;
      class SolarControlScheduleProfileListDataWriter;

/* DDS Data Type SEQUENCE: sequence<openfmb::optimizermodule::SolarControlScheduleProfileList *> */
#ifndef _DDS_sequence_cpp_openfmb_optimizermodule_SolarControlScheduleProfileListPtr_defined
#define _DDS_sequence_cpp_openfmb_optimizermodule_SolarControlScheduleProfileListPtr_defined
      DECLARE_CPP_UNBOUNDED_SEQ( openfmb::optimizermodule::SolarControlScheduleProfileList * , SolarControlScheduleProfileListPtrSeq );
#endif /* DDS Data Type SEQUENCE: sequence<SolarControlScheduleProfileListPtrSeq *> */

      struct COREDX_TS_STRUCT_EXPORT SolarControlScheduleProfileList {
        public:
          /** Constructor, Copy Constructor, Destructor, Assignment operator */
          SolarControlScheduleProfileList();
          ~SolarControlScheduleProfileList();
          SolarControlScheduleProfileList( const SolarControlScheduleProfileList & other );
          SolarControlScheduleProfileList& operator=( const SolarControlScheduleProfileList & other);

          void init();
          void clear();
          void copy( const openfmb::optimizermodule::SolarControlScheduleProfileList * instance );

          int  get_marshal_size(int offset, int just_keys) const ;
          int  marshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys) const ;
          int  marshal_key_hash(unsigned char *buf, int offset, int stream_len) const;
          int  unmarshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys);
          int  unmarshal_key_hash(unsigned char *buf, int offset, int stream_len);

          /* Member vars*/
          static unsigned char get_field_def(const char  * fieldname, 
                                             CoreDX_FieldDef_t * field_def);
          unsigned char  __dummy_prevent_empty_class_SolarControlScheduleProfileList;

          typedef SolarControlScheduleProfileListTypeSupport TypeSupport;
          typedef SolarControlScheduleProfileListDataReader DataReader;
          typedef SolarControlScheduleProfileListDataWriter DataWriter;
          typedef SolarControlScheduleProfileListPtrSeq Seq;

        private:

      }; //openfmb::optimizermodule::SolarControlScheduleProfileList

      struct RequestedOptimizerScheduleProfile;
      class RequestedOptimizerScheduleProfileTypeSupport;
      class RequestedOptimizerScheduleProfileDataReader;
      class RequestedOptimizerScheduleProfileDataWriter;

/* DDS Data Type SEQUENCE: sequence<openfmb::optimizermodule::RequestedOptimizerScheduleProfile *> */
#ifndef _DDS_sequence_cpp_openfmb_optimizermodule_RequestedOptimizerScheduleProfilePtr_defined
#define _DDS_sequence_cpp_openfmb_optimizermodule_RequestedOptimizerScheduleProfilePtr_defined
      DECLARE_CPP_UNBOUNDED_SEQ( openfmb::optimizermodule::RequestedOptimizerScheduleProfile * , RequestedOptimizerScheduleProfilePtrSeq );
#endif /* DDS Data Type SEQUENCE: sequence<RequestedOptimizerScheduleProfilePtrSeq *> */

      struct COREDX_TS_STRUCT_EXPORT RequestedOptimizerScheduleProfile {
        public:
          /** Constructor, Copy Constructor, Destructor, Assignment operator */
          RequestedOptimizerScheduleProfile();
          ~RequestedOptimizerScheduleProfile();
          RequestedOptimizerScheduleProfile( const RequestedOptimizerScheduleProfile & other );
          RequestedOptimizerScheduleProfile& operator=( const RequestedOptimizerScheduleProfile & other);

          void init();
          void clear();
          void copy( const openfmb::optimizermodule::RequestedOptimizerScheduleProfile * instance );

          int  get_marshal_size(int offset, int just_keys) const ;
          int  marshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys) const ;
          int  marshal_key_hash(unsigned char *buf, int offset, int stream_len) const;
          int  unmarshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys);
          int  unmarshal_key_hash(unsigned char *buf, int offset, int stream_len);

          /* Member vars*/
          static unsigned char get_field_def(const char  * fieldname, 
                                             CoreDX_FieldDef_t * field_def);
          struct openfmb::optimizermodule::RegulatorControlScheduleProfileList  * regulatorControlScheduleProfileList;
          struct openfmb::optimizermodule::SolarControlScheduleProfileList  * solarControlScheduleProfileList;
          struct openfmb::optimizermodule::LoadControlScheduleProfileList  * loadControlScheduleProfileList;
          struct openfmb::optimizermodule::RequestedInterconnectionScheduleProfileList  * requestedInterconnectionScheduleProfileList;
          struct openfmb::optimizermodule::ESSControlScheduleProfileList  * essControlScheduleProfileList;

          typedef RequestedOptimizerScheduleProfileTypeSupport TypeSupport;
          typedef RequestedOptimizerScheduleProfileDataReader DataReader;
          typedef RequestedOptimizerScheduleProfileDataWriter DataWriter;
          typedef RequestedOptimizerScheduleProfilePtrSeq Seq;

        private:

      }; //openfmb::optimizermodule::RequestedOptimizerScheduleProfile


    }  /* namespace optimizermodule */

    namespace reclosermodule {

      struct RecloserControlXCBR;
      class RecloserControlXCBRTypeSupport;
      class RecloserControlXCBRDataReader;
      class RecloserControlXCBRDataWriter;

/* DDS Data Type SEQUENCE: sequence<openfmb::reclosermodule::RecloserControlXCBR *> */
#ifndef _DDS_sequence_cpp_openfmb_reclosermodule_RecloserControlXCBRPtr_defined
#define _DDS_sequence_cpp_openfmb_reclosermodule_RecloserControlXCBRPtr_defined
      DECLARE_CPP_UNBOUNDED_SEQ( openfmb::reclosermodule::RecloserControlXCBR * , RecloserControlXCBRPtrSeq );
#endif /* DDS Data Type SEQUENCE: sequence<RecloserControlXCBRPtrSeq *> */

      struct COREDX_TS_STRUCT_EXPORT RecloserControlXCBR : public openfmb::commonmodule::LogicalNodeForControl {
        public:
          /** Constructor, Copy Constructor, Destructor, Assignment operator */
          RecloserControlXCBR();
          ~RecloserControlXCBR();
          RecloserControlXCBR( const RecloserControlXCBR & other );
          RecloserControlXCBR& operator=( const RecloserControlXCBR & other);

          void init();
          void clear();
          void copy( const openfmb::reclosermodule::RecloserControlXCBR * instance );

          int  get_marshal_size(int offset, int just_keys) const ;
          int  marshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys) const ;
          int  marshal_key_hash(unsigned char *buf, int offset, int stream_len) const;
          int  unmarshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys);
          int  unmarshal_key_hash(unsigned char *buf, int offset, int stream_len);

          /* Member vars*/
          static unsigned char get_field_def(const char  * fieldname, 
                                             CoreDX_FieldDef_t * field_def);
          struct openfmb::commonmodule::ControlDPC  * Pos;

          typedef RecloserControlXCBRTypeSupport TypeSupport;
          typedef RecloserControlXCBRDataReader DataReader;
          typedef RecloserControlXCBRDataWriter DataWriter;
          typedef RecloserControlXCBRPtrSeq Seq;

        private:

      }; //openfmb::reclosermodule::RecloserControlXCBR

      struct RecloserEventXCBR;
      class RecloserEventXCBRTypeSupport;
      class RecloserEventXCBRDataReader;
      class RecloserEventXCBRDataWriter;

/* DDS Data Type SEQUENCE: sequence<openfmb::reclosermodule::RecloserEventXCBR *> */
#ifndef _DDS_sequence_cpp_openfmb_reclosermodule_RecloserEventXCBRPtr_defined
#define _DDS_sequence_cpp_openfmb_reclosermodule_RecloserEventXCBRPtr_defined
      DECLARE_CPP_UNBOUNDED_SEQ( openfmb::reclosermodule::RecloserEventXCBR * , RecloserEventXCBRPtrSeq );
#endif /* DDS Data Type SEQUENCE: sequence<RecloserEventXCBRPtrSeq *> */

      struct COREDX_TS_STRUCT_EXPORT RecloserEventXCBR : public openfmb::commonmodule::LogicalNodeForEventAndStatus {
        public:
          /** Constructor, Copy Constructor, Destructor, Assignment operator */
          RecloserEventXCBR();
          ~RecloserEventXCBR();
          RecloserEventXCBR( const RecloserEventXCBR & other );
          RecloserEventXCBR& operator=( const RecloserEventXCBR & other);

          void init();
          void clear();
          void copy( const openfmb::reclosermodule::RecloserEventXCBR * instance );

          int  get_marshal_size(int offset, int just_keys) const ;
          int  marshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys) const ;
          int  marshal_key_hash(unsigned char *buf, int offset, int stream_len) const;
          int  unmarshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys);
          int  unmarshal_key_hash(unsigned char *buf, int offset, int stream_len);

          /* Member vars*/
          static unsigned char get_field_def(const char  * fieldname, 
                                             CoreDX_FieldDef_t * field_def);
          struct openfmb::commonmodule::StatusDPS  Pos;

          typedef RecloserEventXCBRTypeSupport TypeSupport;
          typedef RecloserEventXCBRDataReader DataReader;
          typedef RecloserEventXCBRDataWriter DataWriter;
          typedef RecloserEventXCBRPtrSeq Seq;

        private:

      }; //openfmb::reclosermodule::RecloserEventXCBR

      struct RecloserStatusXCBR;
      class RecloserStatusXCBRTypeSupport;
      class RecloserStatusXCBRDataReader;
      class RecloserStatusXCBRDataWriter;

/* DDS Data Type SEQUENCE: sequence<openfmb::reclosermodule::RecloserStatusXCBR *> */
#ifndef _DDS_sequence_cpp_openfmb_reclosermodule_RecloserStatusXCBRPtr_defined
#define _DDS_sequence_cpp_openfmb_reclosermodule_RecloserStatusXCBRPtr_defined
      DECLARE_CPP_UNBOUNDED_SEQ( openfmb::reclosermodule::RecloserStatusXCBR * , RecloserStatusXCBRPtrSeq );
#endif /* DDS Data Type SEQUENCE: sequence<RecloserStatusXCBRPtrSeq *> */

      struct COREDX_TS_STRUCT_EXPORT RecloserStatusXCBR : public openfmb::commonmodule::LogicalNodeForEventAndStatus {
        public:
          /** Constructor, Copy Constructor, Destructor, Assignment operator */
          RecloserStatusXCBR();
          ~RecloserStatusXCBR();
          RecloserStatusXCBR( const RecloserStatusXCBR & other );
          RecloserStatusXCBR& operator=( const RecloserStatusXCBR & other);

          void init();
          void clear();
          void copy( const openfmb::reclosermodule::RecloserStatusXCBR * instance );

          int  get_marshal_size(int offset, int just_keys) const ;
          int  marshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys) const ;
          int  marshal_key_hash(unsigned char *buf, int offset, int stream_len) const;
          int  unmarshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys);
          int  unmarshal_key_hash(unsigned char *buf, int offset, int stream_len);

          /* Member vars*/
          static unsigned char get_field_def(const char  * fieldname, 
                                             CoreDX_FieldDef_t * field_def);
          struct openfmb::commonmodule::StatusDPS  Pos;

          typedef RecloserStatusXCBRTypeSupport TypeSupport;
          typedef RecloserStatusXCBRDataReader DataReader;
          typedef RecloserStatusXCBRDataWriter DataWriter;
          typedef RecloserStatusXCBRPtrSeq Seq;

        private:

      }; //openfmb::reclosermodule::RecloserStatusXCBR


    }  /* namespace reclosermodule */

    namespace switchmodule {

      struct SwitchControlXSWI;
      class SwitchControlXSWITypeSupport;
      class SwitchControlXSWIDataReader;
      class SwitchControlXSWIDataWriter;

/* DDS Data Type SEQUENCE: sequence<openfmb::switchmodule::SwitchControlXSWI *> */
#ifndef _DDS_sequence_cpp_openfmb_switchmodule_SwitchControlXSWIPtr_defined
#define _DDS_sequence_cpp_openfmb_switchmodule_SwitchControlXSWIPtr_defined
      DECLARE_CPP_UNBOUNDED_SEQ( openfmb::switchmodule::SwitchControlXSWI * , SwitchControlXSWIPtrSeq );
#endif /* DDS Data Type SEQUENCE: sequence<SwitchControlXSWIPtrSeq *> */

      struct COREDX_TS_STRUCT_EXPORT SwitchControlXSWI : public openfmb::commonmodule::LogicalNodeForControl {
        public:
          /** Constructor, Copy Constructor, Destructor, Assignment operator */
          SwitchControlXSWI();
          ~SwitchControlXSWI();
          SwitchControlXSWI( const SwitchControlXSWI & other );
          SwitchControlXSWI& operator=( const SwitchControlXSWI & other);

          void init();
          void clear();
          void copy( const openfmb::switchmodule::SwitchControlXSWI * instance );

          int  get_marshal_size(int offset, int just_keys) const ;
          int  marshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys) const ;
          int  marshal_key_hash(unsigned char *buf, int offset, int stream_len) const;
          int  unmarshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys);
          int  unmarshal_key_hash(unsigned char *buf, int offset, int stream_len);

          /* Member vars*/
          static unsigned char get_field_def(const char  * fieldname, 
                                             CoreDX_FieldDef_t * field_def);
          struct openfmb::commonmodule::ControlDPC  * Pos;

          typedef SwitchControlXSWITypeSupport TypeSupport;
          typedef SwitchControlXSWIDataReader DataReader;
          typedef SwitchControlXSWIDataWriter DataWriter;
          typedef SwitchControlXSWIPtrSeq Seq;

        private:

      }; //openfmb::switchmodule::SwitchControlXSWI

      struct SwitchEventXSWI;
      class SwitchEventXSWITypeSupport;
      class SwitchEventXSWIDataReader;
      class SwitchEventXSWIDataWriter;

/* DDS Data Type SEQUENCE: sequence<openfmb::switchmodule::SwitchEventXSWI *> */
#ifndef _DDS_sequence_cpp_openfmb_switchmodule_SwitchEventXSWIPtr_defined
#define _DDS_sequence_cpp_openfmb_switchmodule_SwitchEventXSWIPtr_defined
      DECLARE_CPP_UNBOUNDED_SEQ( openfmb::switchmodule::SwitchEventXSWI * , SwitchEventXSWIPtrSeq );
#endif /* DDS Data Type SEQUENCE: sequence<SwitchEventXSWIPtrSeq *> */

      struct COREDX_TS_STRUCT_EXPORT SwitchEventXSWI : public openfmb::commonmodule::LogicalNodeForEventAndStatus {
        public:
          /** Constructor, Copy Constructor, Destructor, Assignment operator */
          SwitchEventXSWI();
          ~SwitchEventXSWI();
          SwitchEventXSWI( const SwitchEventXSWI & other );
          SwitchEventXSWI& operator=( const SwitchEventXSWI & other);

          void init();
          void clear();
          void copy( const openfmb::switchmodule::SwitchEventXSWI * instance );

          int  get_marshal_size(int offset, int just_keys) const ;
          int  marshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys) const ;
          int  marshal_key_hash(unsigned char *buf, int offset, int stream_len) const;
          int  unmarshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys);
          int  unmarshal_key_hash(unsigned char *buf, int offset, int stream_len);

          /* Member vars*/
          static unsigned char get_field_def(const char  * fieldname, 
                                             CoreDX_FieldDef_t * field_def);
          struct openfmb::commonmodule::StatusDPS  Pos;

          typedef SwitchEventXSWITypeSupport TypeSupport;
          typedef SwitchEventXSWIDataReader DataReader;
          typedef SwitchEventXSWIDataWriter DataWriter;
          typedef SwitchEventXSWIPtrSeq Seq;

        private:

      }; //openfmb::switchmodule::SwitchEventXSWI

      struct SwitchStatusXSWI;
      class SwitchStatusXSWITypeSupport;
      class SwitchStatusXSWIDataReader;
      class SwitchStatusXSWIDataWriter;

/* DDS Data Type SEQUENCE: sequence<openfmb::switchmodule::SwitchStatusXSWI *> */
#ifndef _DDS_sequence_cpp_openfmb_switchmodule_SwitchStatusXSWIPtr_defined
#define _DDS_sequence_cpp_openfmb_switchmodule_SwitchStatusXSWIPtr_defined
      DECLARE_CPP_UNBOUNDED_SEQ( openfmb::switchmodule::SwitchStatusXSWI * , SwitchStatusXSWIPtrSeq );
#endif /* DDS Data Type SEQUENCE: sequence<SwitchStatusXSWIPtrSeq *> */

      struct COREDX_TS_STRUCT_EXPORT SwitchStatusXSWI : public openfmb::commonmodule::LogicalNodeForEventAndStatus {
        public:
          /** Constructor, Copy Constructor, Destructor, Assignment operator */
          SwitchStatusXSWI();
          ~SwitchStatusXSWI();
          SwitchStatusXSWI( const SwitchStatusXSWI & other );
          SwitchStatusXSWI& operator=( const SwitchStatusXSWI & other);

          void init();
          void clear();
          void copy( const openfmb::switchmodule::SwitchStatusXSWI * instance );

          int  get_marshal_size(int offset, int just_keys) const ;
          int  marshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys) const ;
          int  marshal_key_hash(unsigned char *buf, int offset, int stream_len) const;
          int  unmarshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys);
          int  unmarshal_key_hash(unsigned char *buf, int offset, int stream_len);

          /* Member vars*/
          static unsigned char get_field_def(const char  * fieldname, 
                                             CoreDX_FieldDef_t * field_def);
          struct openfmb::commonmodule::StatusDPS  Pos;

          typedef SwitchStatusXSWITypeSupport TypeSupport;
          typedef SwitchStatusXSWIDataReader DataReader;
          typedef SwitchStatusXSWIDataWriter DataWriter;
          typedef SwitchStatusXSWIPtrSeq Seq;

        private:

      }; //openfmb::switchmodule::SwitchStatusXSWI


    }  /* namespace switchmodule */

  }  /* namespace openfmb */

  namespace openfmb {


    namespace breakermodule {

      struct BreakerControlXCBR;
      class BreakerControlXCBRTypeSupport;
      class BreakerControlXCBRDataReader;
      class BreakerControlXCBRDataWriter;

/* DDS Data Type SEQUENCE: sequence<openfmb::breakermodule::BreakerControlXCBR *> */
#ifndef _DDS_sequence_cpp_openfmb_breakermodule_BreakerControlXCBRPtr_defined
#define _DDS_sequence_cpp_openfmb_breakermodule_BreakerControlXCBRPtr_defined
      DECLARE_CPP_UNBOUNDED_SEQ( openfmb::breakermodule::BreakerControlXCBR * , BreakerControlXCBRPtrSeq );
#endif /* DDS Data Type SEQUENCE: sequence<BreakerControlXCBRPtrSeq *> */

      struct COREDX_TS_STRUCT_EXPORT BreakerControlXCBR : public openfmb::commonmodule::LogicalNodeForControl {
        public:
          /** Constructor, Copy Constructor, Destructor, Assignment operator */
          BreakerControlXCBR();
          ~BreakerControlXCBR();
          BreakerControlXCBR( const BreakerControlXCBR & other );
          BreakerControlXCBR& operator=( const BreakerControlXCBR & other);

          void init();
          void clear();
          void copy( const openfmb::breakermodule::BreakerControlXCBR * instance );

          int  get_marshal_size(int offset, int just_keys) const ;
          int  marshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys) const ;
          int  marshal_key_hash(unsigned char *buf, int offset, int stream_len) const;
          int  unmarshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys);
          int  unmarshal_key_hash(unsigned char *buf, int offset, int stream_len);

          /* Member vars*/
          static unsigned char get_field_def(const char  * fieldname, 
                                             CoreDX_FieldDef_t * field_def);
          struct openfmb::commonmodule::ControlDPC  * Pos;

          typedef BreakerControlXCBRTypeSupport TypeSupport;
          typedef BreakerControlXCBRDataReader DataReader;
          typedef BreakerControlXCBRDataWriter DataWriter;
          typedef BreakerControlXCBRPtrSeq Seq;

        private:

      }; //openfmb::breakermodule::BreakerControlXCBR

      struct BreakerEventXCBR;
      class BreakerEventXCBRTypeSupport;
      class BreakerEventXCBRDataReader;
      class BreakerEventXCBRDataWriter;

/* DDS Data Type SEQUENCE: sequence<openfmb::breakermodule::BreakerEventXCBR *> */
#ifndef _DDS_sequence_cpp_openfmb_breakermodule_BreakerEventXCBRPtr_defined
#define _DDS_sequence_cpp_openfmb_breakermodule_BreakerEventXCBRPtr_defined
      DECLARE_CPP_UNBOUNDED_SEQ( openfmb::breakermodule::BreakerEventXCBR * , BreakerEventXCBRPtrSeq );
#endif /* DDS Data Type SEQUENCE: sequence<BreakerEventXCBRPtrSeq *> */

      struct COREDX_TS_STRUCT_EXPORT BreakerEventXCBR : public openfmb::commonmodule::LogicalNodeForEventAndStatus {
        public:
          /** Constructor, Copy Constructor, Destructor, Assignment operator */
          BreakerEventXCBR();
          ~BreakerEventXCBR();
          BreakerEventXCBR( const BreakerEventXCBR & other );
          BreakerEventXCBR& operator=( const BreakerEventXCBR & other);

          void init();
          void clear();
          void copy( const openfmb::breakermodule::BreakerEventXCBR * instance );

          int  get_marshal_size(int offset, int just_keys) const ;
          int  marshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys) const ;
          int  marshal_key_hash(unsigned char *buf, int offset, int stream_len) const;
          int  unmarshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys);
          int  unmarshal_key_hash(unsigned char *buf, int offset, int stream_len);

          /* Member vars*/
          static unsigned char get_field_def(const char  * fieldname, 
                                             CoreDX_FieldDef_t * field_def);
          struct openfmb::commonmodule::StatusDPS  Pos;

          typedef BreakerEventXCBRTypeSupport TypeSupport;
          typedef BreakerEventXCBRDataReader DataReader;
          typedef BreakerEventXCBRDataWriter DataWriter;
          typedef BreakerEventXCBRPtrSeq Seq;

        private:

      }; //openfmb::breakermodule::BreakerEventXCBR

      struct BreakerStatusXCBR;
      class BreakerStatusXCBRTypeSupport;
      class BreakerStatusXCBRDataReader;
      class BreakerStatusXCBRDataWriter;

/* DDS Data Type SEQUENCE: sequence<openfmb::breakermodule::BreakerStatusXCBR *> */
#ifndef _DDS_sequence_cpp_openfmb_breakermodule_BreakerStatusXCBRPtr_defined
#define _DDS_sequence_cpp_openfmb_breakermodule_BreakerStatusXCBRPtr_defined
      DECLARE_CPP_UNBOUNDED_SEQ( openfmb::breakermodule::BreakerStatusXCBR * , BreakerStatusXCBRPtrSeq );
#endif /* DDS Data Type SEQUENCE: sequence<BreakerStatusXCBRPtrSeq *> */

      struct COREDX_TS_STRUCT_EXPORT BreakerStatusXCBR : public openfmb::commonmodule::LogicalNodeForEventAndStatus {
        public:
          /** Constructor, Copy Constructor, Destructor, Assignment operator */
          BreakerStatusXCBR();
          ~BreakerStatusXCBR();
          BreakerStatusXCBR( const BreakerStatusXCBR & other );
          BreakerStatusXCBR& operator=( const BreakerStatusXCBR & other);

          void init();
          void clear();
          void copy( const openfmb::breakermodule::BreakerStatusXCBR * instance );

          int  get_marshal_size(int offset, int just_keys) const ;
          int  marshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys) const ;
          int  marshal_key_hash(unsigned char *buf, int offset, int stream_len) const;
          int  unmarshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys);
          int  unmarshal_key_hash(unsigned char *buf, int offset, int stream_len);

          /* Member vars*/
          static unsigned char get_field_def(const char  * fieldname, 
                                             CoreDX_FieldDef_t * field_def);
          struct openfmb::commonmodule::StatusDPS  Pos;

          typedef BreakerStatusXCBRTypeSupport TypeSupport;
          typedef BreakerStatusXCBRDataReader DataReader;
          typedef BreakerStatusXCBRDataWriter DataWriter;
          typedef BreakerStatusXCBRPtrSeq Seq;

        private:

      }; //openfmb::breakermodule::BreakerStatusXCBR


    }  /* namespace breakermodule */

    namespace commonmodule {

      struct ASG;
      class ASGTypeSupport;
      class ASGDataReader;
      class ASGDataWriter;

/* DDS Data Type SEQUENCE: sequence<openfmb::commonmodule::ASG *> */
#ifndef _DDS_sequence_cpp_openfmb_commonmodule_ASGPtr_defined
#define _DDS_sequence_cpp_openfmb_commonmodule_ASGPtr_defined
      DECLARE_CPP_UNBOUNDED_SEQ( openfmb::commonmodule::ASG * , ASGPtrSeq );
#endif /* DDS Data Type SEQUENCE: sequence<ASGPtrSeq *> */

      struct COREDX_TS_STRUCT_EXPORT ASG {
        public:
          /** Constructor, Copy Constructor, Destructor, Assignment operator */
          ASG();
          ~ASG();
          ASG( const ASG & other );
          ASG& operator=( const ASG & other);

          void init();
          void clear();
          void copy( const openfmb::commonmodule::ASG * instance );

          int  get_marshal_size(int offset, int just_keys) const ;
          int  marshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys) const ;
          int  marshal_key_hash(unsigned char *buf, int offset, int stream_len) const;
          int  unmarshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys);
          int  unmarshal_key_hash(unsigned char *buf, int offset, int stream_len);

          /* Member vars*/
          static unsigned char get_field_def(const char  * fieldname, 
                                             CoreDX_FieldDef_t * field_def);
          struct openfmb::commonmodule::AnalogueValueCtl  setMag;
          struct openfmb::commonmodule::Unit  * units;

          typedef ASGTypeSupport TypeSupport;
          typedef ASGDataReader DataReader;
          typedef ASGDataWriter DataWriter;
          typedef ASGPtrSeq Seq;

        private:

      }; //openfmb::commonmodule::ASG

      struct CMV;
      class CMVTypeSupport;
      class CMVDataReader;
      class CMVDataWriter;

/* DDS Data Type SEQUENCE: sequence<openfmb::commonmodule::CMV *> */
#ifndef _DDS_sequence_cpp_openfmb_commonmodule_CMVPtr_defined
#define _DDS_sequence_cpp_openfmb_commonmodule_CMVPtr_defined
      DECLARE_CPP_UNBOUNDED_SEQ( openfmb::commonmodule::CMV * , CMVPtrSeq );
#endif /* DDS Data Type SEQUENCE: sequence<CMVPtrSeq *> */

      struct COREDX_TS_STRUCT_EXPORT CMV {
        public:
          /** Constructor, Copy Constructor, Destructor, Assignment operator */
          CMV();
          ~CMV();
          CMV( const CMV & other );
          CMV& operator=( const CMV & other);

          void init();
          void clear();
          void copy( const openfmb::commonmodule::CMV * instance );

          int  get_marshal_size(int offset, int just_keys) const ;
          int  marshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys) const ;
          int  marshal_key_hash(unsigned char *buf, int offset, int stream_len) const;
          int  unmarshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys);
          int  unmarshal_key_hash(unsigned char *buf, int offset, int stream_len);

          /* Member vars*/
          static unsigned char get_field_def(const char  * fieldname, 
                                             CoreDX_FieldDef_t * field_def);
          struct openfmb::commonmodule::Vector  cVal;
          openfmb::commonmodule::Quality  q;
          openfmb::commonmodule::Timestamp  t;
          struct openfmb::commonmodule::Unit  * units;

          typedef CMVTypeSupport TypeSupport;
          typedef CMVDataReader DataReader;
          typedef CMVDataWriter DataWriter;
          typedef CMVPtrSeq Seq;

        private:

      }; //openfmb::commonmodule::CMV

      struct ControlValue;
      class ControlValueTypeSupport;
      class ControlValueDataReader;
      class ControlValueDataWriter;

/* DDS Data Type SEQUENCE: sequence<openfmb::commonmodule::ControlValue *> */
#ifndef _DDS_sequence_cpp_openfmb_commonmodule_ControlValuePtr_defined
#define _DDS_sequence_cpp_openfmb_commonmodule_ControlValuePtr_defined
      DECLARE_CPP_UNBOUNDED_SEQ( openfmb::commonmodule::ControlValue * , ControlValuePtrSeq );
#endif /* DDS Data Type SEQUENCE: sequence<ControlValuePtrSeq *> */

      struct COREDX_TS_STRUCT_EXPORT ControlValue : public openfmb::commonmodule::IdentifiedObject {
        public:
          /** Constructor, Copy Constructor, Destructor, Assignment operator */
          ControlValue();
          ~ControlValue();
          ControlValue( const ControlValue & other );
          ControlValue& operator=( const ControlValue & other);

          void init();
          void clear();
          void copy( const openfmb::commonmodule::ControlValue * instance );

          int  get_marshal_size(int offset, int just_keys) const ;
          int  marshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys) const ;
          int  marshal_key_hash(unsigned char *buf, int offset, int stream_len) const;
          int  unmarshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys);
          int  unmarshal_key_hash(unsigned char *buf, int offset, int stream_len);

          /* Member vars*/
          static unsigned char get_field_def(const char  * fieldname, 
                                             CoreDX_FieldDef_t * field_def);
          unsigned char  * modBlk;

          typedef ControlValueTypeSupport TypeSupport;
          typedef ControlValueDataReader DataReader;
          typedef ControlValueDataWriter DataWriter;
          typedef ControlValuePtrSeq Seq;

        private:

      }; //openfmb::commonmodule::ControlValue

      struct ControlValueSource;
      class ControlValueSourceTypeSupport;
      class ControlValueSourceDataReader;
      class ControlValueSourceDataWriter;

/* DDS Data Type SEQUENCE: sequence<openfmb::commonmodule::ControlValueSource *> */
#ifndef _DDS_sequence_cpp_openfmb_commonmodule_ControlValueSourcePtr_defined
#define _DDS_sequence_cpp_openfmb_commonmodule_ControlValueSourcePtr_defined
      DECLARE_CPP_UNBOUNDED_SEQ( openfmb::commonmodule::ControlValueSource * , ControlValueSourcePtrSeq );
#endif /* DDS Data Type SEQUENCE: sequence<ControlValueSourcePtrSeq *> */

      struct COREDX_TS_STRUCT_EXPORT ControlValueSource : public openfmb::commonmodule::IdentifiedObject {
        public:
          /** Constructor, Copy Constructor, Destructor, Assignment operator */
          ControlValueSource();
          ~ControlValueSource();
          ControlValueSource( const ControlValueSource & other );
          ControlValueSource& operator=( const ControlValueSource & other);

          void init();
          void clear();
          void copy( const openfmb::commonmodule::ControlValueSource * instance );

          int  get_marshal_size(int offset, int just_keys) const ;
          int  marshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys) const ;
          int  marshal_key_hash(unsigned char *buf, int offset, int stream_len) const;
          int  unmarshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys);
          int  unmarshal_key_hash(unsigned char *buf, int offset, int stream_len);

          /* Member vars*/
          static unsigned char get_field_def(const char  * fieldname, 
                                             CoreDX_FieldDef_t * field_def);
          unsigned char  __dummy_prevent_empty_class_ControlValueSource;

          typedef ControlValueSourceTypeSupport TypeSupport;
          typedef ControlValueSourceDataReader DataReader;
          typedef ControlValueSourceDataWriter DataWriter;
          typedef ControlValueSourcePtrSeq Seq;

        private:

      }; //openfmb::commonmodule::ControlValueSource

      struct CSG;
      class CSGTypeSupport;
      class CSGDataReader;
      class CSGDataWriter;

/* DDS Data Type SEQUENCE: sequence<openfmb::commonmodule::CSG *> */
#ifndef _DDS_sequence_cpp_openfmb_commonmodule_CSGPtr_defined
#define _DDS_sequence_cpp_openfmb_commonmodule_CSGPtr_defined
      DECLARE_CPP_UNBOUNDED_SEQ( openfmb::commonmodule::CSG * , CSGPtrSeq );
#endif /* DDS Data Type SEQUENCE: sequence<CSGPtrSeq *> */

      struct COREDX_TS_STRUCT_EXPORT CSG {
        public:
          /** Constructor, Copy Constructor, Destructor, Assignment operator */
          CSG();
          ~CSG();
          CSG( const CSG & other );
          CSG& operator=( const CSG & other);

#ifndef _DDS_SEQ_cpp_openfmb_commonmodule_CSG_openfmb_commonmodule_PointSeq_defined
#define _DDS_SEQ_cpp_openfmb_commonmodule_CSG_openfmb_commonmodule_PointSeq_defined
        DECLARE_CPP_UNBOUNDED_SEQ( struct openfmb::commonmodule::Point , openfmb_commonmodule_PointSeq );
#endif /* User Defined SEQUENCE: sequence openfmb::commonmodule::CSG::PointSeq */

          void init();
          void clear();
          void copy( const openfmb::commonmodule::CSG * instance );

          int  get_marshal_size(int offset, int just_keys) const ;
          int  marshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys) const ;
          int  marshal_key_hash(unsigned char *buf, int offset, int stream_len) const;
          int  unmarshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys);
          int  unmarshal_key_hash(unsigned char *buf, int offset, int stream_len);

          /* Member vars*/
          static unsigned char get_field_def(const char  * fieldname, 
                                             CoreDX_FieldDef_t * field_def);
          openfmb::commonmodule::CSG::openfmb_commonmodule_PointSeq  crvPts;
          struct openfmb::commonmodule::Unit  xUnits;
          struct openfmb::commonmodule::Unit  yUnits;
          struct openfmb::commonmodule::Unit  * zUnits;
          openfmb::commonmodule::VisString255  xD;
          openfmb::commonmodule::Unicode255  * xDU;
          openfmb::commonmodule::VisString255  yD;
          openfmb::commonmodule::Unicode255  * yDU;
          openfmb::commonmodule::VisString255  * zD;
          openfmb::commonmodule::Unicode255  * zDU;

          typedef CSGTypeSupport TypeSupport;
          typedef CSGDataReader DataReader;
          typedef CSGDataWriter DataWriter;
          typedef CSGPtrSeq Seq;

        private:

      }; //openfmb::commonmodule::CSG

      struct DEL;
      class DELTypeSupport;
      class DELDataReader;
      class DELDataWriter;

/* DDS Data Type SEQUENCE: sequence<openfmb::commonmodule::DEL *> */
#ifndef _DDS_sequence_cpp_openfmb_commonmodule_DELPtr_defined
#define _DDS_sequence_cpp_openfmb_commonmodule_DELPtr_defined
      DECLARE_CPP_UNBOUNDED_SEQ( openfmb::commonmodule::DEL * , DELPtrSeq );
#endif /* DDS Data Type SEQUENCE: sequence<DELPtrSeq *> */

      struct COREDX_TS_STRUCT_EXPORT DEL {
        public:
          /** Constructor, Copy Constructor, Destructor, Assignment operator */
          DEL();
          ~DEL();
          DEL( const DEL & other );
          DEL& operator=( const DEL & other);

          void init();
          void clear();
          void copy( const openfmb::commonmodule::DEL * instance );

          int  get_marshal_size(int offset, int just_keys) const ;
          int  marshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys) const ;
          int  marshal_key_hash(unsigned char *buf, int offset, int stream_len) const;
          int  unmarshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys);
          int  unmarshal_key_hash(unsigned char *buf, int offset, int stream_len);

          /* Member vars*/
          static unsigned char get_field_def(const char  * fieldname, 
                                             CoreDX_FieldDef_t * field_def);
          struct openfmb::commonmodule::CMV  * phsAB;
          struct openfmb::commonmodule::CMV  * phsBC;
          struct openfmb::commonmodule::CMV  * phsCA;

          typedef DELTypeSupport TypeSupport;
          typedef DELDataReader DataReader;
          typedef DELDataWriter DataWriter;
          typedef DELPtrSeq Seq;

        private:

      }; //openfmb::commonmodule::DEL

      struct EventValue;
      class EventValueTypeSupport;
      class EventValueDataReader;
      class EventValueDataWriter;

/* DDS Data Type SEQUENCE: sequence<openfmb::commonmodule::EventValue *> */
#ifndef _DDS_sequence_cpp_openfmb_commonmodule_EventValuePtr_defined
#define _DDS_sequence_cpp_openfmb_commonmodule_EventValuePtr_defined
      DECLARE_CPP_UNBOUNDED_SEQ( openfmb::commonmodule::EventValue * , EventValuePtrSeq );
#endif /* DDS Data Type SEQUENCE: sequence<EventValuePtrSeq *> */

      struct COREDX_TS_STRUCT_EXPORT EventValue : public openfmb::commonmodule::IdentifiedObject {
        public:
          /** Constructor, Copy Constructor, Destructor, Assignment operator */
          EventValue();
          ~EventValue();
          EventValue( const EventValue & other );
          EventValue& operator=( const EventValue & other);

          void init();
          void clear();
          void copy( const openfmb::commonmodule::EventValue * instance );

          int  get_marshal_size(int offset, int just_keys) const ;
          int  marshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys) const ;
          int  marshal_key_hash(unsigned char *buf, int offset, int stream_len) const;
          int  unmarshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys);
          int  unmarshal_key_hash(unsigned char *buf, int offset, int stream_len);

          /* Member vars*/
          static unsigned char get_field_def(const char  * fieldname, 
                                             CoreDX_FieldDef_t * field_def);
          unsigned char  __dummy_prevent_empty_class_EventValue;

          typedef EventValueTypeSupport TypeSupport;
          typedef EventValueDataReader DataReader;
          typedef EventValueDataWriter DataWriter;
          typedef EventValuePtrSeq Seq;

        private:

      }; //openfmb::commonmodule::EventValue

      struct EventValueSource;
      class EventValueSourceTypeSupport;
      class EventValueSourceDataReader;
      class EventValueSourceDataWriter;

/* DDS Data Type SEQUENCE: sequence<openfmb::commonmodule::EventValueSource *> */
#ifndef _DDS_sequence_cpp_openfmb_commonmodule_EventValueSourcePtr_defined
#define _DDS_sequence_cpp_openfmb_commonmodule_EventValueSourcePtr_defined
      DECLARE_CPP_UNBOUNDED_SEQ( openfmb::commonmodule::EventValueSource * , EventValueSourcePtrSeq );
#endif /* DDS Data Type SEQUENCE: sequence<EventValueSourcePtrSeq *> */

      struct COREDX_TS_STRUCT_EXPORT EventValueSource : public openfmb::commonmodule::IdentifiedObject {
        public:
          /** Constructor, Copy Constructor, Destructor, Assignment operator */
          EventValueSource();
          ~EventValueSource();
          EventValueSource( const EventValueSource & other );
          EventValueSource& operator=( const EventValueSource & other);

          void init();
          void clear();
          void copy( const openfmb::commonmodule::EventValueSource * instance );

          int  get_marshal_size(int offset, int just_keys) const ;
          int  marshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys) const ;
          int  marshal_key_hash(unsigned char *buf, int offset, int stream_len) const;
          int  unmarshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys);
          int  unmarshal_key_hash(unsigned char *buf, int offset, int stream_len);

          /* Member vars*/
          static unsigned char get_field_def(const char  * fieldname, 
                                             CoreDX_FieldDef_t * field_def);
          unsigned char  __dummy_prevent_empty_class_EventValueSource;

          typedef EventValueSourceTypeSupport TypeSupport;
          typedef EventValueSourceDataReader DataReader;
          typedef EventValueSourceDataWriter DataWriter;
          typedef EventValueSourcePtrSeq Seq;

        private:

      }; //openfmb::commonmodule::EventValueSource

      struct ForecastValue;
      class ForecastValueTypeSupport;
      class ForecastValueDataReader;
      class ForecastValueDataWriter;

/* DDS Data Type SEQUENCE: sequence<openfmb::commonmodule::ForecastValue *> */
#ifndef _DDS_sequence_cpp_openfmb_commonmodule_ForecastValuePtr_defined
#define _DDS_sequence_cpp_openfmb_commonmodule_ForecastValuePtr_defined
      DECLARE_CPP_UNBOUNDED_SEQ( openfmb::commonmodule::ForecastValue * , ForecastValuePtrSeq );
#endif /* DDS Data Type SEQUENCE: sequence<ForecastValuePtrSeq *> */

      struct COREDX_TS_STRUCT_EXPORT ForecastValue : public openfmb::commonmodule::IdentifiedObject {
        public:
          /** Constructor, Copy Constructor, Destructor, Assignment operator */
          ForecastValue();
          ~ForecastValue();
          ForecastValue( const ForecastValue & other );
          ForecastValue& operator=( const ForecastValue & other);

          void init();
          void clear();
          void copy( const openfmb::commonmodule::ForecastValue * instance );

          int  get_marshal_size(int offset, int just_keys) const ;
          int  marshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys) const ;
          int  marshal_key_hash(unsigned char *buf, int offset, int stream_len) const;
          int  unmarshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys);
          int  unmarshal_key_hash(unsigned char *buf, int offset, int stream_len);

          /* Member vars*/
          static unsigned char get_field_def(const char  * fieldname, 
                                             CoreDX_FieldDef_t * field_def);
          unsigned char  __dummy_prevent_empty_class_ForecastValue;

          typedef ForecastValueTypeSupport TypeSupport;
          typedef ForecastValueDataReader DataReader;
          typedef ForecastValueDataWriter DataWriter;
          typedef ForecastValuePtrSeq Seq;

        private:

      }; //openfmb::commonmodule::ForecastValue

      struct ForecastValueSource;
      class ForecastValueSourceTypeSupport;
      class ForecastValueSourceDataReader;
      class ForecastValueSourceDataWriter;

/* DDS Data Type SEQUENCE: sequence<openfmb::commonmodule::ForecastValueSource *> */
#ifndef _DDS_sequence_cpp_openfmb_commonmodule_ForecastValueSourcePtr_defined
#define _DDS_sequence_cpp_openfmb_commonmodule_ForecastValueSourcePtr_defined
      DECLARE_CPP_UNBOUNDED_SEQ( openfmb::commonmodule::ForecastValueSource * , ForecastValueSourcePtrSeq );
#endif /* DDS Data Type SEQUENCE: sequence<ForecastValueSourcePtrSeq *> */

      struct COREDX_TS_STRUCT_EXPORT ForecastValueSource : public openfmb::commonmodule::IdentifiedObject {
        public:
          /** Constructor, Copy Constructor, Destructor, Assignment operator */
          ForecastValueSource();
          ~ForecastValueSource();
          ForecastValueSource( const ForecastValueSource & other );
          ForecastValueSource& operator=( const ForecastValueSource & other);

          void init();
          void clear();
          void copy( const openfmb::commonmodule::ForecastValueSource * instance );

          int  get_marshal_size(int offset, int just_keys) const ;
          int  marshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys) const ;
          int  marshal_key_hash(unsigned char *buf, int offset, int stream_len) const;
          int  unmarshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys);
          int  unmarshal_key_hash(unsigned char *buf, int offset, int stream_len);

          /* Member vars*/
          static unsigned char get_field_def(const char  * fieldname, 
                                             CoreDX_FieldDef_t * field_def);
          unsigned char  __dummy_prevent_empty_class_ForecastValueSource;

          typedef ForecastValueSourceTypeSupport TypeSupport;
          typedef ForecastValueSourceDataReader DataReader;
          typedef ForecastValueSourceDataWriter DataWriter;
          typedef ForecastValueSourcePtrSeq Seq;

        private:

      }; //openfmb::commonmodule::ForecastValueSource

      struct GenerationEventZGEN;
      class GenerationEventZGENTypeSupport;
      class GenerationEventZGENDataReader;
      class GenerationEventZGENDataWriter;

/* DDS Data Type SEQUENCE: sequence<openfmb::commonmodule::GenerationEventZGEN *> */
#ifndef _DDS_sequence_cpp_openfmb_commonmodule_GenerationEventZGENPtr_defined
#define _DDS_sequence_cpp_openfmb_commonmodule_GenerationEventZGENPtr_defined
      DECLARE_CPP_UNBOUNDED_SEQ( openfmb::commonmodule::GenerationEventZGEN * , GenerationEventZGENPtrSeq );
#endif /* DDS Data Type SEQUENCE: sequence<GenerationEventZGENPtrSeq *> */

      struct COREDX_TS_STRUCT_EXPORT GenerationEventZGEN : public openfmb::generationmodule::GenerationEventAndStatusZGEN {
        public:
          /** Constructor, Copy Constructor, Destructor, Assignment operator */
          GenerationEventZGEN();
          ~GenerationEventZGEN();
          GenerationEventZGEN( const GenerationEventZGEN & other );
          GenerationEventZGEN& operator=( const GenerationEventZGEN & other);

          void init();
          void clear();
          void copy( const openfmb::commonmodule::GenerationEventZGEN * instance );

          int  get_marshal_size(int offset, int just_keys) const ;
          int  marshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys) const ;
          int  marshal_key_hash(unsigned char *buf, int offset, int stream_len) const;
          int  unmarshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys);
          int  unmarshal_key_hash(unsigned char *buf, int offset, int stream_len);

          /* Member vars*/
          static unsigned char get_field_def(const char  * fieldname, 
                                             CoreDX_FieldDef_t * field_def);
          unsigned char  __dummy_prevent_empty_class_GenerationEventZGEN;

          typedef GenerationEventZGENTypeSupport TypeSupport;
          typedef GenerationEventZGENDataReader DataReader;
          typedef GenerationEventZGENDataWriter DataWriter;
          typedef GenerationEventZGENPtrSeq Seq;

        private:

      }; //openfmb::commonmodule::GenerationEventZGEN

      struct GenerationStatusZGEN;
      class GenerationStatusZGENTypeSupport;
      class GenerationStatusZGENDataReader;
      class GenerationStatusZGENDataWriter;

/* DDS Data Type SEQUENCE: sequence<openfmb::commonmodule::GenerationStatusZGEN *> */
#ifndef _DDS_sequence_cpp_openfmb_commonmodule_GenerationStatusZGENPtr_defined
#define _DDS_sequence_cpp_openfmb_commonmodule_GenerationStatusZGENPtr_defined
      DECLARE_CPP_UNBOUNDED_SEQ( openfmb::commonmodule::GenerationStatusZGEN * , GenerationStatusZGENPtrSeq );
#endif /* DDS Data Type SEQUENCE: sequence<GenerationStatusZGENPtrSeq *> */

      struct COREDX_TS_STRUCT_EXPORT GenerationStatusZGEN : public openfmb::generationmodule::GenerationEventAndStatusZGEN {
        public:
          /** Constructor, Copy Constructor, Destructor, Assignment operator */
          GenerationStatusZGEN();
          ~GenerationStatusZGEN();
          GenerationStatusZGEN( const GenerationStatusZGEN & other );
          GenerationStatusZGEN& operator=( const GenerationStatusZGEN & other);

          void init();
          void clear();
          void copy( const openfmb::commonmodule::GenerationStatusZGEN * instance );

          int  get_marshal_size(int offset, int just_keys) const ;
          int  marshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys) const ;
          int  marshal_key_hash(unsigned char *buf, int offset, int stream_len) const;
          int  unmarshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys);
          int  unmarshal_key_hash(unsigned char *buf, int offset, int stream_len);

          /* Member vars*/
          static unsigned char get_field_def(const char  * fieldname, 
                                             CoreDX_FieldDef_t * field_def);
          unsigned char  __dummy_prevent_empty_class_GenerationStatusZGEN;

          typedef GenerationStatusZGENTypeSupport TypeSupport;
          typedef GenerationStatusZGENDataReader DataReader;
          typedef GenerationStatusZGENDataWriter DataWriter;
          typedef GenerationStatusZGENPtrSeq Seq;

        private:

      }; //openfmb::commonmodule::GenerationStatusZGEN

      struct InverterEventAndStatusZGEN;
      class InverterEventAndStatusZGENTypeSupport;
      class InverterEventAndStatusZGENDataReader;
      class InverterEventAndStatusZGENDataWriter;

/* DDS Data Type SEQUENCE: sequence<openfmb::commonmodule::InverterEventAndStatusZGEN *> */
#ifndef _DDS_sequence_cpp_openfmb_commonmodule_InverterEventAndStatusZGENPtr_defined
#define _DDS_sequence_cpp_openfmb_commonmodule_InverterEventAndStatusZGENPtr_defined
      DECLARE_CPP_UNBOUNDED_SEQ( openfmb::commonmodule::InverterEventAndStatusZGEN * , InverterEventAndStatusZGENPtrSeq );
#endif /* DDS Data Type SEQUENCE: sequence<InverterEventAndStatusZGENPtrSeq *> */

      struct COREDX_TS_STRUCT_EXPORT InverterEventAndStatusZGEN : public openfmb::commonmodule::LogicalNodeForEventAndStatus {
        public:
          /** Constructor, Copy Constructor, Destructor, Assignment operator */
          InverterEventAndStatusZGEN();
          ~InverterEventAndStatusZGEN();
          InverterEventAndStatusZGEN( const InverterEventAndStatusZGEN & other );
          InverterEventAndStatusZGEN& operator=( const InverterEventAndStatusZGEN & other);

          void init();
          void clear();
          void copy( const openfmb::commonmodule::InverterEventAndStatusZGEN * instance );

          int  get_marshal_size(int offset, int just_keys) const ;
          int  marshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys) const ;
          int  marshal_key_hash(unsigned char *buf, int offset, int stream_len) const;
          int  unmarshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys);
          int  unmarshal_key_hash(unsigned char *buf, int offset, int stream_len);

          /* Member vars*/
          static unsigned char get_field_def(const char  * fieldname, 
                                             CoreDX_FieldDef_t * field_def);
          struct openfmb::commonmodule::ENS_DERGeneratorStateKind  GnOpSt;
          struct openfmb::commonmodule::StatusSPS  * GnSynSt;
          struct openfmb::commonmodule::StatusSPS  * ParSt;
          struct openfmb::commonmodule::StatusSPS  * RampLodSw;
          struct openfmb::commonmodule::StatusSPS  * DCPwrSt;
          struct openfmb::commonmodule::StatusSPS  * EmgStop;
          struct openfmb::commonmodule::StatusDPS  * GnCtl;

          typedef InverterEventAndStatusZGENTypeSupport TypeSupport;
          typedef InverterEventAndStatusZGENDataReader DataReader;
          typedef InverterEventAndStatusZGENDataWriter DataWriter;
          typedef InverterEventAndStatusZGENPtrSeq Seq;

        private:

      }; //openfmb::commonmodule::InverterEventAndStatusZGEN

      struct MeasurementIED;
      class MeasurementIEDTypeSupport;
      class MeasurementIEDDataReader;
      class MeasurementIEDDataWriter;

/* DDS Data Type SEQUENCE: sequence<openfmb::commonmodule::MeasurementIED *> */
#ifndef _DDS_sequence_cpp_openfmb_commonmodule_MeasurementIEDPtr_defined
#define _DDS_sequence_cpp_openfmb_commonmodule_MeasurementIEDPtr_defined
      DECLARE_CPP_UNBOUNDED_SEQ( openfmb::commonmodule::MeasurementIED * , MeasurementIEDPtrSeq );
#endif /* DDS Data Type SEQUENCE: sequence<MeasurementIEDPtrSeq *> */

      struct COREDX_TS_STRUCT_EXPORT MeasurementIED : public openfmb::commonmodule::MeasurementValueSource {
        public:
          /** Constructor, Copy Constructor, Destructor, Assignment operator */
          MeasurementIED();
          ~MeasurementIED();
          MeasurementIED( const MeasurementIED & other );
          MeasurementIED& operator=( const MeasurementIED & other);

          void init();
          void clear();
          void copy( const openfmb::commonmodule::MeasurementIED * instance );

          int  get_marshal_size(int offset, int just_keys) const ;
          int  marshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys) const ;
          int  marshal_key_hash(unsigned char *buf, int offset, int stream_len) const;
          int  unmarshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys);
          int  unmarshal_key_hash(unsigned char *buf, int offset, int stream_len);

          /* Member vars*/
          static unsigned char get_field_def(const char  * fieldname, 
                                             CoreDX_FieldDef_t * field_def);
          char *  sourceApplicationID;    /* key */
          UML_Extension::dateTime  sourceDateTime;

          typedef MeasurementIEDTypeSupport TypeSupport;
          typedef MeasurementIEDDataReader DataReader;
          typedef MeasurementIEDDataWriter DataWriter;
          typedef MeasurementIEDPtrSeq Seq;

        private:

      }; //openfmb::commonmodule::MeasurementIED

      struct MV;
      class MVTypeSupport;
      class MVDataReader;
      class MVDataWriter;

/* DDS Data Type SEQUENCE: sequence<openfmb::commonmodule::MV *> */
#ifndef _DDS_sequence_cpp_openfmb_commonmodule_MVPtr_defined
#define _DDS_sequence_cpp_openfmb_commonmodule_MVPtr_defined
      DECLARE_CPP_UNBOUNDED_SEQ( openfmb::commonmodule::MV * , MVPtrSeq );
#endif /* DDS Data Type SEQUENCE: sequence<MVPtrSeq *> */

      struct COREDX_TS_STRUCT_EXPORT MV {
        public:
          /** Constructor, Copy Constructor, Destructor, Assignment operator */
          MV();
          ~MV();
          MV( const MV & other );
          MV& operator=( const MV & other);

          void init();
          void clear();
          void copy( const openfmb::commonmodule::MV * instance );

          int  get_marshal_size(int offset, int just_keys) const ;
          int  marshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys) const ;
          int  marshal_key_hash(unsigned char *buf, int offset, int stream_len) const;
          int  unmarshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys);
          int  unmarshal_key_hash(unsigned char *buf, int offset, int stream_len);

          /* Member vars*/
          static unsigned char get_field_def(const char  * fieldname, 
                                             CoreDX_FieldDef_t * field_def);
          struct openfmb::commonmodule::AnalogueValue  mag;
          openfmb::commonmodule::Quality  q;
          openfmb::commonmodule::Timestamp  t;
          struct openfmb::commonmodule::Unit  * units;

          typedef MVTypeSupport TypeSupport;
          typedef MVDataReader DataReader;
          typedef MVDataWriter DataWriter;
          typedef MVPtrSeq Seq;

        private:

      }; //openfmb::commonmodule::MV

      struct StatusIED;
      class StatusIEDTypeSupport;
      class StatusIEDDataReader;
      class StatusIEDDataWriter;

/* DDS Data Type SEQUENCE: sequence<openfmb::commonmodule::StatusIED *> */
#ifndef _DDS_sequence_cpp_openfmb_commonmodule_StatusIEDPtr_defined
#define _DDS_sequence_cpp_openfmb_commonmodule_StatusIEDPtr_defined
      DECLARE_CPP_UNBOUNDED_SEQ( openfmb::commonmodule::StatusIED * , StatusIEDPtrSeq );
#endif /* DDS Data Type SEQUENCE: sequence<StatusIEDPtrSeq *> */

      struct COREDX_TS_STRUCT_EXPORT StatusIED : public openfmb::commonmodule::StatusValueSource {
        public:
          /** Constructor, Copy Constructor, Destructor, Assignment operator */
          StatusIED();
          ~StatusIED();
          StatusIED( const StatusIED & other );
          StatusIED& operator=( const StatusIED & other);

          void init();
          void clear();
          void copy( const openfmb::commonmodule::StatusIED * instance );

          int  get_marshal_size(int offset, int just_keys) const ;
          int  marshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys) const ;
          int  marshal_key_hash(unsigned char *buf, int offset, int stream_len) const;
          int  unmarshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys);
          int  unmarshal_key_hash(unsigned char *buf, int offset, int stream_len);

          /* Member vars*/
          static unsigned char get_field_def(const char  * fieldname, 
                                             CoreDX_FieldDef_t * field_def);
          char *  sourceApplicationID;    /* key */
          UML_Extension::dateTime  sourceDateTime;

          typedef StatusIEDTypeSupport TypeSupport;
          typedef StatusIEDDataReader DataReader;
          typedef StatusIEDDataWriter DataWriter;
          typedef StatusIEDPtrSeq Seq;

        private:

      }; //openfmb::commonmodule::StatusIED

      struct WYE;
      class WYETypeSupport;
      class WYEDataReader;
      class WYEDataWriter;

/* DDS Data Type SEQUENCE: sequence<openfmb::commonmodule::WYE *> */
#ifndef _DDS_sequence_cpp_openfmb_commonmodule_WYEPtr_defined
#define _DDS_sequence_cpp_openfmb_commonmodule_WYEPtr_defined
      DECLARE_CPP_UNBOUNDED_SEQ( openfmb::commonmodule::WYE * , WYEPtrSeq );
#endif /* DDS Data Type SEQUENCE: sequence<WYEPtrSeq *> */

      struct COREDX_TS_STRUCT_EXPORT WYE {
        public:
          /** Constructor, Copy Constructor, Destructor, Assignment operator */
          WYE();
          ~WYE();
          WYE( const WYE & other );
          WYE& operator=( const WYE & other);

          void init();
          void clear();
          void copy( const openfmb::commonmodule::WYE * instance );

          int  get_marshal_size(int offset, int just_keys) const ;
          int  marshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys) const ;
          int  marshal_key_hash(unsigned char *buf, int offset, int stream_len) const;
          int  unmarshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys);
          int  unmarshal_key_hash(unsigned char *buf, int offset, int stream_len);

          /* Member vars*/
          static unsigned char get_field_def(const char  * fieldname, 
                                             CoreDX_FieldDef_t * field_def);
          struct openfmb::commonmodule::CMV  * phsA;
          struct openfmb::commonmodule::CMV  * phsB;
          struct openfmb::commonmodule::CMV  * phsC;
          struct openfmb::commonmodule::CMV  * neut;
          struct openfmb::commonmodule::CMV  * net;

          typedef WYETypeSupport TypeSupport;
          typedef WYEDataReader DataReader;
          typedef WYEDataWriter DataWriter;
          typedef WYEPtrSeq Seq;

        private:

      }; //openfmb::commonmodule::WYE


    }  /* namespace commonmodule */

    namespace essmodule {

      struct EssEventZBAT;
      class EssEventZBATTypeSupport;
      class EssEventZBATDataReader;
      class EssEventZBATDataWriter;

/* DDS Data Type SEQUENCE: sequence<openfmb::essmodule::EssEventZBAT *> */
#ifndef _DDS_sequence_cpp_openfmb_essmodule_EssEventZBATPtr_defined
#define _DDS_sequence_cpp_openfmb_essmodule_EssEventZBATPtr_defined
      DECLARE_CPP_UNBOUNDED_SEQ( openfmb::essmodule::EssEventZBAT * , EssEventZBATPtrSeq );
#endif /* DDS Data Type SEQUENCE: sequence<EssEventZBATPtrSeq *> */

      struct COREDX_TS_STRUCT_EXPORT EssEventZBAT : public openfmb::commonmodule::LogicalNodeForEventAndStatus {
        public:
          /** Constructor, Copy Constructor, Destructor, Assignment operator */
          EssEventZBAT();
          ~EssEventZBAT();
          EssEventZBAT( const EssEventZBAT & other );
          EssEventZBAT& operator=( const EssEventZBAT & other);

          void init();
          void clear();
          void copy( const openfmb::essmodule::EssEventZBAT * instance );

          int  get_marshal_size(int offset, int just_keys) const ;
          int  marshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys) const ;
          int  marshal_key_hash(unsigned char *buf, int offset, int stream_len) const;
          int  unmarshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys);
          int  unmarshal_key_hash(unsigned char *buf, int offset, int stream_len);

          /* Member vars*/
          static unsigned char get_field_def(const char  * fieldname, 
                                             CoreDX_FieldDef_t * field_def);
          struct openfmb::commonmodule::StatusSPS  * BatHi;
          struct openfmb::commonmodule::StatusSPS  * BatLo;
          struct openfmb::commonmodule::MV  * SocAhr;
          struct openfmb::commonmodule::StatusSPS  * BatSt;
          struct openfmb::commonmodule::StatusSPS  * Stdby;
          struct openfmb::commonmodule::ENG_GridConnectModeKind  * GriMod;

          typedef EssEventZBATTypeSupport TypeSupport;
          typedef EssEventZBATDataReader DataReader;
          typedef EssEventZBATDataWriter DataWriter;
          typedef EssEventZBATPtrSeq Seq;

        private:

      }; //openfmb::essmodule::EssEventZBAT

      struct ESSEventZGEN;
      class ESSEventZGENTypeSupport;
      class ESSEventZGENDataReader;
      class ESSEventZGENDataWriter;

/* DDS Data Type SEQUENCE: sequence<openfmb::essmodule::ESSEventZGEN *> */
#ifndef _DDS_sequence_cpp_openfmb_essmodule_ESSEventZGENPtr_defined
#define _DDS_sequence_cpp_openfmb_essmodule_ESSEventZGENPtr_defined
      DECLARE_CPP_UNBOUNDED_SEQ( openfmb::essmodule::ESSEventZGEN * , ESSEventZGENPtrSeq );
#endif /* DDS Data Type SEQUENCE: sequence<ESSEventZGENPtrSeq *> */

      struct COREDX_TS_STRUCT_EXPORT ESSEventZGEN : public openfmb::commonmodule::InverterEventAndStatusZGEN {
        public:
          /** Constructor, Copy Constructor, Destructor, Assignment operator */
          ESSEventZGEN();
          ~ESSEventZGEN();
          ESSEventZGEN( const ESSEventZGEN & other );
          ESSEventZGEN& operator=( const ESSEventZGEN & other);

          void init();
          void clear();
          void copy( const openfmb::essmodule::ESSEventZGEN * instance );

          int  get_marshal_size(int offset, int just_keys) const ;
          int  marshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys) const ;
          int  marshal_key_hash(unsigned char *buf, int offset, int stream_len) const;
          int  unmarshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys);
          int  unmarshal_key_hash(unsigned char *buf, int offset, int stream_len);

          /* Member vars*/
          static unsigned char get_field_def(const char  * fieldname, 
                                             CoreDX_FieldDef_t * field_def);
          unsigned char  __dummy_prevent_empty_class_ESSEventZGEN;

          typedef ESSEventZGENTypeSupport TypeSupport;
          typedef ESSEventZGENDataReader DataReader;
          typedef ESSEventZGENDataWriter DataWriter;
          typedef ESSEventZGENPtrSeq Seq;

        private:

      }; //openfmb::essmodule::ESSEventZGEN

      struct ESSEventZGLD;
      class ESSEventZGLDTypeSupport;
      class ESSEventZGLDDataReader;
      class ESSEventZGLDDataWriter;

/* DDS Data Type SEQUENCE: sequence<openfmb::essmodule::ESSEventZGLD *> */
#ifndef _DDS_sequence_cpp_openfmb_essmodule_ESSEventZGLDPtr_defined
#define _DDS_sequence_cpp_openfmb_essmodule_ESSEventZGLDPtr_defined
      DECLARE_CPP_UNBOUNDED_SEQ( openfmb::essmodule::ESSEventZGLD * , ESSEventZGLDPtrSeq );
#endif /* DDS Data Type SEQUENCE: sequence<ESSEventZGLDPtrSeq *> */

      struct COREDX_TS_STRUCT_EXPORT ESSEventZGLD : public openfmb::loadmodule::LoadEventAndStatusZGLD {
        public:
          /** Constructor, Copy Constructor, Destructor, Assignment operator */
          ESSEventZGLD();
          ~ESSEventZGLD();
          ESSEventZGLD( const ESSEventZGLD & other );
          ESSEventZGLD& operator=( const ESSEventZGLD & other);

          void init();
          void clear();
          void copy( const openfmb::essmodule::ESSEventZGLD * instance );

          int  get_marshal_size(int offset, int just_keys) const ;
          int  marshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys) const ;
          int  marshal_key_hash(unsigned char *buf, int offset, int stream_len) const;
          int  unmarshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys);
          int  unmarshal_key_hash(unsigned char *buf, int offset, int stream_len);

          /* Member vars*/
          static unsigned char get_field_def(const char  * fieldname, 
                                             CoreDX_FieldDef_t * field_def);
          unsigned char  __dummy_prevent_empty_class_ESSEventZGLD;

          typedef ESSEventZGLDTypeSupport TypeSupport;
          typedef ESSEventZGLDDataReader DataReader;
          typedef ESSEventZGLDDataWriter DataWriter;
          typedef ESSEventZGLDPtrSeq Seq;

        private:

      }; //openfmb::essmodule::ESSEventZGLD

      struct EssStatusZBAT;
      class EssStatusZBATTypeSupport;
      class EssStatusZBATDataReader;
      class EssStatusZBATDataWriter;

/* DDS Data Type SEQUENCE: sequence<openfmb::essmodule::EssStatusZBAT *> */
#ifndef _DDS_sequence_cpp_openfmb_essmodule_EssStatusZBATPtr_defined
#define _DDS_sequence_cpp_openfmb_essmodule_EssStatusZBATPtr_defined
      DECLARE_CPP_UNBOUNDED_SEQ( openfmb::essmodule::EssStatusZBAT * , EssStatusZBATPtrSeq );
#endif /* DDS Data Type SEQUENCE: sequence<EssStatusZBATPtrSeq *> */

      struct COREDX_TS_STRUCT_EXPORT EssStatusZBAT : public openfmb::commonmodule::LogicalNodeForEventAndStatus {
        public:
          /** Constructor, Copy Constructor, Destructor, Assignment operator */
          EssStatusZBAT();
          ~EssStatusZBAT();
          EssStatusZBAT( const EssStatusZBAT & other );
          EssStatusZBAT& operator=( const EssStatusZBAT & other);

          void init();
          void clear();
          void copy( const openfmb::essmodule::EssStatusZBAT * instance );

          int  get_marshal_size(int offset, int just_keys) const ;
          int  marshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys) const ;
          int  marshal_key_hash(unsigned char *buf, int offset, int stream_len) const;
          int  unmarshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys);
          int  unmarshal_key_hash(unsigned char *buf, int offset, int stream_len);

          /* Member vars*/
          static unsigned char get_field_def(const char  * fieldname, 
                                             CoreDX_FieldDef_t * field_def);
          struct openfmb::commonmodule::StatusSPS  BatSt;
          struct openfmb::commonmodule::StatusSPS  * Stdby;
          struct openfmb::commonmodule::ENG_GridConnectModeKind  * GriMod;
          struct openfmb::commonmodule::MV  * SocAhr;

          typedef EssStatusZBATTypeSupport TypeSupport;
          typedef EssStatusZBATDataReader DataReader;
          typedef EssStatusZBATDataWriter DataWriter;
          typedef EssStatusZBATPtrSeq Seq;

        private:

      }; //openfmb::essmodule::EssStatusZBAT

      struct ESSStatusZGEN;
      class ESSStatusZGENTypeSupport;
      class ESSStatusZGENDataReader;
      class ESSStatusZGENDataWriter;

/* DDS Data Type SEQUENCE: sequence<openfmb::essmodule::ESSStatusZGEN *> */
#ifndef _DDS_sequence_cpp_openfmb_essmodule_ESSStatusZGENPtr_defined
#define _DDS_sequence_cpp_openfmb_essmodule_ESSStatusZGENPtr_defined
      DECLARE_CPP_UNBOUNDED_SEQ( openfmb::essmodule::ESSStatusZGEN * , ESSStatusZGENPtrSeq );
#endif /* DDS Data Type SEQUENCE: sequence<ESSStatusZGENPtrSeq *> */

      struct COREDX_TS_STRUCT_EXPORT ESSStatusZGEN : public openfmb::commonmodule::InverterEventAndStatusZGEN {
        public:
          /** Constructor, Copy Constructor, Destructor, Assignment operator */
          ESSStatusZGEN();
          ~ESSStatusZGEN();
          ESSStatusZGEN( const ESSStatusZGEN & other );
          ESSStatusZGEN& operator=( const ESSStatusZGEN & other);

          void init();
          void clear();
          void copy( const openfmb::essmodule::ESSStatusZGEN * instance );

          int  get_marshal_size(int offset, int just_keys) const ;
          int  marshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys) const ;
          int  marshal_key_hash(unsigned char *buf, int offset, int stream_len) const;
          int  unmarshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys);
          int  unmarshal_key_hash(unsigned char *buf, int offset, int stream_len);

          /* Member vars*/
          static unsigned char get_field_def(const char  * fieldname, 
                                             CoreDX_FieldDef_t * field_def);
          unsigned char  __dummy_prevent_empty_class_ESSStatusZGEN;

          typedef ESSStatusZGENTypeSupport TypeSupport;
          typedef ESSStatusZGENDataReader DataReader;
          typedef ESSStatusZGENDataWriter DataWriter;
          typedef ESSStatusZGENPtrSeq Seq;

        private:

      }; //openfmb::essmodule::ESSStatusZGEN

      struct ESSStatusZGLD;
      class ESSStatusZGLDTypeSupport;
      class ESSStatusZGLDDataReader;
      class ESSStatusZGLDDataWriter;

/* DDS Data Type SEQUENCE: sequence<openfmb::essmodule::ESSStatusZGLD *> */
#ifndef _DDS_sequence_cpp_openfmb_essmodule_ESSStatusZGLDPtr_defined
#define _DDS_sequence_cpp_openfmb_essmodule_ESSStatusZGLDPtr_defined
      DECLARE_CPP_UNBOUNDED_SEQ( openfmb::essmodule::ESSStatusZGLD * , ESSStatusZGLDPtrSeq );
#endif /* DDS Data Type SEQUENCE: sequence<ESSStatusZGLDPtrSeq *> */

      struct COREDX_TS_STRUCT_EXPORT ESSStatusZGLD : public openfmb::loadmodule::LoadEventAndStatusZGLD {
        public:
          /** Constructor, Copy Constructor, Destructor, Assignment operator */
          ESSStatusZGLD();
          ~ESSStatusZGLD();
          ESSStatusZGLD( const ESSStatusZGLD & other );
          ESSStatusZGLD& operator=( const ESSStatusZGLD & other);

          void init();
          void clear();
          void copy( const openfmb::essmodule::ESSStatusZGLD * instance );

          int  get_marshal_size(int offset, int just_keys) const ;
          int  marshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys) const ;
          int  marshal_key_hash(unsigned char *buf, int offset, int stream_len) const;
          int  unmarshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys);
          int  unmarshal_key_hash(unsigned char *buf, int offset, int stream_len);

          /* Member vars*/
          static unsigned char get_field_def(const char  * fieldname, 
                                             CoreDX_FieldDef_t * field_def);
          unsigned char  __dummy_prevent_empty_class_ESSStatusZGLD;

          typedef ESSStatusZGLDTypeSupport TypeSupport;
          typedef ESSStatusZGLDDataReader DataReader;
          typedef ESSStatusZGLDDataWriter DataWriter;
          typedef ESSStatusZGLDPtrSeq Seq;

        private:

      }; //openfmb::essmodule::ESSStatusZGLD


    }  /* namespace essmodule */

    namespace generationmodule {

      struct GenerationEvent;
      class GenerationEventTypeSupport;
      class GenerationEventDataReader;
      class GenerationEventDataWriter;

/* DDS Data Type SEQUENCE: sequence<openfmb::generationmodule::GenerationEvent *> */
#ifndef _DDS_sequence_cpp_openfmb_generationmodule_GenerationEventPtr_defined
#define _DDS_sequence_cpp_openfmb_generationmodule_GenerationEventPtr_defined
      DECLARE_CPP_UNBOUNDED_SEQ( openfmb::generationmodule::GenerationEvent * , GenerationEventPtrSeq );
#endif /* DDS Data Type SEQUENCE: sequence<GenerationEventPtrSeq *> */

      struct COREDX_TS_STRUCT_EXPORT GenerationEvent : public openfmb::commonmodule::EventValue {
        public:
          /** Constructor, Copy Constructor, Destructor, Assignment operator */
          GenerationEvent();
          ~GenerationEvent();
          GenerationEvent( const GenerationEvent & other );
          GenerationEvent& operator=( const GenerationEvent & other);

          void init();
          void clear();
          void copy( const openfmb::generationmodule::GenerationEvent * instance );

          int  get_marshal_size(int offset, int just_keys) const ;
          int  marshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys) const ;
          int  marshal_key_hash(unsigned char *buf, int offset, int stream_len) const;
          int  unmarshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys);
          int  unmarshal_key_hash(unsigned char *buf, int offset, int stream_len);

          /* Member vars*/
          static unsigned char get_field_def(const char  * fieldname, 
                                             CoreDX_FieldDef_t * field_def);
          struct openfmb::commonmodule::GenerationEventZGEN  * generationEventZGEN;

          typedef GenerationEventTypeSupport TypeSupport;
          typedef GenerationEventDataReader DataReader;
          typedef GenerationEventDataWriter DataWriter;
          typedef GenerationEventPtrSeq Seq;

        private:

      }; //openfmb::generationmodule::GenerationEvent

      struct GenerationStatus;
      class GenerationStatusTypeSupport;
      class GenerationStatusDataReader;
      class GenerationStatusDataWriter;

/* DDS Data Type SEQUENCE: sequence<openfmb::generationmodule::GenerationStatus *> */
#ifndef _DDS_sequence_cpp_openfmb_generationmodule_GenerationStatusPtr_defined
#define _DDS_sequence_cpp_openfmb_generationmodule_GenerationStatusPtr_defined
      DECLARE_CPP_UNBOUNDED_SEQ( openfmb::generationmodule::GenerationStatus * , GenerationStatusPtrSeq );
#endif /* DDS Data Type SEQUENCE: sequence<GenerationStatusPtrSeq *> */

      struct COREDX_TS_STRUCT_EXPORT GenerationStatus : public openfmb::commonmodule::StatusValue {
        public:
          /** Constructor, Copy Constructor, Destructor, Assignment operator */
          GenerationStatus();
          ~GenerationStatus();
          GenerationStatus( const GenerationStatus & other );
          GenerationStatus& operator=( const GenerationStatus & other);

          void init();
          void clear();
          void copy( const openfmb::generationmodule::GenerationStatus * instance );

          int  get_marshal_size(int offset, int just_keys) const ;
          int  marshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys) const ;
          int  marshal_key_hash(unsigned char *buf, int offset, int stream_len) const;
          int  unmarshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys);
          int  unmarshal_key_hash(unsigned char *buf, int offset, int stream_len);

          /* Member vars*/
          static unsigned char get_field_def(const char  * fieldname, 
                                             CoreDX_FieldDef_t * field_def);
          struct openfmb::commonmodule::GenerationStatusZGEN *  generationStatusZGEN;

          typedef GenerationStatusTypeSupport TypeSupport;
          typedef GenerationStatusDataReader DataReader;
          typedef GenerationStatusDataWriter DataWriter;
          typedef GenerationStatusPtrSeq Seq;

        private:

      }; //openfmb::generationmodule::GenerationStatus

      struct GenerationStatusProfile;
      class GenerationStatusProfileTypeSupport;
      class GenerationStatusProfileDataReader;
      class GenerationStatusProfileDataWriter;

/* DDS Data Type SEQUENCE: sequence<openfmb::generationmodule::GenerationStatusProfile *> */
#ifndef _DDS_sequence_cpp_openfmb_generationmodule_GenerationStatusProfilePtr_defined
#define _DDS_sequence_cpp_openfmb_generationmodule_GenerationStatusProfilePtr_defined
      DECLARE_CPP_UNBOUNDED_SEQ( openfmb::generationmodule::GenerationStatusProfile * , GenerationStatusProfilePtrSeq );
#endif /* DDS Data Type SEQUENCE: sequence<GenerationStatusProfilePtrSeq *> */

      struct COREDX_TS_STRUCT_EXPORT GenerationStatusProfile : public openfmb::commonmodule::StatusIED {
        public:
          /** Constructor, Copy Constructor, Destructor, Assignment operator */
          GenerationStatusProfile();
          ~GenerationStatusProfile();
          GenerationStatusProfile( const GenerationStatusProfile & other );
          GenerationStatusProfile& operator=( const GenerationStatusProfile & other);

          void init();
          void clear();
          void copy( const openfmb::generationmodule::GenerationStatusProfile * instance );

          int  get_marshal_size(int offset, int just_keys) const ;
          int  marshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys) const ;
          int  marshal_key_hash(unsigned char *buf, int offset, int stream_len) const;
          int  unmarshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys);
          int  unmarshal_key_hash(unsigned char *buf, int offset, int stream_len);

          /* Member vars*/
          static unsigned char get_field_def(const char  * fieldname, 
                                             CoreDX_FieldDef_t * field_def);
          struct openfmb::generationmodule::GenerationStatus  generationStatus;

          typedef GenerationStatusProfileTypeSupport TypeSupport;
          typedef GenerationStatusProfileDataReader DataReader;
          typedef GenerationStatusProfileDataWriter DataWriter;
          typedef GenerationStatusProfilePtrSeq Seq;

        private:

      }; //openfmb::generationmodule::GenerationStatusProfile


    }  /* namespace generationmodule */

    namespace loadmodule {

      struct LoadEvent;
      class LoadEventTypeSupport;
      class LoadEventDataReader;
      class LoadEventDataWriter;

/* DDS Data Type SEQUENCE: sequence<openfmb::loadmodule::LoadEvent *> */
#ifndef _DDS_sequence_cpp_openfmb_loadmodule_LoadEventPtr_defined
#define _DDS_sequence_cpp_openfmb_loadmodule_LoadEventPtr_defined
      DECLARE_CPP_UNBOUNDED_SEQ( openfmb::loadmodule::LoadEvent * , LoadEventPtrSeq );
#endif /* DDS Data Type SEQUENCE: sequence<LoadEventPtrSeq *> */

      struct COREDX_TS_STRUCT_EXPORT LoadEvent : public openfmb::commonmodule::EventValue {
        public:
          /** Constructor, Copy Constructor, Destructor, Assignment operator */
          LoadEvent();
          ~LoadEvent();
          LoadEvent( const LoadEvent & other );
          LoadEvent& operator=( const LoadEvent & other);

          void init();
          void clear();
          void copy( const openfmb::loadmodule::LoadEvent * instance );

          int  get_marshal_size(int offset, int just_keys) const ;
          int  marshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys) const ;
          int  marshal_key_hash(unsigned char *buf, int offset, int stream_len) const;
          int  unmarshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys);
          int  unmarshal_key_hash(unsigned char *buf, int offset, int stream_len);

          /* Member vars*/
          static unsigned char get_field_def(const char  * fieldname, 
                                             CoreDX_FieldDef_t * field_def);
          struct openfmb::loadmodule::LoadEventZGLD  * loadEventZGLD;

          typedef LoadEventTypeSupport TypeSupport;
          typedef LoadEventDataReader DataReader;
          typedef LoadEventDataWriter DataWriter;
          typedef LoadEventPtrSeq Seq;

        private:

      }; //openfmb::loadmodule::LoadEvent

      struct LoadStatus;
      class LoadStatusTypeSupport;
      class LoadStatusDataReader;
      class LoadStatusDataWriter;

/* DDS Data Type SEQUENCE: sequence<openfmb::loadmodule::LoadStatus *> */
#ifndef _DDS_sequence_cpp_openfmb_loadmodule_LoadStatusPtr_defined
#define _DDS_sequence_cpp_openfmb_loadmodule_LoadStatusPtr_defined
      DECLARE_CPP_UNBOUNDED_SEQ( openfmb::loadmodule::LoadStatus * , LoadStatusPtrSeq );
#endif /* DDS Data Type SEQUENCE: sequence<LoadStatusPtrSeq *> */

      struct COREDX_TS_STRUCT_EXPORT LoadStatus : public openfmb::commonmodule::StatusValue {
        public:
          /** Constructor, Copy Constructor, Destructor, Assignment operator */
          LoadStatus();
          ~LoadStatus();
          LoadStatus( const LoadStatus & other );
          LoadStatus& operator=( const LoadStatus & other);

          void init();
          void clear();
          void copy( const openfmb::loadmodule::LoadStatus * instance );

          int  get_marshal_size(int offset, int just_keys) const ;
          int  marshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys) const ;
          int  marshal_key_hash(unsigned char *buf, int offset, int stream_len) const;
          int  unmarshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys);
          int  unmarshal_key_hash(unsigned char *buf, int offset, int stream_len);

          /* Member vars*/
          static unsigned char get_field_def(const char  * fieldname, 
                                             CoreDX_FieldDef_t * field_def);
          struct openfmb::loadmodule::LoadStatusZGLD *  loadStatusZGLD;

          typedef LoadStatusTypeSupport TypeSupport;
          typedef LoadStatusDataReader DataReader;
          typedef LoadStatusDataWriter DataWriter;
          typedef LoadStatusPtrSeq Seq;

        private:

      }; //openfmb::loadmodule::LoadStatus

      struct LoadStatusProfile;
      class LoadStatusProfileTypeSupport;
      class LoadStatusProfileDataReader;
      class LoadStatusProfileDataWriter;

/* DDS Data Type SEQUENCE: sequence<openfmb::loadmodule::LoadStatusProfile *> */
#ifndef _DDS_sequence_cpp_openfmb_loadmodule_LoadStatusProfilePtr_defined
#define _DDS_sequence_cpp_openfmb_loadmodule_LoadStatusProfilePtr_defined
      DECLARE_CPP_UNBOUNDED_SEQ( openfmb::loadmodule::LoadStatusProfile * , LoadStatusProfilePtrSeq );
#endif /* DDS Data Type SEQUENCE: sequence<LoadStatusProfilePtrSeq *> */

      struct COREDX_TS_STRUCT_EXPORT LoadStatusProfile : public openfmb::commonmodule::StatusIED {
        public:
          /** Constructor, Copy Constructor, Destructor, Assignment operator */
          LoadStatusProfile();
          ~LoadStatusProfile();
          LoadStatusProfile( const LoadStatusProfile & other );
          LoadStatusProfile& operator=( const LoadStatusProfile & other);

          void init();
          void clear();
          void copy( const openfmb::loadmodule::LoadStatusProfile * instance );

          int  get_marshal_size(int offset, int just_keys) const ;
          int  marshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys) const ;
          int  marshal_key_hash(unsigned char *buf, int offset, int stream_len) const;
          int  unmarshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys);
          int  unmarshal_key_hash(unsigned char *buf, int offset, int stream_len);

          /* Member vars*/
          static unsigned char get_field_def(const char  * fieldname, 
                                             CoreDX_FieldDef_t * field_def);
          struct openfmb::loadmodule::LoadStatus  loadStatus;

          typedef LoadStatusProfileTypeSupport TypeSupport;
          typedef LoadStatusProfileDataReader DataReader;
          typedef LoadStatusProfileDataWriter DataWriter;
          typedef LoadStatusProfilePtrSeq Seq;

        private:

      }; //openfmb::loadmodule::LoadStatusProfile


    }  /* namespace loadmodule */

    namespace optimizermodule {

      struct PlannedOptimizerScheduleProfile;
      class PlannedOptimizerScheduleProfileTypeSupport;
      class PlannedOptimizerScheduleProfileDataReader;
      class PlannedOptimizerScheduleProfileDataWriter;

/* DDS Data Type SEQUENCE: sequence<openfmb::optimizermodule::PlannedOptimizerScheduleProfile *> */
#ifndef _DDS_sequence_cpp_openfmb_optimizermodule_PlannedOptimizerScheduleProfilePtr_defined
#define _DDS_sequence_cpp_openfmb_optimizermodule_PlannedOptimizerScheduleProfilePtr_defined
      DECLARE_CPP_UNBOUNDED_SEQ( openfmb::optimizermodule::PlannedOptimizerScheduleProfile * , PlannedOptimizerScheduleProfilePtrSeq );
#endif /* DDS Data Type SEQUENCE: sequence<PlannedOptimizerScheduleProfilePtrSeq *> */

      struct COREDX_TS_STRUCT_EXPORT PlannedOptimizerScheduleProfile {
        public:
          /** Constructor, Copy Constructor, Destructor, Assignment operator */
          PlannedOptimizerScheduleProfile();
          ~PlannedOptimizerScheduleProfile();
          PlannedOptimizerScheduleProfile( const PlannedOptimizerScheduleProfile & other );
          PlannedOptimizerScheduleProfile& operator=( const PlannedOptimizerScheduleProfile & other);

          void init();
          void clear();
          void copy( const openfmb::optimizermodule::PlannedOptimizerScheduleProfile * instance );

          int  get_marshal_size(int offset, int just_keys) const ;
          int  marshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys) const ;
          int  marshal_key_hash(unsigned char *buf, int offset, int stream_len) const;
          int  unmarshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys);
          int  unmarshal_key_hash(unsigned char *buf, int offset, int stream_len);

          /* Member vars*/
          static unsigned char get_field_def(const char  * fieldname, 
                                             CoreDX_FieldDef_t * field_def);
          struct openfmb::optimizermodule::RegulatorControlScheduleProfileList  * regulatorControlScheduleProfileList;
          struct openfmb::optimizermodule::SolarControlScheduleProfileList  * solarControlScheduleProfileList;
          struct openfmb::optimizermodule::PlannedInterconnectionScheduleProfileList  * plannedInterconnectionScheduleProfileList;
          struct openfmb::optimizermodule::LoadControlScheduleProfileList  * loadControlScheduleProfileList;
          struct openfmb::optimizermodule::ESSControlScheduleProfileList  * essControlScheduleProfileList;

          typedef PlannedOptimizerScheduleProfileTypeSupport TypeSupport;
          typedef PlannedOptimizerScheduleProfileDataReader DataReader;
          typedef PlannedOptimizerScheduleProfileDataWriter DataWriter;
          typedef PlannedOptimizerScheduleProfilePtrSeq Seq;

        private:

      }; //openfmb::optimizermodule::PlannedOptimizerScheduleProfile


    }  /* namespace optimizermodule */

    namespace reclosermodule {

      struct RecloserControl;
      class RecloserControlTypeSupport;
      class RecloserControlDataReader;
      class RecloserControlDataWriter;

/* DDS Data Type SEQUENCE: sequence<openfmb::reclosermodule::RecloserControl *> */
#ifndef _DDS_sequence_cpp_openfmb_reclosermodule_RecloserControlPtr_defined
#define _DDS_sequence_cpp_openfmb_reclosermodule_RecloserControlPtr_defined
      DECLARE_CPP_UNBOUNDED_SEQ( openfmb::reclosermodule::RecloserControl * , RecloserControlPtrSeq );
#endif /* DDS Data Type SEQUENCE: sequence<RecloserControlPtrSeq *> */

      struct COREDX_TS_STRUCT_EXPORT RecloserControl : public openfmb::commonmodule::ControlValue {
        public:
          /** Constructor, Copy Constructor, Destructor, Assignment operator */
          RecloserControl();
          ~RecloserControl();
          RecloserControl( const RecloserControl & other );
          RecloserControl& operator=( const RecloserControl & other);

          void init();
          void clear();
          void copy( const openfmb::reclosermodule::RecloserControl * instance );

          int  get_marshal_size(int offset, int just_keys) const ;
          int  marshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys) const ;
          int  marshal_key_hash(unsigned char *buf, int offset, int stream_len) const;
          int  unmarshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys);
          int  unmarshal_key_hash(unsigned char *buf, int offset, int stream_len);

          /* Member vars*/
          static unsigned char get_field_def(const char  * fieldname, 
                                             CoreDX_FieldDef_t * field_def);
          struct openfmb::commonmodule::CheckConditions  * check;
          struct openfmb::reclosermodule::RecloserControlXCBR  recloserControlXCBR;

          typedef RecloserControlTypeSupport TypeSupport;
          typedef RecloserControlDataReader DataReader;
          typedef RecloserControlDataWriter DataWriter;
          typedef RecloserControlPtrSeq Seq;

        private:

      }; //openfmb::reclosermodule::RecloserControl

      struct RecloserEvent;
      class RecloserEventTypeSupport;
      class RecloserEventDataReader;
      class RecloserEventDataWriter;

/* DDS Data Type SEQUENCE: sequence<openfmb::reclosermodule::RecloserEvent *> */
#ifndef _DDS_sequence_cpp_openfmb_reclosermodule_RecloserEventPtr_defined
#define _DDS_sequence_cpp_openfmb_reclosermodule_RecloserEventPtr_defined
      DECLARE_CPP_UNBOUNDED_SEQ( openfmb::reclosermodule::RecloserEvent * , RecloserEventPtrSeq );
#endif /* DDS Data Type SEQUENCE: sequence<RecloserEventPtrSeq *> */

      struct COREDX_TS_STRUCT_EXPORT RecloserEvent : public openfmb::commonmodule::EventValue {
        public:
          /** Constructor, Copy Constructor, Destructor, Assignment operator */
          RecloserEvent();
          ~RecloserEvent();
          RecloserEvent( const RecloserEvent & other );
          RecloserEvent& operator=( const RecloserEvent & other);

          void init();
          void clear();
          void copy( const openfmb::reclosermodule::RecloserEvent * instance );

          int  get_marshal_size(int offset, int just_keys) const ;
          int  marshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys) const ;
          int  marshal_key_hash(unsigned char *buf, int offset, int stream_len) const;
          int  unmarshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys);
          int  unmarshal_key_hash(unsigned char *buf, int offset, int stream_len);

          /* Member vars*/
          static unsigned char get_field_def(const char  * fieldname, 
                                             CoreDX_FieldDef_t * field_def);
          struct openfmb::reclosermodule::RecloserEventXCBR  recloserEventXCBR;

          typedef RecloserEventTypeSupport TypeSupport;
          typedef RecloserEventDataReader DataReader;
          typedef RecloserEventDataWriter DataWriter;
          typedef RecloserEventPtrSeq Seq;

        private:

      }; //openfmb::reclosermodule::RecloserEvent

      struct RecloserStatus;
      class RecloserStatusTypeSupport;
      class RecloserStatusDataReader;
      class RecloserStatusDataWriter;

/* DDS Data Type SEQUENCE: sequence<openfmb::reclosermodule::RecloserStatus *> */
#ifndef _DDS_sequence_cpp_openfmb_reclosermodule_RecloserStatusPtr_defined
#define _DDS_sequence_cpp_openfmb_reclosermodule_RecloserStatusPtr_defined
      DECLARE_CPP_UNBOUNDED_SEQ( openfmb::reclosermodule::RecloserStatus * , RecloserStatusPtrSeq );
#endif /* DDS Data Type SEQUENCE: sequence<RecloserStatusPtrSeq *> */

      struct COREDX_TS_STRUCT_EXPORT RecloserStatus : public openfmb::commonmodule::EventValue {
        public:
          /** Constructor, Copy Constructor, Destructor, Assignment operator */
          RecloserStatus();
          ~RecloserStatus();
          RecloserStatus( const RecloserStatus & other );
          RecloserStatus& operator=( const RecloserStatus & other);

          void init();
          void clear();
          void copy( const openfmb::reclosermodule::RecloserStatus * instance );

          int  get_marshal_size(int offset, int just_keys) const ;
          int  marshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys) const ;
          int  marshal_key_hash(unsigned char *buf, int offset, int stream_len) const;
          int  unmarshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys);
          int  unmarshal_key_hash(unsigned char *buf, int offset, int stream_len);

          /* Member vars*/
          static unsigned char get_field_def(const char  * fieldname, 
                                             CoreDX_FieldDef_t * field_def);
          struct openfmb::reclosermodule::RecloserStatusXCBR  * recloserStatusXCBR;

          typedef RecloserStatusTypeSupport TypeSupport;
          typedef RecloserStatusDataReader DataReader;
          typedef RecloserStatusDataWriter DataWriter;
          typedef RecloserStatusPtrSeq Seq;

        private:

      }; //openfmb::reclosermodule::RecloserStatus


    }  /* namespace reclosermodule */

    namespace solarmodule {

      struct SolarEventZGEN;
      class SolarEventZGENTypeSupport;
      class SolarEventZGENDataReader;
      class SolarEventZGENDataWriter;

/* DDS Data Type SEQUENCE: sequence<openfmb::solarmodule::SolarEventZGEN *> */
#ifndef _DDS_sequence_cpp_openfmb_solarmodule_SolarEventZGENPtr_defined
#define _DDS_sequence_cpp_openfmb_solarmodule_SolarEventZGENPtr_defined
      DECLARE_CPP_UNBOUNDED_SEQ( openfmb::solarmodule::SolarEventZGEN * , SolarEventZGENPtrSeq );
#endif /* DDS Data Type SEQUENCE: sequence<SolarEventZGENPtrSeq *> */

      struct COREDX_TS_STRUCT_EXPORT SolarEventZGEN : public openfmb::commonmodule::InverterEventAndStatusZGEN {
        public:
          /** Constructor, Copy Constructor, Destructor, Assignment operator */
          SolarEventZGEN();
          ~SolarEventZGEN();
          SolarEventZGEN( const SolarEventZGEN & other );
          SolarEventZGEN& operator=( const SolarEventZGEN & other);

          void init();
          void clear();
          void copy( const openfmb::solarmodule::SolarEventZGEN * instance );

          int  get_marshal_size(int offset, int just_keys) const ;
          int  marshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys) const ;
          int  marshal_key_hash(unsigned char *buf, int offset, int stream_len) const;
          int  unmarshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys);
          int  unmarshal_key_hash(unsigned char *buf, int offset, int stream_len);

          /* Member vars*/
          static unsigned char get_field_def(const char  * fieldname, 
                                             CoreDX_FieldDef_t * field_def);
          struct openfmb::commonmodule::ENG_GridConnectModeKind  * GriMod;
          struct openfmb::commonmodule::ENS_SolarStateKind  SolarSt;

          typedef SolarEventZGENTypeSupport TypeSupport;
          typedef SolarEventZGENDataReader DataReader;
          typedef SolarEventZGENDataWriter DataWriter;
          typedef SolarEventZGENPtrSeq Seq;

        private:

      }; //openfmb::solarmodule::SolarEventZGEN

      struct SolarStatusZGEN;
      class SolarStatusZGENTypeSupport;
      class SolarStatusZGENDataReader;
      class SolarStatusZGENDataWriter;

/* DDS Data Type SEQUENCE: sequence<openfmb::solarmodule::SolarStatusZGEN *> */
#ifndef _DDS_sequence_cpp_openfmb_solarmodule_SolarStatusZGENPtr_defined
#define _DDS_sequence_cpp_openfmb_solarmodule_SolarStatusZGENPtr_defined
      DECLARE_CPP_UNBOUNDED_SEQ( openfmb::solarmodule::SolarStatusZGEN * , SolarStatusZGENPtrSeq );
#endif /* DDS Data Type SEQUENCE: sequence<SolarStatusZGENPtrSeq *> */

      struct COREDX_TS_STRUCT_EXPORT SolarStatusZGEN : public openfmb::commonmodule::InverterEventAndStatusZGEN {
        public:
          /** Constructor, Copy Constructor, Destructor, Assignment operator */
          SolarStatusZGEN();
          ~SolarStatusZGEN();
          SolarStatusZGEN( const SolarStatusZGEN & other );
          SolarStatusZGEN& operator=( const SolarStatusZGEN & other);

          void init();
          void clear();
          void copy( const openfmb::solarmodule::SolarStatusZGEN * instance );

          int  get_marshal_size(int offset, int just_keys) const ;
          int  marshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys) const ;
          int  marshal_key_hash(unsigned char *buf, int offset, int stream_len) const;
          int  unmarshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys);
          int  unmarshal_key_hash(unsigned char *buf, int offset, int stream_len);

          /* Member vars*/
          static unsigned char get_field_def(const char  * fieldname, 
                                             CoreDX_FieldDef_t * field_def);
          struct openfmb::commonmodule::ENG_GridConnectModeKind  * GriMod;
          struct openfmb::commonmodule::ENS_SolarStateKind  SolarSt;

          typedef SolarStatusZGENTypeSupport TypeSupport;
          typedef SolarStatusZGENDataReader DataReader;
          typedef SolarStatusZGENDataWriter DataWriter;
          typedef SolarStatusZGENPtrSeq Seq;

        private:

      }; //openfmb::solarmodule::SolarStatusZGEN


    }  /* namespace solarmodule */

    namespace switchmodule {

      struct SwitchControl;
      class SwitchControlTypeSupport;
      class SwitchControlDataReader;
      class SwitchControlDataWriter;

/* DDS Data Type SEQUENCE: sequence<openfmb::switchmodule::SwitchControl *> */
#ifndef _DDS_sequence_cpp_openfmb_switchmodule_SwitchControlPtr_defined
#define _DDS_sequence_cpp_openfmb_switchmodule_SwitchControlPtr_defined
      DECLARE_CPP_UNBOUNDED_SEQ( openfmb::switchmodule::SwitchControl * , SwitchControlPtrSeq );
#endif /* DDS Data Type SEQUENCE: sequence<SwitchControlPtrSeq *> */

      struct COREDX_TS_STRUCT_EXPORT SwitchControl : public openfmb::commonmodule::ControlValue {
        public:
          /** Constructor, Copy Constructor, Destructor, Assignment operator */
          SwitchControl();
          ~SwitchControl();
          SwitchControl( const SwitchControl & other );
          SwitchControl& operator=( const SwitchControl & other);

          void init();
          void clear();
          void copy( const openfmb::switchmodule::SwitchControl * instance );

          int  get_marshal_size(int offset, int just_keys) const ;
          int  marshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys) const ;
          int  marshal_key_hash(unsigned char *buf, int offset, int stream_len) const;
          int  unmarshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys);
          int  unmarshal_key_hash(unsigned char *buf, int offset, int stream_len);

          /* Member vars*/
          static unsigned char get_field_def(const char  * fieldname, 
                                             CoreDX_FieldDef_t * field_def);
          struct openfmb::commonmodule::CheckConditions  * check;
          struct openfmb::switchmodule::SwitchControlXSWI  * switchControlXSWI;

          typedef SwitchControlTypeSupport TypeSupport;
          typedef SwitchControlDataReader DataReader;
          typedef SwitchControlDataWriter DataWriter;
          typedef SwitchControlPtrSeq Seq;

        private:

      }; //openfmb::switchmodule::SwitchControl

      struct SwitchEvent;
      class SwitchEventTypeSupport;
      class SwitchEventDataReader;
      class SwitchEventDataWriter;

/* DDS Data Type SEQUENCE: sequence<openfmb::switchmodule::SwitchEvent *> */
#ifndef _DDS_sequence_cpp_openfmb_switchmodule_SwitchEventPtr_defined
#define _DDS_sequence_cpp_openfmb_switchmodule_SwitchEventPtr_defined
      DECLARE_CPP_UNBOUNDED_SEQ( openfmb::switchmodule::SwitchEvent * , SwitchEventPtrSeq );
#endif /* DDS Data Type SEQUENCE: sequence<SwitchEventPtrSeq *> */

      struct COREDX_TS_STRUCT_EXPORT SwitchEvent : public openfmb::commonmodule::EventValue {
        public:
          /** Constructor, Copy Constructor, Destructor, Assignment operator */
          SwitchEvent();
          ~SwitchEvent();
          SwitchEvent( const SwitchEvent & other );
          SwitchEvent& operator=( const SwitchEvent & other);

          void init();
          void clear();
          void copy( const openfmb::switchmodule::SwitchEvent * instance );

          int  get_marshal_size(int offset, int just_keys) const ;
          int  marshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys) const ;
          int  marshal_key_hash(unsigned char *buf, int offset, int stream_len) const;
          int  unmarshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys);
          int  unmarshal_key_hash(unsigned char *buf, int offset, int stream_len);

          /* Member vars*/
          static unsigned char get_field_def(const char  * fieldname, 
                                             CoreDX_FieldDef_t * field_def);
          struct openfmb::switchmodule::SwitchEventXSWI  switchEventXCBR;

          typedef SwitchEventTypeSupport TypeSupport;
          typedef SwitchEventDataReader DataReader;
          typedef SwitchEventDataWriter DataWriter;
          typedef SwitchEventPtrSeq Seq;

        private:

      }; //openfmb::switchmodule::SwitchEvent

      struct SwitchStatus;
      class SwitchStatusTypeSupport;
      class SwitchStatusDataReader;
      class SwitchStatusDataWriter;

/* DDS Data Type SEQUENCE: sequence<openfmb::switchmodule::SwitchStatus *> */
#ifndef _DDS_sequence_cpp_openfmb_switchmodule_SwitchStatusPtr_defined
#define _DDS_sequence_cpp_openfmb_switchmodule_SwitchStatusPtr_defined
      DECLARE_CPP_UNBOUNDED_SEQ( openfmb::switchmodule::SwitchStatus * , SwitchStatusPtrSeq );
#endif /* DDS Data Type SEQUENCE: sequence<SwitchStatusPtrSeq *> */

      struct COREDX_TS_STRUCT_EXPORT SwitchStatus : public openfmb::commonmodule::StatusValue {
        public:
          /** Constructor, Copy Constructor, Destructor, Assignment operator */
          SwitchStatus();
          ~SwitchStatus();
          SwitchStatus( const SwitchStatus & other );
          SwitchStatus& operator=( const SwitchStatus & other);

          void init();
          void clear();
          void copy( const openfmb::switchmodule::SwitchStatus * instance );

          int  get_marshal_size(int offset, int just_keys) const ;
          int  marshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys) const ;
          int  marshal_key_hash(unsigned char *buf, int offset, int stream_len) const;
          int  unmarshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys);
          int  unmarshal_key_hash(unsigned char *buf, int offset, int stream_len);

          /* Member vars*/
          static unsigned char get_field_def(const char  * fieldname, 
                                             CoreDX_FieldDef_t * field_def);
          struct openfmb::switchmodule::SwitchStatusXSWI  switchStatusXCBR;

          typedef SwitchStatusTypeSupport TypeSupport;
          typedef SwitchStatusDataReader DataReader;
          typedef SwitchStatusDataWriter DataWriter;
          typedef SwitchStatusPtrSeq Seq;

        private:

      }; //openfmb::switchmodule::SwitchStatus


    }  /* namespace switchmodule */

  }  /* namespace openfmb */

  namespace openfmb {


    namespace breakermodule {

      struct BreakerControl;
      class BreakerControlTypeSupport;
      class BreakerControlDataReader;
      class BreakerControlDataWriter;

/* DDS Data Type SEQUENCE: sequence<openfmb::breakermodule::BreakerControl *> */
#ifndef _DDS_sequence_cpp_openfmb_breakermodule_BreakerControlPtr_defined
#define _DDS_sequence_cpp_openfmb_breakermodule_BreakerControlPtr_defined
      DECLARE_CPP_UNBOUNDED_SEQ( openfmb::breakermodule::BreakerControl * , BreakerControlPtrSeq );
#endif /* DDS Data Type SEQUENCE: sequence<BreakerControlPtrSeq *> */

      struct COREDX_TS_STRUCT_EXPORT BreakerControl : public openfmb::commonmodule::ControlValue {
        public:
          /** Constructor, Copy Constructor, Destructor, Assignment operator */
          BreakerControl();
          ~BreakerControl();
          BreakerControl( const BreakerControl & other );
          BreakerControl& operator=( const BreakerControl & other);

          void init();
          void clear();
          void copy( const openfmb::breakermodule::BreakerControl * instance );

          int  get_marshal_size(int offset, int just_keys) const ;
          int  marshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys) const ;
          int  marshal_key_hash(unsigned char *buf, int offset, int stream_len) const;
          int  unmarshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys);
          int  unmarshal_key_hash(unsigned char *buf, int offset, int stream_len);

          /* Member vars*/
          static unsigned char get_field_def(const char  * fieldname, 
                                             CoreDX_FieldDef_t * field_def);
          struct openfmb::commonmodule::CheckConditions  * check;
          struct openfmb::breakermodule::BreakerControlXCBR  breakerControlXCBR;

          typedef BreakerControlTypeSupport TypeSupport;
          typedef BreakerControlDataReader DataReader;
          typedef BreakerControlDataWriter DataWriter;
          typedef BreakerControlPtrSeq Seq;

        private:

      }; //openfmb::breakermodule::BreakerControl

      struct BreakerEvent;
      class BreakerEventTypeSupport;
      class BreakerEventDataReader;
      class BreakerEventDataWriter;

/* DDS Data Type SEQUENCE: sequence<openfmb::breakermodule::BreakerEvent *> */
#ifndef _DDS_sequence_cpp_openfmb_breakermodule_BreakerEventPtr_defined
#define _DDS_sequence_cpp_openfmb_breakermodule_BreakerEventPtr_defined
      DECLARE_CPP_UNBOUNDED_SEQ( openfmb::breakermodule::BreakerEvent * , BreakerEventPtrSeq );
#endif /* DDS Data Type SEQUENCE: sequence<BreakerEventPtrSeq *> */

      struct COREDX_TS_STRUCT_EXPORT BreakerEvent : public openfmb::commonmodule::EventValue {
        public:
          /** Constructor, Copy Constructor, Destructor, Assignment operator */
          BreakerEvent();
          ~BreakerEvent();
          BreakerEvent( const BreakerEvent & other );
          BreakerEvent& operator=( const BreakerEvent & other);

          void init();
          void clear();
          void copy( const openfmb::breakermodule::BreakerEvent * instance );

          int  get_marshal_size(int offset, int just_keys) const ;
          int  marshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys) const ;
          int  marshal_key_hash(unsigned char *buf, int offset, int stream_len) const;
          int  unmarshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys);
          int  unmarshal_key_hash(unsigned char *buf, int offset, int stream_len);

          /* Member vars*/
          static unsigned char get_field_def(const char  * fieldname, 
                                             CoreDX_FieldDef_t * field_def);
          struct openfmb::breakermodule::BreakerEventXCBR  breakerEventXCBR;

          typedef BreakerEventTypeSupport TypeSupport;
          typedef BreakerEventDataReader DataReader;
          typedef BreakerEventDataWriter DataWriter;
          typedef BreakerEventPtrSeq Seq;

        private:

      }; //openfmb::breakermodule::BreakerEvent

      struct BreakerStatus;
      class BreakerStatusTypeSupport;
      class BreakerStatusDataReader;
      class BreakerStatusDataWriter;

/* DDS Data Type SEQUENCE: sequence<openfmb::breakermodule::BreakerStatus *> */
#ifndef _DDS_sequence_cpp_openfmb_breakermodule_BreakerStatusPtr_defined
#define _DDS_sequence_cpp_openfmb_breakermodule_BreakerStatusPtr_defined
      DECLARE_CPP_UNBOUNDED_SEQ( openfmb::breakermodule::BreakerStatus * , BreakerStatusPtrSeq );
#endif /* DDS Data Type SEQUENCE: sequence<BreakerStatusPtrSeq *> */

      struct COREDX_TS_STRUCT_EXPORT BreakerStatus : public openfmb::commonmodule::EventValue {
        public:
          /** Constructor, Copy Constructor, Destructor, Assignment operator */
          BreakerStatus();
          ~BreakerStatus();
          BreakerStatus( const BreakerStatus & other );
          BreakerStatus& operator=( const BreakerStatus & other);

          void init();
          void clear();
          void copy( const openfmb::breakermodule::BreakerStatus * instance );

          int  get_marshal_size(int offset, int just_keys) const ;
          int  marshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys) const ;
          int  marshal_key_hash(unsigned char *buf, int offset, int stream_len) const;
          int  unmarshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys);
          int  unmarshal_key_hash(unsigned char *buf, int offset, int stream_len);

          /* Member vars*/
          static unsigned char get_field_def(const char  * fieldname, 
                                             CoreDX_FieldDef_t * field_def);
          struct openfmb::breakermodule::BreakerStatusXCBR  * breakerStatusXCBR;

          typedef BreakerStatusTypeSupport TypeSupport;
          typedef BreakerStatusDataReader DataReader;
          typedef BreakerStatusDataWriter DataWriter;
          typedef BreakerStatusPtrSeq Seq;

        private:

      }; //openfmb::breakermodule::BreakerStatus


    }  /* namespace breakermodule */

    namespace commonmodule {

      struct ControlIED;
      class ControlIEDTypeSupport;
      class ControlIEDDataReader;
      class ControlIEDDataWriter;

/* DDS Data Type SEQUENCE: sequence<openfmb::commonmodule::ControlIED *> */
#ifndef _DDS_sequence_cpp_openfmb_commonmodule_ControlIEDPtr_defined
#define _DDS_sequence_cpp_openfmb_commonmodule_ControlIEDPtr_defined
      DECLARE_CPP_UNBOUNDED_SEQ( openfmb::commonmodule::ControlIED * , ControlIEDPtrSeq );
#endif /* DDS Data Type SEQUENCE: sequence<ControlIEDPtrSeq *> */

      struct COREDX_TS_STRUCT_EXPORT ControlIED : public openfmb::commonmodule::ControlValueSource {
        public:
          /** Constructor, Copy Constructor, Destructor, Assignment operator */
          ControlIED();
          ~ControlIED();
          ControlIED( const ControlIED & other );
          ControlIED& operator=( const ControlIED & other);

          void init();
          void clear();
          void copy( const openfmb::commonmodule::ControlIED * instance );

          int  get_marshal_size(int offset, int just_keys) const ;
          int  marshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys) const ;
          int  marshal_key_hash(unsigned char *buf, int offset, int stream_len) const;
          int  unmarshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys);
          int  unmarshal_key_hash(unsigned char *buf, int offset, int stream_len);

          /* Member vars*/
          static unsigned char get_field_def(const char  * fieldname, 
                                             CoreDX_FieldDef_t * field_def);
          char *  sourceApplicationID;
          UML_Extension::dateTime  sourceDateTime;

          typedef ControlIEDTypeSupport TypeSupport;
          typedef ControlIEDDataReader DataReader;
          typedef ControlIEDDataWriter DataWriter;
          typedef ControlIEDPtrSeq Seq;

        private:

      }; //openfmb::commonmodule::ControlIED

      struct ControlScheduleFSCH;
      class ControlScheduleFSCHTypeSupport;
      class ControlScheduleFSCHDataReader;
      class ControlScheduleFSCHDataWriter;

/* DDS Data Type SEQUENCE: sequence<openfmb::commonmodule::ControlScheduleFSCH *> */
#ifndef _DDS_sequence_cpp_openfmb_commonmodule_ControlScheduleFSCHPtr_defined
#define _DDS_sequence_cpp_openfmb_commonmodule_ControlScheduleFSCHPtr_defined
      DECLARE_CPP_UNBOUNDED_SEQ( openfmb::commonmodule::ControlScheduleFSCH * , ControlScheduleFSCHPtrSeq );
#endif /* DDS Data Type SEQUENCE: sequence<ControlScheduleFSCHPtrSeq *> */

      struct COREDX_TS_STRUCT_EXPORT ControlScheduleFSCH {
        public:
          /** Constructor, Copy Constructor, Destructor, Assignment operator */
          ControlScheduleFSCH();
          ~ControlScheduleFSCH();
          ControlScheduleFSCH( const ControlScheduleFSCH & other );
          ControlScheduleFSCH& operator=( const ControlScheduleFSCH & other);

          void init();
          void clear();
          void copy( const openfmb::commonmodule::ControlScheduleFSCH * instance );

          int  get_marshal_size(int offset, int just_keys) const ;
          int  marshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys) const ;
          int  marshal_key_hash(unsigned char *buf, int offset, int stream_len) const;
          int  unmarshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys);
          int  unmarshal_key_hash(unsigned char *buf, int offset, int stream_len);

          /* Member vars*/
          static unsigned char get_field_def(const char  * fieldname, 
                                             CoreDX_FieldDef_t * field_def);
          struct openfmb::commonmodule::CSG  ValACSG;

          typedef ControlScheduleFSCHTypeSupport TypeSupport;
          typedef ControlScheduleFSCHDataReader DataReader;
          typedef ControlScheduleFSCHDataWriter DataWriter;
          typedef ControlScheduleFSCHPtrSeq Seq;

        private:

      }; //openfmb::commonmodule::ControlScheduleFSCH

      struct EventIED;
      class EventIEDTypeSupport;
      class EventIEDDataReader;
      class EventIEDDataWriter;

/* DDS Data Type SEQUENCE: sequence<openfmb::commonmodule::EventIED *> */
#ifndef _DDS_sequence_cpp_openfmb_commonmodule_EventIEDPtr_defined
#define _DDS_sequence_cpp_openfmb_commonmodule_EventIEDPtr_defined
      DECLARE_CPP_UNBOUNDED_SEQ( openfmb::commonmodule::EventIED * , EventIEDPtrSeq );
#endif /* DDS Data Type SEQUENCE: sequence<EventIEDPtrSeq *> */

      struct COREDX_TS_STRUCT_EXPORT EventIED : public openfmb::commonmodule::EventValueSource {
        public:
          /** Constructor, Copy Constructor, Destructor, Assignment operator */
          EventIED();
          ~EventIED();
          EventIED( const EventIED & other );
          EventIED& operator=( const EventIED & other);

          void init();
          void clear();
          void copy( const openfmb::commonmodule::EventIED * instance );

          int  get_marshal_size(int offset, int just_keys) const ;
          int  marshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys) const ;
          int  marshal_key_hash(unsigned char *buf, int offset, int stream_len) const;
          int  unmarshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys);
          int  unmarshal_key_hash(unsigned char *buf, int offset, int stream_len);

          /* Member vars*/
          static unsigned char get_field_def(const char  * fieldname, 
                                             CoreDX_FieldDef_t * field_def);
          char *  sourceApplicationID;    /* key */
          UML_Extension::dateTime  sourceDateTime;

          typedef EventIEDTypeSupport TypeSupport;
          typedef EventIEDDataReader DataReader;
          typedef EventIEDDataWriter DataWriter;
          typedef EventIEDPtrSeq Seq;

        private:

      }; //openfmb::commonmodule::EventIED

      struct ForecastIED;
      class ForecastIEDTypeSupport;
      class ForecastIEDDataReader;
      class ForecastIEDDataWriter;

/* DDS Data Type SEQUENCE: sequence<openfmb::commonmodule::ForecastIED *> */
#ifndef _DDS_sequence_cpp_openfmb_commonmodule_ForecastIEDPtr_defined
#define _DDS_sequence_cpp_openfmb_commonmodule_ForecastIEDPtr_defined
      DECLARE_CPP_UNBOUNDED_SEQ( openfmb::commonmodule::ForecastIED * , ForecastIEDPtrSeq );
#endif /* DDS Data Type SEQUENCE: sequence<ForecastIEDPtrSeq *> */

      struct COREDX_TS_STRUCT_EXPORT ForecastIED : public openfmb::commonmodule::ForecastValueSource {
        public:
          /** Constructor, Copy Constructor, Destructor, Assignment operator */
          ForecastIED();
          ~ForecastIED();
          ForecastIED( const ForecastIED & other );
          ForecastIED& operator=( const ForecastIED & other);

          void init();
          void clear();
          void copy( const openfmb::commonmodule::ForecastIED * instance );

          int  get_marshal_size(int offset, int just_keys) const ;
          int  marshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys) const ;
          int  marshal_key_hash(unsigned char *buf, int offset, int stream_len) const;
          int  unmarshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys);
          int  unmarshal_key_hash(unsigned char *buf, int offset, int stream_len);

          /* Member vars*/
          static unsigned char get_field_def(const char  * fieldname, 
                                             CoreDX_FieldDef_t * field_def);
          char *  sourceApplicationID;
          UML_Extension::dateTime  sourceDateTime;

          typedef ForecastIEDTypeSupport TypeSupport;
          typedef ForecastIEDDataReader DataReader;
          typedef ForecastIEDDataWriter DataWriter;
          typedef ForecastIEDPtrSeq Seq;

        private:

      }; //openfmb::commonmodule::ForecastIED

      struct ReadingMMXU;
      class ReadingMMXUTypeSupport;
      class ReadingMMXUDataReader;
      class ReadingMMXUDataWriter;

/* DDS Data Type SEQUENCE: sequence<openfmb::commonmodule::ReadingMMXU *> */
#ifndef _DDS_sequence_cpp_openfmb_commonmodule_ReadingMMXUPtr_defined
#define _DDS_sequence_cpp_openfmb_commonmodule_ReadingMMXUPtr_defined
      DECLARE_CPP_UNBOUNDED_SEQ( openfmb::commonmodule::ReadingMMXU * , ReadingMMXUPtrSeq );
#endif /* DDS Data Type SEQUENCE: sequence<ReadingMMXUPtrSeq *> */

      struct COREDX_TS_STRUCT_EXPORT ReadingMMXU : public openfmb::commonmodule::LogicalNode {
        public:
          /** Constructor, Copy Constructor, Destructor, Assignment operator */
          ReadingMMXU();
          ~ReadingMMXU();
          ReadingMMXU( const ReadingMMXU & other );
          ReadingMMXU& operator=( const ReadingMMXU & other);

          void init();
          void clear();
          void copy( const openfmb::commonmodule::ReadingMMXU * instance );

          int  get_marshal_size(int offset, int just_keys) const ;
          int  marshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys) const ;
          int  marshal_key_hash(unsigned char *buf, int offset, int stream_len) const;
          int  unmarshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys);
          int  unmarshal_key_hash(unsigned char *buf, int offset, int stream_len);

          /* Member vars*/
          static unsigned char get_field_def(const char  * fieldname, 
                                             CoreDX_FieldDef_t * field_def);
          struct openfmb::commonmodule::MV  * Hz;
          struct openfmb::commonmodule::DEL  * PPV;
          struct openfmb::commonmodule::ENG_CalcMethodKind  * ClcMth;
          struct openfmb::commonmodule::WYE  * PhV;
          struct openfmb::commonmodule::WYE  * A;
          struct openfmb::commonmodule::WYE  * W;
          struct openfmb::commonmodule::WYE  * VAr;
          struct openfmb::commonmodule::WYE  * VA;

          typedef ReadingMMXUTypeSupport TypeSupport;
          typedef ReadingMMXUDataReader DataReader;
          typedef ReadingMMXUDataWriter DataWriter;
          typedef ReadingMMXUPtrSeq Seq;

        private:

      }; //openfmb::commonmodule::ReadingMMXU


    }  /* namespace commonmodule */

    namespace essmodule {

      struct ESSEvent;
      class ESSEventTypeSupport;
      class ESSEventDataReader;
      class ESSEventDataWriter;

/* DDS Data Type SEQUENCE: sequence<openfmb::essmodule::ESSEvent *> */
#ifndef _DDS_sequence_cpp_openfmb_essmodule_ESSEventPtr_defined
#define _DDS_sequence_cpp_openfmb_essmodule_ESSEventPtr_defined
      DECLARE_CPP_UNBOUNDED_SEQ( openfmb::essmodule::ESSEvent * , ESSEventPtrSeq );
#endif /* DDS Data Type SEQUENCE: sequence<ESSEventPtrSeq *> */

      struct COREDX_TS_STRUCT_EXPORT ESSEvent : public openfmb::commonmodule::EventValue {
        public:
          /** Constructor, Copy Constructor, Destructor, Assignment operator */
          ESSEvent();
          ~ESSEvent();
          ESSEvent( const ESSEvent & other );
          ESSEvent& operator=( const ESSEvent & other);

          void init();
          void clear();
          void copy( const openfmb::essmodule::ESSEvent * instance );

          int  get_marshal_size(int offset, int just_keys) const ;
          int  marshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys) const ;
          int  marshal_key_hash(unsigned char *buf, int offset, int stream_len) const;
          int  unmarshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys);
          int  unmarshal_key_hash(unsigned char *buf, int offset, int stream_len);

          /* Member vars*/
          static unsigned char get_field_def(const char  * fieldname, 
                                             CoreDX_FieldDef_t * field_def);
          struct openfmb::essmodule::EssEventZBAT  * essEventZBAT;
          struct openfmb::essmodule::ESSEventZGEN  * essEventZGEN;
          struct openfmb::essmodule::ESSEventZGLD  * essEventZGLD;

          typedef ESSEventTypeSupport TypeSupport;
          typedef ESSEventDataReader DataReader;
          typedef ESSEventDataWriter DataWriter;
          typedef ESSEventPtrSeq Seq;

        private:

      }; //openfmb::essmodule::ESSEvent

      struct ESSEventProfile;
      class ESSEventProfileTypeSupport;
      class ESSEventProfileDataReader;
      class ESSEventProfileDataWriter;

/* DDS Data Type SEQUENCE: sequence<openfmb::essmodule::ESSEventProfile *> */
#ifndef _DDS_sequence_cpp_openfmb_essmodule_ESSEventProfilePtr_defined
#define _DDS_sequence_cpp_openfmb_essmodule_ESSEventProfilePtr_defined
      DECLARE_CPP_UNBOUNDED_SEQ( openfmb::essmodule::ESSEventProfile * , ESSEventProfilePtrSeq );
#endif /* DDS Data Type SEQUENCE: sequence<ESSEventProfilePtrSeq *> */

      struct COREDX_TS_STRUCT_EXPORT ESSEventProfile : public openfmb::commonmodule::EventIED {
        public:
          /** Constructor, Copy Constructor, Destructor, Assignment operator */
          ESSEventProfile();
          ~ESSEventProfile();
          ESSEventProfile( const ESSEventProfile & other );
          ESSEventProfile& operator=( const ESSEventProfile & other);

          void init();
          void clear();
          void copy( const openfmb::essmodule::ESSEventProfile * instance );

          int  get_marshal_size(int offset, int just_keys) const ;
          int  marshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys) const ;
          int  marshal_key_hash(unsigned char *buf, int offset, int stream_len) const;
          int  unmarshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys);
          int  unmarshal_key_hash(unsigned char *buf, int offset, int stream_len);

          /* Member vars*/
          static unsigned char get_field_def(const char  * fieldname, 
                                             CoreDX_FieldDef_t * field_def);
          struct openfmb::essmodule::ESSEvent  essEvent;

          typedef ESSEventProfileTypeSupport TypeSupport;
          typedef ESSEventProfileDataReader DataReader;
          typedef ESSEventProfileDataWriter DataWriter;
          typedef ESSEventProfilePtrSeq Seq;

        private:

      }; //openfmb::essmodule::ESSEventProfile

      struct ESSReadingValue;
      class ESSReadingValueTypeSupport;
      class ESSReadingValueDataReader;
      class ESSReadingValueDataWriter;

/* DDS Data Type SEQUENCE: sequence<openfmb::essmodule::ESSReadingValue *> */
#ifndef _DDS_sequence_cpp_openfmb_essmodule_ESSReadingValuePtr_defined
#define _DDS_sequence_cpp_openfmb_essmodule_ESSReadingValuePtr_defined
      DECLARE_CPP_UNBOUNDED_SEQ( openfmb::essmodule::ESSReadingValue * , ESSReadingValuePtrSeq );
#endif /* DDS Data Type SEQUENCE: sequence<ESSReadingValuePtrSeq *> */

      struct COREDX_TS_STRUCT_EXPORT ESSReadingValue : public openfmb::commonmodule::MeasurementValue {
        public:
          /** Constructor, Copy Constructor, Destructor, Assignment operator */
          ESSReadingValue();
          ~ESSReadingValue();
          ESSReadingValue( const ESSReadingValue & other );
          ESSReadingValue& operator=( const ESSReadingValue & other);

          void init();
          void clear();
          void copy( const openfmb::essmodule::ESSReadingValue * instance );

          int  get_marshal_size(int offset, int just_keys) const ;
          int  marshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys) const ;
          int  marshal_key_hash(unsigned char *buf, int offset, int stream_len) const;
          int  unmarshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys);
          int  unmarshal_key_hash(unsigned char *buf, int offset, int stream_len);

          /* Member vars*/
          static unsigned char get_field_def(const char  * fieldname, 
                                             CoreDX_FieldDef_t * field_def);
          char *  terminalID;
          struct openfmb::commonmodule::ReadingMMXU  * readingMMXU;
          struct openfmb::commonmodule::ReadingMMTR  * readingMMTR;

          typedef ESSReadingValueTypeSupport TypeSupport;
          typedef ESSReadingValueDataReader DataReader;
          typedef ESSReadingValueDataWriter DataWriter;
          typedef ESSReadingValuePtrSeq Seq;

        private:

      }; //openfmb::essmodule::ESSReadingValue

      struct ESSStatus;
      class ESSStatusTypeSupport;
      class ESSStatusDataReader;
      class ESSStatusDataWriter;

/* DDS Data Type SEQUENCE: sequence<openfmb::essmodule::ESSStatus *> */
#ifndef _DDS_sequence_cpp_openfmb_essmodule_ESSStatusPtr_defined
#define _DDS_sequence_cpp_openfmb_essmodule_ESSStatusPtr_defined
      DECLARE_CPP_UNBOUNDED_SEQ( openfmb::essmodule::ESSStatus * , ESSStatusPtrSeq );
#endif /* DDS Data Type SEQUENCE: sequence<ESSStatusPtrSeq *> */

      struct COREDX_TS_STRUCT_EXPORT ESSStatus : public openfmb::commonmodule::StatusValue {
        public:
          /** Constructor, Copy Constructor, Destructor, Assignment operator */
          ESSStatus();
          ~ESSStatus();
          ESSStatus( const ESSStatus & other );
          ESSStatus& operator=( const ESSStatus & other);

          void init();
          void clear();
          void copy( const openfmb::essmodule::ESSStatus * instance );

          int  get_marshal_size(int offset, int just_keys) const ;
          int  marshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys) const ;
          int  marshal_key_hash(unsigned char *buf, int offset, int stream_len) const;
          int  unmarshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys);
          int  unmarshal_key_hash(unsigned char *buf, int offset, int stream_len);

          /* Member vars*/
          static unsigned char get_field_def(const char  * fieldname, 
                                             CoreDX_FieldDef_t * field_def);
          struct openfmb::essmodule::EssStatusZBAT  * essStatusZBAT;
          struct openfmb::essmodule::ESSStatusZGEN *  essStatusZGEN;
          struct openfmb::essmodule::ESSStatusZGLD  * essStatusZGLD;

          typedef ESSStatusTypeSupport TypeSupport;
          typedef ESSStatusDataReader DataReader;
          typedef ESSStatusDataWriter DataWriter;
          typedef ESSStatusPtrSeq Seq;

        private:

      }; //openfmb::essmodule::ESSStatus

      struct ESSStatusProfile;
      class ESSStatusProfileTypeSupport;
      class ESSStatusProfileDataReader;
      class ESSStatusProfileDataWriter;

/* DDS Data Type SEQUENCE: sequence<openfmb::essmodule::ESSStatusProfile *> */
#ifndef _DDS_sequence_cpp_openfmb_essmodule_ESSStatusProfilePtr_defined
#define _DDS_sequence_cpp_openfmb_essmodule_ESSStatusProfilePtr_defined
      DECLARE_CPP_UNBOUNDED_SEQ( openfmb::essmodule::ESSStatusProfile * , ESSStatusProfilePtrSeq );
#endif /* DDS Data Type SEQUENCE: sequence<ESSStatusProfilePtrSeq *> */

      struct COREDX_TS_STRUCT_EXPORT ESSStatusProfile : public openfmb::commonmodule::StatusIED {
        public:
          /** Constructor, Copy Constructor, Destructor, Assignment operator */
          ESSStatusProfile();
          ~ESSStatusProfile();
          ESSStatusProfile( const ESSStatusProfile & other );
          ESSStatusProfile& operator=( const ESSStatusProfile & other);

          void init();
          void clear();
          void copy( const openfmb::essmodule::ESSStatusProfile * instance );

          int  get_marshal_size(int offset, int just_keys) const ;
          int  marshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys) const ;
          int  marshal_key_hash(unsigned char *buf, int offset, int stream_len) const;
          int  unmarshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys);
          int  unmarshal_key_hash(unsigned char *buf, int offset, int stream_len);

          /* Member vars*/
          static unsigned char get_field_def(const char  * fieldname, 
                                             CoreDX_FieldDef_t * field_def);
          struct openfmb::essmodule::ESSStatus  essStatus;

          typedef ESSStatusProfileTypeSupport TypeSupport;
          typedef ESSStatusProfileDataReader DataReader;
          typedef ESSStatusProfileDataWriter DataWriter;
          typedef ESSStatusProfilePtrSeq Seq;

        private:

      }; //openfmb::essmodule::ESSStatusProfile


    }  /* namespace essmodule */

    namespace generationmodule {

      struct GenerationReadingValue;
      class GenerationReadingValueTypeSupport;
      class GenerationReadingValueDataReader;
      class GenerationReadingValueDataWriter;

/* DDS Data Type SEQUENCE: sequence<openfmb::generationmodule::GenerationReadingValue *> */
#ifndef _DDS_sequence_cpp_openfmb_generationmodule_GenerationReadingValuePtr_defined
#define _DDS_sequence_cpp_openfmb_generationmodule_GenerationReadingValuePtr_defined
      DECLARE_CPP_UNBOUNDED_SEQ( openfmb::generationmodule::GenerationReadingValue * , GenerationReadingValuePtrSeq );
#endif /* DDS Data Type SEQUENCE: sequence<GenerationReadingValuePtrSeq *> */

      struct COREDX_TS_STRUCT_EXPORT GenerationReadingValue : public openfmb::commonmodule::MeasurementValue {
        public:
          /** Constructor, Copy Constructor, Destructor, Assignment operator */
          GenerationReadingValue();
          ~GenerationReadingValue();
          GenerationReadingValue( const GenerationReadingValue & other );
          GenerationReadingValue& operator=( const GenerationReadingValue & other);

          void init();
          void clear();
          void copy( const openfmb::generationmodule::GenerationReadingValue * instance );

          int  get_marshal_size(int offset, int just_keys) const ;
          int  marshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys) const ;
          int  marshal_key_hash(unsigned char *buf, int offset, int stream_len) const;
          int  unmarshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys);
          int  unmarshal_key_hash(unsigned char *buf, int offset, int stream_len);

          /* Member vars*/
          static unsigned char get_field_def(const char  * fieldname, 
                                             CoreDX_FieldDef_t * field_def);
          char *  terminalID;
          struct openfmb::commonmodule::ReadingMMXU  * readingMMXU;
          struct openfmb::commonmodule::ReadingMMTR  * readingMMTR;

          typedef GenerationReadingValueTypeSupport TypeSupport;
          typedef GenerationReadingValueDataReader DataReader;
          typedef GenerationReadingValueDataWriter DataWriter;
          typedef GenerationReadingValuePtrSeq Seq;

        private:

      }; //openfmb::generationmodule::GenerationReadingValue

      struct GenerationReadingProfile;
      class GenerationReadingProfileTypeSupport;
      class GenerationReadingProfileDataReader;
      class GenerationReadingProfileDataWriter;

/* DDS Data Type SEQUENCE: sequence<openfmb::generationmodule::GenerationReadingProfile *> */
#ifndef _DDS_sequence_cpp_openfmb_generationmodule_GenerationReadingProfilePtr_defined
#define _DDS_sequence_cpp_openfmb_generationmodule_GenerationReadingProfilePtr_defined
      DECLARE_CPP_UNBOUNDED_SEQ( openfmb::generationmodule::GenerationReadingProfile * , GenerationReadingProfilePtrSeq );
#endif /* DDS Data Type SEQUENCE: sequence<GenerationReadingProfilePtrSeq *> */

      struct COREDX_TS_STRUCT_EXPORT GenerationReadingProfile : public openfmb::commonmodule::MeasurementIED {
        public:
          /** Constructor, Copy Constructor, Destructor, Assignment operator */
          GenerationReadingProfile();
          ~GenerationReadingProfile();
          GenerationReadingProfile( const GenerationReadingProfile & other );
          GenerationReadingProfile& operator=( const GenerationReadingProfile & other);

#ifndef _DDS_SEQ_cpp_openfmb_generationmodule_GenerationReadingProfile_openfmb_generationmodule_GenerationReadingValueSeq_defined
#define _DDS_SEQ_cpp_openfmb_generationmodule_GenerationReadingProfile_openfmb_generationmodule_GenerationReadingValueSeq_defined
        DECLARE_CPP_UNBOUNDED_SEQ( struct openfmb::generationmodule::GenerationReadingValue , openfmb_generationmodule_GenerationReadingValueSeq );
#endif /* User Defined SEQUENCE: sequence openfmb::generationmodule::GenerationReadingProfile::GenerationReadingValueSeq */

          void init();
          void clear();
          void copy( const openfmb::generationmodule::GenerationReadingProfile * instance );

          int  get_marshal_size(int offset, int just_keys) const ;
          int  marshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys) const ;
          int  marshal_key_hash(unsigned char *buf, int offset, int stream_len) const;
          int  unmarshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys);
          int  unmarshal_key_hash(unsigned char *buf, int offset, int stream_len);

          /* Member vars*/
          static unsigned char get_field_def(const char  * fieldname, 
                                             CoreDX_FieldDef_t * field_def);
          openfmb::generationmodule::GenerationReadingProfile::openfmb_generationmodule_GenerationReadingValueSeq  generationReadingValue;

          typedef GenerationReadingProfileTypeSupport TypeSupport;
          typedef GenerationReadingProfileDataReader DataReader;
          typedef GenerationReadingProfileDataWriter DataWriter;
          typedef GenerationReadingProfilePtrSeq Seq;

        private:

      }; //openfmb::generationmodule::GenerationReadingProfile

      struct GenerationEventProfile;
      class GenerationEventProfileTypeSupport;
      class GenerationEventProfileDataReader;
      class GenerationEventProfileDataWriter;

/* DDS Data Type SEQUENCE: sequence<openfmb::generationmodule::GenerationEventProfile *> */
#ifndef _DDS_sequence_cpp_openfmb_generationmodule_GenerationEventProfilePtr_defined
#define _DDS_sequence_cpp_openfmb_generationmodule_GenerationEventProfilePtr_defined
      DECLARE_CPP_UNBOUNDED_SEQ( openfmb::generationmodule::GenerationEventProfile * , GenerationEventProfilePtrSeq );
#endif /* DDS Data Type SEQUENCE: sequence<GenerationEventProfilePtrSeq *> */

      struct COREDX_TS_STRUCT_EXPORT GenerationEventProfile : public openfmb::commonmodule::EventIED {
        public:
          /** Constructor, Copy Constructor, Destructor, Assignment operator */
          GenerationEventProfile();
          ~GenerationEventProfile();
          GenerationEventProfile( const GenerationEventProfile & other );
          GenerationEventProfile& operator=( const GenerationEventProfile & other);

          void init();
          void clear();
          void copy( const openfmb::generationmodule::GenerationEventProfile * instance );

          int  get_marshal_size(int offset, int just_keys) const ;
          int  marshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys) const ;
          int  marshal_key_hash(unsigned char *buf, int offset, int stream_len) const;
          int  unmarshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys);
          int  unmarshal_key_hash(unsigned char *buf, int offset, int stream_len);

          /* Member vars*/
          static unsigned char get_field_def(const char  * fieldname, 
                                             CoreDX_FieldDef_t * field_def);
          struct openfmb::generationmodule::GenerationEvent  generationEvent;

          typedef GenerationEventProfileTypeSupport TypeSupport;
          typedef GenerationEventProfileDataReader DataReader;
          typedef GenerationEventProfileDataWriter DataWriter;
          typedef GenerationEventProfilePtrSeq Seq;

        private:

      }; //openfmb::generationmodule::GenerationEventProfile


    }  /* namespace generationmodule */

    namespace loadmodule {

      struct LoadEventProfile;
      class LoadEventProfileTypeSupport;
      class LoadEventProfileDataReader;
      class LoadEventProfileDataWriter;

/* DDS Data Type SEQUENCE: sequence<openfmb::loadmodule::LoadEventProfile *> */
#ifndef _DDS_sequence_cpp_openfmb_loadmodule_LoadEventProfilePtr_defined
#define _DDS_sequence_cpp_openfmb_loadmodule_LoadEventProfilePtr_defined
      DECLARE_CPP_UNBOUNDED_SEQ( openfmb::loadmodule::LoadEventProfile * , LoadEventProfilePtrSeq );
#endif /* DDS Data Type SEQUENCE: sequence<LoadEventProfilePtrSeq *> */

      struct COREDX_TS_STRUCT_EXPORT LoadEventProfile : public openfmb::commonmodule::EventIED {
        public:
          /** Constructor, Copy Constructor, Destructor, Assignment operator */
          LoadEventProfile();
          ~LoadEventProfile();
          LoadEventProfile( const LoadEventProfile & other );
          LoadEventProfile& operator=( const LoadEventProfile & other);

          void init();
          void clear();
          void copy( const openfmb::loadmodule::LoadEventProfile * instance );

          int  get_marshal_size(int offset, int just_keys) const ;
          int  marshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys) const ;
          int  marshal_key_hash(unsigned char *buf, int offset, int stream_len) const;
          int  unmarshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys);
          int  unmarshal_key_hash(unsigned char *buf, int offset, int stream_len);

          /* Member vars*/
          static unsigned char get_field_def(const char  * fieldname, 
                                             CoreDX_FieldDef_t * field_def);
          struct openfmb::loadmodule::LoadEvent  loadEvent;

          typedef LoadEventProfileTypeSupport TypeSupport;
          typedef LoadEventProfileDataReader DataReader;
          typedef LoadEventProfileDataWriter DataWriter;
          typedef LoadEventProfilePtrSeq Seq;

        private:

      }; //openfmb::loadmodule::LoadEventProfile

      struct LoadReadingValue;
      class LoadReadingValueTypeSupport;
      class LoadReadingValueDataReader;
      class LoadReadingValueDataWriter;

/* DDS Data Type SEQUENCE: sequence<openfmb::loadmodule::LoadReadingValue *> */
#ifndef _DDS_sequence_cpp_openfmb_loadmodule_LoadReadingValuePtr_defined
#define _DDS_sequence_cpp_openfmb_loadmodule_LoadReadingValuePtr_defined
      DECLARE_CPP_UNBOUNDED_SEQ( openfmb::loadmodule::LoadReadingValue * , LoadReadingValuePtrSeq );
#endif /* DDS Data Type SEQUENCE: sequence<LoadReadingValuePtrSeq *> */

      struct COREDX_TS_STRUCT_EXPORT LoadReadingValue : public openfmb::commonmodule::MeasurementValue {
        public:
          /** Constructor, Copy Constructor, Destructor, Assignment operator */
          LoadReadingValue();
          ~LoadReadingValue();
          LoadReadingValue( const LoadReadingValue & other );
          LoadReadingValue& operator=( const LoadReadingValue & other);

          void init();
          void clear();
          void copy( const openfmb::loadmodule::LoadReadingValue * instance );

          int  get_marshal_size(int offset, int just_keys) const ;
          int  marshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys) const ;
          int  marshal_key_hash(unsigned char *buf, int offset, int stream_len) const;
          int  unmarshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys);
          int  unmarshal_key_hash(unsigned char *buf, int offset, int stream_len);

          /* Member vars*/
          static unsigned char get_field_def(const char  * fieldname, 
                                             CoreDX_FieldDef_t * field_def);
          char *  terminalID;
          struct openfmb::commonmodule::ReadingMMXU  * readingMMXU;
          struct openfmb::commonmodule::ReadingMMTR  * readingMMTR;

          typedef LoadReadingValueTypeSupport TypeSupport;
          typedef LoadReadingValueDataReader DataReader;
          typedef LoadReadingValueDataWriter DataWriter;
          typedef LoadReadingValuePtrSeq Seq;

        private:

      }; //openfmb::loadmodule::LoadReadingValue


    }  /* namespace loadmodule */

    namespace reclosermodule {

      struct RecloserControlProfile;
      class RecloserControlProfileTypeSupport;
      class RecloserControlProfileDataReader;
      class RecloserControlProfileDataWriter;

/* DDS Data Type SEQUENCE: sequence<openfmb::reclosermodule::RecloserControlProfile *> */
#ifndef _DDS_sequence_cpp_openfmb_reclosermodule_RecloserControlProfilePtr_defined
#define _DDS_sequence_cpp_openfmb_reclosermodule_RecloserControlProfilePtr_defined
      DECLARE_CPP_UNBOUNDED_SEQ( openfmb::reclosermodule::RecloserControlProfile * , RecloserControlProfilePtrSeq );
#endif /* DDS Data Type SEQUENCE: sequence<RecloserControlProfilePtrSeq *> */

      struct COREDX_TS_STRUCT_EXPORT RecloserControlProfile : public openfmb::commonmodule::ControlIED {
        public:
          /** Constructor, Copy Constructor, Destructor, Assignment operator */
          RecloserControlProfile();
          ~RecloserControlProfile();
          RecloserControlProfile( const RecloserControlProfile & other );
          RecloserControlProfile& operator=( const RecloserControlProfile & other);

          void init();
          void clear();
          void copy( const openfmb::reclosermodule::RecloserControlProfile * instance );

          int  get_marshal_size(int offset, int just_keys) const ;
          int  marshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys) const ;
          int  marshal_key_hash(unsigned char *buf, int offset, int stream_len) const;
          int  unmarshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys);
          int  unmarshal_key_hash(unsigned char *buf, int offset, int stream_len);

          /* Member vars*/
          static unsigned char get_field_def(const char  * fieldname, 
                                             CoreDX_FieldDef_t * field_def);
          char *  targetBreakerSystemID;    /* key */
          struct openfmb::reclosermodule::RecloserControl  recloserControl;

          typedef RecloserControlProfileTypeSupport TypeSupport;
          typedef RecloserControlProfileDataReader DataReader;
          typedef RecloserControlProfileDataWriter DataWriter;
          typedef RecloserControlProfilePtrSeq Seq;

        private:

      }; //openfmb::reclosermodule::RecloserControlProfile

      struct RecloserEventProfile;
      class RecloserEventProfileTypeSupport;
      class RecloserEventProfileDataReader;
      class RecloserEventProfileDataWriter;

/* DDS Data Type SEQUENCE: sequence<openfmb::reclosermodule::RecloserEventProfile *> */
#ifndef _DDS_sequence_cpp_openfmb_reclosermodule_RecloserEventProfilePtr_defined
#define _DDS_sequence_cpp_openfmb_reclosermodule_RecloserEventProfilePtr_defined
      DECLARE_CPP_UNBOUNDED_SEQ( openfmb::reclosermodule::RecloserEventProfile * , RecloserEventProfilePtrSeq );
#endif /* DDS Data Type SEQUENCE: sequence<RecloserEventProfilePtrSeq *> */

      struct COREDX_TS_STRUCT_EXPORT RecloserEventProfile : public openfmb::commonmodule::EventIED {
        public:
          /** Constructor, Copy Constructor, Destructor, Assignment operator */
          RecloserEventProfile();
          ~RecloserEventProfile();
          RecloserEventProfile( const RecloserEventProfile & other );
          RecloserEventProfile& operator=( const RecloserEventProfile & other);

          void init();
          void clear();
          void copy( const openfmb::reclosermodule::RecloserEventProfile * instance );

          int  get_marshal_size(int offset, int just_keys) const ;
          int  marshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys) const ;
          int  marshal_key_hash(unsigned char *buf, int offset, int stream_len) const;
          int  unmarshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys);
          int  unmarshal_key_hash(unsigned char *buf, int offset, int stream_len);

          /* Member vars*/
          static unsigned char get_field_def(const char  * fieldname, 
                                             CoreDX_FieldDef_t * field_def);
          struct openfmb::reclosermodule::RecloserEvent  recloserEvent;

          typedef RecloserEventProfileTypeSupport TypeSupport;
          typedef RecloserEventProfileDataReader DataReader;
          typedef RecloserEventProfileDataWriter DataWriter;
          typedef RecloserEventProfilePtrSeq Seq;

        private:

      }; //openfmb::reclosermodule::RecloserEventProfile

      struct RecloserReadingValue;
      class RecloserReadingValueTypeSupport;
      class RecloserReadingValueDataReader;
      class RecloserReadingValueDataWriter;

/* DDS Data Type SEQUENCE: sequence<openfmb::reclosermodule::RecloserReadingValue *> */
#ifndef _DDS_sequence_cpp_openfmb_reclosermodule_RecloserReadingValuePtr_defined
#define _DDS_sequence_cpp_openfmb_reclosermodule_RecloserReadingValuePtr_defined
      DECLARE_CPP_UNBOUNDED_SEQ( openfmb::reclosermodule::RecloserReadingValue * , RecloserReadingValuePtrSeq );
#endif /* DDS Data Type SEQUENCE: sequence<RecloserReadingValuePtrSeq *> */

      struct COREDX_TS_STRUCT_EXPORT RecloserReadingValue : public openfmb::commonmodule::MeasurementValue {
        public:
          /** Constructor, Copy Constructor, Destructor, Assignment operator */
          RecloserReadingValue();
          ~RecloserReadingValue();
          RecloserReadingValue( const RecloserReadingValue & other );
          RecloserReadingValue& operator=( const RecloserReadingValue & other);

          void init();
          void clear();
          void copy( const openfmb::reclosermodule::RecloserReadingValue * instance );

          int  get_marshal_size(int offset, int just_keys) const ;
          int  marshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys) const ;
          int  marshal_key_hash(unsigned char *buf, int offset, int stream_len) const;
          int  unmarshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys);
          int  unmarshal_key_hash(unsigned char *buf, int offset, int stream_len);

          /* Member vars*/
          static unsigned char get_field_def(const char  * fieldname, 
                                             CoreDX_FieldDef_t * field_def);
          char *  terminalID;
          struct openfmb::commonmodule::ReadingMMXU  * readingMMXU;
          struct openfmb::commonmodule::ReadingMMTR  * readingMMTR;

          typedef RecloserReadingValueTypeSupport TypeSupport;
          typedef RecloserReadingValueDataReader DataReader;
          typedef RecloserReadingValueDataWriter DataWriter;
          typedef RecloserReadingValuePtrSeq Seq;

        private:

      }; //openfmb::reclosermodule::RecloserReadingValue

      struct RecloserStatusProfile;
      class RecloserStatusProfileTypeSupport;
      class RecloserStatusProfileDataReader;
      class RecloserStatusProfileDataWriter;

/* DDS Data Type SEQUENCE: sequence<openfmb::reclosermodule::RecloserStatusProfile *> */
#ifndef _DDS_sequence_cpp_openfmb_reclosermodule_RecloserStatusProfilePtr_defined
#define _DDS_sequence_cpp_openfmb_reclosermodule_RecloserStatusProfilePtr_defined
      DECLARE_CPP_UNBOUNDED_SEQ( openfmb::reclosermodule::RecloserStatusProfile * , RecloserStatusProfilePtrSeq );
#endif /* DDS Data Type SEQUENCE: sequence<RecloserStatusProfilePtrSeq *> */

      struct COREDX_TS_STRUCT_EXPORT RecloserStatusProfile : public openfmb::commonmodule::EventIED {
        public:
          /** Constructor, Copy Constructor, Destructor, Assignment operator */
          RecloserStatusProfile();
          ~RecloserStatusProfile();
          RecloserStatusProfile( const RecloserStatusProfile & other );
          RecloserStatusProfile& operator=( const RecloserStatusProfile & other);

          void init();
          void clear();
          void copy( const openfmb::reclosermodule::RecloserStatusProfile * instance );

          int  get_marshal_size(int offset, int just_keys) const ;
          int  marshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys) const ;
          int  marshal_key_hash(unsigned char *buf, int offset, int stream_len) const;
          int  unmarshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys);
          int  unmarshal_key_hash(unsigned char *buf, int offset, int stream_len);

          /* Member vars*/
          static unsigned char get_field_def(const char  * fieldname, 
                                             CoreDX_FieldDef_t * field_def);
          struct openfmb::reclosermodule::RecloserStatus  * recloserStatus;

          typedef RecloserStatusProfileTypeSupport TypeSupport;
          typedef RecloserStatusProfileDataReader DataReader;
          typedef RecloserStatusProfileDataWriter DataWriter;
          typedef RecloserStatusProfilePtrSeq Seq;

        private:

      }; //openfmb::reclosermodule::RecloserStatusProfile


    }  /* namespace reclosermodule */

    namespace regulatormodule {

      struct RegulatorReadingValue;
      class RegulatorReadingValueTypeSupport;
      class RegulatorReadingValueDataReader;
      class RegulatorReadingValueDataWriter;

/* DDS Data Type SEQUENCE: sequence<openfmb::regulatormodule::RegulatorReadingValue *> */
#ifndef _DDS_sequence_cpp_openfmb_regulatormodule_RegulatorReadingValuePtr_defined
#define _DDS_sequence_cpp_openfmb_regulatormodule_RegulatorReadingValuePtr_defined
      DECLARE_CPP_UNBOUNDED_SEQ( openfmb::regulatormodule::RegulatorReadingValue * , RegulatorReadingValuePtrSeq );
#endif /* DDS Data Type SEQUENCE: sequence<RegulatorReadingValuePtrSeq *> */

      struct COREDX_TS_STRUCT_EXPORT RegulatorReadingValue : public openfmb::commonmodule::MeasurementValue {
        public:
          /** Constructor, Copy Constructor, Destructor, Assignment operator */
          RegulatorReadingValue();
          ~RegulatorReadingValue();
          RegulatorReadingValue( const RegulatorReadingValue & other );
          RegulatorReadingValue& operator=( const RegulatorReadingValue & other);

          void init();
          void clear();
          void copy( const openfmb::regulatormodule::RegulatorReadingValue * instance );

          int  get_marshal_size(int offset, int just_keys) const ;
          int  marshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys) const ;
          int  marshal_key_hash(unsigned char *buf, int offset, int stream_len) const;
          int  unmarshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys);
          int  unmarshal_key_hash(unsigned char *buf, int offset, int stream_len);

          /* Member vars*/
          static unsigned char get_field_def(const char  * fieldname, 
                                             CoreDX_FieldDef_t * field_def);
          char *  terminalID;
          struct openfmb::commonmodule::ReadingMMXU  * readingMMXU;
          struct openfmb::commonmodule::ReadingMMTR  * readingMMTR;

          typedef RegulatorReadingValueTypeSupport TypeSupport;
          typedef RegulatorReadingValueDataReader DataReader;
          typedef RegulatorReadingValueDataWriter DataWriter;
          typedef RegulatorReadingValuePtrSeq Seq;

        private:

      }; //openfmb::regulatormodule::RegulatorReadingValue


    }  /* namespace regulatormodule */

    namespace resourcemodule {

      struct ResourceReadingValue;
      class ResourceReadingValueTypeSupport;
      class ResourceReadingValueDataReader;
      class ResourceReadingValueDataWriter;

/* DDS Data Type SEQUENCE: sequence<openfmb::resourcemodule::ResourceReadingValue *> */
#ifndef _DDS_sequence_cpp_openfmb_resourcemodule_ResourceReadingValuePtr_defined
#define _DDS_sequence_cpp_openfmb_resourcemodule_ResourceReadingValuePtr_defined
      DECLARE_CPP_UNBOUNDED_SEQ( openfmb::resourcemodule::ResourceReadingValue * , ResourceReadingValuePtrSeq );
#endif /* DDS Data Type SEQUENCE: sequence<ResourceReadingValuePtrSeq *> */

      struct COREDX_TS_STRUCT_EXPORT ResourceReadingValue : public openfmb::commonmodule::MeasurementValue {
        public:
          /** Constructor, Copy Constructor, Destructor, Assignment operator */
          ResourceReadingValue();
          ~ResourceReadingValue();
          ResourceReadingValue( const ResourceReadingValue & other );
          ResourceReadingValue& operator=( const ResourceReadingValue & other);

          void init();
          void clear();
          void copy( const openfmb::resourcemodule::ResourceReadingValue * instance );

          int  get_marshal_size(int offset, int just_keys) const ;
          int  marshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys) const ;
          int  marshal_key_hash(unsigned char *buf, int offset, int stream_len) const;
          int  unmarshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys);
          int  unmarshal_key_hash(unsigned char *buf, int offset, int stream_len);

          /* Member vars*/
          static unsigned char get_field_def(const char  * fieldname, 
                                             CoreDX_FieldDef_t * field_def);
          char *  terminalID;
          struct openfmb::commonmodule::ReadingMMXU  * readingMMXU;
          struct openfmb::commonmodule::ReadingMMTR  * readingMMTR;

          typedef ResourceReadingValueTypeSupport TypeSupport;
          typedef ResourceReadingValueDataReader DataReader;
          typedef ResourceReadingValueDataWriter DataWriter;
          typedef ResourceReadingValuePtrSeq Seq;

        private:

      }; //openfmb::resourcemodule::ResourceReadingValue


    }  /* namespace resourcemodule */

    namespace solarmodule {

      struct SolarEvent;
      class SolarEventTypeSupport;
      class SolarEventDataReader;
      class SolarEventDataWriter;

/* DDS Data Type SEQUENCE: sequence<openfmb::solarmodule::SolarEvent *> */
#ifndef _DDS_sequence_cpp_openfmb_solarmodule_SolarEventPtr_defined
#define _DDS_sequence_cpp_openfmb_solarmodule_SolarEventPtr_defined
      DECLARE_CPP_UNBOUNDED_SEQ( openfmb::solarmodule::SolarEvent * , SolarEventPtrSeq );
#endif /* DDS Data Type SEQUENCE: sequence<SolarEventPtrSeq *> */

      struct COREDX_TS_STRUCT_EXPORT SolarEvent : public openfmb::commonmodule::EventValue {
        public:
          /** Constructor, Copy Constructor, Destructor, Assignment operator */
          SolarEvent();
          ~SolarEvent();
          SolarEvent( const SolarEvent & other );
          SolarEvent& operator=( const SolarEvent & other);

          void init();
          void clear();
          void copy( const openfmb::solarmodule::SolarEvent * instance );

          int  get_marshal_size(int offset, int just_keys) const ;
          int  marshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys) const ;
          int  marshal_key_hash(unsigned char *buf, int offset, int stream_len) const;
          int  unmarshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys);
          int  unmarshal_key_hash(unsigned char *buf, int offset, int stream_len);

          /* Member vars*/
          static unsigned char get_field_def(const char  * fieldname, 
                                             CoreDX_FieldDef_t * field_def);
          struct openfmb::solarmodule::SolarEventZGEN  * solarEventZGEN;

          typedef SolarEventTypeSupport TypeSupport;
          typedef SolarEventDataReader DataReader;
          typedef SolarEventDataWriter DataWriter;
          typedef SolarEventPtrSeq Seq;

        private:

      }; //openfmb::solarmodule::SolarEvent

      struct SolarEventProfile;
      class SolarEventProfileTypeSupport;
      class SolarEventProfileDataReader;
      class SolarEventProfileDataWriter;

/* DDS Data Type SEQUENCE: sequence<openfmb::solarmodule::SolarEventProfile *> */
#ifndef _DDS_sequence_cpp_openfmb_solarmodule_SolarEventProfilePtr_defined
#define _DDS_sequence_cpp_openfmb_solarmodule_SolarEventProfilePtr_defined
      DECLARE_CPP_UNBOUNDED_SEQ( openfmb::solarmodule::SolarEventProfile * , SolarEventProfilePtrSeq );
#endif /* DDS Data Type SEQUENCE: sequence<SolarEventProfilePtrSeq *> */

      struct COREDX_TS_STRUCT_EXPORT SolarEventProfile : public openfmb::commonmodule::StatusIED {
        public:
          /** Constructor, Copy Constructor, Destructor, Assignment operator */
          SolarEventProfile();
          ~SolarEventProfile();
          SolarEventProfile( const SolarEventProfile & other );
          SolarEventProfile& operator=( const SolarEventProfile & other);

          void init();
          void clear();
          void copy( const openfmb::solarmodule::SolarEventProfile * instance );

          int  get_marshal_size(int offset, int just_keys) const ;
          int  marshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys) const ;
          int  marshal_key_hash(unsigned char *buf, int offset, int stream_len) const;
          int  unmarshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys);
          int  unmarshal_key_hash(unsigned char *buf, int offset, int stream_len);

          /* Member vars*/
          static unsigned char get_field_def(const char  * fieldname, 
                                             CoreDX_FieldDef_t * field_def);
          struct openfmb::solarmodule::SolarEvent  * solarEvent;

          typedef SolarEventProfileTypeSupport TypeSupport;
          typedef SolarEventProfileDataReader DataReader;
          typedef SolarEventProfileDataWriter DataWriter;
          typedef SolarEventProfilePtrSeq Seq;

        private:

      }; //openfmb::solarmodule::SolarEventProfile

      struct SolarReadingValue;
      class SolarReadingValueTypeSupport;
      class SolarReadingValueDataReader;
      class SolarReadingValueDataWriter;

/* DDS Data Type SEQUENCE: sequence<openfmb::solarmodule::SolarReadingValue *> */
#ifndef _DDS_sequence_cpp_openfmb_solarmodule_SolarReadingValuePtr_defined
#define _DDS_sequence_cpp_openfmb_solarmodule_SolarReadingValuePtr_defined
      DECLARE_CPP_UNBOUNDED_SEQ( openfmb::solarmodule::SolarReadingValue * , SolarReadingValuePtrSeq );
#endif /* DDS Data Type SEQUENCE: sequence<SolarReadingValuePtrSeq *> */

      struct COREDX_TS_STRUCT_EXPORT SolarReadingValue : public openfmb::commonmodule::MeasurementValue {
        public:
          /** Constructor, Copy Constructor, Destructor, Assignment operator */
          SolarReadingValue();
          ~SolarReadingValue();
          SolarReadingValue( const SolarReadingValue & other );
          SolarReadingValue& operator=( const SolarReadingValue & other);

          void init();
          void clear();
          void copy( const openfmb::solarmodule::SolarReadingValue * instance );

          int  get_marshal_size(int offset, int just_keys) const ;
          int  marshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys) const ;
          int  marshal_key_hash(unsigned char *buf, int offset, int stream_len) const;
          int  unmarshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys);
          int  unmarshal_key_hash(unsigned char *buf, int offset, int stream_len);

          /* Member vars*/
          static unsigned char get_field_def(const char  * fieldname, 
                                             CoreDX_FieldDef_t * field_def);
          char *  terminalID;
          struct openfmb::commonmodule::ReadingMMXU  * readingMMXU;
          struct openfmb::commonmodule::ReadingMMTR  * readingMMTR;

          typedef SolarReadingValueTypeSupport TypeSupport;
          typedef SolarReadingValueDataReader DataReader;
          typedef SolarReadingValueDataWriter DataWriter;
          typedef SolarReadingValuePtrSeq Seq;

        private:

      }; //openfmb::solarmodule::SolarReadingValue

      struct SolarStatus;
      class SolarStatusTypeSupport;
      class SolarStatusDataReader;
      class SolarStatusDataWriter;

/* DDS Data Type SEQUENCE: sequence<openfmb::solarmodule::SolarStatus *> */
#ifndef _DDS_sequence_cpp_openfmb_solarmodule_SolarStatusPtr_defined
#define _DDS_sequence_cpp_openfmb_solarmodule_SolarStatusPtr_defined
      DECLARE_CPP_UNBOUNDED_SEQ( openfmb::solarmodule::SolarStatus * , SolarStatusPtrSeq );
#endif /* DDS Data Type SEQUENCE: sequence<SolarStatusPtrSeq *> */

      struct COREDX_TS_STRUCT_EXPORT SolarStatus : public openfmb::commonmodule::StatusValue {
        public:
          /** Constructor, Copy Constructor, Destructor, Assignment operator */
          SolarStatus();
          ~SolarStatus();
          SolarStatus( const SolarStatus & other );
          SolarStatus& operator=( const SolarStatus & other);

          void init();
          void clear();
          void copy( const openfmb::solarmodule::SolarStatus * instance );

          int  get_marshal_size(int offset, int just_keys) const ;
          int  marshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys) const ;
          int  marshal_key_hash(unsigned char *buf, int offset, int stream_len) const;
          int  unmarshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys);
          int  unmarshal_key_hash(unsigned char *buf, int offset, int stream_len);

          /* Member vars*/
          static unsigned char get_field_def(const char  * fieldname, 
                                             CoreDX_FieldDef_t * field_def);
          struct openfmb::solarmodule::SolarStatusZGEN  * solarStatusZGEN;

          typedef SolarStatusTypeSupport TypeSupport;
          typedef SolarStatusDataReader DataReader;
          typedef SolarStatusDataWriter DataWriter;
          typedef SolarStatusPtrSeq Seq;

        private:

      }; //openfmb::solarmodule::SolarStatus

      struct SolarStatusProfile;
      class SolarStatusProfileTypeSupport;
      class SolarStatusProfileDataReader;
      class SolarStatusProfileDataWriter;

/* DDS Data Type SEQUENCE: sequence<openfmb::solarmodule::SolarStatusProfile *> */
#ifndef _DDS_sequence_cpp_openfmb_solarmodule_SolarStatusProfilePtr_defined
#define _DDS_sequence_cpp_openfmb_solarmodule_SolarStatusProfilePtr_defined
      DECLARE_CPP_UNBOUNDED_SEQ( openfmb::solarmodule::SolarStatusProfile * , SolarStatusProfilePtrSeq );
#endif /* DDS Data Type SEQUENCE: sequence<SolarStatusProfilePtrSeq *> */

      struct COREDX_TS_STRUCT_EXPORT SolarStatusProfile : public openfmb::commonmodule::StatusIED {
        public:
          /** Constructor, Copy Constructor, Destructor, Assignment operator */
          SolarStatusProfile();
          ~SolarStatusProfile();
          SolarStatusProfile( const SolarStatusProfile & other );
          SolarStatusProfile& operator=( const SolarStatusProfile & other);

          void init();
          void clear();
          void copy( const openfmb::solarmodule::SolarStatusProfile * instance );

          int  get_marshal_size(int offset, int just_keys) const ;
          int  marshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys) const ;
          int  marshal_key_hash(unsigned char *buf, int offset, int stream_len) const;
          int  unmarshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys);
          int  unmarshal_key_hash(unsigned char *buf, int offset, int stream_len);

          /* Member vars*/
          static unsigned char get_field_def(const char  * fieldname, 
                                             CoreDX_FieldDef_t * field_def);
          struct openfmb::solarmodule::SolarStatus  * solarStatus;

          typedef SolarStatusProfileTypeSupport TypeSupport;
          typedef SolarStatusProfileDataReader DataReader;
          typedef SolarStatusProfileDataWriter DataWriter;
          typedef SolarStatusProfilePtrSeq Seq;

        private:

      }; //openfmb::solarmodule::SolarStatusProfile


    }  /* namespace solarmodule */

    namespace switchmodule {

      struct SwitchControlProfile;
      class SwitchControlProfileTypeSupport;
      class SwitchControlProfileDataReader;
      class SwitchControlProfileDataWriter;

/* DDS Data Type SEQUENCE: sequence<openfmb::switchmodule::SwitchControlProfile *> */
#ifndef _DDS_sequence_cpp_openfmb_switchmodule_SwitchControlProfilePtr_defined
#define _DDS_sequence_cpp_openfmb_switchmodule_SwitchControlProfilePtr_defined
      DECLARE_CPP_UNBOUNDED_SEQ( openfmb::switchmodule::SwitchControlProfile * , SwitchControlProfilePtrSeq );
#endif /* DDS Data Type SEQUENCE: sequence<SwitchControlProfilePtrSeq *> */

      struct COREDX_TS_STRUCT_EXPORT SwitchControlProfile : public openfmb::commonmodule::ControlIED {
        public:
          /** Constructor, Copy Constructor, Destructor, Assignment operator */
          SwitchControlProfile();
          ~SwitchControlProfile();
          SwitchControlProfile( const SwitchControlProfile & other );
          SwitchControlProfile& operator=( const SwitchControlProfile & other);

          void init();
          void clear();
          void copy( const openfmb::switchmodule::SwitchControlProfile * instance );

          int  get_marshal_size(int offset, int just_keys) const ;
          int  marshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys) const ;
          int  marshal_key_hash(unsigned char *buf, int offset, int stream_len) const;
          int  unmarshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys);
          int  unmarshal_key_hash(unsigned char *buf, int offset, int stream_len);

          /* Member vars*/
          static unsigned char get_field_def(const char  * fieldname, 
                                             CoreDX_FieldDef_t * field_def);
          char *  targetSwitchSystemID;    /* key */
          struct openfmb::switchmodule::SwitchControl  switchControl;

          typedef SwitchControlProfileTypeSupport TypeSupport;
          typedef SwitchControlProfileDataReader DataReader;
          typedef SwitchControlProfileDataWriter DataWriter;
          typedef SwitchControlProfilePtrSeq Seq;

        private:

      }; //openfmb::switchmodule::SwitchControlProfile

      struct SwitchEventProfile;
      class SwitchEventProfileTypeSupport;
      class SwitchEventProfileDataReader;
      class SwitchEventProfileDataWriter;

/* DDS Data Type SEQUENCE: sequence<openfmb::switchmodule::SwitchEventProfile *> */
#ifndef _DDS_sequence_cpp_openfmb_switchmodule_SwitchEventProfilePtr_defined
#define _DDS_sequence_cpp_openfmb_switchmodule_SwitchEventProfilePtr_defined
      DECLARE_CPP_UNBOUNDED_SEQ( openfmb::switchmodule::SwitchEventProfile * , SwitchEventProfilePtrSeq );
#endif /* DDS Data Type SEQUENCE: sequence<SwitchEventProfilePtrSeq *> */

      struct COREDX_TS_STRUCT_EXPORT SwitchEventProfile : public openfmb::commonmodule::EventIED {
        public:
          /** Constructor, Copy Constructor, Destructor, Assignment operator */
          SwitchEventProfile();
          ~SwitchEventProfile();
          SwitchEventProfile( const SwitchEventProfile & other );
          SwitchEventProfile& operator=( const SwitchEventProfile & other);

          void init();
          void clear();
          void copy( const openfmb::switchmodule::SwitchEventProfile * instance );

          int  get_marshal_size(int offset, int just_keys) const ;
          int  marshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys) const ;
          int  marshal_key_hash(unsigned char *buf, int offset, int stream_len) const;
          int  unmarshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys);
          int  unmarshal_key_hash(unsigned char *buf, int offset, int stream_len);

          /* Member vars*/
          static unsigned char get_field_def(const char  * fieldname, 
                                             CoreDX_FieldDef_t * field_def);
          struct openfmb::switchmodule::SwitchEvent  switchEvent;

          typedef SwitchEventProfileTypeSupport TypeSupport;
          typedef SwitchEventProfileDataReader DataReader;
          typedef SwitchEventProfileDataWriter DataWriter;
          typedef SwitchEventProfilePtrSeq Seq;

        private:

      }; //openfmb::switchmodule::SwitchEventProfile

      struct SwitchReadingValue;
      class SwitchReadingValueTypeSupport;
      class SwitchReadingValueDataReader;
      class SwitchReadingValueDataWriter;

/* DDS Data Type SEQUENCE: sequence<openfmb::switchmodule::SwitchReadingValue *> */
#ifndef _DDS_sequence_cpp_openfmb_switchmodule_SwitchReadingValuePtr_defined
#define _DDS_sequence_cpp_openfmb_switchmodule_SwitchReadingValuePtr_defined
      DECLARE_CPP_UNBOUNDED_SEQ( openfmb::switchmodule::SwitchReadingValue * , SwitchReadingValuePtrSeq );
#endif /* DDS Data Type SEQUENCE: sequence<SwitchReadingValuePtrSeq *> */

      struct COREDX_TS_STRUCT_EXPORT SwitchReadingValue : public openfmb::commonmodule::MeasurementValue {
        public:
          /** Constructor, Copy Constructor, Destructor, Assignment operator */
          SwitchReadingValue();
          ~SwitchReadingValue();
          SwitchReadingValue( const SwitchReadingValue & other );
          SwitchReadingValue& operator=( const SwitchReadingValue & other);

          void init();
          void clear();
          void copy( const openfmb::switchmodule::SwitchReadingValue * instance );

          int  get_marshal_size(int offset, int just_keys) const ;
          int  marshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys) const ;
          int  marshal_key_hash(unsigned char *buf, int offset, int stream_len) const;
          int  unmarshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys);
          int  unmarshal_key_hash(unsigned char *buf, int offset, int stream_len);

          /* Member vars*/
          static unsigned char get_field_def(const char  * fieldname, 
                                             CoreDX_FieldDef_t * field_def);
          char *  terminalID;
          struct openfmb::commonmodule::ReadingMMXU  * readingMMXU;
          struct openfmb::commonmodule::ReadingMMTR  * readingMMTR;

          typedef SwitchReadingValueTypeSupport TypeSupport;
          typedef SwitchReadingValueDataReader DataReader;
          typedef SwitchReadingValueDataWriter DataWriter;
          typedef SwitchReadingValuePtrSeq Seq;

        private:

      }; //openfmb::switchmodule::SwitchReadingValue

      struct SwitchStatusProfile;
      class SwitchStatusProfileTypeSupport;
      class SwitchStatusProfileDataReader;
      class SwitchStatusProfileDataWriter;

/* DDS Data Type SEQUENCE: sequence<openfmb::switchmodule::SwitchStatusProfile *> */
#ifndef _DDS_sequence_cpp_openfmb_switchmodule_SwitchStatusProfilePtr_defined
#define _DDS_sequence_cpp_openfmb_switchmodule_SwitchStatusProfilePtr_defined
      DECLARE_CPP_UNBOUNDED_SEQ( openfmb::switchmodule::SwitchStatusProfile * , SwitchStatusProfilePtrSeq );
#endif /* DDS Data Type SEQUENCE: sequence<SwitchStatusProfilePtrSeq *> */

      struct COREDX_TS_STRUCT_EXPORT SwitchStatusProfile : public openfmb::commonmodule::EventIED {
        public:
          /** Constructor, Copy Constructor, Destructor, Assignment operator */
          SwitchStatusProfile();
          ~SwitchStatusProfile();
          SwitchStatusProfile( const SwitchStatusProfile & other );
          SwitchStatusProfile& operator=( const SwitchStatusProfile & other);

          void init();
          void clear();
          void copy( const openfmb::switchmodule::SwitchStatusProfile * instance );

          int  get_marshal_size(int offset, int just_keys) const ;
          int  marshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys) const ;
          int  marshal_key_hash(unsigned char *buf, int offset, int stream_len) const;
          int  unmarshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys);
          int  unmarshal_key_hash(unsigned char *buf, int offset, int stream_len);

          /* Member vars*/
          static unsigned char get_field_def(const char  * fieldname, 
                                             CoreDX_FieldDef_t * field_def);
          struct openfmb::switchmodule::SwitchStatus  switchStatus;

          typedef SwitchStatusProfileTypeSupport TypeSupport;
          typedef SwitchStatusProfileDataReader DataReader;
          typedef SwitchStatusProfileDataWriter DataWriter;
          typedef SwitchStatusProfilePtrSeq Seq;

        private:

      }; //openfmb::switchmodule::SwitchStatusProfile


    }  /* namespace switchmodule */

  }  /* namespace openfmb */

  namespace openfmb {


    namespace breakermodule {

      struct BreakerControlProfile;
      class BreakerControlProfileTypeSupport;
      class BreakerControlProfileDataReader;
      class BreakerControlProfileDataWriter;

/* DDS Data Type SEQUENCE: sequence<openfmb::breakermodule::BreakerControlProfile *> */
#ifndef _DDS_sequence_cpp_openfmb_breakermodule_BreakerControlProfilePtr_defined
#define _DDS_sequence_cpp_openfmb_breakermodule_BreakerControlProfilePtr_defined
      DECLARE_CPP_UNBOUNDED_SEQ( openfmb::breakermodule::BreakerControlProfile * , BreakerControlProfilePtrSeq );
#endif /* DDS Data Type SEQUENCE: sequence<BreakerControlProfilePtrSeq *> */

      struct COREDX_TS_STRUCT_EXPORT BreakerControlProfile : public openfmb::commonmodule::ControlIED {
        public:
          /** Constructor, Copy Constructor, Destructor, Assignment operator */
          BreakerControlProfile();
          ~BreakerControlProfile();
          BreakerControlProfile( const BreakerControlProfile & other );
          BreakerControlProfile& operator=( const BreakerControlProfile & other);

          void init();
          void clear();
          void copy( const openfmb::breakermodule::BreakerControlProfile * instance );

          int  get_marshal_size(int offset, int just_keys) const ;
          int  marshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys) const ;
          int  marshal_key_hash(unsigned char *buf, int offset, int stream_len) const;
          int  unmarshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys);
          int  unmarshal_key_hash(unsigned char *buf, int offset, int stream_len);

          /* Member vars*/
          static unsigned char get_field_def(const char  * fieldname, 
                                             CoreDX_FieldDef_t * field_def);
          char *  targetBreakerSystemID;    /* key */
          struct openfmb::breakermodule::BreakerControl  breakerControl;

          typedef BreakerControlProfileTypeSupport TypeSupport;
          typedef BreakerControlProfileDataReader DataReader;
          typedef BreakerControlProfileDataWriter DataWriter;
          typedef BreakerControlProfilePtrSeq Seq;

        private:

      }; //openfmb::breakermodule::BreakerControlProfile

      struct BreakerEventProfile;
      class BreakerEventProfileTypeSupport;
      class BreakerEventProfileDataReader;
      class BreakerEventProfileDataWriter;

/* DDS Data Type SEQUENCE: sequence<openfmb::breakermodule::BreakerEventProfile *> */
#ifndef _DDS_sequence_cpp_openfmb_breakermodule_BreakerEventProfilePtr_defined
#define _DDS_sequence_cpp_openfmb_breakermodule_BreakerEventProfilePtr_defined
      DECLARE_CPP_UNBOUNDED_SEQ( openfmb::breakermodule::BreakerEventProfile * , BreakerEventProfilePtrSeq );
#endif /* DDS Data Type SEQUENCE: sequence<BreakerEventProfilePtrSeq *> */

      struct COREDX_TS_STRUCT_EXPORT BreakerEventProfile : public openfmb::commonmodule::EventIED {
        public:
          /** Constructor, Copy Constructor, Destructor, Assignment operator */
          BreakerEventProfile();
          ~BreakerEventProfile();
          BreakerEventProfile( const BreakerEventProfile & other );
          BreakerEventProfile& operator=( const BreakerEventProfile & other);

          void init();
          void clear();
          void copy( const openfmb::breakermodule::BreakerEventProfile * instance );

          int  get_marshal_size(int offset, int just_keys) const ;
          int  marshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys) const ;
          int  marshal_key_hash(unsigned char *buf, int offset, int stream_len) const;
          int  unmarshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys);
          int  unmarshal_key_hash(unsigned char *buf, int offset, int stream_len);

          /* Member vars*/
          static unsigned char get_field_def(const char  * fieldname, 
                                             CoreDX_FieldDef_t * field_def);
          struct openfmb::breakermodule::BreakerEvent  breakerEvent;

          typedef BreakerEventProfileTypeSupport TypeSupport;
          typedef BreakerEventProfileDataReader DataReader;
          typedef BreakerEventProfileDataWriter DataWriter;
          typedef BreakerEventProfilePtrSeq Seq;

        private:

      }; //openfmb::breakermodule::BreakerEventProfile

      struct BreakerReadingValue;
      class BreakerReadingValueTypeSupport;
      class BreakerReadingValueDataReader;
      class BreakerReadingValueDataWriter;

/* DDS Data Type SEQUENCE: sequence<openfmb::breakermodule::BreakerReadingValue *> */
#ifndef _DDS_sequence_cpp_openfmb_breakermodule_BreakerReadingValuePtr_defined
#define _DDS_sequence_cpp_openfmb_breakermodule_BreakerReadingValuePtr_defined
      DECLARE_CPP_UNBOUNDED_SEQ( openfmb::breakermodule::BreakerReadingValue * , BreakerReadingValuePtrSeq );
#endif /* DDS Data Type SEQUENCE: sequence<BreakerReadingValuePtrSeq *> */

      struct COREDX_TS_STRUCT_EXPORT BreakerReadingValue : public openfmb::commonmodule::MeasurementValue {
        public:
          /** Constructor, Copy Constructor, Destructor, Assignment operator */
          BreakerReadingValue();
          ~BreakerReadingValue();
          BreakerReadingValue( const BreakerReadingValue & other );
          BreakerReadingValue& operator=( const BreakerReadingValue & other);

          void init();
          void clear();
          void copy( const openfmb::breakermodule::BreakerReadingValue * instance );

          int  get_marshal_size(int offset, int just_keys) const ;
          int  marshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys) const ;
          int  marshal_key_hash(unsigned char *buf, int offset, int stream_len) const;
          int  unmarshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys);
          int  unmarshal_key_hash(unsigned char *buf, int offset, int stream_len);

          /* Member vars*/
          static unsigned char get_field_def(const char  * fieldname, 
                                             CoreDX_FieldDef_t * field_def);
          char *  terminalID;
          struct openfmb::commonmodule::ReadingMMXU  * readingMMXU;
          struct openfmb::commonmodule::ReadingMMTR  * readingMMTR;

          typedef BreakerReadingValueTypeSupport TypeSupport;
          typedef BreakerReadingValueDataReader DataReader;
          typedef BreakerReadingValueDataWriter DataWriter;
          typedef BreakerReadingValuePtrSeq Seq;

        private:

      }; //openfmb::breakermodule::BreakerReadingValue

      struct BreakerStatusProfile;
      class BreakerStatusProfileTypeSupport;
      class BreakerStatusProfileDataReader;
      class BreakerStatusProfileDataWriter;

/* DDS Data Type SEQUENCE: sequence<openfmb::breakermodule::BreakerStatusProfile *> */
#ifndef _DDS_sequence_cpp_openfmb_breakermodule_BreakerStatusProfilePtr_defined
#define _DDS_sequence_cpp_openfmb_breakermodule_BreakerStatusProfilePtr_defined
      DECLARE_CPP_UNBOUNDED_SEQ( openfmb::breakermodule::BreakerStatusProfile * , BreakerStatusProfilePtrSeq );
#endif /* DDS Data Type SEQUENCE: sequence<BreakerStatusProfilePtrSeq *> */

      struct COREDX_TS_STRUCT_EXPORT BreakerStatusProfile : public openfmb::commonmodule::EventIED {
        public:
          /** Constructor, Copy Constructor, Destructor, Assignment operator */
          BreakerStatusProfile();
          ~BreakerStatusProfile();
          BreakerStatusProfile( const BreakerStatusProfile & other );
          BreakerStatusProfile& operator=( const BreakerStatusProfile & other);

          void init();
          void clear();
          void copy( const openfmb::breakermodule::BreakerStatusProfile * instance );

          int  get_marshal_size(int offset, int just_keys) const ;
          int  marshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys) const ;
          int  marshal_key_hash(unsigned char *buf, int offset, int stream_len) const;
          int  unmarshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys);
          int  unmarshal_key_hash(unsigned char *buf, int offset, int stream_len);

          /* Member vars*/
          static unsigned char get_field_def(const char  * fieldname, 
                                             CoreDX_FieldDef_t * field_def);
          struct openfmb::breakermodule::BreakerStatus  * breakerStatus;

          typedef BreakerStatusProfileTypeSupport TypeSupport;
          typedef BreakerStatusProfileDataReader DataReader;
          typedef BreakerStatusProfileDataWriter DataWriter;
          typedef BreakerStatusProfilePtrSeq Seq;

        private:

      }; //openfmb::breakermodule::BreakerStatusProfile


    }  /* namespace breakermodule */

    namespace commonmodule {

      struct ControlFSCC;
      class ControlFSCCTypeSupport;
      class ControlFSCCDataReader;
      class ControlFSCCDataWriter;

/* DDS Data Type SEQUENCE: sequence<openfmb::commonmodule::ControlFSCC *> */
#ifndef _DDS_sequence_cpp_openfmb_commonmodule_ControlFSCCPtr_defined
#define _DDS_sequence_cpp_openfmb_commonmodule_ControlFSCCPtr_defined
      DECLARE_CPP_UNBOUNDED_SEQ( openfmb::commonmodule::ControlFSCC * , ControlFSCCPtrSeq );
#endif /* DDS Data Type SEQUENCE: sequence<ControlFSCCPtrSeq *> */

      struct COREDX_TS_STRUCT_EXPORT ControlFSCC : public openfmb::commonmodule::LogicalNodeForControl {
        public:
          /** Constructor, Copy Constructor, Destructor, Assignment operator */
          ControlFSCC();
          ~ControlFSCC();
          ControlFSCC( const ControlFSCC & other );
          ControlFSCC& operator=( const ControlFSCC & other);

          void init();
          void clear();
          void copy( const openfmb::commonmodule::ControlFSCC * instance );

          int  get_marshal_size(int offset, int just_keys) const ;
          int  marshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys) const ;
          int  marshal_key_hash(unsigned char *buf, int offset, int stream_len) const;
          int  unmarshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys);
          int  unmarshal_key_hash(unsigned char *buf, int offset, int stream_len);

          /* Member vars*/
          static unsigned char get_field_def(const char  * fieldname, 
                                             CoreDX_FieldDef_t * field_def);
          struct openfmb::commonmodule::ASG  * WRtg;
          struct openfmb::commonmodule::ASG  * VARtg;
          struct openfmb::commonmodule::ControlScheduleFSCH *  controlScheduleFSCH;

          typedef ControlFSCCTypeSupport TypeSupport;
          typedef ControlFSCCDataReader DataReader;
          typedef ControlFSCCDataWriter DataWriter;
          typedef ControlFSCCPtrSeq Seq;

        private:

      }; //openfmb::commonmodule::ControlFSCC

      struct GenerationControlFSCC;
      class GenerationControlFSCCTypeSupport;
      class GenerationControlFSCCDataReader;
      class GenerationControlFSCCDataWriter;

/* DDS Data Type SEQUENCE: sequence<openfmb::commonmodule::GenerationControlFSCC *> */
#ifndef _DDS_sequence_cpp_openfmb_commonmodule_GenerationControlFSCCPtr_defined
#define _DDS_sequence_cpp_openfmb_commonmodule_GenerationControlFSCCPtr_defined
      DECLARE_CPP_UNBOUNDED_SEQ( openfmb::commonmodule::GenerationControlFSCC * , GenerationControlFSCCPtrSeq );
#endif /* DDS Data Type SEQUENCE: sequence<GenerationControlFSCCPtrSeq *> */

      struct COREDX_TS_STRUCT_EXPORT GenerationControlFSCC : public openfmb::commonmodule::ControlFSCC {
        public:
          /** Constructor, Copy Constructor, Destructor, Assignment operator */
          GenerationControlFSCC();
          ~GenerationControlFSCC();
          GenerationControlFSCC( const GenerationControlFSCC & other );
          GenerationControlFSCC& operator=( const GenerationControlFSCC & other);

          void init();
          void clear();
          void copy( const openfmb::commonmodule::GenerationControlFSCC * instance );

          int  get_marshal_size(int offset, int just_keys) const ;
          int  marshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys) const ;
          int  marshal_key_hash(unsigned char *buf, int offset, int stream_len) const;
          int  unmarshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys);
          int  unmarshal_key_hash(unsigned char *buf, int offset, int stream_len);

          /* Member vars*/
          static unsigned char get_field_def(const char  * fieldname, 
                                             CoreDX_FieldDef_t * field_def);
          struct openfmb::commonmodule::ControlDPC  * GnCtl;

          typedef GenerationControlFSCCTypeSupport TypeSupport;
          typedef GenerationControlFSCCDataReader DataReader;
          typedef GenerationControlFSCCDataWriter DataWriter;
          typedef GenerationControlFSCCPtrSeq Seq;

        private:

      }; //openfmb::commonmodule::GenerationControlFSCC


    }  /* namespace commonmodule */

    namespace essmodule {

      struct EssControlFSCC;
      class EssControlFSCCTypeSupport;
      class EssControlFSCCDataReader;
      class EssControlFSCCDataWriter;

/* DDS Data Type SEQUENCE: sequence<openfmb::essmodule::EssControlFSCC *> */
#ifndef _DDS_sequence_cpp_openfmb_essmodule_EssControlFSCCPtr_defined
#define _DDS_sequence_cpp_openfmb_essmodule_EssControlFSCCPtr_defined
      DECLARE_CPP_UNBOUNDED_SEQ( openfmb::essmodule::EssControlFSCC * , EssControlFSCCPtrSeq );
#endif /* DDS Data Type SEQUENCE: sequence<EssControlFSCCPtrSeq *> */

      struct COREDX_TS_STRUCT_EXPORT EssControlFSCC : public openfmb::commonmodule::ControlFSCC {
        public:
          /** Constructor, Copy Constructor, Destructor, Assignment operator */
          EssControlFSCC();
          ~EssControlFSCC();
          EssControlFSCC( const EssControlFSCC & other );
          EssControlFSCC& operator=( const EssControlFSCC & other);

          void init();
          void clear();
          void copy( const openfmb::essmodule::EssControlFSCC * instance );

          int  get_marshal_size(int offset, int just_keys) const ;
          int  marshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys) const ;
          int  marshal_key_hash(unsigned char *buf, int offset, int stream_len) const;
          int  unmarshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys);
          int  unmarshal_key_hash(unsigned char *buf, int offset, int stream_len);

          /* Member vars*/
          static unsigned char get_field_def(const char  * fieldname, 
                                             CoreDX_FieldDef_t * field_def);
          struct openfmb::essmodule::ENC_ESSControlKind  ESSControlMod;

          typedef EssControlFSCCTypeSupport TypeSupport;
          typedef EssControlFSCCDataReader DataReader;
          typedef EssControlFSCCDataWriter DataWriter;
          typedef EssControlFSCCPtrSeq Seq;

        private:

      }; //openfmb::essmodule::EssControlFSCC

      struct ESSReadingProfile;
      class ESSReadingProfileTypeSupport;
      class ESSReadingProfileDataReader;
      class ESSReadingProfileDataWriter;

/* DDS Data Type SEQUENCE: sequence<openfmb::essmodule::ESSReadingProfile *> */
#ifndef _DDS_sequence_cpp_openfmb_essmodule_ESSReadingProfilePtr_defined
#define _DDS_sequence_cpp_openfmb_essmodule_ESSReadingProfilePtr_defined
      DECLARE_CPP_UNBOUNDED_SEQ( openfmb::essmodule::ESSReadingProfile * , ESSReadingProfilePtrSeq );
#endif /* DDS Data Type SEQUENCE: sequence<ESSReadingProfilePtrSeq *> */

      struct COREDX_TS_STRUCT_EXPORT ESSReadingProfile : public openfmb::commonmodule::MeasurementIED {
        public:
          /** Constructor, Copy Constructor, Destructor, Assignment operator */
          ESSReadingProfile();
          ~ESSReadingProfile();
          ESSReadingProfile( const ESSReadingProfile & other );
          ESSReadingProfile& operator=( const ESSReadingProfile & other);

#ifndef _DDS_SEQ_cpp_openfmb_essmodule_ESSReadingProfile_openfmb_essmodule_ESSReadingValueSeq_defined
#define _DDS_SEQ_cpp_openfmb_essmodule_ESSReadingProfile_openfmb_essmodule_ESSReadingValueSeq_defined
        DECLARE_CPP_UNBOUNDED_SEQ( struct openfmb::essmodule::ESSReadingValue , openfmb_essmodule_ESSReadingValueSeq );
#endif /* User Defined SEQUENCE: sequence openfmb::essmodule::ESSReadingProfile::ESSReadingValueSeq */

          void init();
          void clear();
          void copy( const openfmb::essmodule::ESSReadingProfile * instance );

          int  get_marshal_size(int offset, int just_keys) const ;
          int  marshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys) const ;
          int  marshal_key_hash(unsigned char *buf, int offset, int stream_len) const;
          int  unmarshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys);
          int  unmarshal_key_hash(unsigned char *buf, int offset, int stream_len);

          /* Member vars*/
          static unsigned char get_field_def(const char  * fieldname, 
                                             CoreDX_FieldDef_t * field_def);
          openfmb::essmodule::ESSReadingProfile::openfmb_essmodule_ESSReadingValueSeq  essReadingValue;

          typedef ESSReadingProfileTypeSupport TypeSupport;
          typedef ESSReadingProfileDataReader DataReader;
          typedef ESSReadingProfileDataWriter DataWriter;
          typedef ESSReadingProfilePtrSeq Seq;

        private:

      }; //openfmb::essmodule::ESSReadingProfile

      struct ESSControl;
      class ESSControlTypeSupport;
      class ESSControlDataReader;
      class ESSControlDataWriter;

/* DDS Data Type SEQUENCE: sequence<openfmb::essmodule::ESSControl *> */
#ifndef _DDS_sequence_cpp_openfmb_essmodule_ESSControlPtr_defined
#define _DDS_sequence_cpp_openfmb_essmodule_ESSControlPtr_defined
      DECLARE_CPP_UNBOUNDED_SEQ( openfmb::essmodule::ESSControl * , ESSControlPtrSeq );
#endif /* DDS Data Type SEQUENCE: sequence<ESSControlPtrSeq *> */

      struct COREDX_TS_STRUCT_EXPORT ESSControl : public openfmb::commonmodule::ControlValue {
        public:
          /** Constructor, Copy Constructor, Destructor, Assignment operator */
          ESSControl();
          ~ESSControl();
          ESSControl( const ESSControl & other );
          ESSControl& operator=( const ESSControl & other);

          void init();
          void clear();
          void copy( const openfmb::essmodule::ESSControl * instance );

          int  get_marshal_size(int offset, int just_keys) const ;
          int  marshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys) const ;
          int  marshal_key_hash(unsigned char *buf, int offset, int stream_len) const;
          int  unmarshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys);
          int  unmarshal_key_hash(unsigned char *buf, int offset, int stream_len);

          /* Member vars*/
          static unsigned char get_field_def(const char  * fieldname, 
                                             CoreDX_FieldDef_t * field_def);
          struct openfmb::commonmodule::CheckConditions  * check;
          struct openfmb::essmodule::EssControlFSCC  essControlFSCC;

          typedef ESSControlTypeSupport TypeSupport;
          typedef ESSControlDataReader DataReader;
          typedef ESSControlDataWriter DataWriter;
          typedef ESSControlPtrSeq Seq;

        private:

      }; //openfmb::essmodule::ESSControl

      struct ESSControlProfile;
      class ESSControlProfileTypeSupport;
      class ESSControlProfileDataReader;
      class ESSControlProfileDataWriter;

/* DDS Data Type SEQUENCE: sequence<openfmb::essmodule::ESSControlProfile *> */
#ifndef _DDS_sequence_cpp_openfmb_essmodule_ESSControlProfilePtr_defined
#define _DDS_sequence_cpp_openfmb_essmodule_ESSControlProfilePtr_defined
      DECLARE_CPP_UNBOUNDED_SEQ( openfmb::essmodule::ESSControlProfile * , ESSControlProfilePtrSeq );
#endif /* DDS Data Type SEQUENCE: sequence<ESSControlProfilePtrSeq *> */

      struct COREDX_TS_STRUCT_EXPORT ESSControlProfile : public openfmb::commonmodule::ControlIED {
        public:
          /** Constructor, Copy Constructor, Destructor, Assignment operator */
          ESSControlProfile();
          ~ESSControlProfile();
          ESSControlProfile( const ESSControlProfile & other );
          ESSControlProfile& operator=( const ESSControlProfile & other);

          void init();
          void clear();
          void copy( const openfmb::essmodule::ESSControlProfile * instance );

          int  get_marshal_size(int offset, int just_keys) const ;
          int  marshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys) const ;
          int  marshal_key_hash(unsigned char *buf, int offset, int stream_len) const;
          int  unmarshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys);
          int  unmarshal_key_hash(unsigned char *buf, int offset, int stream_len);

          /* Member vars*/
          static unsigned char get_field_def(const char  * fieldname, 
                                             CoreDX_FieldDef_t * field_def);
          char *  targetESSSystemID;    /* key */
          struct openfmb::essmodule::ESSControl  essControl;

          typedef ESSControlProfileTypeSupport TypeSupport;
          typedef ESSControlProfileDataReader DataReader;
          typedef ESSControlProfileDataWriter DataWriter;
          typedef ESSControlProfilePtrSeq Seq;

        private:

      }; //openfmb::essmodule::ESSControlProfile


    }  /* namespace essmodule */

    namespace generationmodule {

      struct GenerationControl;
      class GenerationControlTypeSupport;
      class GenerationControlDataReader;
      class GenerationControlDataWriter;

/* DDS Data Type SEQUENCE: sequence<openfmb::generationmodule::GenerationControl *> */
#ifndef _DDS_sequence_cpp_openfmb_generationmodule_GenerationControlPtr_defined
#define _DDS_sequence_cpp_openfmb_generationmodule_GenerationControlPtr_defined
      DECLARE_CPP_UNBOUNDED_SEQ( openfmb::generationmodule::GenerationControl * , GenerationControlPtrSeq );
#endif /* DDS Data Type SEQUENCE: sequence<GenerationControlPtrSeq *> */

      struct COREDX_TS_STRUCT_EXPORT GenerationControl : public openfmb::commonmodule::ControlValue {
        public:
          /** Constructor, Copy Constructor, Destructor, Assignment operator */
          GenerationControl();
          ~GenerationControl();
          GenerationControl( const GenerationControl & other );
          GenerationControl& operator=( const GenerationControl & other);

          void init();
          void clear();
          void copy( const openfmb::generationmodule::GenerationControl * instance );

          int  get_marshal_size(int offset, int just_keys) const ;
          int  marshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys) const ;
          int  marshal_key_hash(unsigned char *buf, int offset, int stream_len) const;
          int  unmarshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys);
          int  unmarshal_key_hash(unsigned char *buf, int offset, int stream_len);

          /* Member vars*/
          static unsigned char get_field_def(const char  * fieldname, 
                                             CoreDX_FieldDef_t * field_def);
          struct openfmb::commonmodule::CheckConditions  * check;
          struct openfmb::commonmodule::GenerationControlFSCC  generationControlFSCC;

          typedef GenerationControlTypeSupport TypeSupport;
          typedef GenerationControlDataReader DataReader;
          typedef GenerationControlDataWriter DataWriter;
          typedef GenerationControlPtrSeq Seq;

        private:

      }; //openfmb::generationmodule::GenerationControl

      struct GenerationControlProfile;
      class GenerationControlProfileTypeSupport;
      class GenerationControlProfileDataReader;
      class GenerationControlProfileDataWriter;

/* DDS Data Type SEQUENCE: sequence<openfmb::generationmodule::GenerationControlProfile *> */
#ifndef _DDS_sequence_cpp_openfmb_generationmodule_GenerationControlProfilePtr_defined
#define _DDS_sequence_cpp_openfmb_generationmodule_GenerationControlProfilePtr_defined
      DECLARE_CPP_UNBOUNDED_SEQ( openfmb::generationmodule::GenerationControlProfile * , GenerationControlProfilePtrSeq );
#endif /* DDS Data Type SEQUENCE: sequence<GenerationControlProfilePtrSeq *> */

      struct COREDX_TS_STRUCT_EXPORT GenerationControlProfile : public openfmb::commonmodule::ControlIED {
        public:
          /** Constructor, Copy Constructor, Destructor, Assignment operator */
          GenerationControlProfile();
          ~GenerationControlProfile();
          GenerationControlProfile( const GenerationControlProfile & other );
          GenerationControlProfile& operator=( const GenerationControlProfile & other);

          void init();
          void clear();
          void copy( const openfmb::generationmodule::GenerationControlProfile * instance );

          int  get_marshal_size(int offset, int just_keys) const ;
          int  marshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys) const ;
          int  marshal_key_hash(unsigned char *buf, int offset, int stream_len) const;
          int  unmarshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys);
          int  unmarshal_key_hash(unsigned char *buf, int offset, int stream_len);

          /* Member vars*/
          static unsigned char get_field_def(const char  * fieldname, 
                                             CoreDX_FieldDef_t * field_def);
          char *  targetGenerationSystemID;    /* key */
          struct openfmb::generationmodule::GenerationControl  generationControl;

          typedef GenerationControlProfileTypeSupport TypeSupport;
          typedef GenerationControlProfileDataReader DataReader;
          typedef GenerationControlProfileDataWriter DataWriter;
          typedef GenerationControlProfilePtrSeq Seq;

        private:

      }; //openfmb::generationmodule::GenerationControlProfile


    }  /* namespace generationmodule */

    namespace loadmodule {

      struct LoadControlFSCC;
      class LoadControlFSCCTypeSupport;
      class LoadControlFSCCDataReader;
      class LoadControlFSCCDataWriter;

/* DDS Data Type SEQUENCE: sequence<openfmb::loadmodule::LoadControlFSCC *> */
#ifndef _DDS_sequence_cpp_openfmb_loadmodule_LoadControlFSCCPtr_defined
#define _DDS_sequence_cpp_openfmb_loadmodule_LoadControlFSCCPtr_defined
      DECLARE_CPP_UNBOUNDED_SEQ( openfmb::loadmodule::LoadControlFSCC * , LoadControlFSCCPtrSeq );
#endif /* DDS Data Type SEQUENCE: sequence<LoadControlFSCCPtrSeq *> */

      struct COREDX_TS_STRUCT_EXPORT LoadControlFSCC : public openfmb::commonmodule::ControlFSCC {
        public:
          /** Constructor, Copy Constructor, Destructor, Assignment operator */
          LoadControlFSCC();
          ~LoadControlFSCC();
          LoadControlFSCC( const LoadControlFSCC & other );
          LoadControlFSCC& operator=( const LoadControlFSCC & other);

          void init();
          void clear();
          void copy( const openfmb::loadmodule::LoadControlFSCC * instance );

          int  get_marshal_size(int offset, int just_keys) const ;
          int  marshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys) const ;
          int  marshal_key_hash(unsigned char *buf, int offset, int stream_len) const;
          int  unmarshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys);
          int  unmarshal_key_hash(unsigned char *buf, int offset, int stream_len);

          /* Member vars*/
          static unsigned char get_field_def(const char  * fieldname, 
                                             CoreDX_FieldDef_t * field_def);
          unsigned char  __dummy_prevent_empty_class_LoadControlFSCC;

          typedef LoadControlFSCCTypeSupport TypeSupport;
          typedef LoadControlFSCCDataReader DataReader;
          typedef LoadControlFSCCDataWriter DataWriter;
          typedef LoadControlFSCCPtrSeq Seq;

        private:

      }; //openfmb::loadmodule::LoadControlFSCC

      struct LoadReadingProfile;
      class LoadReadingProfileTypeSupport;
      class LoadReadingProfileDataReader;
      class LoadReadingProfileDataWriter;

/* DDS Data Type SEQUENCE: sequence<openfmb::loadmodule::LoadReadingProfile *> */
#ifndef _DDS_sequence_cpp_openfmb_loadmodule_LoadReadingProfilePtr_defined
#define _DDS_sequence_cpp_openfmb_loadmodule_LoadReadingProfilePtr_defined
      DECLARE_CPP_UNBOUNDED_SEQ( openfmb::loadmodule::LoadReadingProfile * , LoadReadingProfilePtrSeq );
#endif /* DDS Data Type SEQUENCE: sequence<LoadReadingProfilePtrSeq *> */

      struct COREDX_TS_STRUCT_EXPORT LoadReadingProfile : public openfmb::commonmodule::MeasurementIED {
        public:
          /** Constructor, Copy Constructor, Destructor, Assignment operator */
          LoadReadingProfile();
          ~LoadReadingProfile();
          LoadReadingProfile( const LoadReadingProfile & other );
          LoadReadingProfile& operator=( const LoadReadingProfile & other);

#ifndef _DDS_SEQ_cpp_openfmb_loadmodule_LoadReadingProfile_openfmb_loadmodule_LoadReadingValueSeq_defined
#define _DDS_SEQ_cpp_openfmb_loadmodule_LoadReadingProfile_openfmb_loadmodule_LoadReadingValueSeq_defined
        DECLARE_CPP_UNBOUNDED_SEQ( struct openfmb::loadmodule::LoadReadingValue , openfmb_loadmodule_LoadReadingValueSeq );
#endif /* User Defined SEQUENCE: sequence openfmb::loadmodule::LoadReadingProfile::LoadReadingValueSeq */

          void init();
          void clear();
          void copy( const openfmb::loadmodule::LoadReadingProfile * instance );

          int  get_marshal_size(int offset, int just_keys) const ;
          int  marshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys) const ;
          int  marshal_key_hash(unsigned char *buf, int offset, int stream_len) const;
          int  unmarshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys);
          int  unmarshal_key_hash(unsigned char *buf, int offset, int stream_len);

          /* Member vars*/
          static unsigned char get_field_def(const char  * fieldname, 
                                             CoreDX_FieldDef_t * field_def);
          openfmb::loadmodule::LoadReadingProfile::openfmb_loadmodule_LoadReadingValueSeq  loadReadingValue;

          typedef LoadReadingProfileTypeSupport TypeSupport;
          typedef LoadReadingProfileDataReader DataReader;
          typedef LoadReadingProfileDataWriter DataWriter;
          typedef LoadReadingProfilePtrSeq Seq;

        private:

      }; //openfmb::loadmodule::LoadReadingProfile


    }  /* namespace loadmodule */

    namespace reclosermodule {

      struct RecloserReadingProfile;
      class RecloserReadingProfileTypeSupport;
      class RecloserReadingProfileDataReader;
      class RecloserReadingProfileDataWriter;

/* DDS Data Type SEQUENCE: sequence<openfmb::reclosermodule::RecloserReadingProfile *> */
#ifndef _DDS_sequence_cpp_openfmb_reclosermodule_RecloserReadingProfilePtr_defined
#define _DDS_sequence_cpp_openfmb_reclosermodule_RecloserReadingProfilePtr_defined
      DECLARE_CPP_UNBOUNDED_SEQ( openfmb::reclosermodule::RecloserReadingProfile * , RecloserReadingProfilePtrSeq );
#endif /* DDS Data Type SEQUENCE: sequence<RecloserReadingProfilePtrSeq *> */

      struct COREDX_TS_STRUCT_EXPORT RecloserReadingProfile : public openfmb::commonmodule::MeasurementIED {
        public:
          /** Constructor, Copy Constructor, Destructor, Assignment operator */
          RecloserReadingProfile();
          ~RecloserReadingProfile();
          RecloserReadingProfile( const RecloserReadingProfile & other );
          RecloserReadingProfile& operator=( const RecloserReadingProfile & other);

#ifndef _DDS_SEQ_cpp_openfmb_reclosermodule_RecloserReadingProfile_openfmb_reclosermodule_RecloserReadingValueSeq_defined
#define _DDS_SEQ_cpp_openfmb_reclosermodule_RecloserReadingProfile_openfmb_reclosermodule_RecloserReadingValueSeq_defined
        DECLARE_CPP_UNBOUNDED_SEQ( struct openfmb::reclosermodule::RecloserReadingValue , openfmb_reclosermodule_RecloserReadingValueSeq );
#endif /* User Defined SEQUENCE: sequence openfmb::reclosermodule::RecloserReadingProfile::RecloserReadingValueSeq */

          void init();
          void clear();
          void copy( const openfmb::reclosermodule::RecloserReadingProfile * instance );

          int  get_marshal_size(int offset, int just_keys) const ;
          int  marshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys) const ;
          int  marshal_key_hash(unsigned char *buf, int offset, int stream_len) const;
          int  unmarshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys);
          int  unmarshal_key_hash(unsigned char *buf, int offset, int stream_len);

          /* Member vars*/
          static unsigned char get_field_def(const char  * fieldname, 
                                             CoreDX_FieldDef_t * field_def);
          openfmb::reclosermodule::RecloserReadingProfile::openfmb_reclosermodule_RecloserReadingValueSeq  recloserReadingValue;

          typedef RecloserReadingProfileTypeSupport TypeSupport;
          typedef RecloserReadingProfileDataReader DataReader;
          typedef RecloserReadingProfileDataWriter DataWriter;
          typedef RecloserReadingProfilePtrSeq Seq;

        private:

      }; //openfmb::reclosermodule::RecloserReadingProfile


    }  /* namespace reclosermodule */

    namespace regulatormodule {

      struct RegulatorReadingProfile;
      class RegulatorReadingProfileTypeSupport;
      class RegulatorReadingProfileDataReader;
      class RegulatorReadingProfileDataWriter;

/* DDS Data Type SEQUENCE: sequence<openfmb::regulatormodule::RegulatorReadingProfile *> */
#ifndef _DDS_sequence_cpp_openfmb_regulatormodule_RegulatorReadingProfilePtr_defined
#define _DDS_sequence_cpp_openfmb_regulatormodule_RegulatorReadingProfilePtr_defined
      DECLARE_CPP_UNBOUNDED_SEQ( openfmb::regulatormodule::RegulatorReadingProfile * , RegulatorReadingProfilePtrSeq );
#endif /* DDS Data Type SEQUENCE: sequence<RegulatorReadingProfilePtrSeq *> */

      struct COREDX_TS_STRUCT_EXPORT RegulatorReadingProfile : public openfmb::commonmodule::MeasurementIED {
        public:
          /** Constructor, Copy Constructor, Destructor, Assignment operator */
          RegulatorReadingProfile();
          ~RegulatorReadingProfile();
          RegulatorReadingProfile( const RegulatorReadingProfile & other );
          RegulatorReadingProfile& operator=( const RegulatorReadingProfile & other);

#ifndef _DDS_SEQ_cpp_openfmb_regulatormodule_RegulatorReadingProfile_openfmb_regulatormodule_RegulatorReadingValueSeq_defined
#define _DDS_SEQ_cpp_openfmb_regulatormodule_RegulatorReadingProfile_openfmb_regulatormodule_RegulatorReadingValueSeq_defined
        DECLARE_CPP_UNBOUNDED_SEQ( struct openfmb::regulatormodule::RegulatorReadingValue , openfmb_regulatormodule_RegulatorReadingValueSeq );
#endif /* User Defined SEQUENCE: sequence openfmb::regulatormodule::RegulatorReadingProfile::RegulatorReadingValueSeq */

          void init();
          void clear();
          void copy( const openfmb::regulatormodule::RegulatorReadingProfile * instance );

          int  get_marshal_size(int offset, int just_keys) const ;
          int  marshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys) const ;
          int  marshal_key_hash(unsigned char *buf, int offset, int stream_len) const;
          int  unmarshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys);
          int  unmarshal_key_hash(unsigned char *buf, int offset, int stream_len);

          /* Member vars*/
          static unsigned char get_field_def(const char  * fieldname, 
                                             CoreDX_FieldDef_t * field_def);
          openfmb::regulatormodule::RegulatorReadingProfile::openfmb_regulatormodule_RegulatorReadingValueSeq  regulatorReadingValue;

          typedef RegulatorReadingProfileTypeSupport TypeSupport;
          typedef RegulatorReadingProfileDataReader DataReader;
          typedef RegulatorReadingProfileDataWriter DataWriter;
          typedef RegulatorReadingProfilePtrSeq Seq;

        private:

      }; //openfmb::regulatormodule::RegulatorReadingProfile


    }  /* namespace regulatormodule */

    namespace resourcemodule {

      struct ResourceReadingProfile;
      class ResourceReadingProfileTypeSupport;
      class ResourceReadingProfileDataReader;
      class ResourceReadingProfileDataWriter;

/* DDS Data Type SEQUENCE: sequence<openfmb::resourcemodule::ResourceReadingProfile *> */
#ifndef _DDS_sequence_cpp_openfmb_resourcemodule_ResourceReadingProfilePtr_defined
#define _DDS_sequence_cpp_openfmb_resourcemodule_ResourceReadingProfilePtr_defined
      DECLARE_CPP_UNBOUNDED_SEQ( openfmb::resourcemodule::ResourceReadingProfile * , ResourceReadingProfilePtrSeq );
#endif /* DDS Data Type SEQUENCE: sequence<ResourceReadingProfilePtrSeq *> */

      struct COREDX_TS_STRUCT_EXPORT ResourceReadingProfile : public openfmb::commonmodule::MeasurementIED {
        public:
          /** Constructor, Copy Constructor, Destructor, Assignment operator */
          ResourceReadingProfile();
          ~ResourceReadingProfile();
          ResourceReadingProfile( const ResourceReadingProfile & other );
          ResourceReadingProfile& operator=( const ResourceReadingProfile & other);

#ifndef _DDS_SEQ_cpp_openfmb_resourcemodule_ResourceReadingProfile_openfmb_resourcemodule_ResourceReadingValueSeq_defined
#define _DDS_SEQ_cpp_openfmb_resourcemodule_ResourceReadingProfile_openfmb_resourcemodule_ResourceReadingValueSeq_defined
        DECLARE_CPP_UNBOUNDED_SEQ( struct openfmb::resourcemodule::ResourceReadingValue , openfmb_resourcemodule_ResourceReadingValueSeq );
#endif /* User Defined SEQUENCE: sequence openfmb::resourcemodule::ResourceReadingProfile::ResourceReadingValueSeq */

          void init();
          void clear();
          void copy( const openfmb::resourcemodule::ResourceReadingProfile * instance );

          int  get_marshal_size(int offset, int just_keys) const ;
          int  marshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys) const ;
          int  marshal_key_hash(unsigned char *buf, int offset, int stream_len) const;
          int  unmarshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys);
          int  unmarshal_key_hash(unsigned char *buf, int offset, int stream_len);

          /* Member vars*/
          static unsigned char get_field_def(const char  * fieldname, 
                                             CoreDX_FieldDef_t * field_def);
          openfmb::resourcemodule::ResourceReadingProfile::openfmb_resourcemodule_ResourceReadingValueSeq  resourceReadingValue;

          typedef ResourceReadingProfileTypeSupport TypeSupport;
          typedef ResourceReadingProfileDataReader DataReader;
          typedef ResourceReadingProfileDataWriter DataWriter;
          typedef ResourceReadingProfilePtrSeq Seq;

        private:

      }; //openfmb::resourcemodule::ResourceReadingProfile


    }  /* namespace resourcemodule */

    namespace solarmodule {

      struct SolarControlFSCC;
      class SolarControlFSCCTypeSupport;
      class SolarControlFSCCDataReader;
      class SolarControlFSCCDataWriter;

/* DDS Data Type SEQUENCE: sequence<openfmb::solarmodule::SolarControlFSCC *> */
#ifndef _DDS_sequence_cpp_openfmb_solarmodule_SolarControlFSCCPtr_defined
#define _DDS_sequence_cpp_openfmb_solarmodule_SolarControlFSCCPtr_defined
      DECLARE_CPP_UNBOUNDED_SEQ( openfmb::solarmodule::SolarControlFSCC * , SolarControlFSCCPtrSeq );
#endif /* DDS Data Type SEQUENCE: sequence<SolarControlFSCCPtrSeq *> */

      struct COREDX_TS_STRUCT_EXPORT SolarControlFSCC : public openfmb::commonmodule::ControlFSCC {
        public:
          /** Constructor, Copy Constructor, Destructor, Assignment operator */
          SolarControlFSCC();
          ~SolarControlFSCC();
          SolarControlFSCC( const SolarControlFSCC & other );
          SolarControlFSCC& operator=( const SolarControlFSCC & other);

          void init();
          void clear();
          void copy( const openfmb::solarmodule::SolarControlFSCC * instance );

          int  get_marshal_size(int offset, int just_keys) const ;
          int  marshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys) const ;
          int  marshal_key_hash(unsigned char *buf, int offset, int stream_len) const;
          int  unmarshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys);
          int  unmarshal_key_hash(unsigned char *buf, int offset, int stream_len);

          /* Member vars*/
          static unsigned char get_field_def(const char  * fieldname, 
                                             CoreDX_FieldDef_t * field_def);
          struct openfmb::commonmodule::ENC_SolarControlKind  SolarControlMod;

          typedef SolarControlFSCCTypeSupport TypeSupport;
          typedef SolarControlFSCCDataReader DataReader;
          typedef SolarControlFSCCDataWriter DataWriter;
          typedef SolarControlFSCCPtrSeq Seq;

        private:

      }; //openfmb::solarmodule::SolarControlFSCC

      struct SolarReadingProfile;
      class SolarReadingProfileTypeSupport;
      class SolarReadingProfileDataReader;
      class SolarReadingProfileDataWriter;

/* DDS Data Type SEQUENCE: sequence<openfmb::solarmodule::SolarReadingProfile *> */
#ifndef _DDS_sequence_cpp_openfmb_solarmodule_SolarReadingProfilePtr_defined
#define _DDS_sequence_cpp_openfmb_solarmodule_SolarReadingProfilePtr_defined
      DECLARE_CPP_UNBOUNDED_SEQ( openfmb::solarmodule::SolarReadingProfile * , SolarReadingProfilePtrSeq );
#endif /* DDS Data Type SEQUENCE: sequence<SolarReadingProfilePtrSeq *> */

      struct COREDX_TS_STRUCT_EXPORT SolarReadingProfile : public openfmb::commonmodule::MeasurementIED {
        public:
          /** Constructor, Copy Constructor, Destructor, Assignment operator */
          SolarReadingProfile();
          ~SolarReadingProfile();
          SolarReadingProfile( const SolarReadingProfile & other );
          SolarReadingProfile& operator=( const SolarReadingProfile & other);

#ifndef _DDS_SEQ_cpp_openfmb_solarmodule_SolarReadingProfile_openfmb_solarmodule_SolarReadingValueSeq_defined
#define _DDS_SEQ_cpp_openfmb_solarmodule_SolarReadingProfile_openfmb_solarmodule_SolarReadingValueSeq_defined
        DECLARE_CPP_UNBOUNDED_SEQ( struct openfmb::solarmodule::SolarReadingValue , openfmb_solarmodule_SolarReadingValueSeq );
#endif /* User Defined SEQUENCE: sequence openfmb::solarmodule::SolarReadingProfile::SolarReadingValueSeq */

          void init();
          void clear();
          void copy( const openfmb::solarmodule::SolarReadingProfile * instance );

          int  get_marshal_size(int offset, int just_keys) const ;
          int  marshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys) const ;
          int  marshal_key_hash(unsigned char *buf, int offset, int stream_len) const;
          int  unmarshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys);
          int  unmarshal_key_hash(unsigned char *buf, int offset, int stream_len);

          /* Member vars*/
          static unsigned char get_field_def(const char  * fieldname, 
                                             CoreDX_FieldDef_t * field_def);
          openfmb::solarmodule::SolarReadingProfile::openfmb_solarmodule_SolarReadingValueSeq  solarReadingValue;

          typedef SolarReadingProfileTypeSupport TypeSupport;
          typedef SolarReadingProfileDataReader DataReader;
          typedef SolarReadingProfileDataWriter DataWriter;
          typedef SolarReadingProfilePtrSeq Seq;

        private:

      }; //openfmb::solarmodule::SolarReadingProfile


    }  /* namespace solarmodule */

    namespace switchmodule {

      struct SwitchReadingProfile;
      class SwitchReadingProfileTypeSupport;
      class SwitchReadingProfileDataReader;
      class SwitchReadingProfileDataWriter;

/* DDS Data Type SEQUENCE: sequence<openfmb::switchmodule::SwitchReadingProfile *> */
#ifndef _DDS_sequence_cpp_openfmb_switchmodule_SwitchReadingProfilePtr_defined
#define _DDS_sequence_cpp_openfmb_switchmodule_SwitchReadingProfilePtr_defined
      DECLARE_CPP_UNBOUNDED_SEQ( openfmb::switchmodule::SwitchReadingProfile * , SwitchReadingProfilePtrSeq );
#endif /* DDS Data Type SEQUENCE: sequence<SwitchReadingProfilePtrSeq *> */

      struct COREDX_TS_STRUCT_EXPORT SwitchReadingProfile : public openfmb::commonmodule::MeasurementIED {
        public:
          /** Constructor, Copy Constructor, Destructor, Assignment operator */
          SwitchReadingProfile();
          ~SwitchReadingProfile();
          SwitchReadingProfile( const SwitchReadingProfile & other );
          SwitchReadingProfile& operator=( const SwitchReadingProfile & other);

#ifndef _DDS_SEQ_cpp_openfmb_switchmodule_SwitchReadingProfile_openfmb_switchmodule_SwitchReadingValueSeq_defined
#define _DDS_SEQ_cpp_openfmb_switchmodule_SwitchReadingProfile_openfmb_switchmodule_SwitchReadingValueSeq_defined
        DECLARE_CPP_UNBOUNDED_SEQ( struct openfmb::switchmodule::SwitchReadingValue , openfmb_switchmodule_SwitchReadingValueSeq );
#endif /* User Defined SEQUENCE: sequence openfmb::switchmodule::SwitchReadingProfile::SwitchReadingValueSeq */

          void init();
          void clear();
          void copy( const openfmb::switchmodule::SwitchReadingProfile * instance );

          int  get_marshal_size(int offset, int just_keys) const ;
          int  marshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys) const ;
          int  marshal_key_hash(unsigned char *buf, int offset, int stream_len) const;
          int  unmarshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys);
          int  unmarshal_key_hash(unsigned char *buf, int offset, int stream_len);

          /* Member vars*/
          static unsigned char get_field_def(const char  * fieldname, 
                                             CoreDX_FieldDef_t * field_def);
          openfmb::switchmodule::SwitchReadingProfile::openfmb_switchmodule_SwitchReadingValueSeq  switchReadingValue;

          typedef SwitchReadingProfileTypeSupport TypeSupport;
          typedef SwitchReadingProfileDataReader DataReader;
          typedef SwitchReadingProfileDataWriter DataWriter;
          typedef SwitchReadingProfilePtrSeq Seq;

        private:

      }; //openfmb::switchmodule::SwitchReadingProfile


    }  /* namespace switchmodule */

  }  /* namespace openfmb */

  namespace openfmb {


    namespace breakermodule {

      struct BreakerReadingProfile;
      class BreakerReadingProfileTypeSupport;
      class BreakerReadingProfileDataReader;
      class BreakerReadingProfileDataWriter;

/* DDS Data Type SEQUENCE: sequence<openfmb::breakermodule::BreakerReadingProfile *> */
#ifndef _DDS_sequence_cpp_openfmb_breakermodule_BreakerReadingProfilePtr_defined
#define _DDS_sequence_cpp_openfmb_breakermodule_BreakerReadingProfilePtr_defined
      DECLARE_CPP_UNBOUNDED_SEQ( openfmb::breakermodule::BreakerReadingProfile * , BreakerReadingProfilePtrSeq );
#endif /* DDS Data Type SEQUENCE: sequence<BreakerReadingProfilePtrSeq *> */

      struct COREDX_TS_STRUCT_EXPORT BreakerReadingProfile : public openfmb::commonmodule::MeasurementIED {
        public:
          /** Constructor, Copy Constructor, Destructor, Assignment operator */
          BreakerReadingProfile();
          ~BreakerReadingProfile();
          BreakerReadingProfile( const BreakerReadingProfile & other );
          BreakerReadingProfile& operator=( const BreakerReadingProfile & other);

#ifndef _DDS_SEQ_cpp_openfmb_breakermodule_BreakerReadingProfile_openfmb_breakermodule_BreakerReadingValueSeq_defined
#define _DDS_SEQ_cpp_openfmb_breakermodule_BreakerReadingProfile_openfmb_breakermodule_BreakerReadingValueSeq_defined
        DECLARE_CPP_UNBOUNDED_SEQ( struct openfmb::breakermodule::BreakerReadingValue , openfmb_breakermodule_BreakerReadingValueSeq );
#endif /* User Defined SEQUENCE: sequence openfmb::breakermodule::BreakerReadingProfile::BreakerReadingValueSeq */

          void init();
          void clear();
          void copy( const openfmb::breakermodule::BreakerReadingProfile * instance );

          int  get_marshal_size(int offset, int just_keys) const ;
          int  marshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys) const ;
          int  marshal_key_hash(unsigned char *buf, int offset, int stream_len) const;
          int  unmarshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys);
          int  unmarshal_key_hash(unsigned char *buf, int offset, int stream_len);

          /* Member vars*/
          static unsigned char get_field_def(const char  * fieldname, 
                                             CoreDX_FieldDef_t * field_def);
          openfmb::breakermodule::BreakerReadingProfile::openfmb_breakermodule_BreakerReadingValueSeq  breakerReadingValue;

          typedef BreakerReadingProfileTypeSupport TypeSupport;
          typedef BreakerReadingProfileDataReader DataReader;
          typedef BreakerReadingProfileDataWriter DataWriter;
          typedef BreakerReadingProfilePtrSeq Seq;

        private:

      }; //openfmb::breakermodule::BreakerReadingProfile


    }  /* namespace breakermodule */

    namespace loadmodule {

      struct LoadControl;
      class LoadControlTypeSupport;
      class LoadControlDataReader;
      class LoadControlDataWriter;

/* DDS Data Type SEQUENCE: sequence<openfmb::loadmodule::LoadControl *> */
#ifndef _DDS_sequence_cpp_openfmb_loadmodule_LoadControlPtr_defined
#define _DDS_sequence_cpp_openfmb_loadmodule_LoadControlPtr_defined
      DECLARE_CPP_UNBOUNDED_SEQ( openfmb::loadmodule::LoadControl * , LoadControlPtrSeq );
#endif /* DDS Data Type SEQUENCE: sequence<LoadControlPtrSeq *> */

      struct COREDX_TS_STRUCT_EXPORT LoadControl : public openfmb::commonmodule::ControlValue {
        public:
          /** Constructor, Copy Constructor, Destructor, Assignment operator */
          LoadControl();
          ~LoadControl();
          LoadControl( const LoadControl & other );
          LoadControl& operator=( const LoadControl & other);

          void init();
          void clear();
          void copy( const openfmb::loadmodule::LoadControl * instance );

          int  get_marshal_size(int offset, int just_keys) const ;
          int  marshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys) const ;
          int  marshal_key_hash(unsigned char *buf, int offset, int stream_len) const;
          int  unmarshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys);
          int  unmarshal_key_hash(unsigned char *buf, int offset, int stream_len);

          /* Member vars*/
          static unsigned char get_field_def(const char  * fieldname, 
                                             CoreDX_FieldDef_t * field_def);
          struct openfmb::commonmodule::CheckConditions  * check;
          struct openfmb::loadmodule::LoadControlFSCC  loadControlFSCC;

          typedef LoadControlTypeSupport TypeSupport;
          typedef LoadControlDataReader DataReader;
          typedef LoadControlDataWriter DataWriter;
          typedef LoadControlPtrSeq Seq;

        private:

      }; //openfmb::loadmodule::LoadControl

      struct LoadControlProfile;
      class LoadControlProfileTypeSupport;
      class LoadControlProfileDataReader;
      class LoadControlProfileDataWriter;

/* DDS Data Type SEQUENCE: sequence<openfmb::loadmodule::LoadControlProfile *> */
#ifndef _DDS_sequence_cpp_openfmb_loadmodule_LoadControlProfilePtr_defined
#define _DDS_sequence_cpp_openfmb_loadmodule_LoadControlProfilePtr_defined
      DECLARE_CPP_UNBOUNDED_SEQ( openfmb::loadmodule::LoadControlProfile * , LoadControlProfilePtrSeq );
#endif /* DDS Data Type SEQUENCE: sequence<LoadControlProfilePtrSeq *> */

      struct COREDX_TS_STRUCT_EXPORT LoadControlProfile : public openfmb::commonmodule::ControlIED {
        public:
          /** Constructor, Copy Constructor, Destructor, Assignment operator */
          LoadControlProfile();
          ~LoadControlProfile();
          LoadControlProfile( const LoadControlProfile & other );
          LoadControlProfile& operator=( const LoadControlProfile & other);

          void init();
          void clear();
          void copy( const openfmb::loadmodule::LoadControlProfile * instance );

          int  get_marshal_size(int offset, int just_keys) const ;
          int  marshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys) const ;
          int  marshal_key_hash(unsigned char *buf, int offset, int stream_len) const;
          int  unmarshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys);
          int  unmarshal_key_hash(unsigned char *buf, int offset, int stream_len);

          /* Member vars*/
          static unsigned char get_field_def(const char  * fieldname, 
                                             CoreDX_FieldDef_t * field_def);
          char *  targetLoadSystemID;    /* key */
          struct openfmb::loadmodule::LoadControl  loadControl;

          typedef LoadControlProfileTypeSupport TypeSupport;
          typedef LoadControlProfileDataReader DataReader;
          typedef LoadControlProfileDataWriter DataWriter;
          typedef LoadControlProfilePtrSeq Seq;

        private:

      }; //openfmb::loadmodule::LoadControlProfile


    }  /* namespace loadmodule */

    namespace solarmodule {

      struct SolarControl;
      class SolarControlTypeSupport;
      class SolarControlDataReader;
      class SolarControlDataWriter;

/* DDS Data Type SEQUENCE: sequence<openfmb::solarmodule::SolarControl *> */
#ifndef _DDS_sequence_cpp_openfmb_solarmodule_SolarControlPtr_defined
#define _DDS_sequence_cpp_openfmb_solarmodule_SolarControlPtr_defined
      DECLARE_CPP_UNBOUNDED_SEQ( openfmb::solarmodule::SolarControl * , SolarControlPtrSeq );
#endif /* DDS Data Type SEQUENCE: sequence<SolarControlPtrSeq *> */

      struct COREDX_TS_STRUCT_EXPORT SolarControl : public openfmb::commonmodule::ControlValue {
        public:
          /** Constructor, Copy Constructor, Destructor, Assignment operator */
          SolarControl();
          ~SolarControl();
          SolarControl( const SolarControl & other );
          SolarControl& operator=( const SolarControl & other);

          void init();
          void clear();
          void copy( const openfmb::solarmodule::SolarControl * instance );

          int  get_marshal_size(int offset, int just_keys) const ;
          int  marshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys) const ;
          int  marshal_key_hash(unsigned char *buf, int offset, int stream_len) const;
          int  unmarshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys);
          int  unmarshal_key_hash(unsigned char *buf, int offset, int stream_len);

          /* Member vars*/
          static unsigned char get_field_def(const char  * fieldname, 
                                             CoreDX_FieldDef_t * field_def);
          struct openfmb::commonmodule::CheckConditions  * check;
          struct openfmb::solarmodule::SolarControlFSCC  * solarControlFSCC;

          typedef SolarControlTypeSupport TypeSupport;
          typedef SolarControlDataReader DataReader;
          typedef SolarControlDataWriter DataWriter;
          typedef SolarControlPtrSeq Seq;

        private:

      }; //openfmb::solarmodule::SolarControl

      struct SolarControlProfile;
      class SolarControlProfileTypeSupport;
      class SolarControlProfileDataReader;
      class SolarControlProfileDataWriter;

/* DDS Data Type SEQUENCE: sequence<openfmb::solarmodule::SolarControlProfile *> */
#ifndef _DDS_sequence_cpp_openfmb_solarmodule_SolarControlProfilePtr_defined
#define _DDS_sequence_cpp_openfmb_solarmodule_SolarControlProfilePtr_defined
      DECLARE_CPP_UNBOUNDED_SEQ( openfmb::solarmodule::SolarControlProfile * , SolarControlProfilePtrSeq );
#endif /* DDS Data Type SEQUENCE: sequence<SolarControlProfilePtrSeq *> */

      struct COREDX_TS_STRUCT_EXPORT SolarControlProfile : public openfmb::commonmodule::ControlIED {
        public:
          /** Constructor, Copy Constructor, Destructor, Assignment operator */
          SolarControlProfile();
          ~SolarControlProfile();
          SolarControlProfile( const SolarControlProfile & other );
          SolarControlProfile& operator=( const SolarControlProfile & other);

          void init();
          void clear();
          void copy( const openfmb::solarmodule::SolarControlProfile * instance );

          int  get_marshal_size(int offset, int just_keys) const ;
          int  marshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys) const ;
          int  marshal_key_hash(unsigned char *buf, int offset, int stream_len) const;
          int  unmarshal_cdr(unsigned char * buf, int offset, int stream_len, 
                           unsigned char swap, int just_keys);
          int  unmarshal_key_hash(unsigned char *buf, int offset, int stream_len);

          /* Member vars*/
          static unsigned char get_field_def(const char  * fieldname, 
                                             CoreDX_FieldDef_t * field_def);
          char *  targetSolarSystemID;    /* key */
          struct openfmb::solarmodule::SolarControl  solarControl;

          typedef SolarControlProfileTypeSupport TypeSupport;
          typedef SolarControlProfileDataReader DataReader;
          typedef SolarControlProfileDataWriter DataWriter;
          typedef SolarControlProfilePtrSeq Seq;

        private:

      }; //openfmb::solarmodule::SolarControlProfile


    }  /* namespace solarmodule */

  }  /* namespace openfmb */

#ifdef _MSC_VER
#  pragma warning(pop)
#endif
#endif
