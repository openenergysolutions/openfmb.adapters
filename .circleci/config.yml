version: 2.1
orbs:
  win: circleci/windows@1.0.0
commands:
  build_linux:
    description: Build on Linux
    parameters:
      compiler:
        description: The compiler to use
        type: enum
        enum: ["gcc", "clang", "arm"]
      build_type:
        description: Build type
        type: enum
        enum: ["Debug", "Release"]
        default: Release
      build_static:
        description: Build statically
        type: boolean
        default: true
      build_with_rti:
        description: Build with RTI DDS
        type: boolean
      run_unit_tests:
        description: Run the unit tests
        type: boolean
    steps:
      - setup_remote_docker
      - run:
          name: Install system dependencies
          command: >
            apt-get update && apt-get install -y build-essential unzip curl git git-lfs cmake python3 python3-pip &&
            bash <(curl -fsSL https://get.docker.com) &&
            if [ "<< parameters.compiler >>" = "clang" ]; then apt-get install -y clang && echo "export CC=/usr/bin/clang" >> $BASH_ENV && echo "export CXX=/usr/bin/clang++" >> $BASH_ENV; fi &&
            if [ "<< parameters.compiler >>" = "arm" ]; then apt-get install -y crossbuild-essential-armhf && echo "export CC=/usr/bin/arm-linux-gnueabihf-gcc" >> $BASH_ENV && echo "export CXX=/usr/bin/arm-linux-gnueabihf-g++" >> $BASH_ENV; fi
      - run:
          name: Install conan
          command: |
            pip3 install conan && \
            conan profile new default --detect && \
            conan profile update settings.compiler.libcxx=libstdc++11 default && \
            if [ "<< parameters.compiler >>" = "arm" ]; then \
            echo -e "target_host=arm-linux-gnueabihf\n
            [settings]\n
            os=Linux\n
            os_build=Linux\n
            arch=armv7hf\n
            arch_build=x86_64\n
            compiler=gcc\n
            compiler.version=8\n
            compiler.libcxx=libstdc++11\n
            build_type=Release\n
            [env]\n
            CHOST=/$target_host\n
            AR=\$target_host-ar\n
            AS=\$target_host-as\n
            RANLIB=\$target_host-ranlib\n
            LD=\$target_host-ld\n
            CC=\$target_host-gcc\n
            CXX=\$target_host-g++" > ~/.conan/profiles/default; fi
      - run:
          name: Add GitHub API token
          command: >
            git config --global --add url."https://${GITHUB_API_KEY}@github.com/".insteadOf "git@github.com:" &&
            git config --global --add url."https://${GITHUB_API_KEY}@github.com/".insteadOf "https://github.com/"
      - checkout
      - run:
          name: Submodule update
          command: git submodule update --init
      - run:
          name: Install conan dependencies
          working_directory: build
          command: conan install --build=missing ..
      - run:
          name: Build NATS
          working_directory: deps/nats
          command: >
            if [ "<< parameters.compiler >>" = "arm" ]; then TOOLCHAIN_SPEC="-DCMAKE_TOOLCHAIN_FILE=~/project/cmake/Armv7HfToolchain.cmake"; else TOOLCHAIN_SPEC=""; fi &&
            OPENSSL_PATH=$(conan info --package-filter OpenSSL* --paths -n package_folder ~/project | grep -o /root.*) &&
            git clone --depth 1 --single-branch -b v2.0.0 https://github.com/nats-io/nats.c.git . &&
            cmake $TOOLCHAIN_SPEC -DCMAKE_PREFIX_PATH="$OPENSSL_PATH" -DCMAKE_BUILD_TYPE=Release -DNATS_BUILD_STREAMING=OFF &&
            cmake --build . --target install
      - run:
          name: Install or build libpcap
          working_directory: deps/libpcap
          command: >
            if [ "<< parameters.compiler >>" = "arm" ]; then
            apt-get install -y flex bison &&
            curl https://www.tcpdump.org/release/libpcap-1.9.1.tar.gz > libpcap-1.9.1.tar.gz && tar -xzf libpcap-1.9.1.tar.gz && cd libpcap-1.9.1 &&
            ./configure --prefix=/usr/local --host=arm-linux &&
            make all && make install;
            else apt-get install -y libpcap-dev;
            fi
      - when:
          condition: << parameters.build_with_rti >>
          steps:
            - run:
                name: Install RTI DDS library
                working_directory: deps
                command: >
                  git clone https://github.com/openenergysolutions/rti-dds-lfs.git &&
                  mkdir rti-dds &&
                  unzip rti-dds-lfs/rti-dds-6.0.1-linux-x86_64.zip -d rti-dds &&
                  chmod -R +x ./rti-dds
      - run:
          name: CMake configure
          working_directory: build
          command: >
            cmake
            $TOOLCHAIN_SPEC
            -DCMAKE_BUILD_TYPE=<< parameters.build_type >>
            -DOPENFMB_LINK_STATIC=<< parameters.build_static >>
            -DOPENFMB_USE_RTI_DDS=${<< parameters.build_with_rti >>^^} -DCONNEXTDDS_DIR="/root/project/deps/rti-dds"
            ..
      - run:
          name: CMake build
          working_directory: build
          command: cmake --build .
      - when:
          condition: << parameters.run_unit_tests >>
          steps:
            - run:
                name: Run CTest
                working_directory: build
                command: ctest .
      - run:
          name: Build Docker image
          working_directory: build/application
          command: |
            if [ "<< parameters.build_with_rti >>" = "true" ]; then cp /root/project/deps/rti-dds/rti_license.dat ./rti_license.dat && RTI_COPY="COPY rti_license.dat /"; else RTI_COPY=""; fi && \
            echo -e "FROM $DOCKER_PLATFORM debian:buster-slim\n
            COPY openfmb-adapter /\n
            $RTI_COPY\n
            ENTRYPOINT [\"/openfmb-adapter\"]" >> Dockerfile && \
            docker build -t openfmb-adapter-buster-<< parameters.compiler >>:latest . && \
            docker save openfmb-adapter-buster-<< parameters.compiler >>:latest | gzip > openfmb-adapter-buster-<< parameters.compiler >>.tar.gz
      - store_artifacts:
          path: /root/project/build/application/openfmb-adapter
          destination: openfmb-adapter
      - store_artifacts:
          path: /root/project/build/application/openfmb-adapter-buster-<< parameters.compiler >>.tar.gz
          destination: openfmb-adapter-buster-<< parameters.compiler >>.tar.gz
      - run:
          name: Prepare for deploy
          working_directory: build/application
          command: >
            mkdir << parameters.compiler >> &&
            cp openfmb-adapter << parameters.compiler >>/openfmb-adapter &&
            cp openfmb-adapter-buster-<< parameters.compiler >>.tar.gz << parameters.compiler >>/openfmb-adapter-buster-<< parameters.compiler >>.tar.gz
      - persist_to_workspace:
          root: build/application
          paths: << parameters.compiler >>/*
  build_windows:
    description: Build on Windows
    steps:
      - run:
          name: Install system dependencies
          command: choco install 7zip.portable python cmake.portable openssl; refreshenv
      - run:
          name: Install conan
          command: >
            pip install conan;
            conan profile new default --detect
      - run:
          name: Add GitHub API token
          command: >
            git config --global --add url."https://$Env:GITHUB_API_KEY@github.com/".insteadOf "git@github.com:";
            git config --global --add url."https://$Env:GITHUB_API_KEY@github.com/".insteadOf "https://github.com/"
      - checkout
      - run:
          name: Submodule update
          command: git submodule update --init
      - run:
          name: Build NATS
          working_directory: deps/nats
          command: >
            git clone --depth 1 --single-branch -b v2.0.0 https://github.com/nats-io/nats.c.git .;
            cmake -DCMAKE_INSTALL_PREFIX="C:/Users/circleci/project/deps/cnats" -DCMAKE_BUILD_TYPE=Release -DNATS_BUILD_STREAMING=OFF;
            cmake --build . --config Release --target install
      - run:
          name: Install RTI DDS library
          working_directory: deps
          command: >
            git clone https://github.com/openenergysolutions/rti-dds-lfs.git;
            7z x rti-dds-lfs/rti-dds.zip -orti-dds
      - run:
          name: Install npcap
          working_directory: deps
          command: >
            $ProgressPreference = "SilentlyContinue";
            wget "https://nmap.org/npcap/dist/npcap-sdk-1.04.zip" -outfile npcap-sdk.zip;
            7z x npcap-sdk.zip -onpcap-sdk;
            Get-ChildItem npcap-sdk/Lib/x64 | Move-Item -Destination npcap-sdk/Lib -Force; Remove-Item npcap-sdk/Lib/x64 -Recurse
      - run:
          name: Install conan dependencies
          working_directory: build
          command: conan install --build=missing ..
      - run:
          name: CMake configure
          working_directory: build
          command: >
            cmake
            -DCMAKE_BUILD_TYPE=Release
            -DCMAKE_PREFIX_PATH="C:/Users/circleci/project/deps/npcap-sdk;C:/Users/circleci/project/deps/cnats"
            -DOPENFMB_LINK_STATIC=OFF
            -DOPENFMB_USE_RTI_DDS=OFF
            -DCONNEXTDDS_DIR="C:/Users/circleci/project/deps/rti-dds"
            -DCONNEXTDDS_ARCH="x64Win64VS2017"
            ..
      - run:
          name: CMake build
          working_directory: build
          command: cmake --build . --config Release
      - run:
          name: Run CTest
          working_directory: build
          command: ctest -C Release
      - store_artifacts:
          path: C:/Users/circleci/project/build/application/Release/openfmb-adapter.exe
          destination: openfmb-adapter.exe
      - run:
          name: Prepare for deploy
          working_directory: build/application/Release
          command: >
            mkdir windows;
            cp openfmb-adapter.exe windows/openfmb-adapter.exe
      - persist_to_workspace:
          root: build/application/Release
          paths: windows/*
  deploy_bc3:
    description: Deploy artifacts to Basecamp
    parameters:
      vault_id:
        description: Vault ID to upload to
        type: string
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - checkout
      - run:
          name: Install Python dependencies
          command: pip3 install requests
      - run:
          name: Upload the dependencies
          command: export BC3_VAULT_ID=<< parameters.vault_id >> && python3 .circleci/basecamp_upload.py /tmp/workspace
jobs:
  gcc-debug:
    docker:
      - image: debian:buster
    resource_class: large
    steps:
      - build_linux:
          compiler: gcc
          build_type: Debug
          build_static: true
          build_with_rti: true
          run_unit_tests: true
  gcc-release:
    docker:
      - image: debian:buster
    resource_class: large
    steps:
      - build_linux:
          compiler: gcc
          build_type: Release
          build_static: true
          build_with_rti: true
          run_unit_tests: true
  clang-debug:
    docker:
      - image: debian:buster
    steps:
      - build_linux:
          compiler: clang
          build_type: Debug
          build_static: false
          build_with_rti: false
          run_unit_tests: true
  clang-release:
    docker:
      - image: debian:buster
    steps:
      - build_linux:
          compiler: clang
          build_type: Release
          build_static: false
          build_with_rti: false
          run_unit_tests: true
  armv7-debug:
    docker:
      - image: debian:buster
    resource_class: large
    steps:
      - build_linux:
          compiler: arm
          build_type: Debug
          build_static: true
          build_with_rti: false
          run_unit_tests: false
  armv7-release:
    docker:
      - image: debian:buster
    resource_class: large
    steps:
      - build_linux:
          compiler: arm
          build_type: Release
          build_static: true
          build_with_rti: false
          run_unit_tests: false
  windows:
    executor:
      name: win/vs2019
      shell: powershell.exe
    steps:
      - build_windows
  deploy-develop:
    docker:
      - image: circleci/python:3.7-buster
    steps:
      - deploy_bc3:
          vault_id: "2240984322"
  deploy-experimental:
    docker:
      - image: circleci/python:3.7-buster
    steps:
      - deploy_bc3:
          vault_id: "2240985657"
  deploy-v2-working:
    docker:
      - image: circleci/python:3.7-buster
    steps:
      - deploy_bc3:
          vault_id: "2851663050"
  deploy-v2-final:
    docker:
      - image: circleci/python:3.7-buster
    steps:
      - deploy_bc3:
          vault_id: "2953825585"
  deploy-release:
    docker:
      - image: circleci/python:3.7-buster
    steps:
      - deploy_bc3:
          vault_id: "2240984921"
workflows:
  version: 2
  build:
    jobs:
      - gcc-release:
          filters:
            branches:
              only:
                - develop
                - experimental
                - v2_working
                - v2_final
            tags:
              only:
                - /.*/
      - clang-release:
          filters:
            branches:
              only:
                - develop
                - experimental
                - v2_working
                - v2_final
            tags:
              only:
                - /.*/
      - armv7-release:
          filters:
            branches:
              only:
                - develop
                - experimental
                - v2_working
            tags:
              only:
                - /.*/
      - windows:
          filters:
            branches:
              only:
                - develop
                - experimental
                - v2_working
                - v2_final
            tags:
              only:
                - /.*/
      - deploy-develop:
          requires:
            - gcc-release
            - clang-release
            - armv7-release
            - windows
          filters:
            branches:
              only:
                - develop
      - deploy-experimental:
          requires:
            - gcc-release
            - clang-release
            - armv7-release
            - windows
          filters:
            branches:
              only:
                - experimental
      - deploy-v2-working:
          requires:
            - gcc-release
            - clang-release
            - armv7-release
            - windows
          filters:
            branches:
              only:
                - v2_working
      - deploy-v2-final:
          requires:
            - gcc-release
            - clang-release
            - windows
          filters:
            branches:
              only:
                - v2_final

      # - deploy-release:
      #     requires:
      #       - gcc-release
      #       - clang-release
      #       - armv7-release
      #       - windows
      #     filters:
      #       tags:
      #         only:
      #           - /.*/
