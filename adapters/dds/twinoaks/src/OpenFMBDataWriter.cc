/********************************************
 * Type specific DataWriter source file.    *
 * Autogenerated by CoreDX DDL compiler.    *
 * Do no edit - edits may be overwritten    *
 ********************************************/
#include <string.h>
#include "OpenFMBDataWriter.hh"

/* START SCOPE: UML_Extension */

namespace UML_Extension {


}  /* namespace UML_Extension */
/* END SCOPE: UML_Extension */
/* START SCOPE: openfmb */

namespace openfmb {

/* START SCOPE: breakermodule */

namespace breakermodule {


}  /* namespace breakermodule */
/* END SCOPE: breakermodule */
/* START SCOPE: commonmodule */

namespace commonmodule {


}  /* namespace commonmodule */
/* END SCOPE: commonmodule */
/* START SCOPE: essmodule */

namespace essmodule {


}  /* namespace essmodule */
/* END SCOPE: essmodule */
/* START SCOPE: generationmodule */

namespace generationmodule {


}  /* namespace generationmodule */
/* END SCOPE: generationmodule */
/* START SCOPE: interconnectionmodule */

namespace interconnectionmodule {


}  /* namespace interconnectionmodule */
/* END SCOPE: interconnectionmodule */
/* START SCOPE: loadmodule */

namespace loadmodule {


}  /* namespace loadmodule */
/* END SCOPE: loadmodule */
/* START SCOPE: optimizermodule */

namespace optimizermodule {


}  /* namespace optimizermodule */
/* END SCOPE: optimizermodule */
/* START SCOPE: reclosermodule */

namespace reclosermodule {


}  /* namespace reclosermodule */
/* END SCOPE: reclosermodule */
/* START SCOPE: regulatormodule */

namespace regulatormodule {


}  /* namespace regulatormodule */
/* END SCOPE: regulatormodule */
/* START SCOPE: resourcemodule */

namespace resourcemodule {


}  /* namespace resourcemodule */
/* END SCOPE: resourcemodule */
/* START SCOPE: solarmodule */

namespace solarmodule {


}  /* namespace solarmodule */
/* END SCOPE: solarmodule */
/* START SCOPE: switchmodule */

namespace switchmodule {


}  /* namespace switchmodule */
/* END SCOPE: switchmodule */

}  /* namespace openfmb */
/* END SCOPE: openfmb */
/* START SCOPE: openfmb */

namespace openfmb {

/* START SCOPE: commonmodule */

namespace commonmodule {


/******************************************************************
 * openfmb::commonmodule:: DataWriter Ops
 *****************************************************************/

/*****************************************************************/
BCRDataWriter::BCRDataWriter()
{
}

/*****************************************************************/
InstanceHandle_t 
BCRDataWriter::register_instance_w_timestamp( const BCR *  instance_data,
                                               const Time_t  source_timestamp)
{

  return DataWriter::register_instance_w_timestamp( instance_data, source_timestamp );
}

/*****************************************************************/
 /* openfmb::commonmodule:: */
InstanceHandle_t 
BCRDataWriter::register_instance(const BCR *  instance_data) 
{
  return DataWriter::register_instance( instance_data );
}


/*****************************************************************/

ReturnCode_t 
BCRDataWriter::unregister_instance_w_timestamp( const BCR * instance_data, 
                                                    const InstanceHandle_t  handle,
                                                    const Time_t  source_timestamp)
{
  return DataWriter::unregister_instance_w_timestamp( instance_data,
                                                      handle,
                                                      source_timestamp );
}


/*****************************************************************/

ReturnCode_t 
BCRDataWriter::unregister_instance( const BCR * instance_data, 
                                        const InstanceHandle_t  handle)
{
  return DataWriter::unregister_instance( instance_data, handle );
}


/*****************************************************************/

ReturnCode_t 
BCRDataWriter::write_w_timestamp( const BCR * instance_data, 
                                      const InstanceHandle_t  h, 
                                      const Time_t  source_timestamp)
{
  return DataWriter::write_w_timestamp( instance_data, h, source_timestamp );
}


/*****************************************************************/

ReturnCode_t 
BCRDataWriter::write( const BCR * instance_data, 
                          const InstanceHandle_t  h)
{
  return DataWriter::write( instance_data, h );
}


/*****************************************************************/

ReturnCode_t 
BCRDataWriter::dispose_w_timestamp( const BCR * instance_data, 
                                        const InstanceHandle_t  h, 
                                        const Time_t  source_timestamp)
{
  return DataWriter::dispose_w_timestamp( instance_data, h, source_timestamp );
}


/*****************************************************************/

ReturnCode_t 
BCRDataWriter::dispose( const BCR * instance_data, 
                            const InstanceHandle_t  instance_handle )
{
  return DataWriter::dispose(instance_data, instance_handle );
}


/*****************************************************************/

ReturnCode_t 
BCRDataWriter::get_key_value( BCR * key_holder, 
                                  const InstanceHandle_t  handle)
{
  if ( ! key_holder )
      return RETCODE_BAD_PARAMETER;

  /* No keys: no op */
  CDX_UNUSED(handle);
  key_holder->clear();
  return DDS::RETCODE_OK;
}


/*****************************************************************/
/* openfmb::commonmodule:: */
InstanceHandle_t 
BCRDataWriter::lookup_instance( const BCR * instance_data )
{
  if ( ! instance_data )
      return HANDLE_NIL;

  /* No keys */
  return DDS::HANDLE_DEFAULT;
}


}  /* namespace commonmodule */
/* END SCOPE: commonmodule */
/* START SCOPE: essmodule */

namespace essmodule {


/******************************************************************
 * openfmb::essmodule:: DataWriter Ops
 *****************************************************************/

/*****************************************************************/
ENC_ESSControlKindDataWriter::ENC_ESSControlKindDataWriter()
{
}

/*****************************************************************/
InstanceHandle_t 
ENC_ESSControlKindDataWriter::register_instance_w_timestamp( const ENC_ESSControlKind *  instance_data,
                                               const Time_t  source_timestamp)
{

  return DataWriter::register_instance_w_timestamp( instance_data, source_timestamp );
}

/*****************************************************************/
 /* openfmb::essmodule:: */
InstanceHandle_t 
ENC_ESSControlKindDataWriter::register_instance(const ENC_ESSControlKind *  instance_data) 
{
  return DataWriter::register_instance( instance_data );
}


/*****************************************************************/

ReturnCode_t 
ENC_ESSControlKindDataWriter::unregister_instance_w_timestamp( const ENC_ESSControlKind * instance_data, 
                                                    const InstanceHandle_t  handle,
                                                    const Time_t  source_timestamp)
{
  return DataWriter::unregister_instance_w_timestamp( instance_data,
                                                      handle,
                                                      source_timestamp );
}


/*****************************************************************/

ReturnCode_t 
ENC_ESSControlKindDataWriter::unregister_instance( const ENC_ESSControlKind * instance_data, 
                                        const InstanceHandle_t  handle)
{
  return DataWriter::unregister_instance( instance_data, handle );
}


/*****************************************************************/

ReturnCode_t 
ENC_ESSControlKindDataWriter::write_w_timestamp( const ENC_ESSControlKind * instance_data, 
                                      const InstanceHandle_t  h, 
                                      const Time_t  source_timestamp)
{
  return DataWriter::write_w_timestamp( instance_data, h, source_timestamp );
}


/*****************************************************************/

ReturnCode_t 
ENC_ESSControlKindDataWriter::write( const ENC_ESSControlKind * instance_data, 
                          const InstanceHandle_t  h)
{
  return DataWriter::write( instance_data, h );
}


/*****************************************************************/

ReturnCode_t 
ENC_ESSControlKindDataWriter::dispose_w_timestamp( const ENC_ESSControlKind * instance_data, 
                                        const InstanceHandle_t  h, 
                                        const Time_t  source_timestamp)
{
  return DataWriter::dispose_w_timestamp( instance_data, h, source_timestamp );
}


/*****************************************************************/

ReturnCode_t 
ENC_ESSControlKindDataWriter::dispose( const ENC_ESSControlKind * instance_data, 
                            const InstanceHandle_t  instance_handle )
{
  return DataWriter::dispose(instance_data, instance_handle );
}


/*****************************************************************/

ReturnCode_t 
ENC_ESSControlKindDataWriter::get_key_value( ENC_ESSControlKind * key_holder, 
                                  const InstanceHandle_t  handle)
{
  if ( ! key_holder )
      return RETCODE_BAD_PARAMETER;

  /* No keys: no op */
  CDX_UNUSED(handle);
  key_holder->clear();
  return DDS::RETCODE_OK;
}


/*****************************************************************/
/* openfmb::essmodule:: */
InstanceHandle_t 
ENC_ESSControlKindDataWriter::lookup_instance( const ENC_ESSControlKind * instance_data )
{
  if ( ! instance_data )
      return HANDLE_NIL;

  /* No keys */
  return DDS::HANDLE_DEFAULT;
}


}  /* namespace essmodule */
/* END SCOPE: essmodule */
/* START SCOPE: generationmodule */

namespace generationmodule {


/******************************************************************
 * openfmb::generationmodule:: DataWriter Ops
 *****************************************************************/

/*****************************************************************/
GenerationControlScheduleProfileDataWriter::GenerationControlScheduleProfileDataWriter()
{
}

/*****************************************************************/
InstanceHandle_t 
GenerationControlScheduleProfileDataWriter::register_instance_w_timestamp( const GenerationControlScheduleProfile *  instance_data,
                                               const Time_t  source_timestamp)
{

  return DataWriter::register_instance_w_timestamp( instance_data, source_timestamp );
}

/*****************************************************************/
 /* openfmb::generationmodule:: */
InstanceHandle_t 
GenerationControlScheduleProfileDataWriter::register_instance(const GenerationControlScheduleProfile *  instance_data) 
{
  return DataWriter::register_instance( instance_data );
}


/*****************************************************************/

ReturnCode_t 
GenerationControlScheduleProfileDataWriter::unregister_instance_w_timestamp( const GenerationControlScheduleProfile * instance_data, 
                                                    const InstanceHandle_t  handle,
                                                    const Time_t  source_timestamp)
{
  return DataWriter::unregister_instance_w_timestamp( instance_data,
                                                      handle,
                                                      source_timestamp );
}


/*****************************************************************/

ReturnCode_t 
GenerationControlScheduleProfileDataWriter::unregister_instance( const GenerationControlScheduleProfile * instance_data, 
                                        const InstanceHandle_t  handle)
{
  return DataWriter::unregister_instance( instance_data, handle );
}


/*****************************************************************/

ReturnCode_t 
GenerationControlScheduleProfileDataWriter::write_w_timestamp( const GenerationControlScheduleProfile * instance_data, 
                                      const InstanceHandle_t  h, 
                                      const Time_t  source_timestamp)
{
  return DataWriter::write_w_timestamp( instance_data, h, source_timestamp );
}


/*****************************************************************/

ReturnCode_t 
GenerationControlScheduleProfileDataWriter::write( const GenerationControlScheduleProfile * instance_data, 
                          const InstanceHandle_t  h)
{
  return DataWriter::write( instance_data, h );
}


/*****************************************************************/

ReturnCode_t 
GenerationControlScheduleProfileDataWriter::dispose_w_timestamp( const GenerationControlScheduleProfile * instance_data, 
                                        const InstanceHandle_t  h, 
                                        const Time_t  source_timestamp)
{
  return DataWriter::dispose_w_timestamp( instance_data, h, source_timestamp );
}


/*****************************************************************/

ReturnCode_t 
GenerationControlScheduleProfileDataWriter::dispose( const GenerationControlScheduleProfile * instance_data, 
                            const InstanceHandle_t  instance_handle )
{
  return DataWriter::dispose(instance_data, instance_handle );
}


/*****************************************************************/

ReturnCode_t 
GenerationControlScheduleProfileDataWriter::get_key_value( GenerationControlScheduleProfile * key_holder, 
                                  const InstanceHandle_t  handle)
{
  if ( ! key_holder )
      return RETCODE_BAD_PARAMETER;

  /* No keys: no op */
  CDX_UNUSED(handle);
  key_holder->clear();
  return DDS::RETCODE_OK;
}


/*****************************************************************/
/* openfmb::generationmodule:: */
InstanceHandle_t 
GenerationControlScheduleProfileDataWriter::lookup_instance( const GenerationControlScheduleProfile * instance_data )
{
  if ( ! instance_data )
      return HANDLE_NIL;

  /* No keys */
  return DDS::HANDLE_DEFAULT;
}


}  /* namespace generationmodule */
/* END SCOPE: generationmodule */
/* START SCOPE: interconnectionmodule */

namespace interconnectionmodule {


/******************************************************************
 * openfmb::interconnectionmodule:: DataWriter Ops
 *****************************************************************/

/*****************************************************************/
PlannedInterconnectionScheduleProfileDataWriter::PlannedInterconnectionScheduleProfileDataWriter()
{
}

/*****************************************************************/
InstanceHandle_t 
PlannedInterconnectionScheduleProfileDataWriter::register_instance_w_timestamp( const PlannedInterconnectionScheduleProfile *  instance_data,
                                               const Time_t  source_timestamp)
{

  return DataWriter::register_instance_w_timestamp( instance_data, source_timestamp );
}

/*****************************************************************/
 /* openfmb::interconnectionmodule:: */
InstanceHandle_t 
PlannedInterconnectionScheduleProfileDataWriter::register_instance(const PlannedInterconnectionScheduleProfile *  instance_data) 
{
  return DataWriter::register_instance( instance_data );
}


/*****************************************************************/

ReturnCode_t 
PlannedInterconnectionScheduleProfileDataWriter::unregister_instance_w_timestamp( const PlannedInterconnectionScheduleProfile * instance_data, 
                                                    const InstanceHandle_t  handle,
                                                    const Time_t  source_timestamp)
{
  return DataWriter::unregister_instance_w_timestamp( instance_data,
                                                      handle,
                                                      source_timestamp );
}


/*****************************************************************/

ReturnCode_t 
PlannedInterconnectionScheduleProfileDataWriter::unregister_instance( const PlannedInterconnectionScheduleProfile * instance_data, 
                                        const InstanceHandle_t  handle)
{
  return DataWriter::unregister_instance( instance_data, handle );
}


/*****************************************************************/

ReturnCode_t 
PlannedInterconnectionScheduleProfileDataWriter::write_w_timestamp( const PlannedInterconnectionScheduleProfile * instance_data, 
                                      const InstanceHandle_t  h, 
                                      const Time_t  source_timestamp)
{
  return DataWriter::write_w_timestamp( instance_data, h, source_timestamp );
}


/*****************************************************************/

ReturnCode_t 
PlannedInterconnectionScheduleProfileDataWriter::write( const PlannedInterconnectionScheduleProfile * instance_data, 
                          const InstanceHandle_t  h)
{
  return DataWriter::write( instance_data, h );
}


/*****************************************************************/

ReturnCode_t 
PlannedInterconnectionScheduleProfileDataWriter::dispose_w_timestamp( const PlannedInterconnectionScheduleProfile * instance_data, 
                                        const InstanceHandle_t  h, 
                                        const Time_t  source_timestamp)
{
  return DataWriter::dispose_w_timestamp( instance_data, h, source_timestamp );
}


/*****************************************************************/

ReturnCode_t 
PlannedInterconnectionScheduleProfileDataWriter::dispose( const PlannedInterconnectionScheduleProfile * instance_data, 
                            const InstanceHandle_t  instance_handle )
{
  return DataWriter::dispose(instance_data, instance_handle );
}


/*****************************************************************/

ReturnCode_t 
PlannedInterconnectionScheduleProfileDataWriter::get_key_value( PlannedInterconnectionScheduleProfile * key_holder, 
                                  const InstanceHandle_t  handle)
{
  if ( ! key_holder )
      return RETCODE_BAD_PARAMETER;

  /* No keys: no op */
  CDX_UNUSED(handle);
  key_holder->clear();
  return DDS::RETCODE_OK;
}


/*****************************************************************/
/* openfmb::interconnectionmodule:: */
InstanceHandle_t 
PlannedInterconnectionScheduleProfileDataWriter::lookup_instance( const PlannedInterconnectionScheduleProfile * instance_data )
{
  if ( ! instance_data )
      return HANDLE_NIL;

  /* No keys */
  return DDS::HANDLE_DEFAULT;
}


/******************************************************************
 * openfmb::interconnectionmodule:: DataWriter Ops
 *****************************************************************/

/*****************************************************************/
RequestedInterconnectionScheduleProfileDataWriter::RequestedInterconnectionScheduleProfileDataWriter()
{
}

/*****************************************************************/
InstanceHandle_t 
RequestedInterconnectionScheduleProfileDataWriter::register_instance_w_timestamp( const RequestedInterconnectionScheduleProfile *  instance_data,
                                               const Time_t  source_timestamp)
{

  return DataWriter::register_instance_w_timestamp( instance_data, source_timestamp );
}

/*****************************************************************/
 /* openfmb::interconnectionmodule:: */
InstanceHandle_t 
RequestedInterconnectionScheduleProfileDataWriter::register_instance(const RequestedInterconnectionScheduleProfile *  instance_data) 
{
  return DataWriter::register_instance( instance_data );
}


/*****************************************************************/

ReturnCode_t 
RequestedInterconnectionScheduleProfileDataWriter::unregister_instance_w_timestamp( const RequestedInterconnectionScheduleProfile * instance_data, 
                                                    const InstanceHandle_t  handle,
                                                    const Time_t  source_timestamp)
{
  return DataWriter::unregister_instance_w_timestamp( instance_data,
                                                      handle,
                                                      source_timestamp );
}


/*****************************************************************/

ReturnCode_t 
RequestedInterconnectionScheduleProfileDataWriter::unregister_instance( const RequestedInterconnectionScheduleProfile * instance_data, 
                                        const InstanceHandle_t  handle)
{
  return DataWriter::unregister_instance( instance_data, handle );
}


/*****************************************************************/

ReturnCode_t 
RequestedInterconnectionScheduleProfileDataWriter::write_w_timestamp( const RequestedInterconnectionScheduleProfile * instance_data, 
                                      const InstanceHandle_t  h, 
                                      const Time_t  source_timestamp)
{
  return DataWriter::write_w_timestamp( instance_data, h, source_timestamp );
}


/*****************************************************************/

ReturnCode_t 
RequestedInterconnectionScheduleProfileDataWriter::write( const RequestedInterconnectionScheduleProfile * instance_data, 
                          const InstanceHandle_t  h)
{
  return DataWriter::write( instance_data, h );
}


/*****************************************************************/

ReturnCode_t 
RequestedInterconnectionScheduleProfileDataWriter::dispose_w_timestamp( const RequestedInterconnectionScheduleProfile * instance_data, 
                                        const InstanceHandle_t  h, 
                                        const Time_t  source_timestamp)
{
  return DataWriter::dispose_w_timestamp( instance_data, h, source_timestamp );
}


/*****************************************************************/

ReturnCode_t 
RequestedInterconnectionScheduleProfileDataWriter::dispose( const RequestedInterconnectionScheduleProfile * instance_data, 
                            const InstanceHandle_t  instance_handle )
{
  return DataWriter::dispose(instance_data, instance_handle );
}


/*****************************************************************/

ReturnCode_t 
RequestedInterconnectionScheduleProfileDataWriter::get_key_value( RequestedInterconnectionScheduleProfile * key_holder, 
                                  const InstanceHandle_t  handle)
{
  if ( ! key_holder )
      return RETCODE_BAD_PARAMETER;

  /* No keys: no op */
  CDX_UNUSED(handle);
  key_holder->clear();
  return DDS::RETCODE_OK;
}


/*****************************************************************/
/* openfmb::interconnectionmodule:: */
InstanceHandle_t 
RequestedInterconnectionScheduleProfileDataWriter::lookup_instance( const RequestedInterconnectionScheduleProfile * instance_data )
{
  if ( ! instance_data )
      return HANDLE_NIL;

  /* No keys */
  return DDS::HANDLE_DEFAULT;
}


}  /* namespace interconnectionmodule */
/* END SCOPE: interconnectionmodule */
/* START SCOPE: loadmodule */

namespace loadmodule {


}  /* namespace loadmodule */
/* END SCOPE: loadmodule */
/* START SCOPE: optimizermodule */

namespace optimizermodule {


/******************************************************************
 * openfmb::optimizermodule:: DataWriter Ops
 *****************************************************************/

/*****************************************************************/
RequestedOptimizerScheduleProfileDataWriter::RequestedOptimizerScheduleProfileDataWriter()
{
}

/*****************************************************************/
InstanceHandle_t 
RequestedOptimizerScheduleProfileDataWriter::register_instance_w_timestamp( const RequestedOptimizerScheduleProfile *  instance_data,
                                               const Time_t  source_timestamp)
{

  return DataWriter::register_instance_w_timestamp( instance_data, source_timestamp );
}

/*****************************************************************/
 /* openfmb::optimizermodule:: */
InstanceHandle_t 
RequestedOptimizerScheduleProfileDataWriter::register_instance(const RequestedOptimizerScheduleProfile *  instance_data) 
{
  return DataWriter::register_instance( instance_data );
}


/*****************************************************************/

ReturnCode_t 
RequestedOptimizerScheduleProfileDataWriter::unregister_instance_w_timestamp( const RequestedOptimizerScheduleProfile * instance_data, 
                                                    const InstanceHandle_t  handle,
                                                    const Time_t  source_timestamp)
{
  return DataWriter::unregister_instance_w_timestamp( instance_data,
                                                      handle,
                                                      source_timestamp );
}


/*****************************************************************/

ReturnCode_t 
RequestedOptimizerScheduleProfileDataWriter::unregister_instance( const RequestedOptimizerScheduleProfile * instance_data, 
                                        const InstanceHandle_t  handle)
{
  return DataWriter::unregister_instance( instance_data, handle );
}


/*****************************************************************/

ReturnCode_t 
RequestedOptimizerScheduleProfileDataWriter::write_w_timestamp( const RequestedOptimizerScheduleProfile * instance_data, 
                                      const InstanceHandle_t  h, 
                                      const Time_t  source_timestamp)
{
  return DataWriter::write_w_timestamp( instance_data, h, source_timestamp );
}


/*****************************************************************/

ReturnCode_t 
RequestedOptimizerScheduleProfileDataWriter::write( const RequestedOptimizerScheduleProfile * instance_data, 
                          const InstanceHandle_t  h)
{
  return DataWriter::write( instance_data, h );
}


/*****************************************************************/

ReturnCode_t 
RequestedOptimizerScheduleProfileDataWriter::dispose_w_timestamp( const RequestedOptimizerScheduleProfile * instance_data, 
                                        const InstanceHandle_t  h, 
                                        const Time_t  source_timestamp)
{
  return DataWriter::dispose_w_timestamp( instance_data, h, source_timestamp );
}


/*****************************************************************/

ReturnCode_t 
RequestedOptimizerScheduleProfileDataWriter::dispose( const RequestedOptimizerScheduleProfile * instance_data, 
                            const InstanceHandle_t  instance_handle )
{
  return DataWriter::dispose(instance_data, instance_handle );
}


/*****************************************************************/

ReturnCode_t 
RequestedOptimizerScheduleProfileDataWriter::get_key_value( RequestedOptimizerScheduleProfile * key_holder, 
                                  const InstanceHandle_t  handle)
{
  if ( ! key_holder )
      return RETCODE_BAD_PARAMETER;

  /* No keys: no op */
  CDX_UNUSED(handle);
  key_holder->clear();
  return DDS::RETCODE_OK;
}


/*****************************************************************/
/* openfmb::optimizermodule:: */
InstanceHandle_t 
RequestedOptimizerScheduleProfileDataWriter::lookup_instance( const RequestedOptimizerScheduleProfile * instance_data )
{
  if ( ! instance_data )
      return HANDLE_NIL;

  /* No keys */
  return DDS::HANDLE_DEFAULT;
}


}  /* namespace optimizermodule */
/* END SCOPE: optimizermodule */
/* START SCOPE: reclosermodule */

namespace reclosermodule {


}  /* namespace reclosermodule */
/* END SCOPE: reclosermodule */
/* START SCOPE: switchmodule */

namespace switchmodule {


/******************************************************************
 * openfmb::switchmodule:: DataWriter Ops
 *****************************************************************/

/*****************************************************************/
SwitchControlXSWIDataWriter::SwitchControlXSWIDataWriter()
{
}

/*****************************************************************/
InstanceHandle_t 
SwitchControlXSWIDataWriter::register_instance_w_timestamp( const SwitchControlXSWI *  instance_data,
                                               const Time_t  source_timestamp)
{

  return DataWriter::register_instance_w_timestamp( instance_data, source_timestamp );
}

/*****************************************************************/
 /* openfmb::switchmodule:: */
InstanceHandle_t 
SwitchControlXSWIDataWriter::register_instance(const SwitchControlXSWI *  instance_data) 
{
  return DataWriter::register_instance( instance_data );
}


/*****************************************************************/

ReturnCode_t 
SwitchControlXSWIDataWriter::unregister_instance_w_timestamp( const SwitchControlXSWI * instance_data, 
                                                    const InstanceHandle_t  handle,
                                                    const Time_t  source_timestamp)
{
  return DataWriter::unregister_instance_w_timestamp( instance_data,
                                                      handle,
                                                      source_timestamp );
}


/*****************************************************************/

ReturnCode_t 
SwitchControlXSWIDataWriter::unregister_instance( const SwitchControlXSWI * instance_data, 
                                        const InstanceHandle_t  handle)
{
  return DataWriter::unregister_instance( instance_data, handle );
}


/*****************************************************************/

ReturnCode_t 
SwitchControlXSWIDataWriter::write_w_timestamp( const SwitchControlXSWI * instance_data, 
                                      const InstanceHandle_t  h, 
                                      const Time_t  source_timestamp)
{
  return DataWriter::write_w_timestamp( instance_data, h, source_timestamp );
}


/*****************************************************************/

ReturnCode_t 
SwitchControlXSWIDataWriter::write( const SwitchControlXSWI * instance_data, 
                          const InstanceHandle_t  h)
{
  return DataWriter::write( instance_data, h );
}


/*****************************************************************/

ReturnCode_t 
SwitchControlXSWIDataWriter::dispose_w_timestamp( const SwitchControlXSWI * instance_data, 
                                        const InstanceHandle_t  h, 
                                        const Time_t  source_timestamp)
{
  return DataWriter::dispose_w_timestamp( instance_data, h, source_timestamp );
}


/*****************************************************************/

ReturnCode_t 
SwitchControlXSWIDataWriter::dispose( const SwitchControlXSWI * instance_data, 
                            const InstanceHandle_t  instance_handle )
{
  return DataWriter::dispose(instance_data, instance_handle );
}


/*****************************************************************/

ReturnCode_t 
SwitchControlXSWIDataWriter::get_key_value( SwitchControlXSWI * key_holder, 
                                  const InstanceHandle_t  handle)
{
  if ( ! key_holder )
      return RETCODE_BAD_PARAMETER;

  /* No keys: no op */
  CDX_UNUSED(handle);
  key_holder->clear();
  return DDS::RETCODE_OK;
}


/*****************************************************************/
/* openfmb::switchmodule:: */
InstanceHandle_t 
SwitchControlXSWIDataWriter::lookup_instance( const SwitchControlXSWI * instance_data )
{
  if ( ! instance_data )
      return HANDLE_NIL;

  /* No keys */
  return DDS::HANDLE_DEFAULT;
}


}  /* namespace switchmodule */
/* END SCOPE: switchmodule */

}  /* namespace openfmb */
/* END SCOPE: openfmb */
/* START SCOPE: openfmb */

namespace openfmb {

/* START SCOPE: breakermodule */

namespace breakermodule {


}  /* namespace breakermodule */
/* END SCOPE: breakermodule */
/* START SCOPE: commonmodule */

namespace commonmodule {


}  /* namespace commonmodule */
/* END SCOPE: commonmodule */
/* START SCOPE: essmodule */

namespace essmodule {


/******************************************************************
 * openfmb::essmodule:: DataWriter Ops
 *****************************************************************/

/*****************************************************************/
EssEventZBATDataWriter::EssEventZBATDataWriter()
{
}

/*****************************************************************/
InstanceHandle_t 
EssEventZBATDataWriter::register_instance_w_timestamp( const EssEventZBAT *  instance_data,
                                               const Time_t  source_timestamp)
{

  return DataWriter::register_instance_w_timestamp( instance_data, source_timestamp );
}

/*****************************************************************/
 /* openfmb::essmodule:: */
InstanceHandle_t 
EssEventZBATDataWriter::register_instance(const EssEventZBAT *  instance_data) 
{
  return DataWriter::register_instance( instance_data );
}


/*****************************************************************/

ReturnCode_t 
EssEventZBATDataWriter::unregister_instance_w_timestamp( const EssEventZBAT * instance_data, 
                                                    const InstanceHandle_t  handle,
                                                    const Time_t  source_timestamp)
{
  return DataWriter::unregister_instance_w_timestamp( instance_data,
                                                      handle,
                                                      source_timestamp );
}


/*****************************************************************/

ReturnCode_t 
EssEventZBATDataWriter::unregister_instance( const EssEventZBAT * instance_data, 
                                        const InstanceHandle_t  handle)
{
  return DataWriter::unregister_instance( instance_data, handle );
}


/*****************************************************************/

ReturnCode_t 
EssEventZBATDataWriter::write_w_timestamp( const EssEventZBAT * instance_data, 
                                      const InstanceHandle_t  h, 
                                      const Time_t  source_timestamp)
{
  return DataWriter::write_w_timestamp( instance_data, h, source_timestamp );
}


/*****************************************************************/

ReturnCode_t 
EssEventZBATDataWriter::write( const EssEventZBAT * instance_data, 
                          const InstanceHandle_t  h)
{
  return DataWriter::write( instance_data, h );
}


/*****************************************************************/

ReturnCode_t 
EssEventZBATDataWriter::dispose_w_timestamp( const EssEventZBAT * instance_data, 
                                        const InstanceHandle_t  h, 
                                        const Time_t  source_timestamp)
{
  return DataWriter::dispose_w_timestamp( instance_data, h, source_timestamp );
}


/*****************************************************************/

ReturnCode_t 
EssEventZBATDataWriter::dispose( const EssEventZBAT * instance_data, 
                            const InstanceHandle_t  instance_handle )
{
  return DataWriter::dispose(instance_data, instance_handle );
}


/*****************************************************************/

ReturnCode_t 
EssEventZBATDataWriter::get_key_value( EssEventZBAT * key_holder, 
                                  const InstanceHandle_t  handle)
{
  if ( ! key_holder )
      return RETCODE_BAD_PARAMETER;

  /* No keys: no op */
  CDX_UNUSED(handle);
  key_holder->clear();
  return DDS::RETCODE_OK;
}


/*****************************************************************/
/* openfmb::essmodule:: */
InstanceHandle_t 
EssEventZBATDataWriter::lookup_instance( const EssEventZBAT * instance_data )
{
  if ( ! instance_data )
      return HANDLE_NIL;

  /* No keys */
  return DDS::HANDLE_DEFAULT;
}


/******************************************************************
 * openfmb::essmodule:: DataWriter Ops
 *****************************************************************/

/*****************************************************************/
EssStatusZBATDataWriter::EssStatusZBATDataWriter()
{
}

/*****************************************************************/
InstanceHandle_t 
EssStatusZBATDataWriter::register_instance_w_timestamp( const EssStatusZBAT *  instance_data,
                                               const Time_t  source_timestamp)
{

  return DataWriter::register_instance_w_timestamp( instance_data, source_timestamp );
}

/*****************************************************************/
 /* openfmb::essmodule:: */
InstanceHandle_t 
EssStatusZBATDataWriter::register_instance(const EssStatusZBAT *  instance_data) 
{
  return DataWriter::register_instance( instance_data );
}


/*****************************************************************/

ReturnCode_t 
EssStatusZBATDataWriter::unregister_instance_w_timestamp( const EssStatusZBAT * instance_data, 
                                                    const InstanceHandle_t  handle,
                                                    const Time_t  source_timestamp)
{
  return DataWriter::unregister_instance_w_timestamp( instance_data,
                                                      handle,
                                                      source_timestamp );
}


/*****************************************************************/

ReturnCode_t 
EssStatusZBATDataWriter::unregister_instance( const EssStatusZBAT * instance_data, 
                                        const InstanceHandle_t  handle)
{
  return DataWriter::unregister_instance( instance_data, handle );
}


/*****************************************************************/

ReturnCode_t 
EssStatusZBATDataWriter::write_w_timestamp( const EssStatusZBAT * instance_data, 
                                      const InstanceHandle_t  h, 
                                      const Time_t  source_timestamp)
{
  return DataWriter::write_w_timestamp( instance_data, h, source_timestamp );
}


/*****************************************************************/

ReturnCode_t 
EssStatusZBATDataWriter::write( const EssStatusZBAT * instance_data, 
                          const InstanceHandle_t  h)
{
  return DataWriter::write( instance_data, h );
}


/*****************************************************************/

ReturnCode_t 
EssStatusZBATDataWriter::dispose_w_timestamp( const EssStatusZBAT * instance_data, 
                                        const InstanceHandle_t  h, 
                                        const Time_t  source_timestamp)
{
  return DataWriter::dispose_w_timestamp( instance_data, h, source_timestamp );
}


/*****************************************************************/

ReturnCode_t 
EssStatusZBATDataWriter::dispose( const EssStatusZBAT * instance_data, 
                            const InstanceHandle_t  instance_handle )
{
  return DataWriter::dispose(instance_data, instance_handle );
}


/*****************************************************************/

ReturnCode_t 
EssStatusZBATDataWriter::get_key_value( EssStatusZBAT * key_holder, 
                                  const InstanceHandle_t  handle)
{
  if ( ! key_holder )
      return RETCODE_BAD_PARAMETER;

  /* No keys: no op */
  CDX_UNUSED(handle);
  key_holder->clear();
  return DDS::RETCODE_OK;
}


/*****************************************************************/
/* openfmb::essmodule:: */
InstanceHandle_t 
EssStatusZBATDataWriter::lookup_instance( const EssStatusZBAT * instance_data )
{
  if ( ! instance_data )
      return HANDLE_NIL;

  /* No keys */
  return DDS::HANDLE_DEFAULT;
}


}  /* namespace essmodule */
/* END SCOPE: essmodule */
/* START SCOPE: generationmodule */

namespace generationmodule {


/******************************************************************
 * openfmb::generationmodule:: DataWriter Ops
 *****************************************************************/

/*****************************************************************/
GenerationStatusProfileDataWriter::GenerationStatusProfileDataWriter()
{
}

/*****************************************************************/
InstanceHandle_t 
GenerationStatusProfileDataWriter::register_instance_w_timestamp( const GenerationStatusProfile *  instance_data,
                                               const Time_t  source_timestamp)
{

  return DataWriter::register_instance_w_timestamp( instance_data, source_timestamp );
}

/*****************************************************************/
 /* openfmb::generationmodule:: */
InstanceHandle_t 
GenerationStatusProfileDataWriter::register_instance(const GenerationStatusProfile *  instance_data) 
{
  return DataWriter::register_instance( instance_data );
}


/*****************************************************************/

ReturnCode_t 
GenerationStatusProfileDataWriter::unregister_instance_w_timestamp( const GenerationStatusProfile * instance_data, 
                                                    const InstanceHandle_t  handle,
                                                    const Time_t  source_timestamp)
{
  return DataWriter::unregister_instance_w_timestamp( instance_data,
                                                      handle,
                                                      source_timestamp );
}


/*****************************************************************/

ReturnCode_t 
GenerationStatusProfileDataWriter::unregister_instance( const GenerationStatusProfile * instance_data, 
                                        const InstanceHandle_t  handle)
{
  return DataWriter::unregister_instance( instance_data, handle );
}


/*****************************************************************/

ReturnCode_t 
GenerationStatusProfileDataWriter::write_w_timestamp( const GenerationStatusProfile * instance_data, 
                                      const InstanceHandle_t  h, 
                                      const Time_t  source_timestamp)
{
  return DataWriter::write_w_timestamp( instance_data, h, source_timestamp );
}


/*****************************************************************/

ReturnCode_t 
GenerationStatusProfileDataWriter::write( const GenerationStatusProfile * instance_data, 
                          const InstanceHandle_t  h)
{
  return DataWriter::write( instance_data, h );
}


/*****************************************************************/

ReturnCode_t 
GenerationStatusProfileDataWriter::dispose_w_timestamp( const GenerationStatusProfile * instance_data, 
                                        const InstanceHandle_t  h, 
                                        const Time_t  source_timestamp)
{
  return DataWriter::dispose_w_timestamp( instance_data, h, source_timestamp );
}


/*****************************************************************/

ReturnCode_t 
GenerationStatusProfileDataWriter::dispose( const GenerationStatusProfile * instance_data, 
                            const InstanceHandle_t  instance_handle )
{
  return DataWriter::dispose(instance_data, instance_handle );
}


/*****************************************************************/

ReturnCode_t 
GenerationStatusProfileDataWriter::get_key_value( GenerationStatusProfile * key_holder, 
                                  const InstanceHandle_t  handle)
{
  if ( ! key_holder )
      return RETCODE_BAD_PARAMETER;

  /* key: use DataWriter to get it */
  return DataWriter::get_key_value(  key_holder, handle );
}


/*****************************************************************/
/* openfmb::generationmodule:: */
InstanceHandle_t 
GenerationStatusProfileDataWriter::lookup_instance( const GenerationStatusProfile * instance_data )
{
  if ( ! instance_data )
      return HANDLE_NIL;

  /* Complex key: use DataWriter to find it */
  return DataWriter::lookup_instance(  instance_data );
}


}  /* namespace generationmodule */
/* END SCOPE: generationmodule */
/* START SCOPE: loadmodule */

namespace loadmodule {


/******************************************************************
 * openfmb::loadmodule:: DataWriter Ops
 *****************************************************************/

/*****************************************************************/
LoadStatusProfileDataWriter::LoadStatusProfileDataWriter()
{
}

/*****************************************************************/
InstanceHandle_t 
LoadStatusProfileDataWriter::register_instance_w_timestamp( const LoadStatusProfile *  instance_data,
                                               const Time_t  source_timestamp)
{

  return DataWriter::register_instance_w_timestamp( instance_data, source_timestamp );
}

/*****************************************************************/
 /* openfmb::loadmodule:: */
InstanceHandle_t 
LoadStatusProfileDataWriter::register_instance(const LoadStatusProfile *  instance_data) 
{
  return DataWriter::register_instance( instance_data );
}


/*****************************************************************/

ReturnCode_t 
LoadStatusProfileDataWriter::unregister_instance_w_timestamp( const LoadStatusProfile * instance_data, 
                                                    const InstanceHandle_t  handle,
                                                    const Time_t  source_timestamp)
{
  return DataWriter::unregister_instance_w_timestamp( instance_data,
                                                      handle,
                                                      source_timestamp );
}


/*****************************************************************/

ReturnCode_t 
LoadStatusProfileDataWriter::unregister_instance( const LoadStatusProfile * instance_data, 
                                        const InstanceHandle_t  handle)
{
  return DataWriter::unregister_instance( instance_data, handle );
}


/*****************************************************************/

ReturnCode_t 
LoadStatusProfileDataWriter::write_w_timestamp( const LoadStatusProfile * instance_data, 
                                      const InstanceHandle_t  h, 
                                      const Time_t  source_timestamp)
{
  return DataWriter::write_w_timestamp( instance_data, h, source_timestamp );
}


/*****************************************************************/

ReturnCode_t 
LoadStatusProfileDataWriter::write( const LoadStatusProfile * instance_data, 
                          const InstanceHandle_t  h)
{
  return DataWriter::write( instance_data, h );
}


/*****************************************************************/

ReturnCode_t 
LoadStatusProfileDataWriter::dispose_w_timestamp( const LoadStatusProfile * instance_data, 
                                        const InstanceHandle_t  h, 
                                        const Time_t  source_timestamp)
{
  return DataWriter::dispose_w_timestamp( instance_data, h, source_timestamp );
}


/*****************************************************************/

ReturnCode_t 
LoadStatusProfileDataWriter::dispose( const LoadStatusProfile * instance_data, 
                            const InstanceHandle_t  instance_handle )
{
  return DataWriter::dispose(instance_data, instance_handle );
}


/*****************************************************************/

ReturnCode_t 
LoadStatusProfileDataWriter::get_key_value( LoadStatusProfile * key_holder, 
                                  const InstanceHandle_t  handle)
{
  if ( ! key_holder )
      return RETCODE_BAD_PARAMETER;

  /* key: use DataWriter to get it */
  return DataWriter::get_key_value(  key_holder, handle );
}


/*****************************************************************/
/* openfmb::loadmodule:: */
InstanceHandle_t 
LoadStatusProfileDataWriter::lookup_instance( const LoadStatusProfile * instance_data )
{
  if ( ! instance_data )
      return HANDLE_NIL;

  /* Complex key: use DataWriter to find it */
  return DataWriter::lookup_instance(  instance_data );
}


}  /* namespace loadmodule */
/* END SCOPE: loadmodule */
/* START SCOPE: optimizermodule */

namespace optimizermodule {


/******************************************************************
 * openfmb::optimizermodule:: DataWriter Ops
 *****************************************************************/

/*****************************************************************/
PlannedOptimizerScheduleProfileDataWriter::PlannedOptimizerScheduleProfileDataWriter()
{
}

/*****************************************************************/
InstanceHandle_t 
PlannedOptimizerScheduleProfileDataWriter::register_instance_w_timestamp( const PlannedOptimizerScheduleProfile *  instance_data,
                                               const Time_t  source_timestamp)
{

  return DataWriter::register_instance_w_timestamp( instance_data, source_timestamp );
}

/*****************************************************************/
 /* openfmb::optimizermodule:: */
InstanceHandle_t 
PlannedOptimizerScheduleProfileDataWriter::register_instance(const PlannedOptimizerScheduleProfile *  instance_data) 
{
  return DataWriter::register_instance( instance_data );
}


/*****************************************************************/

ReturnCode_t 
PlannedOptimizerScheduleProfileDataWriter::unregister_instance_w_timestamp( const PlannedOptimizerScheduleProfile * instance_data, 
                                                    const InstanceHandle_t  handle,
                                                    const Time_t  source_timestamp)
{
  return DataWriter::unregister_instance_w_timestamp( instance_data,
                                                      handle,
                                                      source_timestamp );
}


/*****************************************************************/

ReturnCode_t 
PlannedOptimizerScheduleProfileDataWriter::unregister_instance( const PlannedOptimizerScheduleProfile * instance_data, 
                                        const InstanceHandle_t  handle)
{
  return DataWriter::unregister_instance( instance_data, handle );
}


/*****************************************************************/

ReturnCode_t 
PlannedOptimizerScheduleProfileDataWriter::write_w_timestamp( const PlannedOptimizerScheduleProfile * instance_data, 
                                      const InstanceHandle_t  h, 
                                      const Time_t  source_timestamp)
{
  return DataWriter::write_w_timestamp( instance_data, h, source_timestamp );
}


/*****************************************************************/

ReturnCode_t 
PlannedOptimizerScheduleProfileDataWriter::write( const PlannedOptimizerScheduleProfile * instance_data, 
                          const InstanceHandle_t  h)
{
  return DataWriter::write( instance_data, h );
}


/*****************************************************************/

ReturnCode_t 
PlannedOptimizerScheduleProfileDataWriter::dispose_w_timestamp( const PlannedOptimizerScheduleProfile * instance_data, 
                                        const InstanceHandle_t  h, 
                                        const Time_t  source_timestamp)
{
  return DataWriter::dispose_w_timestamp( instance_data, h, source_timestamp );
}


/*****************************************************************/

ReturnCode_t 
PlannedOptimizerScheduleProfileDataWriter::dispose( const PlannedOptimizerScheduleProfile * instance_data, 
                            const InstanceHandle_t  instance_handle )
{
  return DataWriter::dispose(instance_data, instance_handle );
}


/*****************************************************************/

ReturnCode_t 
PlannedOptimizerScheduleProfileDataWriter::get_key_value( PlannedOptimizerScheduleProfile * key_holder, 
                                  const InstanceHandle_t  handle)
{
  if ( ! key_holder )
      return RETCODE_BAD_PARAMETER;

  /* No keys: no op */
  CDX_UNUSED(handle);
  key_holder->clear();
  return DDS::RETCODE_OK;
}


/*****************************************************************/
/* openfmb::optimizermodule:: */
InstanceHandle_t 
PlannedOptimizerScheduleProfileDataWriter::lookup_instance( const PlannedOptimizerScheduleProfile * instance_data )
{
  if ( ! instance_data )
      return HANDLE_NIL;

  /* No keys */
  return DDS::HANDLE_DEFAULT;
}


}  /* namespace optimizermodule */
/* END SCOPE: optimizermodule */
/* START SCOPE: reclosermodule */

namespace reclosermodule {


}  /* namespace reclosermodule */
/* END SCOPE: reclosermodule */
/* START SCOPE: solarmodule */

namespace solarmodule {


/******************************************************************
 * openfmb::solarmodule:: DataWriter Ops
 *****************************************************************/

/*****************************************************************/
SolarEventZGENDataWriter::SolarEventZGENDataWriter()
{
}

/*****************************************************************/
InstanceHandle_t 
SolarEventZGENDataWriter::register_instance_w_timestamp( const SolarEventZGEN *  instance_data,
                                               const Time_t  source_timestamp)
{

  return DataWriter::register_instance_w_timestamp( instance_data, source_timestamp );
}

/*****************************************************************/
 /* openfmb::solarmodule:: */
InstanceHandle_t 
SolarEventZGENDataWriter::register_instance(const SolarEventZGEN *  instance_data) 
{
  return DataWriter::register_instance( instance_data );
}


/*****************************************************************/

ReturnCode_t 
SolarEventZGENDataWriter::unregister_instance_w_timestamp( const SolarEventZGEN * instance_data, 
                                                    const InstanceHandle_t  handle,
                                                    const Time_t  source_timestamp)
{
  return DataWriter::unregister_instance_w_timestamp( instance_data,
                                                      handle,
                                                      source_timestamp );
}


/*****************************************************************/

ReturnCode_t 
SolarEventZGENDataWriter::unregister_instance( const SolarEventZGEN * instance_data, 
                                        const InstanceHandle_t  handle)
{
  return DataWriter::unregister_instance( instance_data, handle );
}


/*****************************************************************/

ReturnCode_t 
SolarEventZGENDataWriter::write_w_timestamp( const SolarEventZGEN * instance_data, 
                                      const InstanceHandle_t  h, 
                                      const Time_t  source_timestamp)
{
  return DataWriter::write_w_timestamp( instance_data, h, source_timestamp );
}


/*****************************************************************/

ReturnCode_t 
SolarEventZGENDataWriter::write( const SolarEventZGEN * instance_data, 
                          const InstanceHandle_t  h)
{
  return DataWriter::write( instance_data, h );
}


/*****************************************************************/

ReturnCode_t 
SolarEventZGENDataWriter::dispose_w_timestamp( const SolarEventZGEN * instance_data, 
                                        const InstanceHandle_t  h, 
                                        const Time_t  source_timestamp)
{
  return DataWriter::dispose_w_timestamp( instance_data, h, source_timestamp );
}


/*****************************************************************/

ReturnCode_t 
SolarEventZGENDataWriter::dispose( const SolarEventZGEN * instance_data, 
                            const InstanceHandle_t  instance_handle )
{
  return DataWriter::dispose(instance_data, instance_handle );
}


/*****************************************************************/

ReturnCode_t 
SolarEventZGENDataWriter::get_key_value( SolarEventZGEN * key_holder, 
                                  const InstanceHandle_t  handle)
{
  if ( ! key_holder )
      return RETCODE_BAD_PARAMETER;

  /* No keys: no op */
  CDX_UNUSED(handle);
  key_holder->clear();
  return DDS::RETCODE_OK;
}


/*****************************************************************/
/* openfmb::solarmodule:: */
InstanceHandle_t 
SolarEventZGENDataWriter::lookup_instance( const SolarEventZGEN * instance_data )
{
  if ( ! instance_data )
      return HANDLE_NIL;

  /* No keys */
  return DDS::HANDLE_DEFAULT;
}


/******************************************************************
 * openfmb::solarmodule:: DataWriter Ops
 *****************************************************************/

/*****************************************************************/
SolarStatusZGENDataWriter::SolarStatusZGENDataWriter()
{
}

/*****************************************************************/
InstanceHandle_t 
SolarStatusZGENDataWriter::register_instance_w_timestamp( const SolarStatusZGEN *  instance_data,
                                               const Time_t  source_timestamp)
{

  return DataWriter::register_instance_w_timestamp( instance_data, source_timestamp );
}

/*****************************************************************/
 /* openfmb::solarmodule:: */
InstanceHandle_t 
SolarStatusZGENDataWriter::register_instance(const SolarStatusZGEN *  instance_data) 
{
  return DataWriter::register_instance( instance_data );
}


/*****************************************************************/

ReturnCode_t 
SolarStatusZGENDataWriter::unregister_instance_w_timestamp( const SolarStatusZGEN * instance_data, 
                                                    const InstanceHandle_t  handle,
                                                    const Time_t  source_timestamp)
{
  return DataWriter::unregister_instance_w_timestamp( instance_data,
                                                      handle,
                                                      source_timestamp );
}


/*****************************************************************/

ReturnCode_t 
SolarStatusZGENDataWriter::unregister_instance( const SolarStatusZGEN * instance_data, 
                                        const InstanceHandle_t  handle)
{
  return DataWriter::unregister_instance( instance_data, handle );
}


/*****************************************************************/

ReturnCode_t 
SolarStatusZGENDataWriter::write_w_timestamp( const SolarStatusZGEN * instance_data, 
                                      const InstanceHandle_t  h, 
                                      const Time_t  source_timestamp)
{
  return DataWriter::write_w_timestamp( instance_data, h, source_timestamp );
}


/*****************************************************************/

ReturnCode_t 
SolarStatusZGENDataWriter::write( const SolarStatusZGEN * instance_data, 
                          const InstanceHandle_t  h)
{
  return DataWriter::write( instance_data, h );
}


/*****************************************************************/

ReturnCode_t 
SolarStatusZGENDataWriter::dispose_w_timestamp( const SolarStatusZGEN * instance_data, 
                                        const InstanceHandle_t  h, 
                                        const Time_t  source_timestamp)
{
  return DataWriter::dispose_w_timestamp( instance_data, h, source_timestamp );
}


/*****************************************************************/

ReturnCode_t 
SolarStatusZGENDataWriter::dispose( const SolarStatusZGEN * instance_data, 
                            const InstanceHandle_t  instance_handle )
{
  return DataWriter::dispose(instance_data, instance_handle );
}


/*****************************************************************/

ReturnCode_t 
SolarStatusZGENDataWriter::get_key_value( SolarStatusZGEN * key_holder, 
                                  const InstanceHandle_t  handle)
{
  if ( ! key_holder )
      return RETCODE_BAD_PARAMETER;

  /* No keys: no op */
  CDX_UNUSED(handle);
  key_holder->clear();
  return DDS::RETCODE_OK;
}


/*****************************************************************/
/* openfmb::solarmodule:: */
InstanceHandle_t 
SolarStatusZGENDataWriter::lookup_instance( const SolarStatusZGEN * instance_data )
{
  if ( ! instance_data )
      return HANDLE_NIL;

  /* No keys */
  return DDS::HANDLE_DEFAULT;
}


}  /* namespace solarmodule */
/* END SCOPE: solarmodule */
/* START SCOPE: switchmodule */

namespace switchmodule {


}  /* namespace switchmodule */
/* END SCOPE: switchmodule */

}  /* namespace openfmb */
/* END SCOPE: openfmb */
/* START SCOPE: openfmb */

namespace openfmb {

/* START SCOPE: breakermodule */

namespace breakermodule {


}  /* namespace breakermodule */
/* END SCOPE: breakermodule */
/* START SCOPE: commonmodule */

namespace commonmodule {


}  /* namespace commonmodule */
/* END SCOPE: commonmodule */
/* START SCOPE: essmodule */

namespace essmodule {


/******************************************************************
 * openfmb::essmodule:: DataWriter Ops
 *****************************************************************/

/*****************************************************************/
ESSEventProfileDataWriter::ESSEventProfileDataWriter()
{
}

/*****************************************************************/
InstanceHandle_t 
ESSEventProfileDataWriter::register_instance_w_timestamp( const ESSEventProfile *  instance_data,
                                               const Time_t  source_timestamp)
{

  return DataWriter::register_instance_w_timestamp( instance_data, source_timestamp );
}

/*****************************************************************/
 /* openfmb::essmodule:: */
InstanceHandle_t 
ESSEventProfileDataWriter::register_instance(const ESSEventProfile *  instance_data) 
{
  return DataWriter::register_instance( instance_data );
}


/*****************************************************************/

ReturnCode_t 
ESSEventProfileDataWriter::unregister_instance_w_timestamp( const ESSEventProfile * instance_data, 
                                                    const InstanceHandle_t  handle,
                                                    const Time_t  source_timestamp)
{
  return DataWriter::unregister_instance_w_timestamp( instance_data,
                                                      handle,
                                                      source_timestamp );
}


/*****************************************************************/

ReturnCode_t 
ESSEventProfileDataWriter::unregister_instance( const ESSEventProfile * instance_data, 
                                        const InstanceHandle_t  handle)
{
  return DataWriter::unregister_instance( instance_data, handle );
}


/*****************************************************************/

ReturnCode_t 
ESSEventProfileDataWriter::write_w_timestamp( const ESSEventProfile * instance_data, 
                                      const InstanceHandle_t  h, 
                                      const Time_t  source_timestamp)
{
  return DataWriter::write_w_timestamp( instance_data, h, source_timestamp );
}


/*****************************************************************/

ReturnCode_t 
ESSEventProfileDataWriter::write( const ESSEventProfile * instance_data, 
                          const InstanceHandle_t  h)
{
  return DataWriter::write( instance_data, h );
}


/*****************************************************************/

ReturnCode_t 
ESSEventProfileDataWriter::dispose_w_timestamp( const ESSEventProfile * instance_data, 
                                        const InstanceHandle_t  h, 
                                        const Time_t  source_timestamp)
{
  return DataWriter::dispose_w_timestamp( instance_data, h, source_timestamp );
}


/*****************************************************************/

ReturnCode_t 
ESSEventProfileDataWriter::dispose( const ESSEventProfile * instance_data, 
                            const InstanceHandle_t  instance_handle )
{
  return DataWriter::dispose(instance_data, instance_handle );
}


/*****************************************************************/

ReturnCode_t 
ESSEventProfileDataWriter::get_key_value( ESSEventProfile * key_holder, 
                                  const InstanceHandle_t  handle)
{
  if ( ! key_holder )
      return RETCODE_BAD_PARAMETER;

  /* key: use DataWriter to get it */
  return DataWriter::get_key_value(  key_holder, handle );
}


/*****************************************************************/
/* openfmb::essmodule:: */
InstanceHandle_t 
ESSEventProfileDataWriter::lookup_instance( const ESSEventProfile * instance_data )
{
  if ( ! instance_data )
      return HANDLE_NIL;

  /* Complex key: use DataWriter to find it */
  return DataWriter::lookup_instance(  instance_data );
}


/******************************************************************
 * openfmb::essmodule:: DataWriter Ops
 *****************************************************************/

/*****************************************************************/
ESSReadingValueDataWriter::ESSReadingValueDataWriter()
{
}

/*****************************************************************/
InstanceHandle_t 
ESSReadingValueDataWriter::register_instance_w_timestamp( const ESSReadingValue *  instance_data,
                                               const Time_t  source_timestamp)
{

  return DataWriter::register_instance_w_timestamp( instance_data, source_timestamp );
}

/*****************************************************************/
 /* openfmb::essmodule:: */
InstanceHandle_t 
ESSReadingValueDataWriter::register_instance(const ESSReadingValue *  instance_data) 
{
  return DataWriter::register_instance( instance_data );
}


/*****************************************************************/

ReturnCode_t 
ESSReadingValueDataWriter::unregister_instance_w_timestamp( const ESSReadingValue * instance_data, 
                                                    const InstanceHandle_t  handle,
                                                    const Time_t  source_timestamp)
{
  return DataWriter::unregister_instance_w_timestamp( instance_data,
                                                      handle,
                                                      source_timestamp );
}


/*****************************************************************/

ReturnCode_t 
ESSReadingValueDataWriter::unregister_instance( const ESSReadingValue * instance_data, 
                                        const InstanceHandle_t  handle)
{
  return DataWriter::unregister_instance( instance_data, handle );
}


/*****************************************************************/

ReturnCode_t 
ESSReadingValueDataWriter::write_w_timestamp( const ESSReadingValue * instance_data, 
                                      const InstanceHandle_t  h, 
                                      const Time_t  source_timestamp)
{
  return DataWriter::write_w_timestamp( instance_data, h, source_timestamp );
}


/*****************************************************************/

ReturnCode_t 
ESSReadingValueDataWriter::write( const ESSReadingValue * instance_data, 
                          const InstanceHandle_t  h)
{
  return DataWriter::write( instance_data, h );
}


/*****************************************************************/

ReturnCode_t 
ESSReadingValueDataWriter::dispose_w_timestamp( const ESSReadingValue * instance_data, 
                                        const InstanceHandle_t  h, 
                                        const Time_t  source_timestamp)
{
  return DataWriter::dispose_w_timestamp( instance_data, h, source_timestamp );
}


/*****************************************************************/

ReturnCode_t 
ESSReadingValueDataWriter::dispose( const ESSReadingValue * instance_data, 
                            const InstanceHandle_t  instance_handle )
{
  return DataWriter::dispose(instance_data, instance_handle );
}


/*****************************************************************/

ReturnCode_t 
ESSReadingValueDataWriter::get_key_value( ESSReadingValue * key_holder, 
                                  const InstanceHandle_t  handle)
{
  if ( ! key_holder )
      return RETCODE_BAD_PARAMETER;

  /* No keys: no op */
  CDX_UNUSED(handle);
  key_holder->clear();
  return DDS::RETCODE_OK;
}


/*****************************************************************/
/* openfmb::essmodule:: */
InstanceHandle_t 
ESSReadingValueDataWriter::lookup_instance( const ESSReadingValue * instance_data )
{
  if ( ! instance_data )
      return HANDLE_NIL;

  /* No keys */
  return DDS::HANDLE_DEFAULT;
}


/******************************************************************
 * openfmb::essmodule:: DataWriter Ops
 *****************************************************************/

/*****************************************************************/
ESSStatusProfileDataWriter::ESSStatusProfileDataWriter()
{
}

/*****************************************************************/
InstanceHandle_t 
ESSStatusProfileDataWriter::register_instance_w_timestamp( const ESSStatusProfile *  instance_data,
                                               const Time_t  source_timestamp)
{

  return DataWriter::register_instance_w_timestamp( instance_data, source_timestamp );
}

/*****************************************************************/
 /* openfmb::essmodule:: */
InstanceHandle_t 
ESSStatusProfileDataWriter::register_instance(const ESSStatusProfile *  instance_data) 
{
  return DataWriter::register_instance( instance_data );
}


/*****************************************************************/

ReturnCode_t 
ESSStatusProfileDataWriter::unregister_instance_w_timestamp( const ESSStatusProfile * instance_data, 
                                                    const InstanceHandle_t  handle,
                                                    const Time_t  source_timestamp)
{
  return DataWriter::unregister_instance_w_timestamp( instance_data,
                                                      handle,
                                                      source_timestamp );
}


/*****************************************************************/

ReturnCode_t 
ESSStatusProfileDataWriter::unregister_instance( const ESSStatusProfile * instance_data, 
                                        const InstanceHandle_t  handle)
{
  return DataWriter::unregister_instance( instance_data, handle );
}


/*****************************************************************/

ReturnCode_t 
ESSStatusProfileDataWriter::write_w_timestamp( const ESSStatusProfile * instance_data, 
                                      const InstanceHandle_t  h, 
                                      const Time_t  source_timestamp)
{
  return DataWriter::write_w_timestamp( instance_data, h, source_timestamp );
}


/*****************************************************************/

ReturnCode_t 
ESSStatusProfileDataWriter::write( const ESSStatusProfile * instance_data, 
                          const InstanceHandle_t  h)
{
  return DataWriter::write( instance_data, h );
}


/*****************************************************************/

ReturnCode_t 
ESSStatusProfileDataWriter::dispose_w_timestamp( const ESSStatusProfile * instance_data, 
                                        const InstanceHandle_t  h, 
                                        const Time_t  source_timestamp)
{
  return DataWriter::dispose_w_timestamp( instance_data, h, source_timestamp );
}


/*****************************************************************/

ReturnCode_t 
ESSStatusProfileDataWriter::dispose( const ESSStatusProfile * instance_data, 
                            const InstanceHandle_t  instance_handle )
{
  return DataWriter::dispose(instance_data, instance_handle );
}


/*****************************************************************/

ReturnCode_t 
ESSStatusProfileDataWriter::get_key_value( ESSStatusProfile * key_holder, 
                                  const InstanceHandle_t  handle)
{
  if ( ! key_holder )
      return RETCODE_BAD_PARAMETER;

  /* key: use DataWriter to get it */
  return DataWriter::get_key_value(  key_holder, handle );
}


/*****************************************************************/
/* openfmb::essmodule:: */
InstanceHandle_t 
ESSStatusProfileDataWriter::lookup_instance( const ESSStatusProfile * instance_data )
{
  if ( ! instance_data )
      return HANDLE_NIL;

  /* Complex key: use DataWriter to find it */
  return DataWriter::lookup_instance(  instance_data );
}


}  /* namespace essmodule */
/* END SCOPE: essmodule */
/* START SCOPE: generationmodule */

namespace generationmodule {


/******************************************************************
 * openfmb::generationmodule:: DataWriter Ops
 *****************************************************************/

/*****************************************************************/
GenerationReadingValueDataWriter::GenerationReadingValueDataWriter()
{
}

/*****************************************************************/
InstanceHandle_t 
GenerationReadingValueDataWriter::register_instance_w_timestamp( const GenerationReadingValue *  instance_data,
                                               const Time_t  source_timestamp)
{

  return DataWriter::register_instance_w_timestamp( instance_data, source_timestamp );
}

/*****************************************************************/
 /* openfmb::generationmodule:: */
InstanceHandle_t 
GenerationReadingValueDataWriter::register_instance(const GenerationReadingValue *  instance_data) 
{
  return DataWriter::register_instance( instance_data );
}


/*****************************************************************/

ReturnCode_t 
GenerationReadingValueDataWriter::unregister_instance_w_timestamp( const GenerationReadingValue * instance_data, 
                                                    const InstanceHandle_t  handle,
                                                    const Time_t  source_timestamp)
{
  return DataWriter::unregister_instance_w_timestamp( instance_data,
                                                      handle,
                                                      source_timestamp );
}


/*****************************************************************/

ReturnCode_t 
GenerationReadingValueDataWriter::unregister_instance( const GenerationReadingValue * instance_data, 
                                        const InstanceHandle_t  handle)
{
  return DataWriter::unregister_instance( instance_data, handle );
}


/*****************************************************************/

ReturnCode_t 
GenerationReadingValueDataWriter::write_w_timestamp( const GenerationReadingValue * instance_data, 
                                      const InstanceHandle_t  h, 
                                      const Time_t  source_timestamp)
{
  return DataWriter::write_w_timestamp( instance_data, h, source_timestamp );
}


/*****************************************************************/

ReturnCode_t 
GenerationReadingValueDataWriter::write( const GenerationReadingValue * instance_data, 
                          const InstanceHandle_t  h)
{
  return DataWriter::write( instance_data, h );
}


/*****************************************************************/

ReturnCode_t 
GenerationReadingValueDataWriter::dispose_w_timestamp( const GenerationReadingValue * instance_data, 
                                        const InstanceHandle_t  h, 
                                        const Time_t  source_timestamp)
{
  return DataWriter::dispose_w_timestamp( instance_data, h, source_timestamp );
}


/*****************************************************************/

ReturnCode_t 
GenerationReadingValueDataWriter::dispose( const GenerationReadingValue * instance_data, 
                            const InstanceHandle_t  instance_handle )
{
  return DataWriter::dispose(instance_data, instance_handle );
}


/*****************************************************************/

ReturnCode_t 
GenerationReadingValueDataWriter::get_key_value( GenerationReadingValue * key_holder, 
                                  const InstanceHandle_t  handle)
{
  if ( ! key_holder )
      return RETCODE_BAD_PARAMETER;

  /* No keys: no op */
  CDX_UNUSED(handle);
  key_holder->clear();
  return DDS::RETCODE_OK;
}


/*****************************************************************/
/* openfmb::generationmodule:: */
InstanceHandle_t 
GenerationReadingValueDataWriter::lookup_instance( const GenerationReadingValue * instance_data )
{
  if ( ! instance_data )
      return HANDLE_NIL;

  /* No keys */
  return DDS::HANDLE_DEFAULT;
}


/******************************************************************
 * openfmb::generationmodule:: DataWriter Ops
 *****************************************************************/

/*****************************************************************/
GenerationReadingProfileDataWriter::GenerationReadingProfileDataWriter()
{
}

/*****************************************************************/
InstanceHandle_t 
GenerationReadingProfileDataWriter::register_instance_w_timestamp( const GenerationReadingProfile *  instance_data,
                                               const Time_t  source_timestamp)
{

  return DataWriter::register_instance_w_timestamp( instance_data, source_timestamp );
}

/*****************************************************************/
 /* openfmb::generationmodule:: */
InstanceHandle_t 
GenerationReadingProfileDataWriter::register_instance(const GenerationReadingProfile *  instance_data) 
{
  return DataWriter::register_instance( instance_data );
}


/*****************************************************************/

ReturnCode_t 
GenerationReadingProfileDataWriter::unregister_instance_w_timestamp( const GenerationReadingProfile * instance_data, 
                                                    const InstanceHandle_t  handle,
                                                    const Time_t  source_timestamp)
{
  return DataWriter::unregister_instance_w_timestamp( instance_data,
                                                      handle,
                                                      source_timestamp );
}


/*****************************************************************/

ReturnCode_t 
GenerationReadingProfileDataWriter::unregister_instance( const GenerationReadingProfile * instance_data, 
                                        const InstanceHandle_t  handle)
{
  return DataWriter::unregister_instance( instance_data, handle );
}


/*****************************************************************/

ReturnCode_t 
GenerationReadingProfileDataWriter::write_w_timestamp( const GenerationReadingProfile * instance_data, 
                                      const InstanceHandle_t  h, 
                                      const Time_t  source_timestamp)
{
  return DataWriter::write_w_timestamp( instance_data, h, source_timestamp );
}


/*****************************************************************/

ReturnCode_t 
GenerationReadingProfileDataWriter::write( const GenerationReadingProfile * instance_data, 
                          const InstanceHandle_t  h)
{
  return DataWriter::write( instance_data, h );
}


/*****************************************************************/

ReturnCode_t 
GenerationReadingProfileDataWriter::dispose_w_timestamp( const GenerationReadingProfile * instance_data, 
                                        const InstanceHandle_t  h, 
                                        const Time_t  source_timestamp)
{
  return DataWriter::dispose_w_timestamp( instance_data, h, source_timestamp );
}


/*****************************************************************/

ReturnCode_t 
GenerationReadingProfileDataWriter::dispose( const GenerationReadingProfile * instance_data, 
                            const InstanceHandle_t  instance_handle )
{
  return DataWriter::dispose(instance_data, instance_handle );
}


/*****************************************************************/

ReturnCode_t 
GenerationReadingProfileDataWriter::get_key_value( GenerationReadingProfile * key_holder, 
                                  const InstanceHandle_t  handle)
{
  if ( ! key_holder )
      return RETCODE_BAD_PARAMETER;

  /* key: use DataWriter to get it */
  return DataWriter::get_key_value(  key_holder, handle );
}


/*****************************************************************/
/* openfmb::generationmodule:: */
InstanceHandle_t 
GenerationReadingProfileDataWriter::lookup_instance( const GenerationReadingProfile * instance_data )
{
  if ( ! instance_data )
      return HANDLE_NIL;

  /* Complex key: use DataWriter to find it */
  return DataWriter::lookup_instance(  instance_data );
}


/******************************************************************
 * openfmb::generationmodule:: DataWriter Ops
 *****************************************************************/

/*****************************************************************/
GenerationEventProfileDataWriter::GenerationEventProfileDataWriter()
{
}

/*****************************************************************/
InstanceHandle_t 
GenerationEventProfileDataWriter::register_instance_w_timestamp( const GenerationEventProfile *  instance_data,
                                               const Time_t  source_timestamp)
{

  return DataWriter::register_instance_w_timestamp( instance_data, source_timestamp );
}

/*****************************************************************/
 /* openfmb::generationmodule:: */
InstanceHandle_t 
GenerationEventProfileDataWriter::register_instance(const GenerationEventProfile *  instance_data) 
{
  return DataWriter::register_instance( instance_data );
}


/*****************************************************************/

ReturnCode_t 
GenerationEventProfileDataWriter::unregister_instance_w_timestamp( const GenerationEventProfile * instance_data, 
                                                    const InstanceHandle_t  handle,
                                                    const Time_t  source_timestamp)
{
  return DataWriter::unregister_instance_w_timestamp( instance_data,
                                                      handle,
                                                      source_timestamp );
}


/*****************************************************************/

ReturnCode_t 
GenerationEventProfileDataWriter::unregister_instance( const GenerationEventProfile * instance_data, 
                                        const InstanceHandle_t  handle)
{
  return DataWriter::unregister_instance( instance_data, handle );
}


/*****************************************************************/

ReturnCode_t 
GenerationEventProfileDataWriter::write_w_timestamp( const GenerationEventProfile * instance_data, 
                                      const InstanceHandle_t  h, 
                                      const Time_t  source_timestamp)
{
  return DataWriter::write_w_timestamp( instance_data, h, source_timestamp );
}


/*****************************************************************/

ReturnCode_t 
GenerationEventProfileDataWriter::write( const GenerationEventProfile * instance_data, 
                          const InstanceHandle_t  h)
{
  return DataWriter::write( instance_data, h );
}


/*****************************************************************/

ReturnCode_t 
GenerationEventProfileDataWriter::dispose_w_timestamp( const GenerationEventProfile * instance_data, 
                                        const InstanceHandle_t  h, 
                                        const Time_t  source_timestamp)
{
  return DataWriter::dispose_w_timestamp( instance_data, h, source_timestamp );
}


/*****************************************************************/

ReturnCode_t 
GenerationEventProfileDataWriter::dispose( const GenerationEventProfile * instance_data, 
                            const InstanceHandle_t  instance_handle )
{
  return DataWriter::dispose(instance_data, instance_handle );
}


/*****************************************************************/

ReturnCode_t 
GenerationEventProfileDataWriter::get_key_value( GenerationEventProfile * key_holder, 
                                  const InstanceHandle_t  handle)
{
  if ( ! key_holder )
      return RETCODE_BAD_PARAMETER;

  /* key: use DataWriter to get it */
  return DataWriter::get_key_value(  key_holder, handle );
}


/*****************************************************************/
/* openfmb::generationmodule:: */
InstanceHandle_t 
GenerationEventProfileDataWriter::lookup_instance( const GenerationEventProfile * instance_data )
{
  if ( ! instance_data )
      return HANDLE_NIL;

  /* Complex key: use DataWriter to find it */
  return DataWriter::lookup_instance(  instance_data );
}


}  /* namespace generationmodule */
/* END SCOPE: generationmodule */
/* START SCOPE: loadmodule */

namespace loadmodule {


/******************************************************************
 * openfmb::loadmodule:: DataWriter Ops
 *****************************************************************/

/*****************************************************************/
LoadEventProfileDataWriter::LoadEventProfileDataWriter()
{
}

/*****************************************************************/
InstanceHandle_t 
LoadEventProfileDataWriter::register_instance_w_timestamp( const LoadEventProfile *  instance_data,
                                               const Time_t  source_timestamp)
{

  return DataWriter::register_instance_w_timestamp( instance_data, source_timestamp );
}

/*****************************************************************/
 /* openfmb::loadmodule:: */
InstanceHandle_t 
LoadEventProfileDataWriter::register_instance(const LoadEventProfile *  instance_data) 
{
  return DataWriter::register_instance( instance_data );
}


/*****************************************************************/

ReturnCode_t 
LoadEventProfileDataWriter::unregister_instance_w_timestamp( const LoadEventProfile * instance_data, 
                                                    const InstanceHandle_t  handle,
                                                    const Time_t  source_timestamp)
{
  return DataWriter::unregister_instance_w_timestamp( instance_data,
                                                      handle,
                                                      source_timestamp );
}


/*****************************************************************/

ReturnCode_t 
LoadEventProfileDataWriter::unregister_instance( const LoadEventProfile * instance_data, 
                                        const InstanceHandle_t  handle)
{
  return DataWriter::unregister_instance( instance_data, handle );
}


/*****************************************************************/

ReturnCode_t 
LoadEventProfileDataWriter::write_w_timestamp( const LoadEventProfile * instance_data, 
                                      const InstanceHandle_t  h, 
                                      const Time_t  source_timestamp)
{
  return DataWriter::write_w_timestamp( instance_data, h, source_timestamp );
}


/*****************************************************************/

ReturnCode_t 
LoadEventProfileDataWriter::write( const LoadEventProfile * instance_data, 
                          const InstanceHandle_t  h)
{
  return DataWriter::write( instance_data, h );
}


/*****************************************************************/

ReturnCode_t 
LoadEventProfileDataWriter::dispose_w_timestamp( const LoadEventProfile * instance_data, 
                                        const InstanceHandle_t  h, 
                                        const Time_t  source_timestamp)
{
  return DataWriter::dispose_w_timestamp( instance_data, h, source_timestamp );
}


/*****************************************************************/

ReturnCode_t 
LoadEventProfileDataWriter::dispose( const LoadEventProfile * instance_data, 
                            const InstanceHandle_t  instance_handle )
{
  return DataWriter::dispose(instance_data, instance_handle );
}


/*****************************************************************/

ReturnCode_t 
LoadEventProfileDataWriter::get_key_value( LoadEventProfile * key_holder, 
                                  const InstanceHandle_t  handle)
{
  if ( ! key_holder )
      return RETCODE_BAD_PARAMETER;

  /* key: use DataWriter to get it */
  return DataWriter::get_key_value(  key_holder, handle );
}


/*****************************************************************/
/* openfmb::loadmodule:: */
InstanceHandle_t 
LoadEventProfileDataWriter::lookup_instance( const LoadEventProfile * instance_data )
{
  if ( ! instance_data )
      return HANDLE_NIL;

  /* Complex key: use DataWriter to find it */
  return DataWriter::lookup_instance(  instance_data );
}


/******************************************************************
 * openfmb::loadmodule:: DataWriter Ops
 *****************************************************************/

/*****************************************************************/
LoadReadingValueDataWriter::LoadReadingValueDataWriter()
{
}

/*****************************************************************/
InstanceHandle_t 
LoadReadingValueDataWriter::register_instance_w_timestamp( const LoadReadingValue *  instance_data,
                                               const Time_t  source_timestamp)
{

  return DataWriter::register_instance_w_timestamp( instance_data, source_timestamp );
}

/*****************************************************************/
 /* openfmb::loadmodule:: */
InstanceHandle_t 
LoadReadingValueDataWriter::register_instance(const LoadReadingValue *  instance_data) 
{
  return DataWriter::register_instance( instance_data );
}


/*****************************************************************/

ReturnCode_t 
LoadReadingValueDataWriter::unregister_instance_w_timestamp( const LoadReadingValue * instance_data, 
                                                    const InstanceHandle_t  handle,
                                                    const Time_t  source_timestamp)
{
  return DataWriter::unregister_instance_w_timestamp( instance_data,
                                                      handle,
                                                      source_timestamp );
}


/*****************************************************************/

ReturnCode_t 
LoadReadingValueDataWriter::unregister_instance( const LoadReadingValue * instance_data, 
                                        const InstanceHandle_t  handle)
{
  return DataWriter::unregister_instance( instance_data, handle );
}


/*****************************************************************/

ReturnCode_t 
LoadReadingValueDataWriter::write_w_timestamp( const LoadReadingValue * instance_data, 
                                      const InstanceHandle_t  h, 
                                      const Time_t  source_timestamp)
{
  return DataWriter::write_w_timestamp( instance_data, h, source_timestamp );
}


/*****************************************************************/

ReturnCode_t 
LoadReadingValueDataWriter::write( const LoadReadingValue * instance_data, 
                          const InstanceHandle_t  h)
{
  return DataWriter::write( instance_data, h );
}


/*****************************************************************/

ReturnCode_t 
LoadReadingValueDataWriter::dispose_w_timestamp( const LoadReadingValue * instance_data, 
                                        const InstanceHandle_t  h, 
                                        const Time_t  source_timestamp)
{
  return DataWriter::dispose_w_timestamp( instance_data, h, source_timestamp );
}


/*****************************************************************/

ReturnCode_t 
LoadReadingValueDataWriter::dispose( const LoadReadingValue * instance_data, 
                            const InstanceHandle_t  instance_handle )
{
  return DataWriter::dispose(instance_data, instance_handle );
}


/*****************************************************************/

ReturnCode_t 
LoadReadingValueDataWriter::get_key_value( LoadReadingValue * key_holder, 
                                  const InstanceHandle_t  handle)
{
  if ( ! key_holder )
      return RETCODE_BAD_PARAMETER;

  /* No keys: no op */
  CDX_UNUSED(handle);
  key_holder->clear();
  return DDS::RETCODE_OK;
}


/*****************************************************************/
/* openfmb::loadmodule:: */
InstanceHandle_t 
LoadReadingValueDataWriter::lookup_instance( const LoadReadingValue * instance_data )
{
  if ( ! instance_data )
      return HANDLE_NIL;

  /* No keys */
  return DDS::HANDLE_DEFAULT;
}


}  /* namespace loadmodule */
/* END SCOPE: loadmodule */
/* START SCOPE: reclosermodule */

namespace reclosermodule {


/******************************************************************
 * openfmb::reclosermodule:: DataWriter Ops
 *****************************************************************/

/*****************************************************************/
RecloserControlProfileDataWriter::RecloserControlProfileDataWriter()
{
}

/*****************************************************************/
InstanceHandle_t 
RecloserControlProfileDataWriter::register_instance_w_timestamp( const RecloserControlProfile *  instance_data,
                                               const Time_t  source_timestamp)
{

  return DataWriter::register_instance_w_timestamp( instance_data, source_timestamp );
}

/*****************************************************************/
 /* openfmb::reclosermodule:: */
InstanceHandle_t 
RecloserControlProfileDataWriter::register_instance(const RecloserControlProfile *  instance_data) 
{
  return DataWriter::register_instance( instance_data );
}


/*****************************************************************/

ReturnCode_t 
RecloserControlProfileDataWriter::unregister_instance_w_timestamp( const RecloserControlProfile * instance_data, 
                                                    const InstanceHandle_t  handle,
                                                    const Time_t  source_timestamp)
{
  return DataWriter::unregister_instance_w_timestamp( instance_data,
                                                      handle,
                                                      source_timestamp );
}


/*****************************************************************/

ReturnCode_t 
RecloserControlProfileDataWriter::unregister_instance( const RecloserControlProfile * instance_data, 
                                        const InstanceHandle_t  handle)
{
  return DataWriter::unregister_instance( instance_data, handle );
}


/*****************************************************************/

ReturnCode_t 
RecloserControlProfileDataWriter::write_w_timestamp( const RecloserControlProfile * instance_data, 
                                      const InstanceHandle_t  h, 
                                      const Time_t  source_timestamp)
{
  return DataWriter::write_w_timestamp( instance_data, h, source_timestamp );
}


/*****************************************************************/

ReturnCode_t 
RecloserControlProfileDataWriter::write( const RecloserControlProfile * instance_data, 
                          const InstanceHandle_t  h)
{
  return DataWriter::write( instance_data, h );
}


/*****************************************************************/

ReturnCode_t 
RecloserControlProfileDataWriter::dispose_w_timestamp( const RecloserControlProfile * instance_data, 
                                        const InstanceHandle_t  h, 
                                        const Time_t  source_timestamp)
{
  return DataWriter::dispose_w_timestamp( instance_data, h, source_timestamp );
}


/*****************************************************************/

ReturnCode_t 
RecloserControlProfileDataWriter::dispose( const RecloserControlProfile * instance_data, 
                            const InstanceHandle_t  instance_handle )
{
  return DataWriter::dispose(instance_data, instance_handle );
}


/*****************************************************************/

ReturnCode_t 
RecloserControlProfileDataWriter::get_key_value( RecloserControlProfile * key_holder, 
                                  const InstanceHandle_t  handle)
{
  if ( ! key_holder )
      return RETCODE_BAD_PARAMETER;

  /* key: use DataWriter to get it */
  return DataWriter::get_key_value(  key_holder, handle );
}


/*****************************************************************/
/* openfmb::reclosermodule:: */
InstanceHandle_t 
RecloserControlProfileDataWriter::lookup_instance( const RecloserControlProfile * instance_data )
{
  if ( ! instance_data )
      return HANDLE_NIL;

  /* Complex key: use DataWriter to find it */
  return DataWriter::lookup_instance(  instance_data );
}


/******************************************************************
 * openfmb::reclosermodule:: DataWriter Ops
 *****************************************************************/

/*****************************************************************/
RecloserEventProfileDataWriter::RecloserEventProfileDataWriter()
{
}

/*****************************************************************/
InstanceHandle_t 
RecloserEventProfileDataWriter::register_instance_w_timestamp( const RecloserEventProfile *  instance_data,
                                               const Time_t  source_timestamp)
{

  return DataWriter::register_instance_w_timestamp( instance_data, source_timestamp );
}

/*****************************************************************/
 /* openfmb::reclosermodule:: */
InstanceHandle_t 
RecloserEventProfileDataWriter::register_instance(const RecloserEventProfile *  instance_data) 
{
  return DataWriter::register_instance( instance_data );
}


/*****************************************************************/

ReturnCode_t 
RecloserEventProfileDataWriter::unregister_instance_w_timestamp( const RecloserEventProfile * instance_data, 
                                                    const InstanceHandle_t  handle,
                                                    const Time_t  source_timestamp)
{
  return DataWriter::unregister_instance_w_timestamp( instance_data,
                                                      handle,
                                                      source_timestamp );
}


/*****************************************************************/

ReturnCode_t 
RecloserEventProfileDataWriter::unregister_instance( const RecloserEventProfile * instance_data, 
                                        const InstanceHandle_t  handle)
{
  return DataWriter::unregister_instance( instance_data, handle );
}


/*****************************************************************/

ReturnCode_t 
RecloserEventProfileDataWriter::write_w_timestamp( const RecloserEventProfile * instance_data, 
                                      const InstanceHandle_t  h, 
                                      const Time_t  source_timestamp)
{
  return DataWriter::write_w_timestamp( instance_data, h, source_timestamp );
}


/*****************************************************************/

ReturnCode_t 
RecloserEventProfileDataWriter::write( const RecloserEventProfile * instance_data, 
                          const InstanceHandle_t  h)
{
  return DataWriter::write( instance_data, h );
}


/*****************************************************************/

ReturnCode_t 
RecloserEventProfileDataWriter::dispose_w_timestamp( const RecloserEventProfile * instance_data, 
                                        const InstanceHandle_t  h, 
                                        const Time_t  source_timestamp)
{
  return DataWriter::dispose_w_timestamp( instance_data, h, source_timestamp );
}


/*****************************************************************/

ReturnCode_t 
RecloserEventProfileDataWriter::dispose( const RecloserEventProfile * instance_data, 
                            const InstanceHandle_t  instance_handle )
{
  return DataWriter::dispose(instance_data, instance_handle );
}


/*****************************************************************/

ReturnCode_t 
RecloserEventProfileDataWriter::get_key_value( RecloserEventProfile * key_holder, 
                                  const InstanceHandle_t  handle)
{
  if ( ! key_holder )
      return RETCODE_BAD_PARAMETER;

  /* key: use DataWriter to get it */
  return DataWriter::get_key_value(  key_holder, handle );
}


/*****************************************************************/
/* openfmb::reclosermodule:: */
InstanceHandle_t 
RecloserEventProfileDataWriter::lookup_instance( const RecloserEventProfile * instance_data )
{
  if ( ! instance_data )
      return HANDLE_NIL;

  /* Complex key: use DataWriter to find it */
  return DataWriter::lookup_instance(  instance_data );
}


/******************************************************************
 * openfmb::reclosermodule:: DataWriter Ops
 *****************************************************************/

/*****************************************************************/
RecloserReadingValueDataWriter::RecloserReadingValueDataWriter()
{
}

/*****************************************************************/
InstanceHandle_t 
RecloserReadingValueDataWriter::register_instance_w_timestamp( const RecloserReadingValue *  instance_data,
                                               const Time_t  source_timestamp)
{

  return DataWriter::register_instance_w_timestamp( instance_data, source_timestamp );
}

/*****************************************************************/
 /* openfmb::reclosermodule:: */
InstanceHandle_t 
RecloserReadingValueDataWriter::register_instance(const RecloserReadingValue *  instance_data) 
{
  return DataWriter::register_instance( instance_data );
}


/*****************************************************************/

ReturnCode_t 
RecloserReadingValueDataWriter::unregister_instance_w_timestamp( const RecloserReadingValue * instance_data, 
                                                    const InstanceHandle_t  handle,
                                                    const Time_t  source_timestamp)
{
  return DataWriter::unregister_instance_w_timestamp( instance_data,
                                                      handle,
                                                      source_timestamp );
}


/*****************************************************************/

ReturnCode_t 
RecloserReadingValueDataWriter::unregister_instance( const RecloserReadingValue * instance_data, 
                                        const InstanceHandle_t  handle)
{
  return DataWriter::unregister_instance( instance_data, handle );
}


/*****************************************************************/

ReturnCode_t 
RecloserReadingValueDataWriter::write_w_timestamp( const RecloserReadingValue * instance_data, 
                                      const InstanceHandle_t  h, 
                                      const Time_t  source_timestamp)
{
  return DataWriter::write_w_timestamp( instance_data, h, source_timestamp );
}


/*****************************************************************/

ReturnCode_t 
RecloserReadingValueDataWriter::write( const RecloserReadingValue * instance_data, 
                          const InstanceHandle_t  h)
{
  return DataWriter::write( instance_data, h );
}


/*****************************************************************/

ReturnCode_t 
RecloserReadingValueDataWriter::dispose_w_timestamp( const RecloserReadingValue * instance_data, 
                                        const InstanceHandle_t  h, 
                                        const Time_t  source_timestamp)
{
  return DataWriter::dispose_w_timestamp( instance_data, h, source_timestamp );
}


/*****************************************************************/

ReturnCode_t 
RecloserReadingValueDataWriter::dispose( const RecloserReadingValue * instance_data, 
                            const InstanceHandle_t  instance_handle )
{
  return DataWriter::dispose(instance_data, instance_handle );
}


/*****************************************************************/

ReturnCode_t 
RecloserReadingValueDataWriter::get_key_value( RecloserReadingValue * key_holder, 
                                  const InstanceHandle_t  handle)
{
  if ( ! key_holder )
      return RETCODE_BAD_PARAMETER;

  /* No keys: no op */
  CDX_UNUSED(handle);
  key_holder->clear();
  return DDS::RETCODE_OK;
}


/*****************************************************************/
/* openfmb::reclosermodule:: */
InstanceHandle_t 
RecloserReadingValueDataWriter::lookup_instance( const RecloserReadingValue * instance_data )
{
  if ( ! instance_data )
      return HANDLE_NIL;

  /* No keys */
  return DDS::HANDLE_DEFAULT;
}


/******************************************************************
 * openfmb::reclosermodule:: DataWriter Ops
 *****************************************************************/

/*****************************************************************/
RecloserStatusProfileDataWriter::RecloserStatusProfileDataWriter()
{
}

/*****************************************************************/
InstanceHandle_t 
RecloserStatusProfileDataWriter::register_instance_w_timestamp( const RecloserStatusProfile *  instance_data,
                                               const Time_t  source_timestamp)
{

  return DataWriter::register_instance_w_timestamp( instance_data, source_timestamp );
}

/*****************************************************************/
 /* openfmb::reclosermodule:: */
InstanceHandle_t 
RecloserStatusProfileDataWriter::register_instance(const RecloserStatusProfile *  instance_data) 
{
  return DataWriter::register_instance( instance_data );
}


/*****************************************************************/

ReturnCode_t 
RecloserStatusProfileDataWriter::unregister_instance_w_timestamp( const RecloserStatusProfile * instance_data, 
                                                    const InstanceHandle_t  handle,
                                                    const Time_t  source_timestamp)
{
  return DataWriter::unregister_instance_w_timestamp( instance_data,
                                                      handle,
                                                      source_timestamp );
}


/*****************************************************************/

ReturnCode_t 
RecloserStatusProfileDataWriter::unregister_instance( const RecloserStatusProfile * instance_data, 
                                        const InstanceHandle_t  handle)
{
  return DataWriter::unregister_instance( instance_data, handle );
}


/*****************************************************************/

ReturnCode_t 
RecloserStatusProfileDataWriter::write_w_timestamp( const RecloserStatusProfile * instance_data, 
                                      const InstanceHandle_t  h, 
                                      const Time_t  source_timestamp)
{
  return DataWriter::write_w_timestamp( instance_data, h, source_timestamp );
}


/*****************************************************************/

ReturnCode_t 
RecloserStatusProfileDataWriter::write( const RecloserStatusProfile * instance_data, 
                          const InstanceHandle_t  h)
{
  return DataWriter::write( instance_data, h );
}


/*****************************************************************/

ReturnCode_t 
RecloserStatusProfileDataWriter::dispose_w_timestamp( const RecloserStatusProfile * instance_data, 
                                        const InstanceHandle_t  h, 
                                        const Time_t  source_timestamp)
{
  return DataWriter::dispose_w_timestamp( instance_data, h, source_timestamp );
}


/*****************************************************************/

ReturnCode_t 
RecloserStatusProfileDataWriter::dispose( const RecloserStatusProfile * instance_data, 
                            const InstanceHandle_t  instance_handle )
{
  return DataWriter::dispose(instance_data, instance_handle );
}


/*****************************************************************/

ReturnCode_t 
RecloserStatusProfileDataWriter::get_key_value( RecloserStatusProfile * key_holder, 
                                  const InstanceHandle_t  handle)
{
  if ( ! key_holder )
      return RETCODE_BAD_PARAMETER;

  /* key: use DataWriter to get it */
  return DataWriter::get_key_value(  key_holder, handle );
}


/*****************************************************************/
/* openfmb::reclosermodule:: */
InstanceHandle_t 
RecloserStatusProfileDataWriter::lookup_instance( const RecloserStatusProfile * instance_data )
{
  if ( ! instance_data )
      return HANDLE_NIL;

  /* Complex key: use DataWriter to find it */
  return DataWriter::lookup_instance(  instance_data );
}


}  /* namespace reclosermodule */
/* END SCOPE: reclosermodule */
/* START SCOPE: regulatormodule */

namespace regulatormodule {


/******************************************************************
 * openfmb::regulatormodule:: DataWriter Ops
 *****************************************************************/

/*****************************************************************/
RegulatorReadingValueDataWriter::RegulatorReadingValueDataWriter()
{
}

/*****************************************************************/
InstanceHandle_t 
RegulatorReadingValueDataWriter::register_instance_w_timestamp( const RegulatorReadingValue *  instance_data,
                                               const Time_t  source_timestamp)
{

  return DataWriter::register_instance_w_timestamp( instance_data, source_timestamp );
}

/*****************************************************************/
 /* openfmb::regulatormodule:: */
InstanceHandle_t 
RegulatorReadingValueDataWriter::register_instance(const RegulatorReadingValue *  instance_data) 
{
  return DataWriter::register_instance( instance_data );
}


/*****************************************************************/

ReturnCode_t 
RegulatorReadingValueDataWriter::unregister_instance_w_timestamp( const RegulatorReadingValue * instance_data, 
                                                    const InstanceHandle_t  handle,
                                                    const Time_t  source_timestamp)
{
  return DataWriter::unregister_instance_w_timestamp( instance_data,
                                                      handle,
                                                      source_timestamp );
}


/*****************************************************************/

ReturnCode_t 
RegulatorReadingValueDataWriter::unregister_instance( const RegulatorReadingValue * instance_data, 
                                        const InstanceHandle_t  handle)
{
  return DataWriter::unregister_instance( instance_data, handle );
}


/*****************************************************************/

ReturnCode_t 
RegulatorReadingValueDataWriter::write_w_timestamp( const RegulatorReadingValue * instance_data, 
                                      const InstanceHandle_t  h, 
                                      const Time_t  source_timestamp)
{
  return DataWriter::write_w_timestamp( instance_data, h, source_timestamp );
}


/*****************************************************************/

ReturnCode_t 
RegulatorReadingValueDataWriter::write( const RegulatorReadingValue * instance_data, 
                          const InstanceHandle_t  h)
{
  return DataWriter::write( instance_data, h );
}


/*****************************************************************/

ReturnCode_t 
RegulatorReadingValueDataWriter::dispose_w_timestamp( const RegulatorReadingValue * instance_data, 
                                        const InstanceHandle_t  h, 
                                        const Time_t  source_timestamp)
{
  return DataWriter::dispose_w_timestamp( instance_data, h, source_timestamp );
}


/*****************************************************************/

ReturnCode_t 
RegulatorReadingValueDataWriter::dispose( const RegulatorReadingValue * instance_data, 
                            const InstanceHandle_t  instance_handle )
{
  return DataWriter::dispose(instance_data, instance_handle );
}


/*****************************************************************/

ReturnCode_t 
RegulatorReadingValueDataWriter::get_key_value( RegulatorReadingValue * key_holder, 
                                  const InstanceHandle_t  handle)
{
  if ( ! key_holder )
      return RETCODE_BAD_PARAMETER;

  /* No keys: no op */
  CDX_UNUSED(handle);
  key_holder->clear();
  return DDS::RETCODE_OK;
}


/*****************************************************************/
/* openfmb::regulatormodule:: */
InstanceHandle_t 
RegulatorReadingValueDataWriter::lookup_instance( const RegulatorReadingValue * instance_data )
{
  if ( ! instance_data )
      return HANDLE_NIL;

  /* No keys */
  return DDS::HANDLE_DEFAULT;
}


}  /* namespace regulatormodule */
/* END SCOPE: regulatormodule */
/* START SCOPE: resourcemodule */

namespace resourcemodule {


/******************************************************************
 * openfmb::resourcemodule:: DataWriter Ops
 *****************************************************************/

/*****************************************************************/
ResourceReadingValueDataWriter::ResourceReadingValueDataWriter()
{
}

/*****************************************************************/
InstanceHandle_t 
ResourceReadingValueDataWriter::register_instance_w_timestamp( const ResourceReadingValue *  instance_data,
                                               const Time_t  source_timestamp)
{

  return DataWriter::register_instance_w_timestamp( instance_data, source_timestamp );
}

/*****************************************************************/
 /* openfmb::resourcemodule:: */
InstanceHandle_t 
ResourceReadingValueDataWriter::register_instance(const ResourceReadingValue *  instance_data) 
{
  return DataWriter::register_instance( instance_data );
}


/*****************************************************************/

ReturnCode_t 
ResourceReadingValueDataWriter::unregister_instance_w_timestamp( const ResourceReadingValue * instance_data, 
                                                    const InstanceHandle_t  handle,
                                                    const Time_t  source_timestamp)
{
  return DataWriter::unregister_instance_w_timestamp( instance_data,
                                                      handle,
                                                      source_timestamp );
}


/*****************************************************************/

ReturnCode_t 
ResourceReadingValueDataWriter::unregister_instance( const ResourceReadingValue * instance_data, 
                                        const InstanceHandle_t  handle)
{
  return DataWriter::unregister_instance( instance_data, handle );
}


/*****************************************************************/

ReturnCode_t 
ResourceReadingValueDataWriter::write_w_timestamp( const ResourceReadingValue * instance_data, 
                                      const InstanceHandle_t  h, 
                                      const Time_t  source_timestamp)
{
  return DataWriter::write_w_timestamp( instance_data, h, source_timestamp );
}


/*****************************************************************/

ReturnCode_t 
ResourceReadingValueDataWriter::write( const ResourceReadingValue * instance_data, 
                          const InstanceHandle_t  h)
{
  return DataWriter::write( instance_data, h );
}


/*****************************************************************/

ReturnCode_t 
ResourceReadingValueDataWriter::dispose_w_timestamp( const ResourceReadingValue * instance_data, 
                                        const InstanceHandle_t  h, 
                                        const Time_t  source_timestamp)
{
  return DataWriter::dispose_w_timestamp( instance_data, h, source_timestamp );
}


/*****************************************************************/

ReturnCode_t 
ResourceReadingValueDataWriter::dispose( const ResourceReadingValue * instance_data, 
                            const InstanceHandle_t  instance_handle )
{
  return DataWriter::dispose(instance_data, instance_handle );
}


/*****************************************************************/

ReturnCode_t 
ResourceReadingValueDataWriter::get_key_value( ResourceReadingValue * key_holder, 
                                  const InstanceHandle_t  handle)
{
  if ( ! key_holder )
      return RETCODE_BAD_PARAMETER;

  /* No keys: no op */
  CDX_UNUSED(handle);
  key_holder->clear();
  return DDS::RETCODE_OK;
}


/*****************************************************************/
/* openfmb::resourcemodule:: */
InstanceHandle_t 
ResourceReadingValueDataWriter::lookup_instance( const ResourceReadingValue * instance_data )
{
  if ( ! instance_data )
      return HANDLE_NIL;

  /* No keys */
  return DDS::HANDLE_DEFAULT;
}


}  /* namespace resourcemodule */
/* END SCOPE: resourcemodule */
/* START SCOPE: solarmodule */

namespace solarmodule {


/******************************************************************
 * openfmb::solarmodule:: DataWriter Ops
 *****************************************************************/

/*****************************************************************/
SolarEventProfileDataWriter::SolarEventProfileDataWriter()
{
}

/*****************************************************************/
InstanceHandle_t 
SolarEventProfileDataWriter::register_instance_w_timestamp( const SolarEventProfile *  instance_data,
                                               const Time_t  source_timestamp)
{

  return DataWriter::register_instance_w_timestamp( instance_data, source_timestamp );
}

/*****************************************************************/
 /* openfmb::solarmodule:: */
InstanceHandle_t 
SolarEventProfileDataWriter::register_instance(const SolarEventProfile *  instance_data) 
{
  return DataWriter::register_instance( instance_data );
}


/*****************************************************************/

ReturnCode_t 
SolarEventProfileDataWriter::unregister_instance_w_timestamp( const SolarEventProfile * instance_data, 
                                                    const InstanceHandle_t  handle,
                                                    const Time_t  source_timestamp)
{
  return DataWriter::unregister_instance_w_timestamp( instance_data,
                                                      handle,
                                                      source_timestamp );
}


/*****************************************************************/

ReturnCode_t 
SolarEventProfileDataWriter::unregister_instance( const SolarEventProfile * instance_data, 
                                        const InstanceHandle_t  handle)
{
  return DataWriter::unregister_instance( instance_data, handle );
}


/*****************************************************************/

ReturnCode_t 
SolarEventProfileDataWriter::write_w_timestamp( const SolarEventProfile * instance_data, 
                                      const InstanceHandle_t  h, 
                                      const Time_t  source_timestamp)
{
  return DataWriter::write_w_timestamp( instance_data, h, source_timestamp );
}


/*****************************************************************/

ReturnCode_t 
SolarEventProfileDataWriter::write( const SolarEventProfile * instance_data, 
                          const InstanceHandle_t  h)
{
  return DataWriter::write( instance_data, h );
}


/*****************************************************************/

ReturnCode_t 
SolarEventProfileDataWriter::dispose_w_timestamp( const SolarEventProfile * instance_data, 
                                        const InstanceHandle_t  h, 
                                        const Time_t  source_timestamp)
{
  return DataWriter::dispose_w_timestamp( instance_data, h, source_timestamp );
}


/*****************************************************************/

ReturnCode_t 
SolarEventProfileDataWriter::dispose( const SolarEventProfile * instance_data, 
                            const InstanceHandle_t  instance_handle )
{
  return DataWriter::dispose(instance_data, instance_handle );
}


/*****************************************************************/

ReturnCode_t 
SolarEventProfileDataWriter::get_key_value( SolarEventProfile * key_holder, 
                                  const InstanceHandle_t  handle)
{
  if ( ! key_holder )
      return RETCODE_BAD_PARAMETER;

  /* key: use DataWriter to get it */
  return DataWriter::get_key_value(  key_holder, handle );
}


/*****************************************************************/
/* openfmb::solarmodule:: */
InstanceHandle_t 
SolarEventProfileDataWriter::lookup_instance( const SolarEventProfile * instance_data )
{
  if ( ! instance_data )
      return HANDLE_NIL;

  /* Complex key: use DataWriter to find it */
  return DataWriter::lookup_instance(  instance_data );
}


/******************************************************************
 * openfmb::solarmodule:: DataWriter Ops
 *****************************************************************/

/*****************************************************************/
SolarReadingValueDataWriter::SolarReadingValueDataWriter()
{
}

/*****************************************************************/
InstanceHandle_t 
SolarReadingValueDataWriter::register_instance_w_timestamp( const SolarReadingValue *  instance_data,
                                               const Time_t  source_timestamp)
{

  return DataWriter::register_instance_w_timestamp( instance_data, source_timestamp );
}

/*****************************************************************/
 /* openfmb::solarmodule:: */
InstanceHandle_t 
SolarReadingValueDataWriter::register_instance(const SolarReadingValue *  instance_data) 
{
  return DataWriter::register_instance( instance_data );
}


/*****************************************************************/

ReturnCode_t 
SolarReadingValueDataWriter::unregister_instance_w_timestamp( const SolarReadingValue * instance_data, 
                                                    const InstanceHandle_t  handle,
                                                    const Time_t  source_timestamp)
{
  return DataWriter::unregister_instance_w_timestamp( instance_data,
                                                      handle,
                                                      source_timestamp );
}


/*****************************************************************/

ReturnCode_t 
SolarReadingValueDataWriter::unregister_instance( const SolarReadingValue * instance_data, 
                                        const InstanceHandle_t  handle)
{
  return DataWriter::unregister_instance( instance_data, handle );
}


/*****************************************************************/

ReturnCode_t 
SolarReadingValueDataWriter::write_w_timestamp( const SolarReadingValue * instance_data, 
                                      const InstanceHandle_t  h, 
                                      const Time_t  source_timestamp)
{
  return DataWriter::write_w_timestamp( instance_data, h, source_timestamp );
}


/*****************************************************************/

ReturnCode_t 
SolarReadingValueDataWriter::write( const SolarReadingValue * instance_data, 
                          const InstanceHandle_t  h)
{
  return DataWriter::write( instance_data, h );
}


/*****************************************************************/

ReturnCode_t 
SolarReadingValueDataWriter::dispose_w_timestamp( const SolarReadingValue * instance_data, 
                                        const InstanceHandle_t  h, 
                                        const Time_t  source_timestamp)
{
  return DataWriter::dispose_w_timestamp( instance_data, h, source_timestamp );
}


/*****************************************************************/

ReturnCode_t 
SolarReadingValueDataWriter::dispose( const SolarReadingValue * instance_data, 
                            const InstanceHandle_t  instance_handle )
{
  return DataWriter::dispose(instance_data, instance_handle );
}


/*****************************************************************/

ReturnCode_t 
SolarReadingValueDataWriter::get_key_value( SolarReadingValue * key_holder, 
                                  const InstanceHandle_t  handle)
{
  if ( ! key_holder )
      return RETCODE_BAD_PARAMETER;

  /* No keys: no op */
  CDX_UNUSED(handle);
  key_holder->clear();
  return DDS::RETCODE_OK;
}


/*****************************************************************/
/* openfmb::solarmodule:: */
InstanceHandle_t 
SolarReadingValueDataWriter::lookup_instance( const SolarReadingValue * instance_data )
{
  if ( ! instance_data )
      return HANDLE_NIL;

  /* No keys */
  return DDS::HANDLE_DEFAULT;
}


/******************************************************************
 * openfmb::solarmodule:: DataWriter Ops
 *****************************************************************/

/*****************************************************************/
SolarStatusProfileDataWriter::SolarStatusProfileDataWriter()
{
}

/*****************************************************************/
InstanceHandle_t 
SolarStatusProfileDataWriter::register_instance_w_timestamp( const SolarStatusProfile *  instance_data,
                                               const Time_t  source_timestamp)
{

  return DataWriter::register_instance_w_timestamp( instance_data, source_timestamp );
}

/*****************************************************************/
 /* openfmb::solarmodule:: */
InstanceHandle_t 
SolarStatusProfileDataWriter::register_instance(const SolarStatusProfile *  instance_data) 
{
  return DataWriter::register_instance( instance_data );
}


/*****************************************************************/

ReturnCode_t 
SolarStatusProfileDataWriter::unregister_instance_w_timestamp( const SolarStatusProfile * instance_data, 
                                                    const InstanceHandle_t  handle,
                                                    const Time_t  source_timestamp)
{
  return DataWriter::unregister_instance_w_timestamp( instance_data,
                                                      handle,
                                                      source_timestamp );
}


/*****************************************************************/

ReturnCode_t 
SolarStatusProfileDataWriter::unregister_instance( const SolarStatusProfile * instance_data, 
                                        const InstanceHandle_t  handle)
{
  return DataWriter::unregister_instance( instance_data, handle );
}


/*****************************************************************/

ReturnCode_t 
SolarStatusProfileDataWriter::write_w_timestamp( const SolarStatusProfile * instance_data, 
                                      const InstanceHandle_t  h, 
                                      const Time_t  source_timestamp)
{
  return DataWriter::write_w_timestamp( instance_data, h, source_timestamp );
}


/*****************************************************************/

ReturnCode_t 
SolarStatusProfileDataWriter::write( const SolarStatusProfile * instance_data, 
                          const InstanceHandle_t  h)
{
  return DataWriter::write( instance_data, h );
}


/*****************************************************************/

ReturnCode_t 
SolarStatusProfileDataWriter::dispose_w_timestamp( const SolarStatusProfile * instance_data, 
                                        const InstanceHandle_t  h, 
                                        const Time_t  source_timestamp)
{
  return DataWriter::dispose_w_timestamp( instance_data, h, source_timestamp );
}


/*****************************************************************/

ReturnCode_t 
SolarStatusProfileDataWriter::dispose( const SolarStatusProfile * instance_data, 
                            const InstanceHandle_t  instance_handle )
{
  return DataWriter::dispose(instance_data, instance_handle );
}


/*****************************************************************/

ReturnCode_t 
SolarStatusProfileDataWriter::get_key_value( SolarStatusProfile * key_holder, 
                                  const InstanceHandle_t  handle)
{
  if ( ! key_holder )
      return RETCODE_BAD_PARAMETER;

  /* key: use DataWriter to get it */
  return DataWriter::get_key_value(  key_holder, handle );
}


/*****************************************************************/
/* openfmb::solarmodule:: */
InstanceHandle_t 
SolarStatusProfileDataWriter::lookup_instance( const SolarStatusProfile * instance_data )
{
  if ( ! instance_data )
      return HANDLE_NIL;

  /* Complex key: use DataWriter to find it */
  return DataWriter::lookup_instance(  instance_data );
}


}  /* namespace solarmodule */
/* END SCOPE: solarmodule */
/* START SCOPE: switchmodule */

namespace switchmodule {


/******************************************************************
 * openfmb::switchmodule:: DataWriter Ops
 *****************************************************************/

/*****************************************************************/
SwitchControlProfileDataWriter::SwitchControlProfileDataWriter()
{
}

/*****************************************************************/
InstanceHandle_t 
SwitchControlProfileDataWriter::register_instance_w_timestamp( const SwitchControlProfile *  instance_data,
                                               const Time_t  source_timestamp)
{

  return DataWriter::register_instance_w_timestamp( instance_data, source_timestamp );
}

/*****************************************************************/
 /* openfmb::switchmodule:: */
InstanceHandle_t 
SwitchControlProfileDataWriter::register_instance(const SwitchControlProfile *  instance_data) 
{
  return DataWriter::register_instance( instance_data );
}


/*****************************************************************/

ReturnCode_t 
SwitchControlProfileDataWriter::unregister_instance_w_timestamp( const SwitchControlProfile * instance_data, 
                                                    const InstanceHandle_t  handle,
                                                    const Time_t  source_timestamp)
{
  return DataWriter::unregister_instance_w_timestamp( instance_data,
                                                      handle,
                                                      source_timestamp );
}


/*****************************************************************/

ReturnCode_t 
SwitchControlProfileDataWriter::unregister_instance( const SwitchControlProfile * instance_data, 
                                        const InstanceHandle_t  handle)
{
  return DataWriter::unregister_instance( instance_data, handle );
}


/*****************************************************************/

ReturnCode_t 
SwitchControlProfileDataWriter::write_w_timestamp( const SwitchControlProfile * instance_data, 
                                      const InstanceHandle_t  h, 
                                      const Time_t  source_timestamp)
{
  return DataWriter::write_w_timestamp( instance_data, h, source_timestamp );
}


/*****************************************************************/

ReturnCode_t 
SwitchControlProfileDataWriter::write( const SwitchControlProfile * instance_data, 
                          const InstanceHandle_t  h)
{
  return DataWriter::write( instance_data, h );
}


/*****************************************************************/

ReturnCode_t 
SwitchControlProfileDataWriter::dispose_w_timestamp( const SwitchControlProfile * instance_data, 
                                        const InstanceHandle_t  h, 
                                        const Time_t  source_timestamp)
{
  return DataWriter::dispose_w_timestamp( instance_data, h, source_timestamp );
}


/*****************************************************************/

ReturnCode_t 
SwitchControlProfileDataWriter::dispose( const SwitchControlProfile * instance_data, 
                            const InstanceHandle_t  instance_handle )
{
  return DataWriter::dispose(instance_data, instance_handle );
}


/*****************************************************************/

ReturnCode_t 
SwitchControlProfileDataWriter::get_key_value( SwitchControlProfile * key_holder, 
                                  const InstanceHandle_t  handle)
{
  if ( ! key_holder )
      return RETCODE_BAD_PARAMETER;

  /* key: use DataWriter to get it */
  return DataWriter::get_key_value(  key_holder, handle );
}


/*****************************************************************/
/* openfmb::switchmodule:: */
InstanceHandle_t 
SwitchControlProfileDataWriter::lookup_instance( const SwitchControlProfile * instance_data )
{
  if ( ! instance_data )
      return HANDLE_NIL;

  /* Complex key: use DataWriter to find it */
  return DataWriter::lookup_instance(  instance_data );
}


/******************************************************************
 * openfmb::switchmodule:: DataWriter Ops
 *****************************************************************/

/*****************************************************************/
SwitchEventProfileDataWriter::SwitchEventProfileDataWriter()
{
}

/*****************************************************************/
InstanceHandle_t 
SwitchEventProfileDataWriter::register_instance_w_timestamp( const SwitchEventProfile *  instance_data,
                                               const Time_t  source_timestamp)
{

  return DataWriter::register_instance_w_timestamp( instance_data, source_timestamp );
}

/*****************************************************************/
 /* openfmb::switchmodule:: */
InstanceHandle_t 
SwitchEventProfileDataWriter::register_instance(const SwitchEventProfile *  instance_data) 
{
  return DataWriter::register_instance( instance_data );
}


/*****************************************************************/

ReturnCode_t 
SwitchEventProfileDataWriter::unregister_instance_w_timestamp( const SwitchEventProfile * instance_data, 
                                                    const InstanceHandle_t  handle,
                                                    const Time_t  source_timestamp)
{
  return DataWriter::unregister_instance_w_timestamp( instance_data,
                                                      handle,
                                                      source_timestamp );
}


/*****************************************************************/

ReturnCode_t 
SwitchEventProfileDataWriter::unregister_instance( const SwitchEventProfile * instance_data, 
                                        const InstanceHandle_t  handle)
{
  return DataWriter::unregister_instance( instance_data, handle );
}


/*****************************************************************/

ReturnCode_t 
SwitchEventProfileDataWriter::write_w_timestamp( const SwitchEventProfile * instance_data, 
                                      const InstanceHandle_t  h, 
                                      const Time_t  source_timestamp)
{
  return DataWriter::write_w_timestamp( instance_data, h, source_timestamp );
}


/*****************************************************************/

ReturnCode_t 
SwitchEventProfileDataWriter::write( const SwitchEventProfile * instance_data, 
                          const InstanceHandle_t  h)
{
  return DataWriter::write( instance_data, h );
}


/*****************************************************************/

ReturnCode_t 
SwitchEventProfileDataWriter::dispose_w_timestamp( const SwitchEventProfile * instance_data, 
                                        const InstanceHandle_t  h, 
                                        const Time_t  source_timestamp)
{
  return DataWriter::dispose_w_timestamp( instance_data, h, source_timestamp );
}


/*****************************************************************/

ReturnCode_t 
SwitchEventProfileDataWriter::dispose( const SwitchEventProfile * instance_data, 
                            const InstanceHandle_t  instance_handle )
{
  return DataWriter::dispose(instance_data, instance_handle );
}


/*****************************************************************/

ReturnCode_t 
SwitchEventProfileDataWriter::get_key_value( SwitchEventProfile * key_holder, 
                                  const InstanceHandle_t  handle)
{
  if ( ! key_holder )
      return RETCODE_BAD_PARAMETER;

  /* key: use DataWriter to get it */
  return DataWriter::get_key_value(  key_holder, handle );
}


/*****************************************************************/
/* openfmb::switchmodule:: */
InstanceHandle_t 
SwitchEventProfileDataWriter::lookup_instance( const SwitchEventProfile * instance_data )
{
  if ( ! instance_data )
      return HANDLE_NIL;

  /* Complex key: use DataWriter to find it */
  return DataWriter::lookup_instance(  instance_data );
}


/******************************************************************
 * openfmb::switchmodule:: DataWriter Ops
 *****************************************************************/

/*****************************************************************/
SwitchReadingValueDataWriter::SwitchReadingValueDataWriter()
{
}

/*****************************************************************/
InstanceHandle_t 
SwitchReadingValueDataWriter::register_instance_w_timestamp( const SwitchReadingValue *  instance_data,
                                               const Time_t  source_timestamp)
{

  return DataWriter::register_instance_w_timestamp( instance_data, source_timestamp );
}

/*****************************************************************/
 /* openfmb::switchmodule:: */
InstanceHandle_t 
SwitchReadingValueDataWriter::register_instance(const SwitchReadingValue *  instance_data) 
{
  return DataWriter::register_instance( instance_data );
}


/*****************************************************************/

ReturnCode_t 
SwitchReadingValueDataWriter::unregister_instance_w_timestamp( const SwitchReadingValue * instance_data, 
                                                    const InstanceHandle_t  handle,
                                                    const Time_t  source_timestamp)
{
  return DataWriter::unregister_instance_w_timestamp( instance_data,
                                                      handle,
                                                      source_timestamp );
}


/*****************************************************************/

ReturnCode_t 
SwitchReadingValueDataWriter::unregister_instance( const SwitchReadingValue * instance_data, 
                                        const InstanceHandle_t  handle)
{
  return DataWriter::unregister_instance( instance_data, handle );
}


/*****************************************************************/

ReturnCode_t 
SwitchReadingValueDataWriter::write_w_timestamp( const SwitchReadingValue * instance_data, 
                                      const InstanceHandle_t  h, 
                                      const Time_t  source_timestamp)
{
  return DataWriter::write_w_timestamp( instance_data, h, source_timestamp );
}


/*****************************************************************/

ReturnCode_t 
SwitchReadingValueDataWriter::write( const SwitchReadingValue * instance_data, 
                          const InstanceHandle_t  h)
{
  return DataWriter::write( instance_data, h );
}


/*****************************************************************/

ReturnCode_t 
SwitchReadingValueDataWriter::dispose_w_timestamp( const SwitchReadingValue * instance_data, 
                                        const InstanceHandle_t  h, 
                                        const Time_t  source_timestamp)
{
  return DataWriter::dispose_w_timestamp( instance_data, h, source_timestamp );
}


/*****************************************************************/

ReturnCode_t 
SwitchReadingValueDataWriter::dispose( const SwitchReadingValue * instance_data, 
                            const InstanceHandle_t  instance_handle )
{
  return DataWriter::dispose(instance_data, instance_handle );
}


/*****************************************************************/

ReturnCode_t 
SwitchReadingValueDataWriter::get_key_value( SwitchReadingValue * key_holder, 
                                  const InstanceHandle_t  handle)
{
  if ( ! key_holder )
      return RETCODE_BAD_PARAMETER;

  /* No keys: no op */
  CDX_UNUSED(handle);
  key_holder->clear();
  return DDS::RETCODE_OK;
}


/*****************************************************************/
/* openfmb::switchmodule:: */
InstanceHandle_t 
SwitchReadingValueDataWriter::lookup_instance( const SwitchReadingValue * instance_data )
{
  if ( ! instance_data )
      return HANDLE_NIL;

  /* No keys */
  return DDS::HANDLE_DEFAULT;
}


/******************************************************************
 * openfmb::switchmodule:: DataWriter Ops
 *****************************************************************/

/*****************************************************************/
SwitchStatusProfileDataWriter::SwitchStatusProfileDataWriter()
{
}

/*****************************************************************/
InstanceHandle_t 
SwitchStatusProfileDataWriter::register_instance_w_timestamp( const SwitchStatusProfile *  instance_data,
                                               const Time_t  source_timestamp)
{

  return DataWriter::register_instance_w_timestamp( instance_data, source_timestamp );
}

/*****************************************************************/
 /* openfmb::switchmodule:: */
InstanceHandle_t 
SwitchStatusProfileDataWriter::register_instance(const SwitchStatusProfile *  instance_data) 
{
  return DataWriter::register_instance( instance_data );
}


/*****************************************************************/

ReturnCode_t 
SwitchStatusProfileDataWriter::unregister_instance_w_timestamp( const SwitchStatusProfile * instance_data, 
                                                    const InstanceHandle_t  handle,
                                                    const Time_t  source_timestamp)
{
  return DataWriter::unregister_instance_w_timestamp( instance_data,
                                                      handle,
                                                      source_timestamp );
}


/*****************************************************************/

ReturnCode_t 
SwitchStatusProfileDataWriter::unregister_instance( const SwitchStatusProfile * instance_data, 
                                        const InstanceHandle_t  handle)
{
  return DataWriter::unregister_instance( instance_data, handle );
}


/*****************************************************************/

ReturnCode_t 
SwitchStatusProfileDataWriter::write_w_timestamp( const SwitchStatusProfile * instance_data, 
                                      const InstanceHandle_t  h, 
                                      const Time_t  source_timestamp)
{
  return DataWriter::write_w_timestamp( instance_data, h, source_timestamp );
}


/*****************************************************************/

ReturnCode_t 
SwitchStatusProfileDataWriter::write( const SwitchStatusProfile * instance_data, 
                          const InstanceHandle_t  h)
{
  return DataWriter::write( instance_data, h );
}


/*****************************************************************/

ReturnCode_t 
SwitchStatusProfileDataWriter::dispose_w_timestamp( const SwitchStatusProfile * instance_data, 
                                        const InstanceHandle_t  h, 
                                        const Time_t  source_timestamp)
{
  return DataWriter::dispose_w_timestamp( instance_data, h, source_timestamp );
}


/*****************************************************************/

ReturnCode_t 
SwitchStatusProfileDataWriter::dispose( const SwitchStatusProfile * instance_data, 
                            const InstanceHandle_t  instance_handle )
{
  return DataWriter::dispose(instance_data, instance_handle );
}


/*****************************************************************/

ReturnCode_t 
SwitchStatusProfileDataWriter::get_key_value( SwitchStatusProfile * key_holder, 
                                  const InstanceHandle_t  handle)
{
  if ( ! key_holder )
      return RETCODE_BAD_PARAMETER;

  /* key: use DataWriter to get it */
  return DataWriter::get_key_value(  key_holder, handle );
}


/*****************************************************************/
/* openfmb::switchmodule:: */
InstanceHandle_t 
SwitchStatusProfileDataWriter::lookup_instance( const SwitchStatusProfile * instance_data )
{
  if ( ! instance_data )
      return HANDLE_NIL;

  /* Complex key: use DataWriter to find it */
  return DataWriter::lookup_instance(  instance_data );
}


}  /* namespace switchmodule */
/* END SCOPE: switchmodule */

}  /* namespace openfmb */
/* END SCOPE: openfmb */
/* START SCOPE: openfmb */

namespace openfmb {

/* START SCOPE: breakermodule */

namespace breakermodule {


/******************************************************************
 * openfmb::breakermodule:: DataWriter Ops
 *****************************************************************/

/*****************************************************************/
BreakerControlProfileDataWriter::BreakerControlProfileDataWriter()
{
}

/*****************************************************************/
InstanceHandle_t 
BreakerControlProfileDataWriter::register_instance_w_timestamp( const BreakerControlProfile *  instance_data,
                                               const Time_t  source_timestamp)
{

  return DataWriter::register_instance_w_timestamp( instance_data, source_timestamp );
}

/*****************************************************************/
 /* openfmb::breakermodule:: */
InstanceHandle_t 
BreakerControlProfileDataWriter::register_instance(const BreakerControlProfile *  instance_data) 
{
  return DataWriter::register_instance( instance_data );
}


/*****************************************************************/

ReturnCode_t 
BreakerControlProfileDataWriter::unregister_instance_w_timestamp( const BreakerControlProfile * instance_data, 
                                                    const InstanceHandle_t  handle,
                                                    const Time_t  source_timestamp)
{
  return DataWriter::unregister_instance_w_timestamp( instance_data,
                                                      handle,
                                                      source_timestamp );
}


/*****************************************************************/

ReturnCode_t 
BreakerControlProfileDataWriter::unregister_instance( const BreakerControlProfile * instance_data, 
                                        const InstanceHandle_t  handle)
{
  return DataWriter::unregister_instance( instance_data, handle );
}


/*****************************************************************/

ReturnCode_t 
BreakerControlProfileDataWriter::write_w_timestamp( const BreakerControlProfile * instance_data, 
                                      const InstanceHandle_t  h, 
                                      const Time_t  source_timestamp)
{
  return DataWriter::write_w_timestamp( instance_data, h, source_timestamp );
}


/*****************************************************************/

ReturnCode_t 
BreakerControlProfileDataWriter::write( const BreakerControlProfile * instance_data, 
                          const InstanceHandle_t  h)
{
  return DataWriter::write( instance_data, h );
}


/*****************************************************************/

ReturnCode_t 
BreakerControlProfileDataWriter::dispose_w_timestamp( const BreakerControlProfile * instance_data, 
                                        const InstanceHandle_t  h, 
                                        const Time_t  source_timestamp)
{
  return DataWriter::dispose_w_timestamp( instance_data, h, source_timestamp );
}


/*****************************************************************/

ReturnCode_t 
BreakerControlProfileDataWriter::dispose( const BreakerControlProfile * instance_data, 
                            const InstanceHandle_t  instance_handle )
{
  return DataWriter::dispose(instance_data, instance_handle );
}


/*****************************************************************/

ReturnCode_t 
BreakerControlProfileDataWriter::get_key_value( BreakerControlProfile * key_holder, 
                                  const InstanceHandle_t  handle)
{
  if ( ! key_holder )
      return RETCODE_BAD_PARAMETER;

  /* key: use DataWriter to get it */
  return DataWriter::get_key_value(  key_holder, handle );
}


/*****************************************************************/
/* openfmb::breakermodule:: */
InstanceHandle_t 
BreakerControlProfileDataWriter::lookup_instance( const BreakerControlProfile * instance_data )
{
  if ( ! instance_data )
      return HANDLE_NIL;

  /* Complex key: use DataWriter to find it */
  return DataWriter::lookup_instance(  instance_data );
}


/******************************************************************
 * openfmb::breakermodule:: DataWriter Ops
 *****************************************************************/

/*****************************************************************/
BreakerEventProfileDataWriter::BreakerEventProfileDataWriter()
{
}

/*****************************************************************/
InstanceHandle_t 
BreakerEventProfileDataWriter::register_instance_w_timestamp( const BreakerEventProfile *  instance_data,
                                               const Time_t  source_timestamp)
{

  return DataWriter::register_instance_w_timestamp( instance_data, source_timestamp );
}

/*****************************************************************/
 /* openfmb::breakermodule:: */
InstanceHandle_t 
BreakerEventProfileDataWriter::register_instance(const BreakerEventProfile *  instance_data) 
{
  return DataWriter::register_instance( instance_data );
}


/*****************************************************************/

ReturnCode_t 
BreakerEventProfileDataWriter::unregister_instance_w_timestamp( const BreakerEventProfile * instance_data, 
                                                    const InstanceHandle_t  handle,
                                                    const Time_t  source_timestamp)
{
  return DataWriter::unregister_instance_w_timestamp( instance_data,
                                                      handle,
                                                      source_timestamp );
}


/*****************************************************************/

ReturnCode_t 
BreakerEventProfileDataWriter::unregister_instance( const BreakerEventProfile * instance_data, 
                                        const InstanceHandle_t  handle)
{
  return DataWriter::unregister_instance( instance_data, handle );
}


/*****************************************************************/

ReturnCode_t 
BreakerEventProfileDataWriter::write_w_timestamp( const BreakerEventProfile * instance_data, 
                                      const InstanceHandle_t  h, 
                                      const Time_t  source_timestamp)
{
  return DataWriter::write_w_timestamp( instance_data, h, source_timestamp );
}


/*****************************************************************/

ReturnCode_t 
BreakerEventProfileDataWriter::write( const BreakerEventProfile * instance_data, 
                          const InstanceHandle_t  h)
{
  return DataWriter::write( instance_data, h );
}


/*****************************************************************/

ReturnCode_t 
BreakerEventProfileDataWriter::dispose_w_timestamp( const BreakerEventProfile * instance_data, 
                                        const InstanceHandle_t  h, 
                                        const Time_t  source_timestamp)
{
  return DataWriter::dispose_w_timestamp( instance_data, h, source_timestamp );
}


/*****************************************************************/

ReturnCode_t 
BreakerEventProfileDataWriter::dispose( const BreakerEventProfile * instance_data, 
                            const InstanceHandle_t  instance_handle )
{
  return DataWriter::dispose(instance_data, instance_handle );
}


/*****************************************************************/

ReturnCode_t 
BreakerEventProfileDataWriter::get_key_value( BreakerEventProfile * key_holder, 
                                  const InstanceHandle_t  handle)
{
  if ( ! key_holder )
      return RETCODE_BAD_PARAMETER;

  /* key: use DataWriter to get it */
  return DataWriter::get_key_value(  key_holder, handle );
}


/*****************************************************************/
/* openfmb::breakermodule:: */
InstanceHandle_t 
BreakerEventProfileDataWriter::lookup_instance( const BreakerEventProfile * instance_data )
{
  if ( ! instance_data )
      return HANDLE_NIL;

  /* Complex key: use DataWriter to find it */
  return DataWriter::lookup_instance(  instance_data );
}


/******************************************************************
 * openfmb::breakermodule:: DataWriter Ops
 *****************************************************************/

/*****************************************************************/
BreakerReadingValueDataWriter::BreakerReadingValueDataWriter()
{
}

/*****************************************************************/
InstanceHandle_t 
BreakerReadingValueDataWriter::register_instance_w_timestamp( const BreakerReadingValue *  instance_data,
                                               const Time_t  source_timestamp)
{

  return DataWriter::register_instance_w_timestamp( instance_data, source_timestamp );
}

/*****************************************************************/
 /* openfmb::breakermodule:: */
InstanceHandle_t 
BreakerReadingValueDataWriter::register_instance(const BreakerReadingValue *  instance_data) 
{
  return DataWriter::register_instance( instance_data );
}


/*****************************************************************/

ReturnCode_t 
BreakerReadingValueDataWriter::unregister_instance_w_timestamp( const BreakerReadingValue * instance_data, 
                                                    const InstanceHandle_t  handle,
                                                    const Time_t  source_timestamp)
{
  return DataWriter::unregister_instance_w_timestamp( instance_data,
                                                      handle,
                                                      source_timestamp );
}


/*****************************************************************/

ReturnCode_t 
BreakerReadingValueDataWriter::unregister_instance( const BreakerReadingValue * instance_data, 
                                        const InstanceHandle_t  handle)
{
  return DataWriter::unregister_instance( instance_data, handle );
}


/*****************************************************************/

ReturnCode_t 
BreakerReadingValueDataWriter::write_w_timestamp( const BreakerReadingValue * instance_data, 
                                      const InstanceHandle_t  h, 
                                      const Time_t  source_timestamp)
{
  return DataWriter::write_w_timestamp( instance_data, h, source_timestamp );
}


/*****************************************************************/

ReturnCode_t 
BreakerReadingValueDataWriter::write( const BreakerReadingValue * instance_data, 
                          const InstanceHandle_t  h)
{
  return DataWriter::write( instance_data, h );
}


/*****************************************************************/

ReturnCode_t 
BreakerReadingValueDataWriter::dispose_w_timestamp( const BreakerReadingValue * instance_data, 
                                        const InstanceHandle_t  h, 
                                        const Time_t  source_timestamp)
{
  return DataWriter::dispose_w_timestamp( instance_data, h, source_timestamp );
}


/*****************************************************************/

ReturnCode_t 
BreakerReadingValueDataWriter::dispose( const BreakerReadingValue * instance_data, 
                            const InstanceHandle_t  instance_handle )
{
  return DataWriter::dispose(instance_data, instance_handle );
}


/*****************************************************************/

ReturnCode_t 
BreakerReadingValueDataWriter::get_key_value( BreakerReadingValue * key_holder, 
                                  const InstanceHandle_t  handle)
{
  if ( ! key_holder )
      return RETCODE_BAD_PARAMETER;

  /* No keys: no op */
  CDX_UNUSED(handle);
  key_holder->clear();
  return DDS::RETCODE_OK;
}


/*****************************************************************/
/* openfmb::breakermodule:: */
InstanceHandle_t 
BreakerReadingValueDataWriter::lookup_instance( const BreakerReadingValue * instance_data )
{
  if ( ! instance_data )
      return HANDLE_NIL;

  /* No keys */
  return DDS::HANDLE_DEFAULT;
}


/******************************************************************
 * openfmb::breakermodule:: DataWriter Ops
 *****************************************************************/

/*****************************************************************/
BreakerStatusProfileDataWriter::BreakerStatusProfileDataWriter()
{
}

/*****************************************************************/
InstanceHandle_t 
BreakerStatusProfileDataWriter::register_instance_w_timestamp( const BreakerStatusProfile *  instance_data,
                                               const Time_t  source_timestamp)
{

  return DataWriter::register_instance_w_timestamp( instance_data, source_timestamp );
}

/*****************************************************************/
 /* openfmb::breakermodule:: */
InstanceHandle_t 
BreakerStatusProfileDataWriter::register_instance(const BreakerStatusProfile *  instance_data) 
{
  return DataWriter::register_instance( instance_data );
}


/*****************************************************************/

ReturnCode_t 
BreakerStatusProfileDataWriter::unregister_instance_w_timestamp( const BreakerStatusProfile * instance_data, 
                                                    const InstanceHandle_t  handle,
                                                    const Time_t  source_timestamp)
{
  return DataWriter::unregister_instance_w_timestamp( instance_data,
                                                      handle,
                                                      source_timestamp );
}


/*****************************************************************/

ReturnCode_t 
BreakerStatusProfileDataWriter::unregister_instance( const BreakerStatusProfile * instance_data, 
                                        const InstanceHandle_t  handle)
{
  return DataWriter::unregister_instance( instance_data, handle );
}


/*****************************************************************/

ReturnCode_t 
BreakerStatusProfileDataWriter::write_w_timestamp( const BreakerStatusProfile * instance_data, 
                                      const InstanceHandle_t  h, 
                                      const Time_t  source_timestamp)
{
  return DataWriter::write_w_timestamp( instance_data, h, source_timestamp );
}


/*****************************************************************/

ReturnCode_t 
BreakerStatusProfileDataWriter::write( const BreakerStatusProfile * instance_data, 
                          const InstanceHandle_t  h)
{
  return DataWriter::write( instance_data, h );
}


/*****************************************************************/

ReturnCode_t 
BreakerStatusProfileDataWriter::dispose_w_timestamp( const BreakerStatusProfile * instance_data, 
                                        const InstanceHandle_t  h, 
                                        const Time_t  source_timestamp)
{
  return DataWriter::dispose_w_timestamp( instance_data, h, source_timestamp );
}


/*****************************************************************/

ReturnCode_t 
BreakerStatusProfileDataWriter::dispose( const BreakerStatusProfile * instance_data, 
                            const InstanceHandle_t  instance_handle )
{
  return DataWriter::dispose(instance_data, instance_handle );
}


/*****************************************************************/

ReturnCode_t 
BreakerStatusProfileDataWriter::get_key_value( BreakerStatusProfile * key_holder, 
                                  const InstanceHandle_t  handle)
{
  if ( ! key_holder )
      return RETCODE_BAD_PARAMETER;

  /* key: use DataWriter to get it */
  return DataWriter::get_key_value(  key_holder, handle );
}


/*****************************************************************/
/* openfmb::breakermodule:: */
InstanceHandle_t 
BreakerStatusProfileDataWriter::lookup_instance( const BreakerStatusProfile * instance_data )
{
  if ( ! instance_data )
      return HANDLE_NIL;

  /* Complex key: use DataWriter to find it */
  return DataWriter::lookup_instance(  instance_data );
}


}  /* namespace breakermodule */
/* END SCOPE: breakermodule */
/* START SCOPE: commonmodule */

namespace commonmodule {


}  /* namespace commonmodule */
/* END SCOPE: commonmodule */
/* START SCOPE: essmodule */

namespace essmodule {


/******************************************************************
 * openfmb::essmodule:: DataWriter Ops
 *****************************************************************/

/*****************************************************************/
EssControlFSCCDataWriter::EssControlFSCCDataWriter()
{
}

/*****************************************************************/
InstanceHandle_t 
EssControlFSCCDataWriter::register_instance_w_timestamp( const EssControlFSCC *  instance_data,
                                               const Time_t  source_timestamp)
{

  return DataWriter::register_instance_w_timestamp( instance_data, source_timestamp );
}

/*****************************************************************/
 /* openfmb::essmodule:: */
InstanceHandle_t 
EssControlFSCCDataWriter::register_instance(const EssControlFSCC *  instance_data) 
{
  return DataWriter::register_instance( instance_data );
}


/*****************************************************************/

ReturnCode_t 
EssControlFSCCDataWriter::unregister_instance_w_timestamp( const EssControlFSCC * instance_data, 
                                                    const InstanceHandle_t  handle,
                                                    const Time_t  source_timestamp)
{
  return DataWriter::unregister_instance_w_timestamp( instance_data,
                                                      handle,
                                                      source_timestamp );
}


/*****************************************************************/

ReturnCode_t 
EssControlFSCCDataWriter::unregister_instance( const EssControlFSCC * instance_data, 
                                        const InstanceHandle_t  handle)
{
  return DataWriter::unregister_instance( instance_data, handle );
}


/*****************************************************************/

ReturnCode_t 
EssControlFSCCDataWriter::write_w_timestamp( const EssControlFSCC * instance_data, 
                                      const InstanceHandle_t  h, 
                                      const Time_t  source_timestamp)
{
  return DataWriter::write_w_timestamp( instance_data, h, source_timestamp );
}


/*****************************************************************/

ReturnCode_t 
EssControlFSCCDataWriter::write( const EssControlFSCC * instance_data, 
                          const InstanceHandle_t  h)
{
  return DataWriter::write( instance_data, h );
}


/*****************************************************************/

ReturnCode_t 
EssControlFSCCDataWriter::dispose_w_timestamp( const EssControlFSCC * instance_data, 
                                        const InstanceHandle_t  h, 
                                        const Time_t  source_timestamp)
{
  return DataWriter::dispose_w_timestamp( instance_data, h, source_timestamp );
}


/*****************************************************************/

ReturnCode_t 
EssControlFSCCDataWriter::dispose( const EssControlFSCC * instance_data, 
                            const InstanceHandle_t  instance_handle )
{
  return DataWriter::dispose(instance_data, instance_handle );
}


/*****************************************************************/

ReturnCode_t 
EssControlFSCCDataWriter::get_key_value( EssControlFSCC * key_holder, 
                                  const InstanceHandle_t  handle)
{
  if ( ! key_holder )
      return RETCODE_BAD_PARAMETER;

  /* No keys: no op */
  CDX_UNUSED(handle);
  key_holder->clear();
  return DDS::RETCODE_OK;
}


/*****************************************************************/
/* openfmb::essmodule:: */
InstanceHandle_t 
EssControlFSCCDataWriter::lookup_instance( const EssControlFSCC * instance_data )
{
  if ( ! instance_data )
      return HANDLE_NIL;

  /* No keys */
  return DDS::HANDLE_DEFAULT;
}


/******************************************************************
 * openfmb::essmodule:: DataWriter Ops
 *****************************************************************/

/*****************************************************************/
ESSReadingProfileDataWriter::ESSReadingProfileDataWriter()
{
}

/*****************************************************************/
InstanceHandle_t 
ESSReadingProfileDataWriter::register_instance_w_timestamp( const ESSReadingProfile *  instance_data,
                                               const Time_t  source_timestamp)
{

  return DataWriter::register_instance_w_timestamp( instance_data, source_timestamp );
}

/*****************************************************************/
 /* openfmb::essmodule:: */
InstanceHandle_t 
ESSReadingProfileDataWriter::register_instance(const ESSReadingProfile *  instance_data) 
{
  return DataWriter::register_instance( instance_data );
}


/*****************************************************************/

ReturnCode_t 
ESSReadingProfileDataWriter::unregister_instance_w_timestamp( const ESSReadingProfile * instance_data, 
                                                    const InstanceHandle_t  handle,
                                                    const Time_t  source_timestamp)
{
  return DataWriter::unregister_instance_w_timestamp( instance_data,
                                                      handle,
                                                      source_timestamp );
}


/*****************************************************************/

ReturnCode_t 
ESSReadingProfileDataWriter::unregister_instance( const ESSReadingProfile * instance_data, 
                                        const InstanceHandle_t  handle)
{
  return DataWriter::unregister_instance( instance_data, handle );
}


/*****************************************************************/

ReturnCode_t 
ESSReadingProfileDataWriter::write_w_timestamp( const ESSReadingProfile * instance_data, 
                                      const InstanceHandle_t  h, 
                                      const Time_t  source_timestamp)
{
  return DataWriter::write_w_timestamp( instance_data, h, source_timestamp );
}


/*****************************************************************/

ReturnCode_t 
ESSReadingProfileDataWriter::write( const ESSReadingProfile * instance_data, 
                          const InstanceHandle_t  h)
{
  return DataWriter::write( instance_data, h );
}


/*****************************************************************/

ReturnCode_t 
ESSReadingProfileDataWriter::dispose_w_timestamp( const ESSReadingProfile * instance_data, 
                                        const InstanceHandle_t  h, 
                                        const Time_t  source_timestamp)
{
  return DataWriter::dispose_w_timestamp( instance_data, h, source_timestamp );
}


/*****************************************************************/

ReturnCode_t 
ESSReadingProfileDataWriter::dispose( const ESSReadingProfile * instance_data, 
                            const InstanceHandle_t  instance_handle )
{
  return DataWriter::dispose(instance_data, instance_handle );
}


/*****************************************************************/

ReturnCode_t 
ESSReadingProfileDataWriter::get_key_value( ESSReadingProfile * key_holder, 
                                  const InstanceHandle_t  handle)
{
  if ( ! key_holder )
      return RETCODE_BAD_PARAMETER;

  /* key: use DataWriter to get it */
  return DataWriter::get_key_value(  key_holder, handle );
}


/*****************************************************************/
/* openfmb::essmodule:: */
InstanceHandle_t 
ESSReadingProfileDataWriter::lookup_instance( const ESSReadingProfile * instance_data )
{
  if ( ! instance_data )
      return HANDLE_NIL;

  /* Complex key: use DataWriter to find it */
  return DataWriter::lookup_instance(  instance_data );
}


/******************************************************************
 * openfmb::essmodule:: DataWriter Ops
 *****************************************************************/

/*****************************************************************/
ESSControlDataWriter::ESSControlDataWriter()
{
}

/*****************************************************************/
InstanceHandle_t 
ESSControlDataWriter::register_instance_w_timestamp( const ESSControl *  instance_data,
                                               const Time_t  source_timestamp)
{

  return DataWriter::register_instance_w_timestamp( instance_data, source_timestamp );
}

/*****************************************************************/
 /* openfmb::essmodule:: */
InstanceHandle_t 
ESSControlDataWriter::register_instance(const ESSControl *  instance_data) 
{
  return DataWriter::register_instance( instance_data );
}


/*****************************************************************/

ReturnCode_t 
ESSControlDataWriter::unregister_instance_w_timestamp( const ESSControl * instance_data, 
                                                    const InstanceHandle_t  handle,
                                                    const Time_t  source_timestamp)
{
  return DataWriter::unregister_instance_w_timestamp( instance_data,
                                                      handle,
                                                      source_timestamp );
}


/*****************************************************************/

ReturnCode_t 
ESSControlDataWriter::unregister_instance( const ESSControl * instance_data, 
                                        const InstanceHandle_t  handle)
{
  return DataWriter::unregister_instance( instance_data, handle );
}


/*****************************************************************/

ReturnCode_t 
ESSControlDataWriter::write_w_timestamp( const ESSControl * instance_data, 
                                      const InstanceHandle_t  h, 
                                      const Time_t  source_timestamp)
{
  return DataWriter::write_w_timestamp( instance_data, h, source_timestamp );
}


/*****************************************************************/

ReturnCode_t 
ESSControlDataWriter::write( const ESSControl * instance_data, 
                          const InstanceHandle_t  h)
{
  return DataWriter::write( instance_data, h );
}


/*****************************************************************/

ReturnCode_t 
ESSControlDataWriter::dispose_w_timestamp( const ESSControl * instance_data, 
                                        const InstanceHandle_t  h, 
                                        const Time_t  source_timestamp)
{
  return DataWriter::dispose_w_timestamp( instance_data, h, source_timestamp );
}


/*****************************************************************/

ReturnCode_t 
ESSControlDataWriter::dispose( const ESSControl * instance_data, 
                            const InstanceHandle_t  instance_handle )
{
  return DataWriter::dispose(instance_data, instance_handle );
}


/*****************************************************************/

ReturnCode_t 
ESSControlDataWriter::get_key_value( ESSControl * key_holder, 
                                  const InstanceHandle_t  handle)
{
  if ( ! key_holder )
      return RETCODE_BAD_PARAMETER;

  /* No keys: no op */
  CDX_UNUSED(handle);
  key_holder->clear();
  return DDS::RETCODE_OK;
}


/*****************************************************************/
/* openfmb::essmodule:: */
InstanceHandle_t 
ESSControlDataWriter::lookup_instance( const ESSControl * instance_data )
{
  if ( ! instance_data )
      return HANDLE_NIL;

  /* No keys */
  return DDS::HANDLE_DEFAULT;
}


/******************************************************************
 * openfmb::essmodule:: DataWriter Ops
 *****************************************************************/

/*****************************************************************/
ESSControlProfileDataWriter::ESSControlProfileDataWriter()
{
}

/*****************************************************************/
InstanceHandle_t 
ESSControlProfileDataWriter::register_instance_w_timestamp( const ESSControlProfile *  instance_data,
                                               const Time_t  source_timestamp)
{

  return DataWriter::register_instance_w_timestamp( instance_data, source_timestamp );
}

/*****************************************************************/
 /* openfmb::essmodule:: */
InstanceHandle_t 
ESSControlProfileDataWriter::register_instance(const ESSControlProfile *  instance_data) 
{
  return DataWriter::register_instance( instance_data );
}


/*****************************************************************/

ReturnCode_t 
ESSControlProfileDataWriter::unregister_instance_w_timestamp( const ESSControlProfile * instance_data, 
                                                    const InstanceHandle_t  handle,
                                                    const Time_t  source_timestamp)
{
  return DataWriter::unregister_instance_w_timestamp( instance_data,
                                                      handle,
                                                      source_timestamp );
}


/*****************************************************************/

ReturnCode_t 
ESSControlProfileDataWriter::unregister_instance( const ESSControlProfile * instance_data, 
                                        const InstanceHandle_t  handle)
{
  return DataWriter::unregister_instance( instance_data, handle );
}


/*****************************************************************/

ReturnCode_t 
ESSControlProfileDataWriter::write_w_timestamp( const ESSControlProfile * instance_data, 
                                      const InstanceHandle_t  h, 
                                      const Time_t  source_timestamp)
{
  return DataWriter::write_w_timestamp( instance_data, h, source_timestamp );
}


/*****************************************************************/

ReturnCode_t 
ESSControlProfileDataWriter::write( const ESSControlProfile * instance_data, 
                          const InstanceHandle_t  h)
{
  return DataWriter::write( instance_data, h );
}


/*****************************************************************/

ReturnCode_t 
ESSControlProfileDataWriter::dispose_w_timestamp( const ESSControlProfile * instance_data, 
                                        const InstanceHandle_t  h, 
                                        const Time_t  source_timestamp)
{
  return DataWriter::dispose_w_timestamp( instance_data, h, source_timestamp );
}


/*****************************************************************/

ReturnCode_t 
ESSControlProfileDataWriter::dispose( const ESSControlProfile * instance_data, 
                            const InstanceHandle_t  instance_handle )
{
  return DataWriter::dispose(instance_data, instance_handle );
}


/*****************************************************************/

ReturnCode_t 
ESSControlProfileDataWriter::get_key_value( ESSControlProfile * key_holder, 
                                  const InstanceHandle_t  handle)
{
  if ( ! key_holder )
      return RETCODE_BAD_PARAMETER;

  /* key: use DataWriter to get it */
  return DataWriter::get_key_value(  key_holder, handle );
}


/*****************************************************************/
/* openfmb::essmodule:: */
InstanceHandle_t 
ESSControlProfileDataWriter::lookup_instance( const ESSControlProfile * instance_data )
{
  if ( ! instance_data )
      return HANDLE_NIL;

  /* Complex key: use DataWriter to find it */
  return DataWriter::lookup_instance(  instance_data );
}


}  /* namespace essmodule */
/* END SCOPE: essmodule */
/* START SCOPE: generationmodule */

namespace generationmodule {


/******************************************************************
 * openfmb::generationmodule:: DataWriter Ops
 *****************************************************************/

/*****************************************************************/
GenerationControlProfileDataWriter::GenerationControlProfileDataWriter()
{
}

/*****************************************************************/
InstanceHandle_t 
GenerationControlProfileDataWriter::register_instance_w_timestamp( const GenerationControlProfile *  instance_data,
                                               const Time_t  source_timestamp)
{

  return DataWriter::register_instance_w_timestamp( instance_data, source_timestamp );
}

/*****************************************************************/
 /* openfmb::generationmodule:: */
InstanceHandle_t 
GenerationControlProfileDataWriter::register_instance(const GenerationControlProfile *  instance_data) 
{
  return DataWriter::register_instance( instance_data );
}


/*****************************************************************/

ReturnCode_t 
GenerationControlProfileDataWriter::unregister_instance_w_timestamp( const GenerationControlProfile * instance_data, 
                                                    const InstanceHandle_t  handle,
                                                    const Time_t  source_timestamp)
{
  return DataWriter::unregister_instance_w_timestamp( instance_data,
                                                      handle,
                                                      source_timestamp );
}


/*****************************************************************/

ReturnCode_t 
GenerationControlProfileDataWriter::unregister_instance( const GenerationControlProfile * instance_data, 
                                        const InstanceHandle_t  handle)
{
  return DataWriter::unregister_instance( instance_data, handle );
}


/*****************************************************************/

ReturnCode_t 
GenerationControlProfileDataWriter::write_w_timestamp( const GenerationControlProfile * instance_data, 
                                      const InstanceHandle_t  h, 
                                      const Time_t  source_timestamp)
{
  return DataWriter::write_w_timestamp( instance_data, h, source_timestamp );
}


/*****************************************************************/

ReturnCode_t 
GenerationControlProfileDataWriter::write( const GenerationControlProfile * instance_data, 
                          const InstanceHandle_t  h)
{
  return DataWriter::write( instance_data, h );
}


/*****************************************************************/

ReturnCode_t 
GenerationControlProfileDataWriter::dispose_w_timestamp( const GenerationControlProfile * instance_data, 
                                        const InstanceHandle_t  h, 
                                        const Time_t  source_timestamp)
{
  return DataWriter::dispose_w_timestamp( instance_data, h, source_timestamp );
}


/*****************************************************************/

ReturnCode_t 
GenerationControlProfileDataWriter::dispose( const GenerationControlProfile * instance_data, 
                            const InstanceHandle_t  instance_handle )
{
  return DataWriter::dispose(instance_data, instance_handle );
}


/*****************************************************************/

ReturnCode_t 
GenerationControlProfileDataWriter::get_key_value( GenerationControlProfile * key_holder, 
                                  const InstanceHandle_t  handle)
{
  if ( ! key_holder )
      return RETCODE_BAD_PARAMETER;

  /* key: use DataWriter to get it */
  return DataWriter::get_key_value(  key_holder, handle );
}


/*****************************************************************/
/* openfmb::generationmodule:: */
InstanceHandle_t 
GenerationControlProfileDataWriter::lookup_instance( const GenerationControlProfile * instance_data )
{
  if ( ! instance_data )
      return HANDLE_NIL;

  /* Complex key: use DataWriter to find it */
  return DataWriter::lookup_instance(  instance_data );
}


}  /* namespace generationmodule */
/* END SCOPE: generationmodule */
/* START SCOPE: loadmodule */

namespace loadmodule {


/******************************************************************
 * openfmb::loadmodule:: DataWriter Ops
 *****************************************************************/

/*****************************************************************/
LoadControlFSCCDataWriter::LoadControlFSCCDataWriter()
{
}

/*****************************************************************/
InstanceHandle_t 
LoadControlFSCCDataWriter::register_instance_w_timestamp( const LoadControlFSCC *  instance_data,
                                               const Time_t  source_timestamp)
{

  return DataWriter::register_instance_w_timestamp( instance_data, source_timestamp );
}

/*****************************************************************/
 /* openfmb::loadmodule:: */
InstanceHandle_t 
LoadControlFSCCDataWriter::register_instance(const LoadControlFSCC *  instance_data) 
{
  return DataWriter::register_instance( instance_data );
}


/*****************************************************************/

ReturnCode_t 
LoadControlFSCCDataWriter::unregister_instance_w_timestamp( const LoadControlFSCC * instance_data, 
                                                    const InstanceHandle_t  handle,
                                                    const Time_t  source_timestamp)
{
  return DataWriter::unregister_instance_w_timestamp( instance_data,
                                                      handle,
                                                      source_timestamp );
}


/*****************************************************************/

ReturnCode_t 
LoadControlFSCCDataWriter::unregister_instance( const LoadControlFSCC * instance_data, 
                                        const InstanceHandle_t  handle)
{
  return DataWriter::unregister_instance( instance_data, handle );
}


/*****************************************************************/

ReturnCode_t 
LoadControlFSCCDataWriter::write_w_timestamp( const LoadControlFSCC * instance_data, 
                                      const InstanceHandle_t  h, 
                                      const Time_t  source_timestamp)
{
  return DataWriter::write_w_timestamp( instance_data, h, source_timestamp );
}


/*****************************************************************/

ReturnCode_t 
LoadControlFSCCDataWriter::write( const LoadControlFSCC * instance_data, 
                          const InstanceHandle_t  h)
{
  return DataWriter::write( instance_data, h );
}


/*****************************************************************/

ReturnCode_t 
LoadControlFSCCDataWriter::dispose_w_timestamp( const LoadControlFSCC * instance_data, 
                                        const InstanceHandle_t  h, 
                                        const Time_t  source_timestamp)
{
  return DataWriter::dispose_w_timestamp( instance_data, h, source_timestamp );
}


/*****************************************************************/

ReturnCode_t 
LoadControlFSCCDataWriter::dispose( const LoadControlFSCC * instance_data, 
                            const InstanceHandle_t  instance_handle )
{
  return DataWriter::dispose(instance_data, instance_handle );
}


/*****************************************************************/

ReturnCode_t 
LoadControlFSCCDataWriter::get_key_value( LoadControlFSCC * key_holder, 
                                  const InstanceHandle_t  handle)
{
  if ( ! key_holder )
      return RETCODE_BAD_PARAMETER;

  /* No keys: no op */
  CDX_UNUSED(handle);
  key_holder->clear();
  return DDS::RETCODE_OK;
}


/*****************************************************************/
/* openfmb::loadmodule:: */
InstanceHandle_t 
LoadControlFSCCDataWriter::lookup_instance( const LoadControlFSCC * instance_data )
{
  if ( ! instance_data )
      return HANDLE_NIL;

  /* No keys */
  return DDS::HANDLE_DEFAULT;
}


/******************************************************************
 * openfmb::loadmodule:: DataWriter Ops
 *****************************************************************/

/*****************************************************************/
LoadReadingProfileDataWriter::LoadReadingProfileDataWriter()
{
}

/*****************************************************************/
InstanceHandle_t 
LoadReadingProfileDataWriter::register_instance_w_timestamp( const LoadReadingProfile *  instance_data,
                                               const Time_t  source_timestamp)
{

  return DataWriter::register_instance_w_timestamp( instance_data, source_timestamp );
}

/*****************************************************************/
 /* openfmb::loadmodule:: */
InstanceHandle_t 
LoadReadingProfileDataWriter::register_instance(const LoadReadingProfile *  instance_data) 
{
  return DataWriter::register_instance( instance_data );
}


/*****************************************************************/

ReturnCode_t 
LoadReadingProfileDataWriter::unregister_instance_w_timestamp( const LoadReadingProfile * instance_data, 
                                                    const InstanceHandle_t  handle,
                                                    const Time_t  source_timestamp)
{
  return DataWriter::unregister_instance_w_timestamp( instance_data,
                                                      handle,
                                                      source_timestamp );
}


/*****************************************************************/

ReturnCode_t 
LoadReadingProfileDataWriter::unregister_instance( const LoadReadingProfile * instance_data, 
                                        const InstanceHandle_t  handle)
{
  return DataWriter::unregister_instance( instance_data, handle );
}


/*****************************************************************/

ReturnCode_t 
LoadReadingProfileDataWriter::write_w_timestamp( const LoadReadingProfile * instance_data, 
                                      const InstanceHandle_t  h, 
                                      const Time_t  source_timestamp)
{
  return DataWriter::write_w_timestamp( instance_data, h, source_timestamp );
}


/*****************************************************************/

ReturnCode_t 
LoadReadingProfileDataWriter::write( const LoadReadingProfile * instance_data, 
                          const InstanceHandle_t  h)
{
  return DataWriter::write( instance_data, h );
}


/*****************************************************************/

ReturnCode_t 
LoadReadingProfileDataWriter::dispose_w_timestamp( const LoadReadingProfile * instance_data, 
                                        const InstanceHandle_t  h, 
                                        const Time_t  source_timestamp)
{
  return DataWriter::dispose_w_timestamp( instance_data, h, source_timestamp );
}


/*****************************************************************/

ReturnCode_t 
LoadReadingProfileDataWriter::dispose( const LoadReadingProfile * instance_data, 
                            const InstanceHandle_t  instance_handle )
{
  return DataWriter::dispose(instance_data, instance_handle );
}


/*****************************************************************/

ReturnCode_t 
LoadReadingProfileDataWriter::get_key_value( LoadReadingProfile * key_holder, 
                                  const InstanceHandle_t  handle)
{
  if ( ! key_holder )
      return RETCODE_BAD_PARAMETER;

  /* key: use DataWriter to get it */
  return DataWriter::get_key_value(  key_holder, handle );
}


/*****************************************************************/
/* openfmb::loadmodule:: */
InstanceHandle_t 
LoadReadingProfileDataWriter::lookup_instance( const LoadReadingProfile * instance_data )
{
  if ( ! instance_data )
      return HANDLE_NIL;

  /* Complex key: use DataWriter to find it */
  return DataWriter::lookup_instance(  instance_data );
}


}  /* namespace loadmodule */
/* END SCOPE: loadmodule */
/* START SCOPE: reclosermodule */

namespace reclosermodule {


/******************************************************************
 * openfmb::reclosermodule:: DataWriter Ops
 *****************************************************************/

/*****************************************************************/
RecloserReadingProfileDataWriter::RecloserReadingProfileDataWriter()
{
}

/*****************************************************************/
InstanceHandle_t 
RecloserReadingProfileDataWriter::register_instance_w_timestamp( const RecloserReadingProfile *  instance_data,
                                               const Time_t  source_timestamp)
{

  return DataWriter::register_instance_w_timestamp( instance_data, source_timestamp );
}

/*****************************************************************/
 /* openfmb::reclosermodule:: */
InstanceHandle_t 
RecloserReadingProfileDataWriter::register_instance(const RecloserReadingProfile *  instance_data) 
{
  return DataWriter::register_instance( instance_data );
}


/*****************************************************************/

ReturnCode_t 
RecloserReadingProfileDataWriter::unregister_instance_w_timestamp( const RecloserReadingProfile * instance_data, 
                                                    const InstanceHandle_t  handle,
                                                    const Time_t  source_timestamp)
{
  return DataWriter::unregister_instance_w_timestamp( instance_data,
                                                      handle,
                                                      source_timestamp );
}


/*****************************************************************/

ReturnCode_t 
RecloserReadingProfileDataWriter::unregister_instance( const RecloserReadingProfile * instance_data, 
                                        const InstanceHandle_t  handle)
{
  return DataWriter::unregister_instance( instance_data, handle );
}


/*****************************************************************/

ReturnCode_t 
RecloserReadingProfileDataWriter::write_w_timestamp( const RecloserReadingProfile * instance_data, 
                                      const InstanceHandle_t  h, 
                                      const Time_t  source_timestamp)
{
  return DataWriter::write_w_timestamp( instance_data, h, source_timestamp );
}


/*****************************************************************/

ReturnCode_t 
RecloserReadingProfileDataWriter::write( const RecloserReadingProfile * instance_data, 
                          const InstanceHandle_t  h)
{
  return DataWriter::write( instance_data, h );
}


/*****************************************************************/

ReturnCode_t 
RecloserReadingProfileDataWriter::dispose_w_timestamp( const RecloserReadingProfile * instance_data, 
                                        const InstanceHandle_t  h, 
                                        const Time_t  source_timestamp)
{
  return DataWriter::dispose_w_timestamp( instance_data, h, source_timestamp );
}


/*****************************************************************/

ReturnCode_t 
RecloserReadingProfileDataWriter::dispose( const RecloserReadingProfile * instance_data, 
                            const InstanceHandle_t  instance_handle )
{
  return DataWriter::dispose(instance_data, instance_handle );
}


/*****************************************************************/

ReturnCode_t 
RecloserReadingProfileDataWriter::get_key_value( RecloserReadingProfile * key_holder, 
                                  const InstanceHandle_t  handle)
{
  if ( ! key_holder )
      return RETCODE_BAD_PARAMETER;

  /* key: use DataWriter to get it */
  return DataWriter::get_key_value(  key_holder, handle );
}


/*****************************************************************/
/* openfmb::reclosermodule:: */
InstanceHandle_t 
RecloserReadingProfileDataWriter::lookup_instance( const RecloserReadingProfile * instance_data )
{
  if ( ! instance_data )
      return HANDLE_NIL;

  /* Complex key: use DataWriter to find it */
  return DataWriter::lookup_instance(  instance_data );
}


}  /* namespace reclosermodule */
/* END SCOPE: reclosermodule */
/* START SCOPE: regulatormodule */

namespace regulatormodule {


/******************************************************************
 * openfmb::regulatormodule:: DataWriter Ops
 *****************************************************************/

/*****************************************************************/
RegulatorReadingProfileDataWriter::RegulatorReadingProfileDataWriter()
{
}

/*****************************************************************/
InstanceHandle_t 
RegulatorReadingProfileDataWriter::register_instance_w_timestamp( const RegulatorReadingProfile *  instance_data,
                                               const Time_t  source_timestamp)
{

  return DataWriter::register_instance_w_timestamp( instance_data, source_timestamp );
}

/*****************************************************************/
 /* openfmb::regulatormodule:: */
InstanceHandle_t 
RegulatorReadingProfileDataWriter::register_instance(const RegulatorReadingProfile *  instance_data) 
{
  return DataWriter::register_instance( instance_data );
}


/*****************************************************************/

ReturnCode_t 
RegulatorReadingProfileDataWriter::unregister_instance_w_timestamp( const RegulatorReadingProfile * instance_data, 
                                                    const InstanceHandle_t  handle,
                                                    const Time_t  source_timestamp)
{
  return DataWriter::unregister_instance_w_timestamp( instance_data,
                                                      handle,
                                                      source_timestamp );
}


/*****************************************************************/

ReturnCode_t 
RegulatorReadingProfileDataWriter::unregister_instance( const RegulatorReadingProfile * instance_data, 
                                        const InstanceHandle_t  handle)
{
  return DataWriter::unregister_instance( instance_data, handle );
}


/*****************************************************************/

ReturnCode_t 
RegulatorReadingProfileDataWriter::write_w_timestamp( const RegulatorReadingProfile * instance_data, 
                                      const InstanceHandle_t  h, 
                                      const Time_t  source_timestamp)
{
  return DataWriter::write_w_timestamp( instance_data, h, source_timestamp );
}


/*****************************************************************/

ReturnCode_t 
RegulatorReadingProfileDataWriter::write( const RegulatorReadingProfile * instance_data, 
                          const InstanceHandle_t  h)
{
  return DataWriter::write( instance_data, h );
}


/*****************************************************************/

ReturnCode_t 
RegulatorReadingProfileDataWriter::dispose_w_timestamp( const RegulatorReadingProfile * instance_data, 
                                        const InstanceHandle_t  h, 
                                        const Time_t  source_timestamp)
{
  return DataWriter::dispose_w_timestamp( instance_data, h, source_timestamp );
}


/*****************************************************************/

ReturnCode_t 
RegulatorReadingProfileDataWriter::dispose( const RegulatorReadingProfile * instance_data, 
                            const InstanceHandle_t  instance_handle )
{
  return DataWriter::dispose(instance_data, instance_handle );
}


/*****************************************************************/

ReturnCode_t 
RegulatorReadingProfileDataWriter::get_key_value( RegulatorReadingProfile * key_holder, 
                                  const InstanceHandle_t  handle)
{
  if ( ! key_holder )
      return RETCODE_BAD_PARAMETER;

  /* key: use DataWriter to get it */
  return DataWriter::get_key_value(  key_holder, handle );
}


/*****************************************************************/
/* openfmb::regulatormodule:: */
InstanceHandle_t 
RegulatorReadingProfileDataWriter::lookup_instance( const RegulatorReadingProfile * instance_data )
{
  if ( ! instance_data )
      return HANDLE_NIL;

  /* Complex key: use DataWriter to find it */
  return DataWriter::lookup_instance(  instance_data );
}


}  /* namespace regulatormodule */
/* END SCOPE: regulatormodule */
/* START SCOPE: resourcemodule */

namespace resourcemodule {


/******************************************************************
 * openfmb::resourcemodule:: DataWriter Ops
 *****************************************************************/

/*****************************************************************/
ResourceReadingProfileDataWriter::ResourceReadingProfileDataWriter()
{
}

/*****************************************************************/
InstanceHandle_t 
ResourceReadingProfileDataWriter::register_instance_w_timestamp( const ResourceReadingProfile *  instance_data,
                                               const Time_t  source_timestamp)
{

  return DataWriter::register_instance_w_timestamp( instance_data, source_timestamp );
}

/*****************************************************************/
 /* openfmb::resourcemodule:: */
InstanceHandle_t 
ResourceReadingProfileDataWriter::register_instance(const ResourceReadingProfile *  instance_data) 
{
  return DataWriter::register_instance( instance_data );
}


/*****************************************************************/

ReturnCode_t 
ResourceReadingProfileDataWriter::unregister_instance_w_timestamp( const ResourceReadingProfile * instance_data, 
                                                    const InstanceHandle_t  handle,
                                                    const Time_t  source_timestamp)
{
  return DataWriter::unregister_instance_w_timestamp( instance_data,
                                                      handle,
                                                      source_timestamp );
}


/*****************************************************************/

ReturnCode_t 
ResourceReadingProfileDataWriter::unregister_instance( const ResourceReadingProfile * instance_data, 
                                        const InstanceHandle_t  handle)
{
  return DataWriter::unregister_instance( instance_data, handle );
}


/*****************************************************************/

ReturnCode_t 
ResourceReadingProfileDataWriter::write_w_timestamp( const ResourceReadingProfile * instance_data, 
                                      const InstanceHandle_t  h, 
                                      const Time_t  source_timestamp)
{
  return DataWriter::write_w_timestamp( instance_data, h, source_timestamp );
}


/*****************************************************************/

ReturnCode_t 
ResourceReadingProfileDataWriter::write( const ResourceReadingProfile * instance_data, 
                          const InstanceHandle_t  h)
{
  return DataWriter::write( instance_data, h );
}


/*****************************************************************/

ReturnCode_t 
ResourceReadingProfileDataWriter::dispose_w_timestamp( const ResourceReadingProfile * instance_data, 
                                        const InstanceHandle_t  h, 
                                        const Time_t  source_timestamp)
{
  return DataWriter::dispose_w_timestamp( instance_data, h, source_timestamp );
}


/*****************************************************************/

ReturnCode_t 
ResourceReadingProfileDataWriter::dispose( const ResourceReadingProfile * instance_data, 
                            const InstanceHandle_t  instance_handle )
{
  return DataWriter::dispose(instance_data, instance_handle );
}


/*****************************************************************/

ReturnCode_t 
ResourceReadingProfileDataWriter::get_key_value( ResourceReadingProfile * key_holder, 
                                  const InstanceHandle_t  handle)
{
  if ( ! key_holder )
      return RETCODE_BAD_PARAMETER;

  /* key: use DataWriter to get it */
  return DataWriter::get_key_value(  key_holder, handle );
}


/*****************************************************************/
/* openfmb::resourcemodule:: */
InstanceHandle_t 
ResourceReadingProfileDataWriter::lookup_instance( const ResourceReadingProfile * instance_data )
{
  if ( ! instance_data )
      return HANDLE_NIL;

  /* Complex key: use DataWriter to find it */
  return DataWriter::lookup_instance(  instance_data );
}


}  /* namespace resourcemodule */
/* END SCOPE: resourcemodule */
/* START SCOPE: solarmodule */

namespace solarmodule {


/******************************************************************
 * openfmb::solarmodule:: DataWriter Ops
 *****************************************************************/

/*****************************************************************/
SolarControlFSCCDataWriter::SolarControlFSCCDataWriter()
{
}

/*****************************************************************/
InstanceHandle_t 
SolarControlFSCCDataWriter::register_instance_w_timestamp( const SolarControlFSCC *  instance_data,
                                               const Time_t  source_timestamp)
{

  return DataWriter::register_instance_w_timestamp( instance_data, source_timestamp );
}

/*****************************************************************/
 /* openfmb::solarmodule:: */
InstanceHandle_t 
SolarControlFSCCDataWriter::register_instance(const SolarControlFSCC *  instance_data) 
{
  return DataWriter::register_instance( instance_data );
}


/*****************************************************************/

ReturnCode_t 
SolarControlFSCCDataWriter::unregister_instance_w_timestamp( const SolarControlFSCC * instance_data, 
                                                    const InstanceHandle_t  handle,
                                                    const Time_t  source_timestamp)
{
  return DataWriter::unregister_instance_w_timestamp( instance_data,
                                                      handle,
                                                      source_timestamp );
}


/*****************************************************************/

ReturnCode_t 
SolarControlFSCCDataWriter::unregister_instance( const SolarControlFSCC * instance_data, 
                                        const InstanceHandle_t  handle)
{
  return DataWriter::unregister_instance( instance_data, handle );
}


/*****************************************************************/

ReturnCode_t 
SolarControlFSCCDataWriter::write_w_timestamp( const SolarControlFSCC * instance_data, 
                                      const InstanceHandle_t  h, 
                                      const Time_t  source_timestamp)
{
  return DataWriter::write_w_timestamp( instance_data, h, source_timestamp );
}


/*****************************************************************/

ReturnCode_t 
SolarControlFSCCDataWriter::write( const SolarControlFSCC * instance_data, 
                          const InstanceHandle_t  h)
{
  return DataWriter::write( instance_data, h );
}


/*****************************************************************/

ReturnCode_t 
SolarControlFSCCDataWriter::dispose_w_timestamp( const SolarControlFSCC * instance_data, 
                                        const InstanceHandle_t  h, 
                                        const Time_t  source_timestamp)
{
  return DataWriter::dispose_w_timestamp( instance_data, h, source_timestamp );
}


/*****************************************************************/

ReturnCode_t 
SolarControlFSCCDataWriter::dispose( const SolarControlFSCC * instance_data, 
                            const InstanceHandle_t  instance_handle )
{
  return DataWriter::dispose(instance_data, instance_handle );
}


/*****************************************************************/

ReturnCode_t 
SolarControlFSCCDataWriter::get_key_value( SolarControlFSCC * key_holder, 
                                  const InstanceHandle_t  handle)
{
  if ( ! key_holder )
      return RETCODE_BAD_PARAMETER;

  /* No keys: no op */
  CDX_UNUSED(handle);
  key_holder->clear();
  return DDS::RETCODE_OK;
}


/*****************************************************************/
/* openfmb::solarmodule:: */
InstanceHandle_t 
SolarControlFSCCDataWriter::lookup_instance( const SolarControlFSCC * instance_data )
{
  if ( ! instance_data )
      return HANDLE_NIL;

  /* No keys */
  return DDS::HANDLE_DEFAULT;
}


/******************************************************************
 * openfmb::solarmodule:: DataWriter Ops
 *****************************************************************/

/*****************************************************************/
SolarReadingProfileDataWriter::SolarReadingProfileDataWriter()
{
}

/*****************************************************************/
InstanceHandle_t 
SolarReadingProfileDataWriter::register_instance_w_timestamp( const SolarReadingProfile *  instance_data,
                                               const Time_t  source_timestamp)
{

  return DataWriter::register_instance_w_timestamp( instance_data, source_timestamp );
}

/*****************************************************************/
 /* openfmb::solarmodule:: */
InstanceHandle_t 
SolarReadingProfileDataWriter::register_instance(const SolarReadingProfile *  instance_data) 
{
  return DataWriter::register_instance( instance_data );
}


/*****************************************************************/

ReturnCode_t 
SolarReadingProfileDataWriter::unregister_instance_w_timestamp( const SolarReadingProfile * instance_data, 
                                                    const InstanceHandle_t  handle,
                                                    const Time_t  source_timestamp)
{
  return DataWriter::unregister_instance_w_timestamp( instance_data,
                                                      handle,
                                                      source_timestamp );
}


/*****************************************************************/

ReturnCode_t 
SolarReadingProfileDataWriter::unregister_instance( const SolarReadingProfile * instance_data, 
                                        const InstanceHandle_t  handle)
{
  return DataWriter::unregister_instance( instance_data, handle );
}


/*****************************************************************/

ReturnCode_t 
SolarReadingProfileDataWriter::write_w_timestamp( const SolarReadingProfile * instance_data, 
                                      const InstanceHandle_t  h, 
                                      const Time_t  source_timestamp)
{
  return DataWriter::write_w_timestamp( instance_data, h, source_timestamp );
}


/*****************************************************************/

ReturnCode_t 
SolarReadingProfileDataWriter::write( const SolarReadingProfile * instance_data, 
                          const InstanceHandle_t  h)
{
  return DataWriter::write( instance_data, h );
}


/*****************************************************************/

ReturnCode_t 
SolarReadingProfileDataWriter::dispose_w_timestamp( const SolarReadingProfile * instance_data, 
                                        const InstanceHandle_t  h, 
                                        const Time_t  source_timestamp)
{
  return DataWriter::dispose_w_timestamp( instance_data, h, source_timestamp );
}


/*****************************************************************/

ReturnCode_t 
SolarReadingProfileDataWriter::dispose( const SolarReadingProfile * instance_data, 
                            const InstanceHandle_t  instance_handle )
{
  return DataWriter::dispose(instance_data, instance_handle );
}


/*****************************************************************/

ReturnCode_t 
SolarReadingProfileDataWriter::get_key_value( SolarReadingProfile * key_holder, 
                                  const InstanceHandle_t  handle)
{
  if ( ! key_holder )
      return RETCODE_BAD_PARAMETER;

  /* key: use DataWriter to get it */
  return DataWriter::get_key_value(  key_holder, handle );
}


/*****************************************************************/
/* openfmb::solarmodule:: */
InstanceHandle_t 
SolarReadingProfileDataWriter::lookup_instance( const SolarReadingProfile * instance_data )
{
  if ( ! instance_data )
      return HANDLE_NIL;

  /* Complex key: use DataWriter to find it */
  return DataWriter::lookup_instance(  instance_data );
}


}  /* namespace solarmodule */
/* END SCOPE: solarmodule */
/* START SCOPE: switchmodule */

namespace switchmodule {


/******************************************************************
 * openfmb::switchmodule:: DataWriter Ops
 *****************************************************************/

/*****************************************************************/
SwitchReadingProfileDataWriter::SwitchReadingProfileDataWriter()
{
}

/*****************************************************************/
InstanceHandle_t 
SwitchReadingProfileDataWriter::register_instance_w_timestamp( const SwitchReadingProfile *  instance_data,
                                               const Time_t  source_timestamp)
{

  return DataWriter::register_instance_w_timestamp( instance_data, source_timestamp );
}

/*****************************************************************/
 /* openfmb::switchmodule:: */
InstanceHandle_t 
SwitchReadingProfileDataWriter::register_instance(const SwitchReadingProfile *  instance_data) 
{
  return DataWriter::register_instance( instance_data );
}


/*****************************************************************/

ReturnCode_t 
SwitchReadingProfileDataWriter::unregister_instance_w_timestamp( const SwitchReadingProfile * instance_data, 
                                                    const InstanceHandle_t  handle,
                                                    const Time_t  source_timestamp)
{
  return DataWriter::unregister_instance_w_timestamp( instance_data,
                                                      handle,
                                                      source_timestamp );
}


/*****************************************************************/

ReturnCode_t 
SwitchReadingProfileDataWriter::unregister_instance( const SwitchReadingProfile * instance_data, 
                                        const InstanceHandle_t  handle)
{
  return DataWriter::unregister_instance( instance_data, handle );
}


/*****************************************************************/

ReturnCode_t 
SwitchReadingProfileDataWriter::write_w_timestamp( const SwitchReadingProfile * instance_data, 
                                      const InstanceHandle_t  h, 
                                      const Time_t  source_timestamp)
{
  return DataWriter::write_w_timestamp( instance_data, h, source_timestamp );
}


/*****************************************************************/

ReturnCode_t 
SwitchReadingProfileDataWriter::write( const SwitchReadingProfile * instance_data, 
                          const InstanceHandle_t  h)
{
  return DataWriter::write( instance_data, h );
}


/*****************************************************************/

ReturnCode_t 
SwitchReadingProfileDataWriter::dispose_w_timestamp( const SwitchReadingProfile * instance_data, 
                                        const InstanceHandle_t  h, 
                                        const Time_t  source_timestamp)
{
  return DataWriter::dispose_w_timestamp( instance_data, h, source_timestamp );
}


/*****************************************************************/

ReturnCode_t 
SwitchReadingProfileDataWriter::dispose( const SwitchReadingProfile * instance_data, 
                            const InstanceHandle_t  instance_handle )
{
  return DataWriter::dispose(instance_data, instance_handle );
}


/*****************************************************************/

ReturnCode_t 
SwitchReadingProfileDataWriter::get_key_value( SwitchReadingProfile * key_holder, 
                                  const InstanceHandle_t  handle)
{
  if ( ! key_holder )
      return RETCODE_BAD_PARAMETER;

  /* key: use DataWriter to get it */
  return DataWriter::get_key_value(  key_holder, handle );
}


/*****************************************************************/
/* openfmb::switchmodule:: */
InstanceHandle_t 
SwitchReadingProfileDataWriter::lookup_instance( const SwitchReadingProfile * instance_data )
{
  if ( ! instance_data )
      return HANDLE_NIL;

  /* Complex key: use DataWriter to find it */
  return DataWriter::lookup_instance(  instance_data );
}


}  /* namespace switchmodule */
/* END SCOPE: switchmodule */

}  /* namespace openfmb */
/* END SCOPE: openfmb */
/* START SCOPE: openfmb */

namespace openfmb {

/* START SCOPE: breakermodule */

namespace breakermodule {


/******************************************************************
 * openfmb::breakermodule:: DataWriter Ops
 *****************************************************************/

/*****************************************************************/
BreakerReadingProfileDataWriter::BreakerReadingProfileDataWriter()
{
}

/*****************************************************************/
InstanceHandle_t 
BreakerReadingProfileDataWriter::register_instance_w_timestamp( const BreakerReadingProfile *  instance_data,
                                               const Time_t  source_timestamp)
{

  return DataWriter::register_instance_w_timestamp( instance_data, source_timestamp );
}

/*****************************************************************/
 /* openfmb::breakermodule:: */
InstanceHandle_t 
BreakerReadingProfileDataWriter::register_instance(const BreakerReadingProfile *  instance_data) 
{
  return DataWriter::register_instance( instance_data );
}


/*****************************************************************/

ReturnCode_t 
BreakerReadingProfileDataWriter::unregister_instance_w_timestamp( const BreakerReadingProfile * instance_data, 
                                                    const InstanceHandle_t  handle,
                                                    const Time_t  source_timestamp)
{
  return DataWriter::unregister_instance_w_timestamp( instance_data,
                                                      handle,
                                                      source_timestamp );
}


/*****************************************************************/

ReturnCode_t 
BreakerReadingProfileDataWriter::unregister_instance( const BreakerReadingProfile * instance_data, 
                                        const InstanceHandle_t  handle)
{
  return DataWriter::unregister_instance( instance_data, handle );
}


/*****************************************************************/

ReturnCode_t 
BreakerReadingProfileDataWriter::write_w_timestamp( const BreakerReadingProfile * instance_data, 
                                      const InstanceHandle_t  h, 
                                      const Time_t  source_timestamp)
{
  return DataWriter::write_w_timestamp( instance_data, h, source_timestamp );
}


/*****************************************************************/

ReturnCode_t 
BreakerReadingProfileDataWriter::write( const BreakerReadingProfile * instance_data, 
                          const InstanceHandle_t  h)
{
  return DataWriter::write( instance_data, h );
}


/*****************************************************************/

ReturnCode_t 
BreakerReadingProfileDataWriter::dispose_w_timestamp( const BreakerReadingProfile * instance_data, 
                                        const InstanceHandle_t  h, 
                                        const Time_t  source_timestamp)
{
  return DataWriter::dispose_w_timestamp( instance_data, h, source_timestamp );
}


/*****************************************************************/

ReturnCode_t 
BreakerReadingProfileDataWriter::dispose( const BreakerReadingProfile * instance_data, 
                            const InstanceHandle_t  instance_handle )
{
  return DataWriter::dispose(instance_data, instance_handle );
}


/*****************************************************************/

ReturnCode_t 
BreakerReadingProfileDataWriter::get_key_value( BreakerReadingProfile * key_holder, 
                                  const InstanceHandle_t  handle)
{
  if ( ! key_holder )
      return RETCODE_BAD_PARAMETER;

  /* key: use DataWriter to get it */
  return DataWriter::get_key_value(  key_holder, handle );
}


/*****************************************************************/
/* openfmb::breakermodule:: */
InstanceHandle_t 
BreakerReadingProfileDataWriter::lookup_instance( const BreakerReadingProfile * instance_data )
{
  if ( ! instance_data )
      return HANDLE_NIL;

  /* Complex key: use DataWriter to find it */
  return DataWriter::lookup_instance(  instance_data );
}


}  /* namespace breakermodule */
/* END SCOPE: breakermodule */
/* START SCOPE: loadmodule */

namespace loadmodule {


/******************************************************************
 * openfmb::loadmodule:: DataWriter Ops
 *****************************************************************/

/*****************************************************************/
LoadControlProfileDataWriter::LoadControlProfileDataWriter()
{
}

/*****************************************************************/
InstanceHandle_t 
LoadControlProfileDataWriter::register_instance_w_timestamp( const LoadControlProfile *  instance_data,
                                               const Time_t  source_timestamp)
{

  return DataWriter::register_instance_w_timestamp( instance_data, source_timestamp );
}

/*****************************************************************/
 /* openfmb::loadmodule:: */
InstanceHandle_t 
LoadControlProfileDataWriter::register_instance(const LoadControlProfile *  instance_data) 
{
  return DataWriter::register_instance( instance_data );
}


/*****************************************************************/

ReturnCode_t 
LoadControlProfileDataWriter::unregister_instance_w_timestamp( const LoadControlProfile * instance_data, 
                                                    const InstanceHandle_t  handle,
                                                    const Time_t  source_timestamp)
{
  return DataWriter::unregister_instance_w_timestamp( instance_data,
                                                      handle,
                                                      source_timestamp );
}


/*****************************************************************/

ReturnCode_t 
LoadControlProfileDataWriter::unregister_instance( const LoadControlProfile * instance_data, 
                                        const InstanceHandle_t  handle)
{
  return DataWriter::unregister_instance( instance_data, handle );
}


/*****************************************************************/

ReturnCode_t 
LoadControlProfileDataWriter::write_w_timestamp( const LoadControlProfile * instance_data, 
                                      const InstanceHandle_t  h, 
                                      const Time_t  source_timestamp)
{
  return DataWriter::write_w_timestamp( instance_data, h, source_timestamp );
}


/*****************************************************************/

ReturnCode_t 
LoadControlProfileDataWriter::write( const LoadControlProfile * instance_data, 
                          const InstanceHandle_t  h)
{
  return DataWriter::write( instance_data, h );
}


/*****************************************************************/

ReturnCode_t 
LoadControlProfileDataWriter::dispose_w_timestamp( const LoadControlProfile * instance_data, 
                                        const InstanceHandle_t  h, 
                                        const Time_t  source_timestamp)
{
  return DataWriter::dispose_w_timestamp( instance_data, h, source_timestamp );
}


/*****************************************************************/

ReturnCode_t 
LoadControlProfileDataWriter::dispose( const LoadControlProfile * instance_data, 
                            const InstanceHandle_t  instance_handle )
{
  return DataWriter::dispose(instance_data, instance_handle );
}


/*****************************************************************/

ReturnCode_t 
LoadControlProfileDataWriter::get_key_value( LoadControlProfile * key_holder, 
                                  const InstanceHandle_t  handle)
{
  if ( ! key_holder )
      return RETCODE_BAD_PARAMETER;

  /* key: use DataWriter to get it */
  return DataWriter::get_key_value(  key_holder, handle );
}


/*****************************************************************/
/* openfmb::loadmodule:: */
InstanceHandle_t 
LoadControlProfileDataWriter::lookup_instance( const LoadControlProfile * instance_data )
{
  if ( ! instance_data )
      return HANDLE_NIL;

  /* Complex key: use DataWriter to find it */
  return DataWriter::lookup_instance(  instance_data );
}


}  /* namespace loadmodule */
/* END SCOPE: loadmodule */
/* START SCOPE: solarmodule */

namespace solarmodule {


/******************************************************************
 * openfmb::solarmodule:: DataWriter Ops
 *****************************************************************/

/*****************************************************************/
SolarControlProfileDataWriter::SolarControlProfileDataWriter()
{
}

/*****************************************************************/
InstanceHandle_t 
SolarControlProfileDataWriter::register_instance_w_timestamp( const SolarControlProfile *  instance_data,
                                               const Time_t  source_timestamp)
{

  return DataWriter::register_instance_w_timestamp( instance_data, source_timestamp );
}

/*****************************************************************/
 /* openfmb::solarmodule:: */
InstanceHandle_t 
SolarControlProfileDataWriter::register_instance(const SolarControlProfile *  instance_data) 
{
  return DataWriter::register_instance( instance_data );
}


/*****************************************************************/

ReturnCode_t 
SolarControlProfileDataWriter::unregister_instance_w_timestamp( const SolarControlProfile * instance_data, 
                                                    const InstanceHandle_t  handle,
                                                    const Time_t  source_timestamp)
{
  return DataWriter::unregister_instance_w_timestamp( instance_data,
                                                      handle,
                                                      source_timestamp );
}


/*****************************************************************/

ReturnCode_t 
SolarControlProfileDataWriter::unregister_instance( const SolarControlProfile * instance_data, 
                                        const InstanceHandle_t  handle)
{
  return DataWriter::unregister_instance( instance_data, handle );
}


/*****************************************************************/

ReturnCode_t 
SolarControlProfileDataWriter::write_w_timestamp( const SolarControlProfile * instance_data, 
                                      const InstanceHandle_t  h, 
                                      const Time_t  source_timestamp)
{
  return DataWriter::write_w_timestamp( instance_data, h, source_timestamp );
}


/*****************************************************************/

ReturnCode_t 
SolarControlProfileDataWriter::write( const SolarControlProfile * instance_data, 
                          const InstanceHandle_t  h)
{
  return DataWriter::write( instance_data, h );
}


/*****************************************************************/

ReturnCode_t 
SolarControlProfileDataWriter::dispose_w_timestamp( const SolarControlProfile * instance_data, 
                                        const InstanceHandle_t  h, 
                                        const Time_t  source_timestamp)
{
  return DataWriter::dispose_w_timestamp( instance_data, h, source_timestamp );
}


/*****************************************************************/

ReturnCode_t 
SolarControlProfileDataWriter::dispose( const SolarControlProfile * instance_data, 
                            const InstanceHandle_t  instance_handle )
{
  return DataWriter::dispose(instance_data, instance_handle );
}


/*****************************************************************/

ReturnCode_t 
SolarControlProfileDataWriter::get_key_value( SolarControlProfile * key_holder, 
                                  const InstanceHandle_t  handle)
{
  if ( ! key_holder )
      return RETCODE_BAD_PARAMETER;

  /* key: use DataWriter to get it */
  return DataWriter::get_key_value(  key_holder, handle );
}


/*****************************************************************/
/* openfmb::solarmodule:: */
InstanceHandle_t 
SolarControlProfileDataWriter::lookup_instance( const SolarControlProfile * instance_data )
{
  if ( ! instance_data )
      return HANDLE_NIL;

  /* Complex key: use DataWriter to find it */
  return DataWriter::lookup_instance(  instance_data );
}


}  /* namespace solarmodule */
/* END SCOPE: solarmodule */

}  /* namespace openfmb */
/* END SCOPE: openfmb */
