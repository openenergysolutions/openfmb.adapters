/********************************************
 * Type specific DataReader header file.    *
 * Autogenerated by CoreDX DDL compiler.    *
 * Do no edit - edits may be overwritten.   *
 ********************************************/

#ifndef _OPENFMB_DATAREADER_HH
#define _OPENFMB_DATAREADER_HH
#include <dds/dds.hh>
#include "OpenFMB.hh"

using namespace DDS;
/* START SCOPE: UML_Extension */

namespace UML_Extension {


}  /* namespace UML_Extension */
/* END SCOPE: UML_Extension */
/* START SCOPE: openfmb */

namespace openfmb {

/* START SCOPE: breakermodule */

namespace breakermodule {


}  /* namespace breakermodule */
/* END SCOPE: breakermodule */
/* START SCOPE: commonmodule */

namespace commonmodule {


}  /* namespace commonmodule */
/* END SCOPE: commonmodule */
/* START SCOPE: essmodule */

namespace essmodule {


}  /* namespace essmodule */
/* END SCOPE: essmodule */
/* START SCOPE: generationmodule */

namespace generationmodule {


}  /* namespace generationmodule */
/* END SCOPE: generationmodule */
/* START SCOPE: interconnectionmodule */

namespace interconnectionmodule {


}  /* namespace interconnectionmodule */
/* END SCOPE: interconnectionmodule */
/* START SCOPE: loadmodule */

namespace loadmodule {


}  /* namespace loadmodule */
/* END SCOPE: loadmodule */
/* START SCOPE: optimizermodule */

namespace optimizermodule {


}  /* namespace optimizermodule */
/* END SCOPE: optimizermodule */
/* START SCOPE: reclosermodule */

namespace reclosermodule {


}  /* namespace reclosermodule */
/* END SCOPE: reclosermodule */
/* START SCOPE: regulatormodule */

namespace regulatormodule {


}  /* namespace regulatormodule */
/* END SCOPE: regulatormodule */
/* START SCOPE: resourcemodule */

namespace resourcemodule {


}  /* namespace resourcemodule */
/* END SCOPE: resourcemodule */
/* START SCOPE: solarmodule */

namespace solarmodule {


}  /* namespace solarmodule */
/* END SCOPE: solarmodule */
/* START SCOPE: switchmodule */

namespace switchmodule {


}  /* namespace switchmodule */
/* END SCOPE: switchmodule */

}  /* namespace openfmb */
/* END SCOPE: openfmb */
/* START SCOPE: openfmb */

namespace openfmb {

/* START SCOPE: commonmodule */

namespace commonmodule {

class BCRTypeSupport;
/******************************************************************
 *   openfmb::commonmodule:: BCR DataReader Class
 ******************************************************************/

class COREDX_TS_CLASS_EXPORT BCRDataReader : public DataReader
{
  friend class DDS::DomainParticipant;
  friend class BCRTypeSupport;

 public:


  /* DataReader Meathods */

  ReturnCode_t read( BCRPtrSeq *    received_data,
                     SampleInfoSeq *   sample_infos,
                     int               max_samples,
                     SampleStateMask   sample_states,
                     ViewStateMask     view_states,
                     InstanceStateMask instance_states );

  ReturnCode_t take( BCRPtrSeq       * received_data,
                     SampleInfoSeq    * sample_infos,
                     int                max_samples,
                     SampleStateMask    sample_states, 
                     ViewStateMask      view_states, 
                     InstanceStateMask  instance_states );


  ReturnCode_t read_w_condition ( BCRPtrSeq    * received_data,
                                  SampleInfoSeq * sample_infos,
                                  int             max_samples,
                                  ReadCondition * a_condition);
  
  ReturnCode_t take_w_condition ( BCRPtrSeq     * received_data,
                                  SampleInfoSeq  * sample_infos,
                                  int              max_samples,
                                  ReadCondition *  a_condition);
  
  ReturnCode_t read_next_sample ( BCR *       received_data,
                                  SampleInfo * sample_info);
  
  ReturnCode_t take_next_sample ( BCR *       received_data,
                                  SampleInfo * sample_info);
  
  ReturnCode_t read_instance ( BCRPtrSeq       * received_data,
                               SampleInfoSeq    * sample_infos,
                               int                max_samples,
                               InstanceHandle_t   a_handle,
                               SampleStateMask    sample_states, 
                               ViewStateMask      view_states, 
                               InstanceStateMask  instance_states);
  
  ReturnCode_t take_instance ( BCRPtrSeq      * received_data,
                               SampleInfoSeq   * sample_infos,
                               int               max_samples,
                               InstanceHandle_t  a_handle,
                               SampleStateMask   sample_states, 
                               ViewStateMask     view_states, 
                               InstanceStateMask instance_states);
  
  ReturnCode_t read_next_instance ( BCRPtrSeq      * received_data,
                                    SampleInfoSeq   * sample_infos,
                                    int               max_samples,
                                    InstanceHandle_t  previous_handle,
                                    SampleStateMask   sample_states, 
                                    ViewStateMask     view_states, 
                                    InstanceStateMask instance_states);
  
  ReturnCode_t take_next_instance ( BCRPtrSeq       * received_data,
                                    SampleInfoSeq    * sample_infos,
                                    int                max_samples,
                                    InstanceHandle_t   previous_handle,
                                    SampleStateMask    sample_states, 
                                    ViewStateMask      view_states, 
                                    InstanceStateMask  instance_states);
  
  ReturnCode_t read_next_instance_w_condition( BCRPtrSeq       * received_data,
                                   SampleInfoSeq    * sample_infos,
                                   int                max_samples,
                                   InstanceHandle_t   previous_handle,
                                   ReadCondition *    a_condition);

  ReturnCode_t take_next_instance_w_condition( BCRPtrSeq       * received_data,
                                   SampleInfoSeq    * sample_infos,
                                   int                max_samples,
                                   InstanceHandle_t   previous_handle,
                                   ReadCondition *    a_condition);

  ReturnCode_t return_loan ( BCRPtrSeq     * received_data,
                             SampleInfoSeq  * sample_infos);
  
  ReturnCode_t get_key_value ( BCR            * key_holder, 
                               InstanceHandle_t  handle);
    
  InstanceHandle_t lookup_instance ( BCR       * instance_data);

  static BCRDataReader * narrow( DataReader * dr) { return (BCRDataReader *)dr; }
  BCRDataReader        * narrow( void )           { return this; }


 protected:
  /* Constructor / Destructor - use Subscriber::create_datareader() */

  BCRDataReader();
  ~BCRDataReader() {};
 private:

};

}  /* namespace commonmodule */
/* END SCOPE: commonmodule */
/* START SCOPE: essmodule */

namespace essmodule {

class ENC_ESSControlKindTypeSupport;
/******************************************************************
 *   openfmb::essmodule:: ENC_ESSControlKind DataReader Class
 ******************************************************************/

class COREDX_TS_CLASS_EXPORT ENC_ESSControlKindDataReader : public DataReader
{
  friend class DDS::DomainParticipant;
  friend class ENC_ESSControlKindTypeSupport;

 public:


  /* DataReader Meathods */

  ReturnCode_t read( ENC_ESSControlKindPtrSeq *    received_data,
                     SampleInfoSeq *   sample_infos,
                     int               max_samples,
                     SampleStateMask   sample_states,
                     ViewStateMask     view_states,
                     InstanceStateMask instance_states );

  ReturnCode_t take( ENC_ESSControlKindPtrSeq       * received_data,
                     SampleInfoSeq    * sample_infos,
                     int                max_samples,
                     SampleStateMask    sample_states, 
                     ViewStateMask      view_states, 
                     InstanceStateMask  instance_states );


  ReturnCode_t read_w_condition ( ENC_ESSControlKindPtrSeq    * received_data,
                                  SampleInfoSeq * sample_infos,
                                  int             max_samples,
                                  ReadCondition * a_condition);
  
  ReturnCode_t take_w_condition ( ENC_ESSControlKindPtrSeq     * received_data,
                                  SampleInfoSeq  * sample_infos,
                                  int              max_samples,
                                  ReadCondition *  a_condition);
  
  ReturnCode_t read_next_sample ( ENC_ESSControlKind *       received_data,
                                  SampleInfo * sample_info);
  
  ReturnCode_t take_next_sample ( ENC_ESSControlKind *       received_data,
                                  SampleInfo * sample_info);
  
  ReturnCode_t read_instance ( ENC_ESSControlKindPtrSeq       * received_data,
                               SampleInfoSeq    * sample_infos,
                               int                max_samples,
                               InstanceHandle_t   a_handle,
                               SampleStateMask    sample_states, 
                               ViewStateMask      view_states, 
                               InstanceStateMask  instance_states);
  
  ReturnCode_t take_instance ( ENC_ESSControlKindPtrSeq      * received_data,
                               SampleInfoSeq   * sample_infos,
                               int               max_samples,
                               InstanceHandle_t  a_handle,
                               SampleStateMask   sample_states, 
                               ViewStateMask     view_states, 
                               InstanceStateMask instance_states);
  
  ReturnCode_t read_next_instance ( ENC_ESSControlKindPtrSeq      * received_data,
                                    SampleInfoSeq   * sample_infos,
                                    int               max_samples,
                                    InstanceHandle_t  previous_handle,
                                    SampleStateMask   sample_states, 
                                    ViewStateMask     view_states, 
                                    InstanceStateMask instance_states);
  
  ReturnCode_t take_next_instance ( ENC_ESSControlKindPtrSeq       * received_data,
                                    SampleInfoSeq    * sample_infos,
                                    int                max_samples,
                                    InstanceHandle_t   previous_handle,
                                    SampleStateMask    sample_states, 
                                    ViewStateMask      view_states, 
                                    InstanceStateMask  instance_states);
  
  ReturnCode_t read_next_instance_w_condition( ENC_ESSControlKindPtrSeq       * received_data,
                                   SampleInfoSeq    * sample_infos,
                                   int                max_samples,
                                   InstanceHandle_t   previous_handle,
                                   ReadCondition *    a_condition);

  ReturnCode_t take_next_instance_w_condition( ENC_ESSControlKindPtrSeq       * received_data,
                                   SampleInfoSeq    * sample_infos,
                                   int                max_samples,
                                   InstanceHandle_t   previous_handle,
                                   ReadCondition *    a_condition);

  ReturnCode_t return_loan ( ENC_ESSControlKindPtrSeq     * received_data,
                             SampleInfoSeq  * sample_infos);
  
  ReturnCode_t get_key_value ( ENC_ESSControlKind            * key_holder, 
                               InstanceHandle_t  handle);
    
  InstanceHandle_t lookup_instance ( ENC_ESSControlKind       * instance_data);

  static ENC_ESSControlKindDataReader * narrow( DataReader * dr) { return (ENC_ESSControlKindDataReader *)dr; }
  ENC_ESSControlKindDataReader        * narrow( void )           { return this; }


 protected:
  /* Constructor / Destructor - use Subscriber::create_datareader() */

  ENC_ESSControlKindDataReader();
  ~ENC_ESSControlKindDataReader() {};
 private:

};

}  /* namespace essmodule */
/* END SCOPE: essmodule */
/* START SCOPE: generationmodule */

namespace generationmodule {

class GenerationControlScheduleProfileTypeSupport;
/******************************************************************
 *   openfmb::generationmodule:: GenerationControlScheduleProfile DataReader Class
 ******************************************************************/

class COREDX_TS_CLASS_EXPORT GenerationControlScheduleProfileDataReader : public DataReader
{
  friend class DDS::DomainParticipant;
  friend class GenerationControlScheduleProfileTypeSupport;

 public:


  /* DataReader Meathods */

  ReturnCode_t read( GenerationControlScheduleProfilePtrSeq *    received_data,
                     SampleInfoSeq *   sample_infos,
                     int               max_samples,
                     SampleStateMask   sample_states,
                     ViewStateMask     view_states,
                     InstanceStateMask instance_states );

  ReturnCode_t take( GenerationControlScheduleProfilePtrSeq       * received_data,
                     SampleInfoSeq    * sample_infos,
                     int                max_samples,
                     SampleStateMask    sample_states, 
                     ViewStateMask      view_states, 
                     InstanceStateMask  instance_states );


  ReturnCode_t read_w_condition ( GenerationControlScheduleProfilePtrSeq    * received_data,
                                  SampleInfoSeq * sample_infos,
                                  int             max_samples,
                                  ReadCondition * a_condition);
  
  ReturnCode_t take_w_condition ( GenerationControlScheduleProfilePtrSeq     * received_data,
                                  SampleInfoSeq  * sample_infos,
                                  int              max_samples,
                                  ReadCondition *  a_condition);
  
  ReturnCode_t read_next_sample ( GenerationControlScheduleProfile *       received_data,
                                  SampleInfo * sample_info);
  
  ReturnCode_t take_next_sample ( GenerationControlScheduleProfile *       received_data,
                                  SampleInfo * sample_info);
  
  ReturnCode_t read_instance ( GenerationControlScheduleProfilePtrSeq       * received_data,
                               SampleInfoSeq    * sample_infos,
                               int                max_samples,
                               InstanceHandle_t   a_handle,
                               SampleStateMask    sample_states, 
                               ViewStateMask      view_states, 
                               InstanceStateMask  instance_states);
  
  ReturnCode_t take_instance ( GenerationControlScheduleProfilePtrSeq      * received_data,
                               SampleInfoSeq   * sample_infos,
                               int               max_samples,
                               InstanceHandle_t  a_handle,
                               SampleStateMask   sample_states, 
                               ViewStateMask     view_states, 
                               InstanceStateMask instance_states);
  
  ReturnCode_t read_next_instance ( GenerationControlScheduleProfilePtrSeq      * received_data,
                                    SampleInfoSeq   * sample_infos,
                                    int               max_samples,
                                    InstanceHandle_t  previous_handle,
                                    SampleStateMask   sample_states, 
                                    ViewStateMask     view_states, 
                                    InstanceStateMask instance_states);
  
  ReturnCode_t take_next_instance ( GenerationControlScheduleProfilePtrSeq       * received_data,
                                    SampleInfoSeq    * sample_infos,
                                    int                max_samples,
                                    InstanceHandle_t   previous_handle,
                                    SampleStateMask    sample_states, 
                                    ViewStateMask      view_states, 
                                    InstanceStateMask  instance_states);
  
  ReturnCode_t read_next_instance_w_condition( GenerationControlScheduleProfilePtrSeq       * received_data,
                                   SampleInfoSeq    * sample_infos,
                                   int                max_samples,
                                   InstanceHandle_t   previous_handle,
                                   ReadCondition *    a_condition);

  ReturnCode_t take_next_instance_w_condition( GenerationControlScheduleProfilePtrSeq       * received_data,
                                   SampleInfoSeq    * sample_infos,
                                   int                max_samples,
                                   InstanceHandle_t   previous_handle,
                                   ReadCondition *    a_condition);

  ReturnCode_t return_loan ( GenerationControlScheduleProfilePtrSeq     * received_data,
                             SampleInfoSeq  * sample_infos);
  
  ReturnCode_t get_key_value ( GenerationControlScheduleProfile            * key_holder, 
                               InstanceHandle_t  handle);
    
  InstanceHandle_t lookup_instance ( GenerationControlScheduleProfile       * instance_data);

  static GenerationControlScheduleProfileDataReader * narrow( DataReader * dr) { return (GenerationControlScheduleProfileDataReader *)dr; }
  GenerationControlScheduleProfileDataReader        * narrow( void )           { return this; }


 protected:
  /* Constructor / Destructor - use Subscriber::create_datareader() */

  GenerationControlScheduleProfileDataReader();
  ~GenerationControlScheduleProfileDataReader() {};
 private:

};

}  /* namespace generationmodule */
/* END SCOPE: generationmodule */
/* START SCOPE: interconnectionmodule */

namespace interconnectionmodule {

class PlannedInterconnectionScheduleProfileTypeSupport;
/******************************************************************
 *   openfmb::interconnectionmodule:: PlannedInterconnectionScheduleProfile DataReader Class
 ******************************************************************/

class COREDX_TS_CLASS_EXPORT PlannedInterconnectionScheduleProfileDataReader : public DataReader
{
  friend class DDS::DomainParticipant;
  friend class PlannedInterconnectionScheduleProfileTypeSupport;

 public:


  /* DataReader Meathods */

  ReturnCode_t read( PlannedInterconnectionScheduleProfilePtrSeq *    received_data,
                     SampleInfoSeq *   sample_infos,
                     int               max_samples,
                     SampleStateMask   sample_states,
                     ViewStateMask     view_states,
                     InstanceStateMask instance_states );

  ReturnCode_t take( PlannedInterconnectionScheduleProfilePtrSeq       * received_data,
                     SampleInfoSeq    * sample_infos,
                     int                max_samples,
                     SampleStateMask    sample_states, 
                     ViewStateMask      view_states, 
                     InstanceStateMask  instance_states );


  ReturnCode_t read_w_condition ( PlannedInterconnectionScheduleProfilePtrSeq    * received_data,
                                  SampleInfoSeq * sample_infos,
                                  int             max_samples,
                                  ReadCondition * a_condition);
  
  ReturnCode_t take_w_condition ( PlannedInterconnectionScheduleProfilePtrSeq     * received_data,
                                  SampleInfoSeq  * sample_infos,
                                  int              max_samples,
                                  ReadCondition *  a_condition);
  
  ReturnCode_t read_next_sample ( PlannedInterconnectionScheduleProfile *       received_data,
                                  SampleInfo * sample_info);
  
  ReturnCode_t take_next_sample ( PlannedInterconnectionScheduleProfile *       received_data,
                                  SampleInfo * sample_info);
  
  ReturnCode_t read_instance ( PlannedInterconnectionScheduleProfilePtrSeq       * received_data,
                               SampleInfoSeq    * sample_infos,
                               int                max_samples,
                               InstanceHandle_t   a_handle,
                               SampleStateMask    sample_states, 
                               ViewStateMask      view_states, 
                               InstanceStateMask  instance_states);
  
  ReturnCode_t take_instance ( PlannedInterconnectionScheduleProfilePtrSeq      * received_data,
                               SampleInfoSeq   * sample_infos,
                               int               max_samples,
                               InstanceHandle_t  a_handle,
                               SampleStateMask   sample_states, 
                               ViewStateMask     view_states, 
                               InstanceStateMask instance_states);
  
  ReturnCode_t read_next_instance ( PlannedInterconnectionScheduleProfilePtrSeq      * received_data,
                                    SampleInfoSeq   * sample_infos,
                                    int               max_samples,
                                    InstanceHandle_t  previous_handle,
                                    SampleStateMask   sample_states, 
                                    ViewStateMask     view_states, 
                                    InstanceStateMask instance_states);
  
  ReturnCode_t take_next_instance ( PlannedInterconnectionScheduleProfilePtrSeq       * received_data,
                                    SampleInfoSeq    * sample_infos,
                                    int                max_samples,
                                    InstanceHandle_t   previous_handle,
                                    SampleStateMask    sample_states, 
                                    ViewStateMask      view_states, 
                                    InstanceStateMask  instance_states);
  
  ReturnCode_t read_next_instance_w_condition( PlannedInterconnectionScheduleProfilePtrSeq       * received_data,
                                   SampleInfoSeq    * sample_infos,
                                   int                max_samples,
                                   InstanceHandle_t   previous_handle,
                                   ReadCondition *    a_condition);

  ReturnCode_t take_next_instance_w_condition( PlannedInterconnectionScheduleProfilePtrSeq       * received_data,
                                   SampleInfoSeq    * sample_infos,
                                   int                max_samples,
                                   InstanceHandle_t   previous_handle,
                                   ReadCondition *    a_condition);

  ReturnCode_t return_loan ( PlannedInterconnectionScheduleProfilePtrSeq     * received_data,
                             SampleInfoSeq  * sample_infos);
  
  ReturnCode_t get_key_value ( PlannedInterconnectionScheduleProfile            * key_holder, 
                               InstanceHandle_t  handle);
    
  InstanceHandle_t lookup_instance ( PlannedInterconnectionScheduleProfile       * instance_data);

  static PlannedInterconnectionScheduleProfileDataReader * narrow( DataReader * dr) { return (PlannedInterconnectionScheduleProfileDataReader *)dr; }
  PlannedInterconnectionScheduleProfileDataReader        * narrow( void )           { return this; }


 protected:
  /* Constructor / Destructor - use Subscriber::create_datareader() */

  PlannedInterconnectionScheduleProfileDataReader();
  ~PlannedInterconnectionScheduleProfileDataReader() {};
 private:

};
class RequestedInterconnectionScheduleProfileTypeSupport;
/******************************************************************
 *   openfmb::interconnectionmodule:: RequestedInterconnectionScheduleProfile DataReader Class
 ******************************************************************/

class COREDX_TS_CLASS_EXPORT RequestedInterconnectionScheduleProfileDataReader : public DataReader
{
  friend class DDS::DomainParticipant;
  friend class RequestedInterconnectionScheduleProfileTypeSupport;

 public:


  /* DataReader Meathods */

  ReturnCode_t read( RequestedInterconnectionScheduleProfilePtrSeq *    received_data,
                     SampleInfoSeq *   sample_infos,
                     int               max_samples,
                     SampleStateMask   sample_states,
                     ViewStateMask     view_states,
                     InstanceStateMask instance_states );

  ReturnCode_t take( RequestedInterconnectionScheduleProfilePtrSeq       * received_data,
                     SampleInfoSeq    * sample_infos,
                     int                max_samples,
                     SampleStateMask    sample_states, 
                     ViewStateMask      view_states, 
                     InstanceStateMask  instance_states );


  ReturnCode_t read_w_condition ( RequestedInterconnectionScheduleProfilePtrSeq    * received_data,
                                  SampleInfoSeq * sample_infos,
                                  int             max_samples,
                                  ReadCondition * a_condition);
  
  ReturnCode_t take_w_condition ( RequestedInterconnectionScheduleProfilePtrSeq     * received_data,
                                  SampleInfoSeq  * sample_infos,
                                  int              max_samples,
                                  ReadCondition *  a_condition);
  
  ReturnCode_t read_next_sample ( RequestedInterconnectionScheduleProfile *       received_data,
                                  SampleInfo * sample_info);
  
  ReturnCode_t take_next_sample ( RequestedInterconnectionScheduleProfile *       received_data,
                                  SampleInfo * sample_info);
  
  ReturnCode_t read_instance ( RequestedInterconnectionScheduleProfilePtrSeq       * received_data,
                               SampleInfoSeq    * sample_infos,
                               int                max_samples,
                               InstanceHandle_t   a_handle,
                               SampleStateMask    sample_states, 
                               ViewStateMask      view_states, 
                               InstanceStateMask  instance_states);
  
  ReturnCode_t take_instance ( RequestedInterconnectionScheduleProfilePtrSeq      * received_data,
                               SampleInfoSeq   * sample_infos,
                               int               max_samples,
                               InstanceHandle_t  a_handle,
                               SampleStateMask   sample_states, 
                               ViewStateMask     view_states, 
                               InstanceStateMask instance_states);
  
  ReturnCode_t read_next_instance ( RequestedInterconnectionScheduleProfilePtrSeq      * received_data,
                                    SampleInfoSeq   * sample_infos,
                                    int               max_samples,
                                    InstanceHandle_t  previous_handle,
                                    SampleStateMask   sample_states, 
                                    ViewStateMask     view_states, 
                                    InstanceStateMask instance_states);
  
  ReturnCode_t take_next_instance ( RequestedInterconnectionScheduleProfilePtrSeq       * received_data,
                                    SampleInfoSeq    * sample_infos,
                                    int                max_samples,
                                    InstanceHandle_t   previous_handle,
                                    SampleStateMask    sample_states, 
                                    ViewStateMask      view_states, 
                                    InstanceStateMask  instance_states);
  
  ReturnCode_t read_next_instance_w_condition( RequestedInterconnectionScheduleProfilePtrSeq       * received_data,
                                   SampleInfoSeq    * sample_infos,
                                   int                max_samples,
                                   InstanceHandle_t   previous_handle,
                                   ReadCondition *    a_condition);

  ReturnCode_t take_next_instance_w_condition( RequestedInterconnectionScheduleProfilePtrSeq       * received_data,
                                   SampleInfoSeq    * sample_infos,
                                   int                max_samples,
                                   InstanceHandle_t   previous_handle,
                                   ReadCondition *    a_condition);

  ReturnCode_t return_loan ( RequestedInterconnectionScheduleProfilePtrSeq     * received_data,
                             SampleInfoSeq  * sample_infos);
  
  ReturnCode_t get_key_value ( RequestedInterconnectionScheduleProfile            * key_holder, 
                               InstanceHandle_t  handle);
    
  InstanceHandle_t lookup_instance ( RequestedInterconnectionScheduleProfile       * instance_data);

  static RequestedInterconnectionScheduleProfileDataReader * narrow( DataReader * dr) { return (RequestedInterconnectionScheduleProfileDataReader *)dr; }
  RequestedInterconnectionScheduleProfileDataReader        * narrow( void )           { return this; }


 protected:
  /* Constructor / Destructor - use Subscriber::create_datareader() */

  RequestedInterconnectionScheduleProfileDataReader();
  ~RequestedInterconnectionScheduleProfileDataReader() {};
 private:

};

}  /* namespace interconnectionmodule */
/* END SCOPE: interconnectionmodule */
/* START SCOPE: loadmodule */

namespace loadmodule {


}  /* namespace loadmodule */
/* END SCOPE: loadmodule */
/* START SCOPE: optimizermodule */

namespace optimizermodule {

class RequestedOptimizerScheduleProfileTypeSupport;
/******************************************************************
 *   openfmb::optimizermodule:: RequestedOptimizerScheduleProfile DataReader Class
 ******************************************************************/

class COREDX_TS_CLASS_EXPORT RequestedOptimizerScheduleProfileDataReader : public DataReader
{
  friend class DDS::DomainParticipant;
  friend class RequestedOptimizerScheduleProfileTypeSupport;

 public:


  /* DataReader Meathods */

  ReturnCode_t read( RequestedOptimizerScheduleProfilePtrSeq *    received_data,
                     SampleInfoSeq *   sample_infos,
                     int               max_samples,
                     SampleStateMask   sample_states,
                     ViewStateMask     view_states,
                     InstanceStateMask instance_states );

  ReturnCode_t take( RequestedOptimizerScheduleProfilePtrSeq       * received_data,
                     SampleInfoSeq    * sample_infos,
                     int                max_samples,
                     SampleStateMask    sample_states, 
                     ViewStateMask      view_states, 
                     InstanceStateMask  instance_states );


  ReturnCode_t read_w_condition ( RequestedOptimizerScheduleProfilePtrSeq    * received_data,
                                  SampleInfoSeq * sample_infos,
                                  int             max_samples,
                                  ReadCondition * a_condition);
  
  ReturnCode_t take_w_condition ( RequestedOptimizerScheduleProfilePtrSeq     * received_data,
                                  SampleInfoSeq  * sample_infos,
                                  int              max_samples,
                                  ReadCondition *  a_condition);
  
  ReturnCode_t read_next_sample ( RequestedOptimizerScheduleProfile *       received_data,
                                  SampleInfo * sample_info);
  
  ReturnCode_t take_next_sample ( RequestedOptimizerScheduleProfile *       received_data,
                                  SampleInfo * sample_info);
  
  ReturnCode_t read_instance ( RequestedOptimizerScheduleProfilePtrSeq       * received_data,
                               SampleInfoSeq    * sample_infos,
                               int                max_samples,
                               InstanceHandle_t   a_handle,
                               SampleStateMask    sample_states, 
                               ViewStateMask      view_states, 
                               InstanceStateMask  instance_states);
  
  ReturnCode_t take_instance ( RequestedOptimizerScheduleProfilePtrSeq      * received_data,
                               SampleInfoSeq   * sample_infos,
                               int               max_samples,
                               InstanceHandle_t  a_handle,
                               SampleStateMask   sample_states, 
                               ViewStateMask     view_states, 
                               InstanceStateMask instance_states);
  
  ReturnCode_t read_next_instance ( RequestedOptimizerScheduleProfilePtrSeq      * received_data,
                                    SampleInfoSeq   * sample_infos,
                                    int               max_samples,
                                    InstanceHandle_t  previous_handle,
                                    SampleStateMask   sample_states, 
                                    ViewStateMask     view_states, 
                                    InstanceStateMask instance_states);
  
  ReturnCode_t take_next_instance ( RequestedOptimizerScheduleProfilePtrSeq       * received_data,
                                    SampleInfoSeq    * sample_infos,
                                    int                max_samples,
                                    InstanceHandle_t   previous_handle,
                                    SampleStateMask    sample_states, 
                                    ViewStateMask      view_states, 
                                    InstanceStateMask  instance_states);
  
  ReturnCode_t read_next_instance_w_condition( RequestedOptimizerScheduleProfilePtrSeq       * received_data,
                                   SampleInfoSeq    * sample_infos,
                                   int                max_samples,
                                   InstanceHandle_t   previous_handle,
                                   ReadCondition *    a_condition);

  ReturnCode_t take_next_instance_w_condition( RequestedOptimizerScheduleProfilePtrSeq       * received_data,
                                   SampleInfoSeq    * sample_infos,
                                   int                max_samples,
                                   InstanceHandle_t   previous_handle,
                                   ReadCondition *    a_condition);

  ReturnCode_t return_loan ( RequestedOptimizerScheduleProfilePtrSeq     * received_data,
                             SampleInfoSeq  * sample_infos);
  
  ReturnCode_t get_key_value ( RequestedOptimizerScheduleProfile            * key_holder, 
                               InstanceHandle_t  handle);
    
  InstanceHandle_t lookup_instance ( RequestedOptimizerScheduleProfile       * instance_data);

  static RequestedOptimizerScheduleProfileDataReader * narrow( DataReader * dr) { return (RequestedOptimizerScheduleProfileDataReader *)dr; }
  RequestedOptimizerScheduleProfileDataReader        * narrow( void )           { return this; }


 protected:
  /* Constructor / Destructor - use Subscriber::create_datareader() */

  RequestedOptimizerScheduleProfileDataReader();
  ~RequestedOptimizerScheduleProfileDataReader() {};
 private:

};

}  /* namespace optimizermodule */
/* END SCOPE: optimizermodule */
/* START SCOPE: reclosermodule */

namespace reclosermodule {


}  /* namespace reclosermodule */
/* END SCOPE: reclosermodule */
/* START SCOPE: switchmodule */

namespace switchmodule {

class SwitchControlXSWITypeSupport;
/******************************************************************
 *   openfmb::switchmodule:: SwitchControlXSWI DataReader Class
 ******************************************************************/

class COREDX_TS_CLASS_EXPORT SwitchControlXSWIDataReader : public DataReader
{
  friend class DDS::DomainParticipant;
  friend class SwitchControlXSWITypeSupport;

 public:


  /* DataReader Meathods */

  ReturnCode_t read( SwitchControlXSWIPtrSeq *    received_data,
                     SampleInfoSeq *   sample_infos,
                     int               max_samples,
                     SampleStateMask   sample_states,
                     ViewStateMask     view_states,
                     InstanceStateMask instance_states );

  ReturnCode_t take( SwitchControlXSWIPtrSeq       * received_data,
                     SampleInfoSeq    * sample_infos,
                     int                max_samples,
                     SampleStateMask    sample_states, 
                     ViewStateMask      view_states, 
                     InstanceStateMask  instance_states );


  ReturnCode_t read_w_condition ( SwitchControlXSWIPtrSeq    * received_data,
                                  SampleInfoSeq * sample_infos,
                                  int             max_samples,
                                  ReadCondition * a_condition);
  
  ReturnCode_t take_w_condition ( SwitchControlXSWIPtrSeq     * received_data,
                                  SampleInfoSeq  * sample_infos,
                                  int              max_samples,
                                  ReadCondition *  a_condition);
  
  ReturnCode_t read_next_sample ( SwitchControlXSWI *       received_data,
                                  SampleInfo * sample_info);
  
  ReturnCode_t take_next_sample ( SwitchControlXSWI *       received_data,
                                  SampleInfo * sample_info);
  
  ReturnCode_t read_instance ( SwitchControlXSWIPtrSeq       * received_data,
                               SampleInfoSeq    * sample_infos,
                               int                max_samples,
                               InstanceHandle_t   a_handle,
                               SampleStateMask    sample_states, 
                               ViewStateMask      view_states, 
                               InstanceStateMask  instance_states);
  
  ReturnCode_t take_instance ( SwitchControlXSWIPtrSeq      * received_data,
                               SampleInfoSeq   * sample_infos,
                               int               max_samples,
                               InstanceHandle_t  a_handle,
                               SampleStateMask   sample_states, 
                               ViewStateMask     view_states, 
                               InstanceStateMask instance_states);
  
  ReturnCode_t read_next_instance ( SwitchControlXSWIPtrSeq      * received_data,
                                    SampleInfoSeq   * sample_infos,
                                    int               max_samples,
                                    InstanceHandle_t  previous_handle,
                                    SampleStateMask   sample_states, 
                                    ViewStateMask     view_states, 
                                    InstanceStateMask instance_states);
  
  ReturnCode_t take_next_instance ( SwitchControlXSWIPtrSeq       * received_data,
                                    SampleInfoSeq    * sample_infos,
                                    int                max_samples,
                                    InstanceHandle_t   previous_handle,
                                    SampleStateMask    sample_states, 
                                    ViewStateMask      view_states, 
                                    InstanceStateMask  instance_states);
  
  ReturnCode_t read_next_instance_w_condition( SwitchControlXSWIPtrSeq       * received_data,
                                   SampleInfoSeq    * sample_infos,
                                   int                max_samples,
                                   InstanceHandle_t   previous_handle,
                                   ReadCondition *    a_condition);

  ReturnCode_t take_next_instance_w_condition( SwitchControlXSWIPtrSeq       * received_data,
                                   SampleInfoSeq    * sample_infos,
                                   int                max_samples,
                                   InstanceHandle_t   previous_handle,
                                   ReadCondition *    a_condition);

  ReturnCode_t return_loan ( SwitchControlXSWIPtrSeq     * received_data,
                             SampleInfoSeq  * sample_infos);
  
  ReturnCode_t get_key_value ( SwitchControlXSWI            * key_holder, 
                               InstanceHandle_t  handle);
    
  InstanceHandle_t lookup_instance ( SwitchControlXSWI       * instance_data);

  static SwitchControlXSWIDataReader * narrow( DataReader * dr) { return (SwitchControlXSWIDataReader *)dr; }
  SwitchControlXSWIDataReader        * narrow( void )           { return this; }


 protected:
  /* Constructor / Destructor - use Subscriber::create_datareader() */

  SwitchControlXSWIDataReader();
  ~SwitchControlXSWIDataReader() {};
 private:

};

}  /* namespace switchmodule */
/* END SCOPE: switchmodule */

}  /* namespace openfmb */
/* END SCOPE: openfmb */
/* START SCOPE: openfmb */

namespace openfmb {

/* START SCOPE: breakermodule */

namespace breakermodule {


}  /* namespace breakermodule */
/* END SCOPE: breakermodule */
/* START SCOPE: commonmodule */

namespace commonmodule {


}  /* namespace commonmodule */
/* END SCOPE: commonmodule */
/* START SCOPE: essmodule */

namespace essmodule {

class EssEventZBATTypeSupport;
/******************************************************************
 *   openfmb::essmodule:: EssEventZBAT DataReader Class
 ******************************************************************/

class COREDX_TS_CLASS_EXPORT EssEventZBATDataReader : public DataReader
{
  friend class DDS::DomainParticipant;
  friend class EssEventZBATTypeSupport;

 public:


  /* DataReader Meathods */

  ReturnCode_t read( EssEventZBATPtrSeq *    received_data,
                     SampleInfoSeq *   sample_infos,
                     int               max_samples,
                     SampleStateMask   sample_states,
                     ViewStateMask     view_states,
                     InstanceStateMask instance_states );

  ReturnCode_t take( EssEventZBATPtrSeq       * received_data,
                     SampleInfoSeq    * sample_infos,
                     int                max_samples,
                     SampleStateMask    sample_states, 
                     ViewStateMask      view_states, 
                     InstanceStateMask  instance_states );


  ReturnCode_t read_w_condition ( EssEventZBATPtrSeq    * received_data,
                                  SampleInfoSeq * sample_infos,
                                  int             max_samples,
                                  ReadCondition * a_condition);
  
  ReturnCode_t take_w_condition ( EssEventZBATPtrSeq     * received_data,
                                  SampleInfoSeq  * sample_infos,
                                  int              max_samples,
                                  ReadCondition *  a_condition);
  
  ReturnCode_t read_next_sample ( EssEventZBAT *       received_data,
                                  SampleInfo * sample_info);
  
  ReturnCode_t take_next_sample ( EssEventZBAT *       received_data,
                                  SampleInfo * sample_info);
  
  ReturnCode_t read_instance ( EssEventZBATPtrSeq       * received_data,
                               SampleInfoSeq    * sample_infos,
                               int                max_samples,
                               InstanceHandle_t   a_handle,
                               SampleStateMask    sample_states, 
                               ViewStateMask      view_states, 
                               InstanceStateMask  instance_states);
  
  ReturnCode_t take_instance ( EssEventZBATPtrSeq      * received_data,
                               SampleInfoSeq   * sample_infos,
                               int               max_samples,
                               InstanceHandle_t  a_handle,
                               SampleStateMask   sample_states, 
                               ViewStateMask     view_states, 
                               InstanceStateMask instance_states);
  
  ReturnCode_t read_next_instance ( EssEventZBATPtrSeq      * received_data,
                                    SampleInfoSeq   * sample_infos,
                                    int               max_samples,
                                    InstanceHandle_t  previous_handle,
                                    SampleStateMask   sample_states, 
                                    ViewStateMask     view_states, 
                                    InstanceStateMask instance_states);
  
  ReturnCode_t take_next_instance ( EssEventZBATPtrSeq       * received_data,
                                    SampleInfoSeq    * sample_infos,
                                    int                max_samples,
                                    InstanceHandle_t   previous_handle,
                                    SampleStateMask    sample_states, 
                                    ViewStateMask      view_states, 
                                    InstanceStateMask  instance_states);
  
  ReturnCode_t read_next_instance_w_condition( EssEventZBATPtrSeq       * received_data,
                                   SampleInfoSeq    * sample_infos,
                                   int                max_samples,
                                   InstanceHandle_t   previous_handle,
                                   ReadCondition *    a_condition);

  ReturnCode_t take_next_instance_w_condition( EssEventZBATPtrSeq       * received_data,
                                   SampleInfoSeq    * sample_infos,
                                   int                max_samples,
                                   InstanceHandle_t   previous_handle,
                                   ReadCondition *    a_condition);

  ReturnCode_t return_loan ( EssEventZBATPtrSeq     * received_data,
                             SampleInfoSeq  * sample_infos);
  
  ReturnCode_t get_key_value ( EssEventZBAT            * key_holder, 
                               InstanceHandle_t  handle);
    
  InstanceHandle_t lookup_instance ( EssEventZBAT       * instance_data);

  static EssEventZBATDataReader * narrow( DataReader * dr) { return (EssEventZBATDataReader *)dr; }
  EssEventZBATDataReader        * narrow( void )           { return this; }


 protected:
  /* Constructor / Destructor - use Subscriber::create_datareader() */

  EssEventZBATDataReader();
  ~EssEventZBATDataReader() {};
 private:

};
class EssStatusZBATTypeSupport;
/******************************************************************
 *   openfmb::essmodule:: EssStatusZBAT DataReader Class
 ******************************************************************/

class COREDX_TS_CLASS_EXPORT EssStatusZBATDataReader : public DataReader
{
  friend class DDS::DomainParticipant;
  friend class EssStatusZBATTypeSupport;

 public:


  /* DataReader Meathods */

  ReturnCode_t read( EssStatusZBATPtrSeq *    received_data,
                     SampleInfoSeq *   sample_infos,
                     int               max_samples,
                     SampleStateMask   sample_states,
                     ViewStateMask     view_states,
                     InstanceStateMask instance_states );

  ReturnCode_t take( EssStatusZBATPtrSeq       * received_data,
                     SampleInfoSeq    * sample_infos,
                     int                max_samples,
                     SampleStateMask    sample_states, 
                     ViewStateMask      view_states, 
                     InstanceStateMask  instance_states );


  ReturnCode_t read_w_condition ( EssStatusZBATPtrSeq    * received_data,
                                  SampleInfoSeq * sample_infos,
                                  int             max_samples,
                                  ReadCondition * a_condition);
  
  ReturnCode_t take_w_condition ( EssStatusZBATPtrSeq     * received_data,
                                  SampleInfoSeq  * sample_infos,
                                  int              max_samples,
                                  ReadCondition *  a_condition);
  
  ReturnCode_t read_next_sample ( EssStatusZBAT *       received_data,
                                  SampleInfo * sample_info);
  
  ReturnCode_t take_next_sample ( EssStatusZBAT *       received_data,
                                  SampleInfo * sample_info);
  
  ReturnCode_t read_instance ( EssStatusZBATPtrSeq       * received_data,
                               SampleInfoSeq    * sample_infos,
                               int                max_samples,
                               InstanceHandle_t   a_handle,
                               SampleStateMask    sample_states, 
                               ViewStateMask      view_states, 
                               InstanceStateMask  instance_states);
  
  ReturnCode_t take_instance ( EssStatusZBATPtrSeq      * received_data,
                               SampleInfoSeq   * sample_infos,
                               int               max_samples,
                               InstanceHandle_t  a_handle,
                               SampleStateMask   sample_states, 
                               ViewStateMask     view_states, 
                               InstanceStateMask instance_states);
  
  ReturnCode_t read_next_instance ( EssStatusZBATPtrSeq      * received_data,
                                    SampleInfoSeq   * sample_infos,
                                    int               max_samples,
                                    InstanceHandle_t  previous_handle,
                                    SampleStateMask   sample_states, 
                                    ViewStateMask     view_states, 
                                    InstanceStateMask instance_states);
  
  ReturnCode_t take_next_instance ( EssStatusZBATPtrSeq       * received_data,
                                    SampleInfoSeq    * sample_infos,
                                    int                max_samples,
                                    InstanceHandle_t   previous_handle,
                                    SampleStateMask    sample_states, 
                                    ViewStateMask      view_states, 
                                    InstanceStateMask  instance_states);
  
  ReturnCode_t read_next_instance_w_condition( EssStatusZBATPtrSeq       * received_data,
                                   SampleInfoSeq    * sample_infos,
                                   int                max_samples,
                                   InstanceHandle_t   previous_handle,
                                   ReadCondition *    a_condition);

  ReturnCode_t take_next_instance_w_condition( EssStatusZBATPtrSeq       * received_data,
                                   SampleInfoSeq    * sample_infos,
                                   int                max_samples,
                                   InstanceHandle_t   previous_handle,
                                   ReadCondition *    a_condition);

  ReturnCode_t return_loan ( EssStatusZBATPtrSeq     * received_data,
                             SampleInfoSeq  * sample_infos);
  
  ReturnCode_t get_key_value ( EssStatusZBAT            * key_holder, 
                               InstanceHandle_t  handle);
    
  InstanceHandle_t lookup_instance ( EssStatusZBAT       * instance_data);

  static EssStatusZBATDataReader * narrow( DataReader * dr) { return (EssStatusZBATDataReader *)dr; }
  EssStatusZBATDataReader        * narrow( void )           { return this; }


 protected:
  /* Constructor / Destructor - use Subscriber::create_datareader() */

  EssStatusZBATDataReader();
  ~EssStatusZBATDataReader() {};
 private:

};

}  /* namespace essmodule */
/* END SCOPE: essmodule */
/* START SCOPE: generationmodule */

namespace generationmodule {

class GenerationStatusProfileTypeSupport;
/******************************************************************
 *   openfmb::generationmodule:: GenerationStatusProfile DataReader Class
 ******************************************************************/

class COREDX_TS_CLASS_EXPORT GenerationStatusProfileDataReader : public DataReader
{
  friend class DDS::DomainParticipant;
  friend class GenerationStatusProfileTypeSupport;

 public:


  /* DataReader Meathods */

  ReturnCode_t read( GenerationStatusProfilePtrSeq *    received_data,
                     SampleInfoSeq *   sample_infos,
                     int               max_samples,
                     SampleStateMask   sample_states,
                     ViewStateMask     view_states,
                     InstanceStateMask instance_states );

  ReturnCode_t take( GenerationStatusProfilePtrSeq       * received_data,
                     SampleInfoSeq    * sample_infos,
                     int                max_samples,
                     SampleStateMask    sample_states, 
                     ViewStateMask      view_states, 
                     InstanceStateMask  instance_states );


  ReturnCode_t read_w_condition ( GenerationStatusProfilePtrSeq    * received_data,
                                  SampleInfoSeq * sample_infos,
                                  int             max_samples,
                                  ReadCondition * a_condition);
  
  ReturnCode_t take_w_condition ( GenerationStatusProfilePtrSeq     * received_data,
                                  SampleInfoSeq  * sample_infos,
                                  int              max_samples,
                                  ReadCondition *  a_condition);
  
  ReturnCode_t read_next_sample ( GenerationStatusProfile *       received_data,
                                  SampleInfo * sample_info);
  
  ReturnCode_t take_next_sample ( GenerationStatusProfile *       received_data,
                                  SampleInfo * sample_info);
  
  ReturnCode_t read_instance ( GenerationStatusProfilePtrSeq       * received_data,
                               SampleInfoSeq    * sample_infos,
                               int                max_samples,
                               InstanceHandle_t   a_handle,
                               SampleStateMask    sample_states, 
                               ViewStateMask      view_states, 
                               InstanceStateMask  instance_states);
  
  ReturnCode_t take_instance ( GenerationStatusProfilePtrSeq      * received_data,
                               SampleInfoSeq   * sample_infos,
                               int               max_samples,
                               InstanceHandle_t  a_handle,
                               SampleStateMask   sample_states, 
                               ViewStateMask     view_states, 
                               InstanceStateMask instance_states);
  
  ReturnCode_t read_next_instance ( GenerationStatusProfilePtrSeq      * received_data,
                                    SampleInfoSeq   * sample_infos,
                                    int               max_samples,
                                    InstanceHandle_t  previous_handle,
                                    SampleStateMask   sample_states, 
                                    ViewStateMask     view_states, 
                                    InstanceStateMask instance_states);
  
  ReturnCode_t take_next_instance ( GenerationStatusProfilePtrSeq       * received_data,
                                    SampleInfoSeq    * sample_infos,
                                    int                max_samples,
                                    InstanceHandle_t   previous_handle,
                                    SampleStateMask    sample_states, 
                                    ViewStateMask      view_states, 
                                    InstanceStateMask  instance_states);
  
  ReturnCode_t read_next_instance_w_condition( GenerationStatusProfilePtrSeq       * received_data,
                                   SampleInfoSeq    * sample_infos,
                                   int                max_samples,
                                   InstanceHandle_t   previous_handle,
                                   ReadCondition *    a_condition);

  ReturnCode_t take_next_instance_w_condition( GenerationStatusProfilePtrSeq       * received_data,
                                   SampleInfoSeq    * sample_infos,
                                   int                max_samples,
                                   InstanceHandle_t   previous_handle,
                                   ReadCondition *    a_condition);

  ReturnCode_t return_loan ( GenerationStatusProfilePtrSeq     * received_data,
                             SampleInfoSeq  * sample_infos);
  
  ReturnCode_t get_key_value ( GenerationStatusProfile            * key_holder, 
                               InstanceHandle_t  handle);
    
  InstanceHandle_t lookup_instance ( GenerationStatusProfile       * instance_data);

  static GenerationStatusProfileDataReader * narrow( DataReader * dr) { return (GenerationStatusProfileDataReader *)dr; }
  GenerationStatusProfileDataReader        * narrow( void )           { return this; }


 protected:
  /* Constructor / Destructor - use Subscriber::create_datareader() */

  GenerationStatusProfileDataReader();
  ~GenerationStatusProfileDataReader() {};
 private:

};

}  /* namespace generationmodule */
/* END SCOPE: generationmodule */
/* START SCOPE: loadmodule */

namespace loadmodule {

class LoadStatusProfileTypeSupport;
/******************************************************************
 *   openfmb::loadmodule:: LoadStatusProfile DataReader Class
 ******************************************************************/

class COREDX_TS_CLASS_EXPORT LoadStatusProfileDataReader : public DataReader
{
  friend class DDS::DomainParticipant;
  friend class LoadStatusProfileTypeSupport;

 public:


  /* DataReader Meathods */

  ReturnCode_t read( LoadStatusProfilePtrSeq *    received_data,
                     SampleInfoSeq *   sample_infos,
                     int               max_samples,
                     SampleStateMask   sample_states,
                     ViewStateMask     view_states,
                     InstanceStateMask instance_states );

  ReturnCode_t take( LoadStatusProfilePtrSeq       * received_data,
                     SampleInfoSeq    * sample_infos,
                     int                max_samples,
                     SampleStateMask    sample_states, 
                     ViewStateMask      view_states, 
                     InstanceStateMask  instance_states );


  ReturnCode_t read_w_condition ( LoadStatusProfilePtrSeq    * received_data,
                                  SampleInfoSeq * sample_infos,
                                  int             max_samples,
                                  ReadCondition * a_condition);
  
  ReturnCode_t take_w_condition ( LoadStatusProfilePtrSeq     * received_data,
                                  SampleInfoSeq  * sample_infos,
                                  int              max_samples,
                                  ReadCondition *  a_condition);
  
  ReturnCode_t read_next_sample ( LoadStatusProfile *       received_data,
                                  SampleInfo * sample_info);
  
  ReturnCode_t take_next_sample ( LoadStatusProfile *       received_data,
                                  SampleInfo * sample_info);
  
  ReturnCode_t read_instance ( LoadStatusProfilePtrSeq       * received_data,
                               SampleInfoSeq    * sample_infos,
                               int                max_samples,
                               InstanceHandle_t   a_handle,
                               SampleStateMask    sample_states, 
                               ViewStateMask      view_states, 
                               InstanceStateMask  instance_states);
  
  ReturnCode_t take_instance ( LoadStatusProfilePtrSeq      * received_data,
                               SampleInfoSeq   * sample_infos,
                               int               max_samples,
                               InstanceHandle_t  a_handle,
                               SampleStateMask   sample_states, 
                               ViewStateMask     view_states, 
                               InstanceStateMask instance_states);
  
  ReturnCode_t read_next_instance ( LoadStatusProfilePtrSeq      * received_data,
                                    SampleInfoSeq   * sample_infos,
                                    int               max_samples,
                                    InstanceHandle_t  previous_handle,
                                    SampleStateMask   sample_states, 
                                    ViewStateMask     view_states, 
                                    InstanceStateMask instance_states);
  
  ReturnCode_t take_next_instance ( LoadStatusProfilePtrSeq       * received_data,
                                    SampleInfoSeq    * sample_infos,
                                    int                max_samples,
                                    InstanceHandle_t   previous_handle,
                                    SampleStateMask    sample_states, 
                                    ViewStateMask      view_states, 
                                    InstanceStateMask  instance_states);
  
  ReturnCode_t read_next_instance_w_condition( LoadStatusProfilePtrSeq       * received_data,
                                   SampleInfoSeq    * sample_infos,
                                   int                max_samples,
                                   InstanceHandle_t   previous_handle,
                                   ReadCondition *    a_condition);

  ReturnCode_t take_next_instance_w_condition( LoadStatusProfilePtrSeq       * received_data,
                                   SampleInfoSeq    * sample_infos,
                                   int                max_samples,
                                   InstanceHandle_t   previous_handle,
                                   ReadCondition *    a_condition);

  ReturnCode_t return_loan ( LoadStatusProfilePtrSeq     * received_data,
                             SampleInfoSeq  * sample_infos);
  
  ReturnCode_t get_key_value ( LoadStatusProfile            * key_holder, 
                               InstanceHandle_t  handle);
    
  InstanceHandle_t lookup_instance ( LoadStatusProfile       * instance_data);

  static LoadStatusProfileDataReader * narrow( DataReader * dr) { return (LoadStatusProfileDataReader *)dr; }
  LoadStatusProfileDataReader        * narrow( void )           { return this; }


 protected:
  /* Constructor / Destructor - use Subscriber::create_datareader() */

  LoadStatusProfileDataReader();
  ~LoadStatusProfileDataReader() {};
 private:

};

}  /* namespace loadmodule */
/* END SCOPE: loadmodule */
/* START SCOPE: optimizermodule */

namespace optimizermodule {

class PlannedOptimizerScheduleProfileTypeSupport;
/******************************************************************
 *   openfmb::optimizermodule:: PlannedOptimizerScheduleProfile DataReader Class
 ******************************************************************/

class COREDX_TS_CLASS_EXPORT PlannedOptimizerScheduleProfileDataReader : public DataReader
{
  friend class DDS::DomainParticipant;
  friend class PlannedOptimizerScheduleProfileTypeSupport;

 public:


  /* DataReader Meathods */

  ReturnCode_t read( PlannedOptimizerScheduleProfilePtrSeq *    received_data,
                     SampleInfoSeq *   sample_infos,
                     int               max_samples,
                     SampleStateMask   sample_states,
                     ViewStateMask     view_states,
                     InstanceStateMask instance_states );

  ReturnCode_t take( PlannedOptimizerScheduleProfilePtrSeq       * received_data,
                     SampleInfoSeq    * sample_infos,
                     int                max_samples,
                     SampleStateMask    sample_states, 
                     ViewStateMask      view_states, 
                     InstanceStateMask  instance_states );


  ReturnCode_t read_w_condition ( PlannedOptimizerScheduleProfilePtrSeq    * received_data,
                                  SampleInfoSeq * sample_infos,
                                  int             max_samples,
                                  ReadCondition * a_condition);
  
  ReturnCode_t take_w_condition ( PlannedOptimizerScheduleProfilePtrSeq     * received_data,
                                  SampleInfoSeq  * sample_infos,
                                  int              max_samples,
                                  ReadCondition *  a_condition);
  
  ReturnCode_t read_next_sample ( PlannedOptimizerScheduleProfile *       received_data,
                                  SampleInfo * sample_info);
  
  ReturnCode_t take_next_sample ( PlannedOptimizerScheduleProfile *       received_data,
                                  SampleInfo * sample_info);
  
  ReturnCode_t read_instance ( PlannedOptimizerScheduleProfilePtrSeq       * received_data,
                               SampleInfoSeq    * sample_infos,
                               int                max_samples,
                               InstanceHandle_t   a_handle,
                               SampleStateMask    sample_states, 
                               ViewStateMask      view_states, 
                               InstanceStateMask  instance_states);
  
  ReturnCode_t take_instance ( PlannedOptimizerScheduleProfilePtrSeq      * received_data,
                               SampleInfoSeq   * sample_infos,
                               int               max_samples,
                               InstanceHandle_t  a_handle,
                               SampleStateMask   sample_states, 
                               ViewStateMask     view_states, 
                               InstanceStateMask instance_states);
  
  ReturnCode_t read_next_instance ( PlannedOptimizerScheduleProfilePtrSeq      * received_data,
                                    SampleInfoSeq   * sample_infos,
                                    int               max_samples,
                                    InstanceHandle_t  previous_handle,
                                    SampleStateMask   sample_states, 
                                    ViewStateMask     view_states, 
                                    InstanceStateMask instance_states);
  
  ReturnCode_t take_next_instance ( PlannedOptimizerScheduleProfilePtrSeq       * received_data,
                                    SampleInfoSeq    * sample_infos,
                                    int                max_samples,
                                    InstanceHandle_t   previous_handle,
                                    SampleStateMask    sample_states, 
                                    ViewStateMask      view_states, 
                                    InstanceStateMask  instance_states);
  
  ReturnCode_t read_next_instance_w_condition( PlannedOptimizerScheduleProfilePtrSeq       * received_data,
                                   SampleInfoSeq    * sample_infos,
                                   int                max_samples,
                                   InstanceHandle_t   previous_handle,
                                   ReadCondition *    a_condition);

  ReturnCode_t take_next_instance_w_condition( PlannedOptimizerScheduleProfilePtrSeq       * received_data,
                                   SampleInfoSeq    * sample_infos,
                                   int                max_samples,
                                   InstanceHandle_t   previous_handle,
                                   ReadCondition *    a_condition);

  ReturnCode_t return_loan ( PlannedOptimizerScheduleProfilePtrSeq     * received_data,
                             SampleInfoSeq  * sample_infos);
  
  ReturnCode_t get_key_value ( PlannedOptimizerScheduleProfile            * key_holder, 
                               InstanceHandle_t  handle);
    
  InstanceHandle_t lookup_instance ( PlannedOptimizerScheduleProfile       * instance_data);

  static PlannedOptimizerScheduleProfileDataReader * narrow( DataReader * dr) { return (PlannedOptimizerScheduleProfileDataReader *)dr; }
  PlannedOptimizerScheduleProfileDataReader        * narrow( void )           { return this; }


 protected:
  /* Constructor / Destructor - use Subscriber::create_datareader() */

  PlannedOptimizerScheduleProfileDataReader();
  ~PlannedOptimizerScheduleProfileDataReader() {};
 private:

};

}  /* namespace optimizermodule */
/* END SCOPE: optimizermodule */
/* START SCOPE: reclosermodule */

namespace reclosermodule {


}  /* namespace reclosermodule */
/* END SCOPE: reclosermodule */
/* START SCOPE: solarmodule */

namespace solarmodule {

class SolarEventZGENTypeSupport;
/******************************************************************
 *   openfmb::solarmodule:: SolarEventZGEN DataReader Class
 ******************************************************************/

class COREDX_TS_CLASS_EXPORT SolarEventZGENDataReader : public DataReader
{
  friend class DDS::DomainParticipant;
  friend class SolarEventZGENTypeSupport;

 public:


  /* DataReader Meathods */

  ReturnCode_t read( SolarEventZGENPtrSeq *    received_data,
                     SampleInfoSeq *   sample_infos,
                     int               max_samples,
                     SampleStateMask   sample_states,
                     ViewStateMask     view_states,
                     InstanceStateMask instance_states );

  ReturnCode_t take( SolarEventZGENPtrSeq       * received_data,
                     SampleInfoSeq    * sample_infos,
                     int                max_samples,
                     SampleStateMask    sample_states, 
                     ViewStateMask      view_states, 
                     InstanceStateMask  instance_states );


  ReturnCode_t read_w_condition ( SolarEventZGENPtrSeq    * received_data,
                                  SampleInfoSeq * sample_infos,
                                  int             max_samples,
                                  ReadCondition * a_condition);
  
  ReturnCode_t take_w_condition ( SolarEventZGENPtrSeq     * received_data,
                                  SampleInfoSeq  * sample_infos,
                                  int              max_samples,
                                  ReadCondition *  a_condition);
  
  ReturnCode_t read_next_sample ( SolarEventZGEN *       received_data,
                                  SampleInfo * sample_info);
  
  ReturnCode_t take_next_sample ( SolarEventZGEN *       received_data,
                                  SampleInfo * sample_info);
  
  ReturnCode_t read_instance ( SolarEventZGENPtrSeq       * received_data,
                               SampleInfoSeq    * sample_infos,
                               int                max_samples,
                               InstanceHandle_t   a_handle,
                               SampleStateMask    sample_states, 
                               ViewStateMask      view_states, 
                               InstanceStateMask  instance_states);
  
  ReturnCode_t take_instance ( SolarEventZGENPtrSeq      * received_data,
                               SampleInfoSeq   * sample_infos,
                               int               max_samples,
                               InstanceHandle_t  a_handle,
                               SampleStateMask   sample_states, 
                               ViewStateMask     view_states, 
                               InstanceStateMask instance_states);
  
  ReturnCode_t read_next_instance ( SolarEventZGENPtrSeq      * received_data,
                                    SampleInfoSeq   * sample_infos,
                                    int               max_samples,
                                    InstanceHandle_t  previous_handle,
                                    SampleStateMask   sample_states, 
                                    ViewStateMask     view_states, 
                                    InstanceStateMask instance_states);
  
  ReturnCode_t take_next_instance ( SolarEventZGENPtrSeq       * received_data,
                                    SampleInfoSeq    * sample_infos,
                                    int                max_samples,
                                    InstanceHandle_t   previous_handle,
                                    SampleStateMask    sample_states, 
                                    ViewStateMask      view_states, 
                                    InstanceStateMask  instance_states);
  
  ReturnCode_t read_next_instance_w_condition( SolarEventZGENPtrSeq       * received_data,
                                   SampleInfoSeq    * sample_infos,
                                   int                max_samples,
                                   InstanceHandle_t   previous_handle,
                                   ReadCondition *    a_condition);

  ReturnCode_t take_next_instance_w_condition( SolarEventZGENPtrSeq       * received_data,
                                   SampleInfoSeq    * sample_infos,
                                   int                max_samples,
                                   InstanceHandle_t   previous_handle,
                                   ReadCondition *    a_condition);

  ReturnCode_t return_loan ( SolarEventZGENPtrSeq     * received_data,
                             SampleInfoSeq  * sample_infos);
  
  ReturnCode_t get_key_value ( SolarEventZGEN            * key_holder, 
                               InstanceHandle_t  handle);
    
  InstanceHandle_t lookup_instance ( SolarEventZGEN       * instance_data);

  static SolarEventZGENDataReader * narrow( DataReader * dr) { return (SolarEventZGENDataReader *)dr; }
  SolarEventZGENDataReader        * narrow( void )           { return this; }


 protected:
  /* Constructor / Destructor - use Subscriber::create_datareader() */

  SolarEventZGENDataReader();
  ~SolarEventZGENDataReader() {};
 private:

};
class SolarStatusZGENTypeSupport;
/******************************************************************
 *   openfmb::solarmodule:: SolarStatusZGEN DataReader Class
 ******************************************************************/

class COREDX_TS_CLASS_EXPORT SolarStatusZGENDataReader : public DataReader
{
  friend class DDS::DomainParticipant;
  friend class SolarStatusZGENTypeSupport;

 public:


  /* DataReader Meathods */

  ReturnCode_t read( SolarStatusZGENPtrSeq *    received_data,
                     SampleInfoSeq *   sample_infos,
                     int               max_samples,
                     SampleStateMask   sample_states,
                     ViewStateMask     view_states,
                     InstanceStateMask instance_states );

  ReturnCode_t take( SolarStatusZGENPtrSeq       * received_data,
                     SampleInfoSeq    * sample_infos,
                     int                max_samples,
                     SampleStateMask    sample_states, 
                     ViewStateMask      view_states, 
                     InstanceStateMask  instance_states );


  ReturnCode_t read_w_condition ( SolarStatusZGENPtrSeq    * received_data,
                                  SampleInfoSeq * sample_infos,
                                  int             max_samples,
                                  ReadCondition * a_condition);
  
  ReturnCode_t take_w_condition ( SolarStatusZGENPtrSeq     * received_data,
                                  SampleInfoSeq  * sample_infos,
                                  int              max_samples,
                                  ReadCondition *  a_condition);
  
  ReturnCode_t read_next_sample ( SolarStatusZGEN *       received_data,
                                  SampleInfo * sample_info);
  
  ReturnCode_t take_next_sample ( SolarStatusZGEN *       received_data,
                                  SampleInfo * sample_info);
  
  ReturnCode_t read_instance ( SolarStatusZGENPtrSeq       * received_data,
                               SampleInfoSeq    * sample_infos,
                               int                max_samples,
                               InstanceHandle_t   a_handle,
                               SampleStateMask    sample_states, 
                               ViewStateMask      view_states, 
                               InstanceStateMask  instance_states);
  
  ReturnCode_t take_instance ( SolarStatusZGENPtrSeq      * received_data,
                               SampleInfoSeq   * sample_infos,
                               int               max_samples,
                               InstanceHandle_t  a_handle,
                               SampleStateMask   sample_states, 
                               ViewStateMask     view_states, 
                               InstanceStateMask instance_states);
  
  ReturnCode_t read_next_instance ( SolarStatusZGENPtrSeq      * received_data,
                                    SampleInfoSeq   * sample_infos,
                                    int               max_samples,
                                    InstanceHandle_t  previous_handle,
                                    SampleStateMask   sample_states, 
                                    ViewStateMask     view_states, 
                                    InstanceStateMask instance_states);
  
  ReturnCode_t take_next_instance ( SolarStatusZGENPtrSeq       * received_data,
                                    SampleInfoSeq    * sample_infos,
                                    int                max_samples,
                                    InstanceHandle_t   previous_handle,
                                    SampleStateMask    sample_states, 
                                    ViewStateMask      view_states, 
                                    InstanceStateMask  instance_states);
  
  ReturnCode_t read_next_instance_w_condition( SolarStatusZGENPtrSeq       * received_data,
                                   SampleInfoSeq    * sample_infos,
                                   int                max_samples,
                                   InstanceHandle_t   previous_handle,
                                   ReadCondition *    a_condition);

  ReturnCode_t take_next_instance_w_condition( SolarStatusZGENPtrSeq       * received_data,
                                   SampleInfoSeq    * sample_infos,
                                   int                max_samples,
                                   InstanceHandle_t   previous_handle,
                                   ReadCondition *    a_condition);

  ReturnCode_t return_loan ( SolarStatusZGENPtrSeq     * received_data,
                             SampleInfoSeq  * sample_infos);
  
  ReturnCode_t get_key_value ( SolarStatusZGEN            * key_holder, 
                               InstanceHandle_t  handle);
    
  InstanceHandle_t lookup_instance ( SolarStatusZGEN       * instance_data);

  static SolarStatusZGENDataReader * narrow( DataReader * dr) { return (SolarStatusZGENDataReader *)dr; }
  SolarStatusZGENDataReader        * narrow( void )           { return this; }


 protected:
  /* Constructor / Destructor - use Subscriber::create_datareader() */

  SolarStatusZGENDataReader();
  ~SolarStatusZGENDataReader() {};
 private:

};

}  /* namespace solarmodule */
/* END SCOPE: solarmodule */
/* START SCOPE: switchmodule */

namespace switchmodule {


}  /* namespace switchmodule */
/* END SCOPE: switchmodule */

}  /* namespace openfmb */
/* END SCOPE: openfmb */
/* START SCOPE: openfmb */

namespace openfmb {

/* START SCOPE: breakermodule */

namespace breakermodule {


}  /* namespace breakermodule */
/* END SCOPE: breakermodule */
/* START SCOPE: commonmodule */

namespace commonmodule {


}  /* namespace commonmodule */
/* END SCOPE: commonmodule */
/* START SCOPE: essmodule */

namespace essmodule {

class ESSEventProfileTypeSupport;
/******************************************************************
 *   openfmb::essmodule:: ESSEventProfile DataReader Class
 ******************************************************************/

class COREDX_TS_CLASS_EXPORT ESSEventProfileDataReader : public DataReader
{
  friend class DDS::DomainParticipant;
  friend class ESSEventProfileTypeSupport;

 public:


  /* DataReader Meathods */

  ReturnCode_t read( ESSEventProfilePtrSeq *    received_data,
                     SampleInfoSeq *   sample_infos,
                     int               max_samples,
                     SampleStateMask   sample_states,
                     ViewStateMask     view_states,
                     InstanceStateMask instance_states );

  ReturnCode_t take( ESSEventProfilePtrSeq       * received_data,
                     SampleInfoSeq    * sample_infos,
                     int                max_samples,
                     SampleStateMask    sample_states, 
                     ViewStateMask      view_states, 
                     InstanceStateMask  instance_states );


  ReturnCode_t read_w_condition ( ESSEventProfilePtrSeq    * received_data,
                                  SampleInfoSeq * sample_infos,
                                  int             max_samples,
                                  ReadCondition * a_condition);
  
  ReturnCode_t take_w_condition ( ESSEventProfilePtrSeq     * received_data,
                                  SampleInfoSeq  * sample_infos,
                                  int              max_samples,
                                  ReadCondition *  a_condition);
  
  ReturnCode_t read_next_sample ( ESSEventProfile *       received_data,
                                  SampleInfo * sample_info);
  
  ReturnCode_t take_next_sample ( ESSEventProfile *       received_data,
                                  SampleInfo * sample_info);
  
  ReturnCode_t read_instance ( ESSEventProfilePtrSeq       * received_data,
                               SampleInfoSeq    * sample_infos,
                               int                max_samples,
                               InstanceHandle_t   a_handle,
                               SampleStateMask    sample_states, 
                               ViewStateMask      view_states, 
                               InstanceStateMask  instance_states);
  
  ReturnCode_t take_instance ( ESSEventProfilePtrSeq      * received_data,
                               SampleInfoSeq   * sample_infos,
                               int               max_samples,
                               InstanceHandle_t  a_handle,
                               SampleStateMask   sample_states, 
                               ViewStateMask     view_states, 
                               InstanceStateMask instance_states);
  
  ReturnCode_t read_next_instance ( ESSEventProfilePtrSeq      * received_data,
                                    SampleInfoSeq   * sample_infos,
                                    int               max_samples,
                                    InstanceHandle_t  previous_handle,
                                    SampleStateMask   sample_states, 
                                    ViewStateMask     view_states, 
                                    InstanceStateMask instance_states);
  
  ReturnCode_t take_next_instance ( ESSEventProfilePtrSeq       * received_data,
                                    SampleInfoSeq    * sample_infos,
                                    int                max_samples,
                                    InstanceHandle_t   previous_handle,
                                    SampleStateMask    sample_states, 
                                    ViewStateMask      view_states, 
                                    InstanceStateMask  instance_states);
  
  ReturnCode_t read_next_instance_w_condition( ESSEventProfilePtrSeq       * received_data,
                                   SampleInfoSeq    * sample_infos,
                                   int                max_samples,
                                   InstanceHandle_t   previous_handle,
                                   ReadCondition *    a_condition);

  ReturnCode_t take_next_instance_w_condition( ESSEventProfilePtrSeq       * received_data,
                                   SampleInfoSeq    * sample_infos,
                                   int                max_samples,
                                   InstanceHandle_t   previous_handle,
                                   ReadCondition *    a_condition);

  ReturnCode_t return_loan ( ESSEventProfilePtrSeq     * received_data,
                             SampleInfoSeq  * sample_infos);
  
  ReturnCode_t get_key_value ( ESSEventProfile            * key_holder, 
                               InstanceHandle_t  handle);
    
  InstanceHandle_t lookup_instance ( ESSEventProfile       * instance_data);

  static ESSEventProfileDataReader * narrow( DataReader * dr) { return (ESSEventProfileDataReader *)dr; }
  ESSEventProfileDataReader        * narrow( void )           { return this; }


 protected:
  /* Constructor / Destructor - use Subscriber::create_datareader() */

  ESSEventProfileDataReader();
  ~ESSEventProfileDataReader() {};
 private:

};
class ESSReadingValueTypeSupport;
/******************************************************************
 *   openfmb::essmodule:: ESSReadingValue DataReader Class
 ******************************************************************/

class COREDX_TS_CLASS_EXPORT ESSReadingValueDataReader : public DataReader
{
  friend class DDS::DomainParticipant;
  friend class ESSReadingValueTypeSupport;

 public:


  /* DataReader Meathods */

  ReturnCode_t read( ESSReadingValuePtrSeq *    received_data,
                     SampleInfoSeq *   sample_infos,
                     int               max_samples,
                     SampleStateMask   sample_states,
                     ViewStateMask     view_states,
                     InstanceStateMask instance_states );

  ReturnCode_t take( ESSReadingValuePtrSeq       * received_data,
                     SampleInfoSeq    * sample_infos,
                     int                max_samples,
                     SampleStateMask    sample_states, 
                     ViewStateMask      view_states, 
                     InstanceStateMask  instance_states );


  ReturnCode_t read_w_condition ( ESSReadingValuePtrSeq    * received_data,
                                  SampleInfoSeq * sample_infos,
                                  int             max_samples,
                                  ReadCondition * a_condition);
  
  ReturnCode_t take_w_condition ( ESSReadingValuePtrSeq     * received_data,
                                  SampleInfoSeq  * sample_infos,
                                  int              max_samples,
                                  ReadCondition *  a_condition);
  
  ReturnCode_t read_next_sample ( ESSReadingValue *       received_data,
                                  SampleInfo * sample_info);
  
  ReturnCode_t take_next_sample ( ESSReadingValue *       received_data,
                                  SampleInfo * sample_info);
  
  ReturnCode_t read_instance ( ESSReadingValuePtrSeq       * received_data,
                               SampleInfoSeq    * sample_infos,
                               int                max_samples,
                               InstanceHandle_t   a_handle,
                               SampleStateMask    sample_states, 
                               ViewStateMask      view_states, 
                               InstanceStateMask  instance_states);
  
  ReturnCode_t take_instance ( ESSReadingValuePtrSeq      * received_data,
                               SampleInfoSeq   * sample_infos,
                               int               max_samples,
                               InstanceHandle_t  a_handle,
                               SampleStateMask   sample_states, 
                               ViewStateMask     view_states, 
                               InstanceStateMask instance_states);
  
  ReturnCode_t read_next_instance ( ESSReadingValuePtrSeq      * received_data,
                                    SampleInfoSeq   * sample_infos,
                                    int               max_samples,
                                    InstanceHandle_t  previous_handle,
                                    SampleStateMask   sample_states, 
                                    ViewStateMask     view_states, 
                                    InstanceStateMask instance_states);
  
  ReturnCode_t take_next_instance ( ESSReadingValuePtrSeq       * received_data,
                                    SampleInfoSeq    * sample_infos,
                                    int                max_samples,
                                    InstanceHandle_t   previous_handle,
                                    SampleStateMask    sample_states, 
                                    ViewStateMask      view_states, 
                                    InstanceStateMask  instance_states);
  
  ReturnCode_t read_next_instance_w_condition( ESSReadingValuePtrSeq       * received_data,
                                   SampleInfoSeq    * sample_infos,
                                   int                max_samples,
                                   InstanceHandle_t   previous_handle,
                                   ReadCondition *    a_condition);

  ReturnCode_t take_next_instance_w_condition( ESSReadingValuePtrSeq       * received_data,
                                   SampleInfoSeq    * sample_infos,
                                   int                max_samples,
                                   InstanceHandle_t   previous_handle,
                                   ReadCondition *    a_condition);

  ReturnCode_t return_loan ( ESSReadingValuePtrSeq     * received_data,
                             SampleInfoSeq  * sample_infos);
  
  ReturnCode_t get_key_value ( ESSReadingValue            * key_holder, 
                               InstanceHandle_t  handle);
    
  InstanceHandle_t lookup_instance ( ESSReadingValue       * instance_data);

  static ESSReadingValueDataReader * narrow( DataReader * dr) { return (ESSReadingValueDataReader *)dr; }
  ESSReadingValueDataReader        * narrow( void )           { return this; }


 protected:
  /* Constructor / Destructor - use Subscriber::create_datareader() */

  ESSReadingValueDataReader();
  ~ESSReadingValueDataReader() {};
 private:

};
class ESSStatusProfileTypeSupport;
/******************************************************************
 *   openfmb::essmodule:: ESSStatusProfile DataReader Class
 ******************************************************************/

class COREDX_TS_CLASS_EXPORT ESSStatusProfileDataReader : public DataReader
{
  friend class DDS::DomainParticipant;
  friend class ESSStatusProfileTypeSupport;

 public:


  /* DataReader Meathods */

  ReturnCode_t read( ESSStatusProfilePtrSeq *    received_data,
                     SampleInfoSeq *   sample_infos,
                     int               max_samples,
                     SampleStateMask   sample_states,
                     ViewStateMask     view_states,
                     InstanceStateMask instance_states );

  ReturnCode_t take( ESSStatusProfilePtrSeq       * received_data,
                     SampleInfoSeq    * sample_infos,
                     int                max_samples,
                     SampleStateMask    sample_states, 
                     ViewStateMask      view_states, 
                     InstanceStateMask  instance_states );


  ReturnCode_t read_w_condition ( ESSStatusProfilePtrSeq    * received_data,
                                  SampleInfoSeq * sample_infos,
                                  int             max_samples,
                                  ReadCondition * a_condition);
  
  ReturnCode_t take_w_condition ( ESSStatusProfilePtrSeq     * received_data,
                                  SampleInfoSeq  * sample_infos,
                                  int              max_samples,
                                  ReadCondition *  a_condition);
  
  ReturnCode_t read_next_sample ( ESSStatusProfile *       received_data,
                                  SampleInfo * sample_info);
  
  ReturnCode_t take_next_sample ( ESSStatusProfile *       received_data,
                                  SampleInfo * sample_info);
  
  ReturnCode_t read_instance ( ESSStatusProfilePtrSeq       * received_data,
                               SampleInfoSeq    * sample_infos,
                               int                max_samples,
                               InstanceHandle_t   a_handle,
                               SampleStateMask    sample_states, 
                               ViewStateMask      view_states, 
                               InstanceStateMask  instance_states);
  
  ReturnCode_t take_instance ( ESSStatusProfilePtrSeq      * received_data,
                               SampleInfoSeq   * sample_infos,
                               int               max_samples,
                               InstanceHandle_t  a_handle,
                               SampleStateMask   sample_states, 
                               ViewStateMask     view_states, 
                               InstanceStateMask instance_states);
  
  ReturnCode_t read_next_instance ( ESSStatusProfilePtrSeq      * received_data,
                                    SampleInfoSeq   * sample_infos,
                                    int               max_samples,
                                    InstanceHandle_t  previous_handle,
                                    SampleStateMask   sample_states, 
                                    ViewStateMask     view_states, 
                                    InstanceStateMask instance_states);
  
  ReturnCode_t take_next_instance ( ESSStatusProfilePtrSeq       * received_data,
                                    SampleInfoSeq    * sample_infos,
                                    int                max_samples,
                                    InstanceHandle_t   previous_handle,
                                    SampleStateMask    sample_states, 
                                    ViewStateMask      view_states, 
                                    InstanceStateMask  instance_states);
  
  ReturnCode_t read_next_instance_w_condition( ESSStatusProfilePtrSeq       * received_data,
                                   SampleInfoSeq    * sample_infos,
                                   int                max_samples,
                                   InstanceHandle_t   previous_handle,
                                   ReadCondition *    a_condition);

  ReturnCode_t take_next_instance_w_condition( ESSStatusProfilePtrSeq       * received_data,
                                   SampleInfoSeq    * sample_infos,
                                   int                max_samples,
                                   InstanceHandle_t   previous_handle,
                                   ReadCondition *    a_condition);

  ReturnCode_t return_loan ( ESSStatusProfilePtrSeq     * received_data,
                             SampleInfoSeq  * sample_infos);
  
  ReturnCode_t get_key_value ( ESSStatusProfile            * key_holder, 
                               InstanceHandle_t  handle);
    
  InstanceHandle_t lookup_instance ( ESSStatusProfile       * instance_data);

  static ESSStatusProfileDataReader * narrow( DataReader * dr) { return (ESSStatusProfileDataReader *)dr; }
  ESSStatusProfileDataReader        * narrow( void )           { return this; }


 protected:
  /* Constructor / Destructor - use Subscriber::create_datareader() */

  ESSStatusProfileDataReader();
  ~ESSStatusProfileDataReader() {};
 private:

};

}  /* namespace essmodule */
/* END SCOPE: essmodule */
/* START SCOPE: generationmodule */

namespace generationmodule {

class GenerationReadingValueTypeSupport;
/******************************************************************
 *   openfmb::generationmodule:: GenerationReadingValue DataReader Class
 ******************************************************************/

class COREDX_TS_CLASS_EXPORT GenerationReadingValueDataReader : public DataReader
{
  friend class DDS::DomainParticipant;
  friend class GenerationReadingValueTypeSupport;

 public:


  /* DataReader Meathods */

  ReturnCode_t read( GenerationReadingValuePtrSeq *    received_data,
                     SampleInfoSeq *   sample_infos,
                     int               max_samples,
                     SampleStateMask   sample_states,
                     ViewStateMask     view_states,
                     InstanceStateMask instance_states );

  ReturnCode_t take( GenerationReadingValuePtrSeq       * received_data,
                     SampleInfoSeq    * sample_infos,
                     int                max_samples,
                     SampleStateMask    sample_states, 
                     ViewStateMask      view_states, 
                     InstanceStateMask  instance_states );


  ReturnCode_t read_w_condition ( GenerationReadingValuePtrSeq    * received_data,
                                  SampleInfoSeq * sample_infos,
                                  int             max_samples,
                                  ReadCondition * a_condition);
  
  ReturnCode_t take_w_condition ( GenerationReadingValuePtrSeq     * received_data,
                                  SampleInfoSeq  * sample_infos,
                                  int              max_samples,
                                  ReadCondition *  a_condition);
  
  ReturnCode_t read_next_sample ( GenerationReadingValue *       received_data,
                                  SampleInfo * sample_info);
  
  ReturnCode_t take_next_sample ( GenerationReadingValue *       received_data,
                                  SampleInfo * sample_info);
  
  ReturnCode_t read_instance ( GenerationReadingValuePtrSeq       * received_data,
                               SampleInfoSeq    * sample_infos,
                               int                max_samples,
                               InstanceHandle_t   a_handle,
                               SampleStateMask    sample_states, 
                               ViewStateMask      view_states, 
                               InstanceStateMask  instance_states);
  
  ReturnCode_t take_instance ( GenerationReadingValuePtrSeq      * received_data,
                               SampleInfoSeq   * sample_infos,
                               int               max_samples,
                               InstanceHandle_t  a_handle,
                               SampleStateMask   sample_states, 
                               ViewStateMask     view_states, 
                               InstanceStateMask instance_states);
  
  ReturnCode_t read_next_instance ( GenerationReadingValuePtrSeq      * received_data,
                                    SampleInfoSeq   * sample_infos,
                                    int               max_samples,
                                    InstanceHandle_t  previous_handle,
                                    SampleStateMask   sample_states, 
                                    ViewStateMask     view_states, 
                                    InstanceStateMask instance_states);
  
  ReturnCode_t take_next_instance ( GenerationReadingValuePtrSeq       * received_data,
                                    SampleInfoSeq    * sample_infos,
                                    int                max_samples,
                                    InstanceHandle_t   previous_handle,
                                    SampleStateMask    sample_states, 
                                    ViewStateMask      view_states, 
                                    InstanceStateMask  instance_states);
  
  ReturnCode_t read_next_instance_w_condition( GenerationReadingValuePtrSeq       * received_data,
                                   SampleInfoSeq    * sample_infos,
                                   int                max_samples,
                                   InstanceHandle_t   previous_handle,
                                   ReadCondition *    a_condition);

  ReturnCode_t take_next_instance_w_condition( GenerationReadingValuePtrSeq       * received_data,
                                   SampleInfoSeq    * sample_infos,
                                   int                max_samples,
                                   InstanceHandle_t   previous_handle,
                                   ReadCondition *    a_condition);

  ReturnCode_t return_loan ( GenerationReadingValuePtrSeq     * received_data,
                             SampleInfoSeq  * sample_infos);
  
  ReturnCode_t get_key_value ( GenerationReadingValue            * key_holder, 
                               InstanceHandle_t  handle);
    
  InstanceHandle_t lookup_instance ( GenerationReadingValue       * instance_data);

  static GenerationReadingValueDataReader * narrow( DataReader * dr) { return (GenerationReadingValueDataReader *)dr; }
  GenerationReadingValueDataReader        * narrow( void )           { return this; }


 protected:
  /* Constructor / Destructor - use Subscriber::create_datareader() */

  GenerationReadingValueDataReader();
  ~GenerationReadingValueDataReader() {};
 private:

};
class GenerationReadingProfileTypeSupport;
/******************************************************************
 *   openfmb::generationmodule:: GenerationReadingProfile DataReader Class
 ******************************************************************/

class COREDX_TS_CLASS_EXPORT GenerationReadingProfileDataReader : public DataReader
{
  friend class DDS::DomainParticipant;
  friend class GenerationReadingProfileTypeSupport;

 public:


  /* DataReader Meathods */

  ReturnCode_t read( GenerationReadingProfilePtrSeq *    received_data,
                     SampleInfoSeq *   sample_infos,
                     int               max_samples,
                     SampleStateMask   sample_states,
                     ViewStateMask     view_states,
                     InstanceStateMask instance_states );

  ReturnCode_t take( GenerationReadingProfilePtrSeq       * received_data,
                     SampleInfoSeq    * sample_infos,
                     int                max_samples,
                     SampleStateMask    sample_states, 
                     ViewStateMask      view_states, 
                     InstanceStateMask  instance_states );


  ReturnCode_t read_w_condition ( GenerationReadingProfilePtrSeq    * received_data,
                                  SampleInfoSeq * sample_infos,
                                  int             max_samples,
                                  ReadCondition * a_condition);
  
  ReturnCode_t take_w_condition ( GenerationReadingProfilePtrSeq     * received_data,
                                  SampleInfoSeq  * sample_infos,
                                  int              max_samples,
                                  ReadCondition *  a_condition);
  
  ReturnCode_t read_next_sample ( GenerationReadingProfile *       received_data,
                                  SampleInfo * sample_info);
  
  ReturnCode_t take_next_sample ( GenerationReadingProfile *       received_data,
                                  SampleInfo * sample_info);
  
  ReturnCode_t read_instance ( GenerationReadingProfilePtrSeq       * received_data,
                               SampleInfoSeq    * sample_infos,
                               int                max_samples,
                               InstanceHandle_t   a_handle,
                               SampleStateMask    sample_states, 
                               ViewStateMask      view_states, 
                               InstanceStateMask  instance_states);
  
  ReturnCode_t take_instance ( GenerationReadingProfilePtrSeq      * received_data,
                               SampleInfoSeq   * sample_infos,
                               int               max_samples,
                               InstanceHandle_t  a_handle,
                               SampleStateMask   sample_states, 
                               ViewStateMask     view_states, 
                               InstanceStateMask instance_states);
  
  ReturnCode_t read_next_instance ( GenerationReadingProfilePtrSeq      * received_data,
                                    SampleInfoSeq   * sample_infos,
                                    int               max_samples,
                                    InstanceHandle_t  previous_handle,
                                    SampleStateMask   sample_states, 
                                    ViewStateMask     view_states, 
                                    InstanceStateMask instance_states);
  
  ReturnCode_t take_next_instance ( GenerationReadingProfilePtrSeq       * received_data,
                                    SampleInfoSeq    * sample_infos,
                                    int                max_samples,
                                    InstanceHandle_t   previous_handle,
                                    SampleStateMask    sample_states, 
                                    ViewStateMask      view_states, 
                                    InstanceStateMask  instance_states);
  
  ReturnCode_t read_next_instance_w_condition( GenerationReadingProfilePtrSeq       * received_data,
                                   SampleInfoSeq    * sample_infos,
                                   int                max_samples,
                                   InstanceHandle_t   previous_handle,
                                   ReadCondition *    a_condition);

  ReturnCode_t take_next_instance_w_condition( GenerationReadingProfilePtrSeq       * received_data,
                                   SampleInfoSeq    * sample_infos,
                                   int                max_samples,
                                   InstanceHandle_t   previous_handle,
                                   ReadCondition *    a_condition);

  ReturnCode_t return_loan ( GenerationReadingProfilePtrSeq     * received_data,
                             SampleInfoSeq  * sample_infos);
  
  ReturnCode_t get_key_value ( GenerationReadingProfile            * key_holder, 
                               InstanceHandle_t  handle);
    
  InstanceHandle_t lookup_instance ( GenerationReadingProfile       * instance_data);

  static GenerationReadingProfileDataReader * narrow( DataReader * dr) { return (GenerationReadingProfileDataReader *)dr; }
  GenerationReadingProfileDataReader        * narrow( void )           { return this; }


 protected:
  /* Constructor / Destructor - use Subscriber::create_datareader() */

  GenerationReadingProfileDataReader();
  ~GenerationReadingProfileDataReader() {};
 private:

};
class GenerationEventProfileTypeSupport;
/******************************************************************
 *   openfmb::generationmodule:: GenerationEventProfile DataReader Class
 ******************************************************************/

class COREDX_TS_CLASS_EXPORT GenerationEventProfileDataReader : public DataReader
{
  friend class DDS::DomainParticipant;
  friend class GenerationEventProfileTypeSupport;

 public:


  /* DataReader Meathods */

  ReturnCode_t read( GenerationEventProfilePtrSeq *    received_data,
                     SampleInfoSeq *   sample_infos,
                     int               max_samples,
                     SampleStateMask   sample_states,
                     ViewStateMask     view_states,
                     InstanceStateMask instance_states );

  ReturnCode_t take( GenerationEventProfilePtrSeq       * received_data,
                     SampleInfoSeq    * sample_infos,
                     int                max_samples,
                     SampleStateMask    sample_states, 
                     ViewStateMask      view_states, 
                     InstanceStateMask  instance_states );


  ReturnCode_t read_w_condition ( GenerationEventProfilePtrSeq    * received_data,
                                  SampleInfoSeq * sample_infos,
                                  int             max_samples,
                                  ReadCondition * a_condition);
  
  ReturnCode_t take_w_condition ( GenerationEventProfilePtrSeq     * received_data,
                                  SampleInfoSeq  * sample_infos,
                                  int              max_samples,
                                  ReadCondition *  a_condition);
  
  ReturnCode_t read_next_sample ( GenerationEventProfile *       received_data,
                                  SampleInfo * sample_info);
  
  ReturnCode_t take_next_sample ( GenerationEventProfile *       received_data,
                                  SampleInfo * sample_info);
  
  ReturnCode_t read_instance ( GenerationEventProfilePtrSeq       * received_data,
                               SampleInfoSeq    * sample_infos,
                               int                max_samples,
                               InstanceHandle_t   a_handle,
                               SampleStateMask    sample_states, 
                               ViewStateMask      view_states, 
                               InstanceStateMask  instance_states);
  
  ReturnCode_t take_instance ( GenerationEventProfilePtrSeq      * received_data,
                               SampleInfoSeq   * sample_infos,
                               int               max_samples,
                               InstanceHandle_t  a_handle,
                               SampleStateMask   sample_states, 
                               ViewStateMask     view_states, 
                               InstanceStateMask instance_states);
  
  ReturnCode_t read_next_instance ( GenerationEventProfilePtrSeq      * received_data,
                                    SampleInfoSeq   * sample_infos,
                                    int               max_samples,
                                    InstanceHandle_t  previous_handle,
                                    SampleStateMask   sample_states, 
                                    ViewStateMask     view_states, 
                                    InstanceStateMask instance_states);
  
  ReturnCode_t take_next_instance ( GenerationEventProfilePtrSeq       * received_data,
                                    SampleInfoSeq    * sample_infos,
                                    int                max_samples,
                                    InstanceHandle_t   previous_handle,
                                    SampleStateMask    sample_states, 
                                    ViewStateMask      view_states, 
                                    InstanceStateMask  instance_states);
  
  ReturnCode_t read_next_instance_w_condition( GenerationEventProfilePtrSeq       * received_data,
                                   SampleInfoSeq    * sample_infos,
                                   int                max_samples,
                                   InstanceHandle_t   previous_handle,
                                   ReadCondition *    a_condition);

  ReturnCode_t take_next_instance_w_condition( GenerationEventProfilePtrSeq       * received_data,
                                   SampleInfoSeq    * sample_infos,
                                   int                max_samples,
                                   InstanceHandle_t   previous_handle,
                                   ReadCondition *    a_condition);

  ReturnCode_t return_loan ( GenerationEventProfilePtrSeq     * received_data,
                             SampleInfoSeq  * sample_infos);
  
  ReturnCode_t get_key_value ( GenerationEventProfile            * key_holder, 
                               InstanceHandle_t  handle);
    
  InstanceHandle_t lookup_instance ( GenerationEventProfile       * instance_data);

  static GenerationEventProfileDataReader * narrow( DataReader * dr) { return (GenerationEventProfileDataReader *)dr; }
  GenerationEventProfileDataReader        * narrow( void )           { return this; }


 protected:
  /* Constructor / Destructor - use Subscriber::create_datareader() */

  GenerationEventProfileDataReader();
  ~GenerationEventProfileDataReader() {};
 private:

};

}  /* namespace generationmodule */
/* END SCOPE: generationmodule */
/* START SCOPE: loadmodule */

namespace loadmodule {

class LoadEventProfileTypeSupport;
/******************************************************************
 *   openfmb::loadmodule:: LoadEventProfile DataReader Class
 ******************************************************************/

class COREDX_TS_CLASS_EXPORT LoadEventProfileDataReader : public DataReader
{
  friend class DDS::DomainParticipant;
  friend class LoadEventProfileTypeSupport;

 public:


  /* DataReader Meathods */

  ReturnCode_t read( LoadEventProfilePtrSeq *    received_data,
                     SampleInfoSeq *   sample_infos,
                     int               max_samples,
                     SampleStateMask   sample_states,
                     ViewStateMask     view_states,
                     InstanceStateMask instance_states );

  ReturnCode_t take( LoadEventProfilePtrSeq       * received_data,
                     SampleInfoSeq    * sample_infos,
                     int                max_samples,
                     SampleStateMask    sample_states, 
                     ViewStateMask      view_states, 
                     InstanceStateMask  instance_states );


  ReturnCode_t read_w_condition ( LoadEventProfilePtrSeq    * received_data,
                                  SampleInfoSeq * sample_infos,
                                  int             max_samples,
                                  ReadCondition * a_condition);
  
  ReturnCode_t take_w_condition ( LoadEventProfilePtrSeq     * received_data,
                                  SampleInfoSeq  * sample_infos,
                                  int              max_samples,
                                  ReadCondition *  a_condition);
  
  ReturnCode_t read_next_sample ( LoadEventProfile *       received_data,
                                  SampleInfo * sample_info);
  
  ReturnCode_t take_next_sample ( LoadEventProfile *       received_data,
                                  SampleInfo * sample_info);
  
  ReturnCode_t read_instance ( LoadEventProfilePtrSeq       * received_data,
                               SampleInfoSeq    * sample_infos,
                               int                max_samples,
                               InstanceHandle_t   a_handle,
                               SampleStateMask    sample_states, 
                               ViewStateMask      view_states, 
                               InstanceStateMask  instance_states);
  
  ReturnCode_t take_instance ( LoadEventProfilePtrSeq      * received_data,
                               SampleInfoSeq   * sample_infos,
                               int               max_samples,
                               InstanceHandle_t  a_handle,
                               SampleStateMask   sample_states, 
                               ViewStateMask     view_states, 
                               InstanceStateMask instance_states);
  
  ReturnCode_t read_next_instance ( LoadEventProfilePtrSeq      * received_data,
                                    SampleInfoSeq   * sample_infos,
                                    int               max_samples,
                                    InstanceHandle_t  previous_handle,
                                    SampleStateMask   sample_states, 
                                    ViewStateMask     view_states, 
                                    InstanceStateMask instance_states);
  
  ReturnCode_t take_next_instance ( LoadEventProfilePtrSeq       * received_data,
                                    SampleInfoSeq    * sample_infos,
                                    int                max_samples,
                                    InstanceHandle_t   previous_handle,
                                    SampleStateMask    sample_states, 
                                    ViewStateMask      view_states, 
                                    InstanceStateMask  instance_states);
  
  ReturnCode_t read_next_instance_w_condition( LoadEventProfilePtrSeq       * received_data,
                                   SampleInfoSeq    * sample_infos,
                                   int                max_samples,
                                   InstanceHandle_t   previous_handle,
                                   ReadCondition *    a_condition);

  ReturnCode_t take_next_instance_w_condition( LoadEventProfilePtrSeq       * received_data,
                                   SampleInfoSeq    * sample_infos,
                                   int                max_samples,
                                   InstanceHandle_t   previous_handle,
                                   ReadCondition *    a_condition);

  ReturnCode_t return_loan ( LoadEventProfilePtrSeq     * received_data,
                             SampleInfoSeq  * sample_infos);
  
  ReturnCode_t get_key_value ( LoadEventProfile            * key_holder, 
                               InstanceHandle_t  handle);
    
  InstanceHandle_t lookup_instance ( LoadEventProfile       * instance_data);

  static LoadEventProfileDataReader * narrow( DataReader * dr) { return (LoadEventProfileDataReader *)dr; }
  LoadEventProfileDataReader        * narrow( void )           { return this; }


 protected:
  /* Constructor / Destructor - use Subscriber::create_datareader() */

  LoadEventProfileDataReader();
  ~LoadEventProfileDataReader() {};
 private:

};
class LoadReadingValueTypeSupport;
/******************************************************************
 *   openfmb::loadmodule:: LoadReadingValue DataReader Class
 ******************************************************************/

class COREDX_TS_CLASS_EXPORT LoadReadingValueDataReader : public DataReader
{
  friend class DDS::DomainParticipant;
  friend class LoadReadingValueTypeSupport;

 public:


  /* DataReader Meathods */

  ReturnCode_t read( LoadReadingValuePtrSeq *    received_data,
                     SampleInfoSeq *   sample_infos,
                     int               max_samples,
                     SampleStateMask   sample_states,
                     ViewStateMask     view_states,
                     InstanceStateMask instance_states );

  ReturnCode_t take( LoadReadingValuePtrSeq       * received_data,
                     SampleInfoSeq    * sample_infos,
                     int                max_samples,
                     SampleStateMask    sample_states, 
                     ViewStateMask      view_states, 
                     InstanceStateMask  instance_states );


  ReturnCode_t read_w_condition ( LoadReadingValuePtrSeq    * received_data,
                                  SampleInfoSeq * sample_infos,
                                  int             max_samples,
                                  ReadCondition * a_condition);
  
  ReturnCode_t take_w_condition ( LoadReadingValuePtrSeq     * received_data,
                                  SampleInfoSeq  * sample_infos,
                                  int              max_samples,
                                  ReadCondition *  a_condition);
  
  ReturnCode_t read_next_sample ( LoadReadingValue *       received_data,
                                  SampleInfo * sample_info);
  
  ReturnCode_t take_next_sample ( LoadReadingValue *       received_data,
                                  SampleInfo * sample_info);
  
  ReturnCode_t read_instance ( LoadReadingValuePtrSeq       * received_data,
                               SampleInfoSeq    * sample_infos,
                               int                max_samples,
                               InstanceHandle_t   a_handle,
                               SampleStateMask    sample_states, 
                               ViewStateMask      view_states, 
                               InstanceStateMask  instance_states);
  
  ReturnCode_t take_instance ( LoadReadingValuePtrSeq      * received_data,
                               SampleInfoSeq   * sample_infos,
                               int               max_samples,
                               InstanceHandle_t  a_handle,
                               SampleStateMask   sample_states, 
                               ViewStateMask     view_states, 
                               InstanceStateMask instance_states);
  
  ReturnCode_t read_next_instance ( LoadReadingValuePtrSeq      * received_data,
                                    SampleInfoSeq   * sample_infos,
                                    int               max_samples,
                                    InstanceHandle_t  previous_handle,
                                    SampleStateMask   sample_states, 
                                    ViewStateMask     view_states, 
                                    InstanceStateMask instance_states);
  
  ReturnCode_t take_next_instance ( LoadReadingValuePtrSeq       * received_data,
                                    SampleInfoSeq    * sample_infos,
                                    int                max_samples,
                                    InstanceHandle_t   previous_handle,
                                    SampleStateMask    sample_states, 
                                    ViewStateMask      view_states, 
                                    InstanceStateMask  instance_states);
  
  ReturnCode_t read_next_instance_w_condition( LoadReadingValuePtrSeq       * received_data,
                                   SampleInfoSeq    * sample_infos,
                                   int                max_samples,
                                   InstanceHandle_t   previous_handle,
                                   ReadCondition *    a_condition);

  ReturnCode_t take_next_instance_w_condition( LoadReadingValuePtrSeq       * received_data,
                                   SampleInfoSeq    * sample_infos,
                                   int                max_samples,
                                   InstanceHandle_t   previous_handle,
                                   ReadCondition *    a_condition);

  ReturnCode_t return_loan ( LoadReadingValuePtrSeq     * received_data,
                             SampleInfoSeq  * sample_infos);
  
  ReturnCode_t get_key_value ( LoadReadingValue            * key_holder, 
                               InstanceHandle_t  handle);
    
  InstanceHandle_t lookup_instance ( LoadReadingValue       * instance_data);

  static LoadReadingValueDataReader * narrow( DataReader * dr) { return (LoadReadingValueDataReader *)dr; }
  LoadReadingValueDataReader        * narrow( void )           { return this; }


 protected:
  /* Constructor / Destructor - use Subscriber::create_datareader() */

  LoadReadingValueDataReader();
  ~LoadReadingValueDataReader() {};
 private:

};

}  /* namespace loadmodule */
/* END SCOPE: loadmodule */
/* START SCOPE: reclosermodule */

namespace reclosermodule {

class RecloserControlProfileTypeSupport;
/******************************************************************
 *   openfmb::reclosermodule:: RecloserControlProfile DataReader Class
 ******************************************************************/

class COREDX_TS_CLASS_EXPORT RecloserControlProfileDataReader : public DataReader
{
  friend class DDS::DomainParticipant;
  friend class RecloserControlProfileTypeSupport;

 public:


  /* DataReader Meathods */

  ReturnCode_t read( RecloserControlProfilePtrSeq *    received_data,
                     SampleInfoSeq *   sample_infos,
                     int               max_samples,
                     SampleStateMask   sample_states,
                     ViewStateMask     view_states,
                     InstanceStateMask instance_states );

  ReturnCode_t take( RecloserControlProfilePtrSeq       * received_data,
                     SampleInfoSeq    * sample_infos,
                     int                max_samples,
                     SampleStateMask    sample_states, 
                     ViewStateMask      view_states, 
                     InstanceStateMask  instance_states );


  ReturnCode_t read_w_condition ( RecloserControlProfilePtrSeq    * received_data,
                                  SampleInfoSeq * sample_infos,
                                  int             max_samples,
                                  ReadCondition * a_condition);
  
  ReturnCode_t take_w_condition ( RecloserControlProfilePtrSeq     * received_data,
                                  SampleInfoSeq  * sample_infos,
                                  int              max_samples,
                                  ReadCondition *  a_condition);
  
  ReturnCode_t read_next_sample ( RecloserControlProfile *       received_data,
                                  SampleInfo * sample_info);
  
  ReturnCode_t take_next_sample ( RecloserControlProfile *       received_data,
                                  SampleInfo * sample_info);
  
  ReturnCode_t read_instance ( RecloserControlProfilePtrSeq       * received_data,
                               SampleInfoSeq    * sample_infos,
                               int                max_samples,
                               InstanceHandle_t   a_handle,
                               SampleStateMask    sample_states, 
                               ViewStateMask      view_states, 
                               InstanceStateMask  instance_states);
  
  ReturnCode_t take_instance ( RecloserControlProfilePtrSeq      * received_data,
                               SampleInfoSeq   * sample_infos,
                               int               max_samples,
                               InstanceHandle_t  a_handle,
                               SampleStateMask   sample_states, 
                               ViewStateMask     view_states, 
                               InstanceStateMask instance_states);
  
  ReturnCode_t read_next_instance ( RecloserControlProfilePtrSeq      * received_data,
                                    SampleInfoSeq   * sample_infos,
                                    int               max_samples,
                                    InstanceHandle_t  previous_handle,
                                    SampleStateMask   sample_states, 
                                    ViewStateMask     view_states, 
                                    InstanceStateMask instance_states);
  
  ReturnCode_t take_next_instance ( RecloserControlProfilePtrSeq       * received_data,
                                    SampleInfoSeq    * sample_infos,
                                    int                max_samples,
                                    InstanceHandle_t   previous_handle,
                                    SampleStateMask    sample_states, 
                                    ViewStateMask      view_states, 
                                    InstanceStateMask  instance_states);
  
  ReturnCode_t read_next_instance_w_condition( RecloserControlProfilePtrSeq       * received_data,
                                   SampleInfoSeq    * sample_infos,
                                   int                max_samples,
                                   InstanceHandle_t   previous_handle,
                                   ReadCondition *    a_condition);

  ReturnCode_t take_next_instance_w_condition( RecloserControlProfilePtrSeq       * received_data,
                                   SampleInfoSeq    * sample_infos,
                                   int                max_samples,
                                   InstanceHandle_t   previous_handle,
                                   ReadCondition *    a_condition);

  ReturnCode_t return_loan ( RecloserControlProfilePtrSeq     * received_data,
                             SampleInfoSeq  * sample_infos);
  
  ReturnCode_t get_key_value ( RecloserControlProfile            * key_holder, 
                               InstanceHandle_t  handle);
    
  InstanceHandle_t lookup_instance ( RecloserControlProfile       * instance_data);

  static RecloserControlProfileDataReader * narrow( DataReader * dr) { return (RecloserControlProfileDataReader *)dr; }
  RecloserControlProfileDataReader        * narrow( void )           { return this; }


 protected:
  /* Constructor / Destructor - use Subscriber::create_datareader() */

  RecloserControlProfileDataReader();
  ~RecloserControlProfileDataReader() {};
 private:

};
class RecloserEventProfileTypeSupport;
/******************************************************************
 *   openfmb::reclosermodule:: RecloserEventProfile DataReader Class
 ******************************************************************/

class COREDX_TS_CLASS_EXPORT RecloserEventProfileDataReader : public DataReader
{
  friend class DDS::DomainParticipant;
  friend class RecloserEventProfileTypeSupport;

 public:


  /* DataReader Meathods */

  ReturnCode_t read( RecloserEventProfilePtrSeq *    received_data,
                     SampleInfoSeq *   sample_infos,
                     int               max_samples,
                     SampleStateMask   sample_states,
                     ViewStateMask     view_states,
                     InstanceStateMask instance_states );

  ReturnCode_t take( RecloserEventProfilePtrSeq       * received_data,
                     SampleInfoSeq    * sample_infos,
                     int                max_samples,
                     SampleStateMask    sample_states, 
                     ViewStateMask      view_states, 
                     InstanceStateMask  instance_states );


  ReturnCode_t read_w_condition ( RecloserEventProfilePtrSeq    * received_data,
                                  SampleInfoSeq * sample_infos,
                                  int             max_samples,
                                  ReadCondition * a_condition);
  
  ReturnCode_t take_w_condition ( RecloserEventProfilePtrSeq     * received_data,
                                  SampleInfoSeq  * sample_infos,
                                  int              max_samples,
                                  ReadCondition *  a_condition);
  
  ReturnCode_t read_next_sample ( RecloserEventProfile *       received_data,
                                  SampleInfo * sample_info);
  
  ReturnCode_t take_next_sample ( RecloserEventProfile *       received_data,
                                  SampleInfo * sample_info);
  
  ReturnCode_t read_instance ( RecloserEventProfilePtrSeq       * received_data,
                               SampleInfoSeq    * sample_infos,
                               int                max_samples,
                               InstanceHandle_t   a_handle,
                               SampleStateMask    sample_states, 
                               ViewStateMask      view_states, 
                               InstanceStateMask  instance_states);
  
  ReturnCode_t take_instance ( RecloserEventProfilePtrSeq      * received_data,
                               SampleInfoSeq   * sample_infos,
                               int               max_samples,
                               InstanceHandle_t  a_handle,
                               SampleStateMask   sample_states, 
                               ViewStateMask     view_states, 
                               InstanceStateMask instance_states);
  
  ReturnCode_t read_next_instance ( RecloserEventProfilePtrSeq      * received_data,
                                    SampleInfoSeq   * sample_infos,
                                    int               max_samples,
                                    InstanceHandle_t  previous_handle,
                                    SampleStateMask   sample_states, 
                                    ViewStateMask     view_states, 
                                    InstanceStateMask instance_states);
  
  ReturnCode_t take_next_instance ( RecloserEventProfilePtrSeq       * received_data,
                                    SampleInfoSeq    * sample_infos,
                                    int                max_samples,
                                    InstanceHandle_t   previous_handle,
                                    SampleStateMask    sample_states, 
                                    ViewStateMask      view_states, 
                                    InstanceStateMask  instance_states);
  
  ReturnCode_t read_next_instance_w_condition( RecloserEventProfilePtrSeq       * received_data,
                                   SampleInfoSeq    * sample_infos,
                                   int                max_samples,
                                   InstanceHandle_t   previous_handle,
                                   ReadCondition *    a_condition);

  ReturnCode_t take_next_instance_w_condition( RecloserEventProfilePtrSeq       * received_data,
                                   SampleInfoSeq    * sample_infos,
                                   int                max_samples,
                                   InstanceHandle_t   previous_handle,
                                   ReadCondition *    a_condition);

  ReturnCode_t return_loan ( RecloserEventProfilePtrSeq     * received_data,
                             SampleInfoSeq  * sample_infos);
  
  ReturnCode_t get_key_value ( RecloserEventProfile            * key_holder, 
                               InstanceHandle_t  handle);
    
  InstanceHandle_t lookup_instance ( RecloserEventProfile       * instance_data);

  static RecloserEventProfileDataReader * narrow( DataReader * dr) { return (RecloserEventProfileDataReader *)dr; }
  RecloserEventProfileDataReader        * narrow( void )           { return this; }


 protected:
  /* Constructor / Destructor - use Subscriber::create_datareader() */

  RecloserEventProfileDataReader();
  ~RecloserEventProfileDataReader() {};
 private:

};
class RecloserReadingValueTypeSupport;
/******************************************************************
 *   openfmb::reclosermodule:: RecloserReadingValue DataReader Class
 ******************************************************************/

class COREDX_TS_CLASS_EXPORT RecloserReadingValueDataReader : public DataReader
{
  friend class DDS::DomainParticipant;
  friend class RecloserReadingValueTypeSupport;

 public:


  /* DataReader Meathods */

  ReturnCode_t read( RecloserReadingValuePtrSeq *    received_data,
                     SampleInfoSeq *   sample_infos,
                     int               max_samples,
                     SampleStateMask   sample_states,
                     ViewStateMask     view_states,
                     InstanceStateMask instance_states );

  ReturnCode_t take( RecloserReadingValuePtrSeq       * received_data,
                     SampleInfoSeq    * sample_infos,
                     int                max_samples,
                     SampleStateMask    sample_states, 
                     ViewStateMask      view_states, 
                     InstanceStateMask  instance_states );


  ReturnCode_t read_w_condition ( RecloserReadingValuePtrSeq    * received_data,
                                  SampleInfoSeq * sample_infos,
                                  int             max_samples,
                                  ReadCondition * a_condition);
  
  ReturnCode_t take_w_condition ( RecloserReadingValuePtrSeq     * received_data,
                                  SampleInfoSeq  * sample_infos,
                                  int              max_samples,
                                  ReadCondition *  a_condition);
  
  ReturnCode_t read_next_sample ( RecloserReadingValue *       received_data,
                                  SampleInfo * sample_info);
  
  ReturnCode_t take_next_sample ( RecloserReadingValue *       received_data,
                                  SampleInfo * sample_info);
  
  ReturnCode_t read_instance ( RecloserReadingValuePtrSeq       * received_data,
                               SampleInfoSeq    * sample_infos,
                               int                max_samples,
                               InstanceHandle_t   a_handle,
                               SampleStateMask    sample_states, 
                               ViewStateMask      view_states, 
                               InstanceStateMask  instance_states);
  
  ReturnCode_t take_instance ( RecloserReadingValuePtrSeq      * received_data,
                               SampleInfoSeq   * sample_infos,
                               int               max_samples,
                               InstanceHandle_t  a_handle,
                               SampleStateMask   sample_states, 
                               ViewStateMask     view_states, 
                               InstanceStateMask instance_states);
  
  ReturnCode_t read_next_instance ( RecloserReadingValuePtrSeq      * received_data,
                                    SampleInfoSeq   * sample_infos,
                                    int               max_samples,
                                    InstanceHandle_t  previous_handle,
                                    SampleStateMask   sample_states, 
                                    ViewStateMask     view_states, 
                                    InstanceStateMask instance_states);
  
  ReturnCode_t take_next_instance ( RecloserReadingValuePtrSeq       * received_data,
                                    SampleInfoSeq    * sample_infos,
                                    int                max_samples,
                                    InstanceHandle_t   previous_handle,
                                    SampleStateMask    sample_states, 
                                    ViewStateMask      view_states, 
                                    InstanceStateMask  instance_states);
  
  ReturnCode_t read_next_instance_w_condition( RecloserReadingValuePtrSeq       * received_data,
                                   SampleInfoSeq    * sample_infos,
                                   int                max_samples,
                                   InstanceHandle_t   previous_handle,
                                   ReadCondition *    a_condition);

  ReturnCode_t take_next_instance_w_condition( RecloserReadingValuePtrSeq       * received_data,
                                   SampleInfoSeq    * sample_infos,
                                   int                max_samples,
                                   InstanceHandle_t   previous_handle,
                                   ReadCondition *    a_condition);

  ReturnCode_t return_loan ( RecloserReadingValuePtrSeq     * received_data,
                             SampleInfoSeq  * sample_infos);
  
  ReturnCode_t get_key_value ( RecloserReadingValue            * key_holder, 
                               InstanceHandle_t  handle);
    
  InstanceHandle_t lookup_instance ( RecloserReadingValue       * instance_data);

  static RecloserReadingValueDataReader * narrow( DataReader * dr) { return (RecloserReadingValueDataReader *)dr; }
  RecloserReadingValueDataReader        * narrow( void )           { return this; }


 protected:
  /* Constructor / Destructor - use Subscriber::create_datareader() */

  RecloserReadingValueDataReader();
  ~RecloserReadingValueDataReader() {};
 private:

};
class RecloserStatusProfileTypeSupport;
/******************************************************************
 *   openfmb::reclosermodule:: RecloserStatusProfile DataReader Class
 ******************************************************************/

class COREDX_TS_CLASS_EXPORT RecloserStatusProfileDataReader : public DataReader
{
  friend class DDS::DomainParticipant;
  friend class RecloserStatusProfileTypeSupport;

 public:


  /* DataReader Meathods */

  ReturnCode_t read( RecloserStatusProfilePtrSeq *    received_data,
                     SampleInfoSeq *   sample_infos,
                     int               max_samples,
                     SampleStateMask   sample_states,
                     ViewStateMask     view_states,
                     InstanceStateMask instance_states );

  ReturnCode_t take( RecloserStatusProfilePtrSeq       * received_data,
                     SampleInfoSeq    * sample_infos,
                     int                max_samples,
                     SampleStateMask    sample_states, 
                     ViewStateMask      view_states, 
                     InstanceStateMask  instance_states );


  ReturnCode_t read_w_condition ( RecloserStatusProfilePtrSeq    * received_data,
                                  SampleInfoSeq * sample_infos,
                                  int             max_samples,
                                  ReadCondition * a_condition);
  
  ReturnCode_t take_w_condition ( RecloserStatusProfilePtrSeq     * received_data,
                                  SampleInfoSeq  * sample_infos,
                                  int              max_samples,
                                  ReadCondition *  a_condition);
  
  ReturnCode_t read_next_sample ( RecloserStatusProfile *       received_data,
                                  SampleInfo * sample_info);
  
  ReturnCode_t take_next_sample ( RecloserStatusProfile *       received_data,
                                  SampleInfo * sample_info);
  
  ReturnCode_t read_instance ( RecloserStatusProfilePtrSeq       * received_data,
                               SampleInfoSeq    * sample_infos,
                               int                max_samples,
                               InstanceHandle_t   a_handle,
                               SampleStateMask    sample_states, 
                               ViewStateMask      view_states, 
                               InstanceStateMask  instance_states);
  
  ReturnCode_t take_instance ( RecloserStatusProfilePtrSeq      * received_data,
                               SampleInfoSeq   * sample_infos,
                               int               max_samples,
                               InstanceHandle_t  a_handle,
                               SampleStateMask   sample_states, 
                               ViewStateMask     view_states, 
                               InstanceStateMask instance_states);
  
  ReturnCode_t read_next_instance ( RecloserStatusProfilePtrSeq      * received_data,
                                    SampleInfoSeq   * sample_infos,
                                    int               max_samples,
                                    InstanceHandle_t  previous_handle,
                                    SampleStateMask   sample_states, 
                                    ViewStateMask     view_states, 
                                    InstanceStateMask instance_states);
  
  ReturnCode_t take_next_instance ( RecloserStatusProfilePtrSeq       * received_data,
                                    SampleInfoSeq    * sample_infos,
                                    int                max_samples,
                                    InstanceHandle_t   previous_handle,
                                    SampleStateMask    sample_states, 
                                    ViewStateMask      view_states, 
                                    InstanceStateMask  instance_states);
  
  ReturnCode_t read_next_instance_w_condition( RecloserStatusProfilePtrSeq       * received_data,
                                   SampleInfoSeq    * sample_infos,
                                   int                max_samples,
                                   InstanceHandle_t   previous_handle,
                                   ReadCondition *    a_condition);

  ReturnCode_t take_next_instance_w_condition( RecloserStatusProfilePtrSeq       * received_data,
                                   SampleInfoSeq    * sample_infos,
                                   int                max_samples,
                                   InstanceHandle_t   previous_handle,
                                   ReadCondition *    a_condition);

  ReturnCode_t return_loan ( RecloserStatusProfilePtrSeq     * received_data,
                             SampleInfoSeq  * sample_infos);
  
  ReturnCode_t get_key_value ( RecloserStatusProfile            * key_holder, 
                               InstanceHandle_t  handle);
    
  InstanceHandle_t lookup_instance ( RecloserStatusProfile       * instance_data);

  static RecloserStatusProfileDataReader * narrow( DataReader * dr) { return (RecloserStatusProfileDataReader *)dr; }
  RecloserStatusProfileDataReader        * narrow( void )           { return this; }


 protected:
  /* Constructor / Destructor - use Subscriber::create_datareader() */

  RecloserStatusProfileDataReader();
  ~RecloserStatusProfileDataReader() {};
 private:

};

}  /* namespace reclosermodule */
/* END SCOPE: reclosermodule */
/* START SCOPE: regulatormodule */

namespace regulatormodule {

class RegulatorReadingValueTypeSupport;
/******************************************************************
 *   openfmb::regulatormodule:: RegulatorReadingValue DataReader Class
 ******************************************************************/

class COREDX_TS_CLASS_EXPORT RegulatorReadingValueDataReader : public DataReader
{
  friend class DDS::DomainParticipant;
  friend class RegulatorReadingValueTypeSupport;

 public:


  /* DataReader Meathods */

  ReturnCode_t read( RegulatorReadingValuePtrSeq *    received_data,
                     SampleInfoSeq *   sample_infos,
                     int               max_samples,
                     SampleStateMask   sample_states,
                     ViewStateMask     view_states,
                     InstanceStateMask instance_states );

  ReturnCode_t take( RegulatorReadingValuePtrSeq       * received_data,
                     SampleInfoSeq    * sample_infos,
                     int                max_samples,
                     SampleStateMask    sample_states, 
                     ViewStateMask      view_states, 
                     InstanceStateMask  instance_states );


  ReturnCode_t read_w_condition ( RegulatorReadingValuePtrSeq    * received_data,
                                  SampleInfoSeq * sample_infos,
                                  int             max_samples,
                                  ReadCondition * a_condition);
  
  ReturnCode_t take_w_condition ( RegulatorReadingValuePtrSeq     * received_data,
                                  SampleInfoSeq  * sample_infos,
                                  int              max_samples,
                                  ReadCondition *  a_condition);
  
  ReturnCode_t read_next_sample ( RegulatorReadingValue *       received_data,
                                  SampleInfo * sample_info);
  
  ReturnCode_t take_next_sample ( RegulatorReadingValue *       received_data,
                                  SampleInfo * sample_info);
  
  ReturnCode_t read_instance ( RegulatorReadingValuePtrSeq       * received_data,
                               SampleInfoSeq    * sample_infos,
                               int                max_samples,
                               InstanceHandle_t   a_handle,
                               SampleStateMask    sample_states, 
                               ViewStateMask      view_states, 
                               InstanceStateMask  instance_states);
  
  ReturnCode_t take_instance ( RegulatorReadingValuePtrSeq      * received_data,
                               SampleInfoSeq   * sample_infos,
                               int               max_samples,
                               InstanceHandle_t  a_handle,
                               SampleStateMask   sample_states, 
                               ViewStateMask     view_states, 
                               InstanceStateMask instance_states);
  
  ReturnCode_t read_next_instance ( RegulatorReadingValuePtrSeq      * received_data,
                                    SampleInfoSeq   * sample_infos,
                                    int               max_samples,
                                    InstanceHandle_t  previous_handle,
                                    SampleStateMask   sample_states, 
                                    ViewStateMask     view_states, 
                                    InstanceStateMask instance_states);
  
  ReturnCode_t take_next_instance ( RegulatorReadingValuePtrSeq       * received_data,
                                    SampleInfoSeq    * sample_infos,
                                    int                max_samples,
                                    InstanceHandle_t   previous_handle,
                                    SampleStateMask    sample_states, 
                                    ViewStateMask      view_states, 
                                    InstanceStateMask  instance_states);
  
  ReturnCode_t read_next_instance_w_condition( RegulatorReadingValuePtrSeq       * received_data,
                                   SampleInfoSeq    * sample_infos,
                                   int                max_samples,
                                   InstanceHandle_t   previous_handle,
                                   ReadCondition *    a_condition);

  ReturnCode_t take_next_instance_w_condition( RegulatorReadingValuePtrSeq       * received_data,
                                   SampleInfoSeq    * sample_infos,
                                   int                max_samples,
                                   InstanceHandle_t   previous_handle,
                                   ReadCondition *    a_condition);

  ReturnCode_t return_loan ( RegulatorReadingValuePtrSeq     * received_data,
                             SampleInfoSeq  * sample_infos);
  
  ReturnCode_t get_key_value ( RegulatorReadingValue            * key_holder, 
                               InstanceHandle_t  handle);
    
  InstanceHandle_t lookup_instance ( RegulatorReadingValue       * instance_data);

  static RegulatorReadingValueDataReader * narrow( DataReader * dr) { return (RegulatorReadingValueDataReader *)dr; }
  RegulatorReadingValueDataReader        * narrow( void )           { return this; }


 protected:
  /* Constructor / Destructor - use Subscriber::create_datareader() */

  RegulatorReadingValueDataReader();
  ~RegulatorReadingValueDataReader() {};
 private:

};

}  /* namespace regulatormodule */
/* END SCOPE: regulatormodule */
/* START SCOPE: resourcemodule */

namespace resourcemodule {

class ResourceReadingValueTypeSupport;
/******************************************************************
 *   openfmb::resourcemodule:: ResourceReadingValue DataReader Class
 ******************************************************************/

class COREDX_TS_CLASS_EXPORT ResourceReadingValueDataReader : public DataReader
{
  friend class DDS::DomainParticipant;
  friend class ResourceReadingValueTypeSupport;

 public:


  /* DataReader Meathods */

  ReturnCode_t read( ResourceReadingValuePtrSeq *    received_data,
                     SampleInfoSeq *   sample_infos,
                     int               max_samples,
                     SampleStateMask   sample_states,
                     ViewStateMask     view_states,
                     InstanceStateMask instance_states );

  ReturnCode_t take( ResourceReadingValuePtrSeq       * received_data,
                     SampleInfoSeq    * sample_infos,
                     int                max_samples,
                     SampleStateMask    sample_states, 
                     ViewStateMask      view_states, 
                     InstanceStateMask  instance_states );


  ReturnCode_t read_w_condition ( ResourceReadingValuePtrSeq    * received_data,
                                  SampleInfoSeq * sample_infos,
                                  int             max_samples,
                                  ReadCondition * a_condition);
  
  ReturnCode_t take_w_condition ( ResourceReadingValuePtrSeq     * received_data,
                                  SampleInfoSeq  * sample_infos,
                                  int              max_samples,
                                  ReadCondition *  a_condition);
  
  ReturnCode_t read_next_sample ( ResourceReadingValue *       received_data,
                                  SampleInfo * sample_info);
  
  ReturnCode_t take_next_sample ( ResourceReadingValue *       received_data,
                                  SampleInfo * sample_info);
  
  ReturnCode_t read_instance ( ResourceReadingValuePtrSeq       * received_data,
                               SampleInfoSeq    * sample_infos,
                               int                max_samples,
                               InstanceHandle_t   a_handle,
                               SampleStateMask    sample_states, 
                               ViewStateMask      view_states, 
                               InstanceStateMask  instance_states);
  
  ReturnCode_t take_instance ( ResourceReadingValuePtrSeq      * received_data,
                               SampleInfoSeq   * sample_infos,
                               int               max_samples,
                               InstanceHandle_t  a_handle,
                               SampleStateMask   sample_states, 
                               ViewStateMask     view_states, 
                               InstanceStateMask instance_states);
  
  ReturnCode_t read_next_instance ( ResourceReadingValuePtrSeq      * received_data,
                                    SampleInfoSeq   * sample_infos,
                                    int               max_samples,
                                    InstanceHandle_t  previous_handle,
                                    SampleStateMask   sample_states, 
                                    ViewStateMask     view_states, 
                                    InstanceStateMask instance_states);
  
  ReturnCode_t take_next_instance ( ResourceReadingValuePtrSeq       * received_data,
                                    SampleInfoSeq    * sample_infos,
                                    int                max_samples,
                                    InstanceHandle_t   previous_handle,
                                    SampleStateMask    sample_states, 
                                    ViewStateMask      view_states, 
                                    InstanceStateMask  instance_states);
  
  ReturnCode_t read_next_instance_w_condition( ResourceReadingValuePtrSeq       * received_data,
                                   SampleInfoSeq    * sample_infos,
                                   int                max_samples,
                                   InstanceHandle_t   previous_handle,
                                   ReadCondition *    a_condition);

  ReturnCode_t take_next_instance_w_condition( ResourceReadingValuePtrSeq       * received_data,
                                   SampleInfoSeq    * sample_infos,
                                   int                max_samples,
                                   InstanceHandle_t   previous_handle,
                                   ReadCondition *    a_condition);

  ReturnCode_t return_loan ( ResourceReadingValuePtrSeq     * received_data,
                             SampleInfoSeq  * sample_infos);
  
  ReturnCode_t get_key_value ( ResourceReadingValue            * key_holder, 
                               InstanceHandle_t  handle);
    
  InstanceHandle_t lookup_instance ( ResourceReadingValue       * instance_data);

  static ResourceReadingValueDataReader * narrow( DataReader * dr) { return (ResourceReadingValueDataReader *)dr; }
  ResourceReadingValueDataReader        * narrow( void )           { return this; }


 protected:
  /* Constructor / Destructor - use Subscriber::create_datareader() */

  ResourceReadingValueDataReader();
  ~ResourceReadingValueDataReader() {};
 private:

};

}  /* namespace resourcemodule */
/* END SCOPE: resourcemodule */
/* START SCOPE: solarmodule */

namespace solarmodule {

class SolarEventProfileTypeSupport;
/******************************************************************
 *   openfmb::solarmodule:: SolarEventProfile DataReader Class
 ******************************************************************/

class COREDX_TS_CLASS_EXPORT SolarEventProfileDataReader : public DataReader
{
  friend class DDS::DomainParticipant;
  friend class SolarEventProfileTypeSupport;

 public:


  /* DataReader Meathods */

  ReturnCode_t read( SolarEventProfilePtrSeq *    received_data,
                     SampleInfoSeq *   sample_infos,
                     int               max_samples,
                     SampleStateMask   sample_states,
                     ViewStateMask     view_states,
                     InstanceStateMask instance_states );

  ReturnCode_t take( SolarEventProfilePtrSeq       * received_data,
                     SampleInfoSeq    * sample_infos,
                     int                max_samples,
                     SampleStateMask    sample_states, 
                     ViewStateMask      view_states, 
                     InstanceStateMask  instance_states );


  ReturnCode_t read_w_condition ( SolarEventProfilePtrSeq    * received_data,
                                  SampleInfoSeq * sample_infos,
                                  int             max_samples,
                                  ReadCondition * a_condition);
  
  ReturnCode_t take_w_condition ( SolarEventProfilePtrSeq     * received_data,
                                  SampleInfoSeq  * sample_infos,
                                  int              max_samples,
                                  ReadCondition *  a_condition);
  
  ReturnCode_t read_next_sample ( SolarEventProfile *       received_data,
                                  SampleInfo * sample_info);
  
  ReturnCode_t take_next_sample ( SolarEventProfile *       received_data,
                                  SampleInfo * sample_info);
  
  ReturnCode_t read_instance ( SolarEventProfilePtrSeq       * received_data,
                               SampleInfoSeq    * sample_infos,
                               int                max_samples,
                               InstanceHandle_t   a_handle,
                               SampleStateMask    sample_states, 
                               ViewStateMask      view_states, 
                               InstanceStateMask  instance_states);
  
  ReturnCode_t take_instance ( SolarEventProfilePtrSeq      * received_data,
                               SampleInfoSeq   * sample_infos,
                               int               max_samples,
                               InstanceHandle_t  a_handle,
                               SampleStateMask   sample_states, 
                               ViewStateMask     view_states, 
                               InstanceStateMask instance_states);
  
  ReturnCode_t read_next_instance ( SolarEventProfilePtrSeq      * received_data,
                                    SampleInfoSeq   * sample_infos,
                                    int               max_samples,
                                    InstanceHandle_t  previous_handle,
                                    SampleStateMask   sample_states, 
                                    ViewStateMask     view_states, 
                                    InstanceStateMask instance_states);
  
  ReturnCode_t take_next_instance ( SolarEventProfilePtrSeq       * received_data,
                                    SampleInfoSeq    * sample_infos,
                                    int                max_samples,
                                    InstanceHandle_t   previous_handle,
                                    SampleStateMask    sample_states, 
                                    ViewStateMask      view_states, 
                                    InstanceStateMask  instance_states);
  
  ReturnCode_t read_next_instance_w_condition( SolarEventProfilePtrSeq       * received_data,
                                   SampleInfoSeq    * sample_infos,
                                   int                max_samples,
                                   InstanceHandle_t   previous_handle,
                                   ReadCondition *    a_condition);

  ReturnCode_t take_next_instance_w_condition( SolarEventProfilePtrSeq       * received_data,
                                   SampleInfoSeq    * sample_infos,
                                   int                max_samples,
                                   InstanceHandle_t   previous_handle,
                                   ReadCondition *    a_condition);

  ReturnCode_t return_loan ( SolarEventProfilePtrSeq     * received_data,
                             SampleInfoSeq  * sample_infos);
  
  ReturnCode_t get_key_value ( SolarEventProfile            * key_holder, 
                               InstanceHandle_t  handle);
    
  InstanceHandle_t lookup_instance ( SolarEventProfile       * instance_data);

  static SolarEventProfileDataReader * narrow( DataReader * dr) { return (SolarEventProfileDataReader *)dr; }
  SolarEventProfileDataReader        * narrow( void )           { return this; }


 protected:
  /* Constructor / Destructor - use Subscriber::create_datareader() */

  SolarEventProfileDataReader();
  ~SolarEventProfileDataReader() {};
 private:

};
class SolarReadingValueTypeSupport;
/******************************************************************
 *   openfmb::solarmodule:: SolarReadingValue DataReader Class
 ******************************************************************/

class COREDX_TS_CLASS_EXPORT SolarReadingValueDataReader : public DataReader
{
  friend class DDS::DomainParticipant;
  friend class SolarReadingValueTypeSupport;

 public:


  /* DataReader Meathods */

  ReturnCode_t read( SolarReadingValuePtrSeq *    received_data,
                     SampleInfoSeq *   sample_infos,
                     int               max_samples,
                     SampleStateMask   sample_states,
                     ViewStateMask     view_states,
                     InstanceStateMask instance_states );

  ReturnCode_t take( SolarReadingValuePtrSeq       * received_data,
                     SampleInfoSeq    * sample_infos,
                     int                max_samples,
                     SampleStateMask    sample_states, 
                     ViewStateMask      view_states, 
                     InstanceStateMask  instance_states );


  ReturnCode_t read_w_condition ( SolarReadingValuePtrSeq    * received_data,
                                  SampleInfoSeq * sample_infos,
                                  int             max_samples,
                                  ReadCondition * a_condition);
  
  ReturnCode_t take_w_condition ( SolarReadingValuePtrSeq     * received_data,
                                  SampleInfoSeq  * sample_infos,
                                  int              max_samples,
                                  ReadCondition *  a_condition);
  
  ReturnCode_t read_next_sample ( SolarReadingValue *       received_data,
                                  SampleInfo * sample_info);
  
  ReturnCode_t take_next_sample ( SolarReadingValue *       received_data,
                                  SampleInfo * sample_info);
  
  ReturnCode_t read_instance ( SolarReadingValuePtrSeq       * received_data,
                               SampleInfoSeq    * sample_infos,
                               int                max_samples,
                               InstanceHandle_t   a_handle,
                               SampleStateMask    sample_states, 
                               ViewStateMask      view_states, 
                               InstanceStateMask  instance_states);
  
  ReturnCode_t take_instance ( SolarReadingValuePtrSeq      * received_data,
                               SampleInfoSeq   * sample_infos,
                               int               max_samples,
                               InstanceHandle_t  a_handle,
                               SampleStateMask   sample_states, 
                               ViewStateMask     view_states, 
                               InstanceStateMask instance_states);
  
  ReturnCode_t read_next_instance ( SolarReadingValuePtrSeq      * received_data,
                                    SampleInfoSeq   * sample_infos,
                                    int               max_samples,
                                    InstanceHandle_t  previous_handle,
                                    SampleStateMask   sample_states, 
                                    ViewStateMask     view_states, 
                                    InstanceStateMask instance_states);
  
  ReturnCode_t take_next_instance ( SolarReadingValuePtrSeq       * received_data,
                                    SampleInfoSeq    * sample_infos,
                                    int                max_samples,
                                    InstanceHandle_t   previous_handle,
                                    SampleStateMask    sample_states, 
                                    ViewStateMask      view_states, 
                                    InstanceStateMask  instance_states);
  
  ReturnCode_t read_next_instance_w_condition( SolarReadingValuePtrSeq       * received_data,
                                   SampleInfoSeq    * sample_infos,
                                   int                max_samples,
                                   InstanceHandle_t   previous_handle,
                                   ReadCondition *    a_condition);

  ReturnCode_t take_next_instance_w_condition( SolarReadingValuePtrSeq       * received_data,
                                   SampleInfoSeq    * sample_infos,
                                   int                max_samples,
                                   InstanceHandle_t   previous_handle,
                                   ReadCondition *    a_condition);

  ReturnCode_t return_loan ( SolarReadingValuePtrSeq     * received_data,
                             SampleInfoSeq  * sample_infos);
  
  ReturnCode_t get_key_value ( SolarReadingValue            * key_holder, 
                               InstanceHandle_t  handle);
    
  InstanceHandle_t lookup_instance ( SolarReadingValue       * instance_data);

  static SolarReadingValueDataReader * narrow( DataReader * dr) { return (SolarReadingValueDataReader *)dr; }
  SolarReadingValueDataReader        * narrow( void )           { return this; }


 protected:
  /* Constructor / Destructor - use Subscriber::create_datareader() */

  SolarReadingValueDataReader();
  ~SolarReadingValueDataReader() {};
 private:

};
class SolarStatusProfileTypeSupport;
/******************************************************************
 *   openfmb::solarmodule:: SolarStatusProfile DataReader Class
 ******************************************************************/

class COREDX_TS_CLASS_EXPORT SolarStatusProfileDataReader : public DataReader
{
  friend class DDS::DomainParticipant;
  friend class SolarStatusProfileTypeSupport;

 public:


  /* DataReader Meathods */

  ReturnCode_t read( SolarStatusProfilePtrSeq *    received_data,
                     SampleInfoSeq *   sample_infos,
                     int               max_samples,
                     SampleStateMask   sample_states,
                     ViewStateMask     view_states,
                     InstanceStateMask instance_states );

  ReturnCode_t take( SolarStatusProfilePtrSeq       * received_data,
                     SampleInfoSeq    * sample_infos,
                     int                max_samples,
                     SampleStateMask    sample_states, 
                     ViewStateMask      view_states, 
                     InstanceStateMask  instance_states );


  ReturnCode_t read_w_condition ( SolarStatusProfilePtrSeq    * received_data,
                                  SampleInfoSeq * sample_infos,
                                  int             max_samples,
                                  ReadCondition * a_condition);
  
  ReturnCode_t take_w_condition ( SolarStatusProfilePtrSeq     * received_data,
                                  SampleInfoSeq  * sample_infos,
                                  int              max_samples,
                                  ReadCondition *  a_condition);
  
  ReturnCode_t read_next_sample ( SolarStatusProfile *       received_data,
                                  SampleInfo * sample_info);
  
  ReturnCode_t take_next_sample ( SolarStatusProfile *       received_data,
                                  SampleInfo * sample_info);
  
  ReturnCode_t read_instance ( SolarStatusProfilePtrSeq       * received_data,
                               SampleInfoSeq    * sample_infos,
                               int                max_samples,
                               InstanceHandle_t   a_handle,
                               SampleStateMask    sample_states, 
                               ViewStateMask      view_states, 
                               InstanceStateMask  instance_states);
  
  ReturnCode_t take_instance ( SolarStatusProfilePtrSeq      * received_data,
                               SampleInfoSeq   * sample_infos,
                               int               max_samples,
                               InstanceHandle_t  a_handle,
                               SampleStateMask   sample_states, 
                               ViewStateMask     view_states, 
                               InstanceStateMask instance_states);
  
  ReturnCode_t read_next_instance ( SolarStatusProfilePtrSeq      * received_data,
                                    SampleInfoSeq   * sample_infos,
                                    int               max_samples,
                                    InstanceHandle_t  previous_handle,
                                    SampleStateMask   sample_states, 
                                    ViewStateMask     view_states, 
                                    InstanceStateMask instance_states);
  
  ReturnCode_t take_next_instance ( SolarStatusProfilePtrSeq       * received_data,
                                    SampleInfoSeq    * sample_infos,
                                    int                max_samples,
                                    InstanceHandle_t   previous_handle,
                                    SampleStateMask    sample_states, 
                                    ViewStateMask      view_states, 
                                    InstanceStateMask  instance_states);
  
  ReturnCode_t read_next_instance_w_condition( SolarStatusProfilePtrSeq       * received_data,
                                   SampleInfoSeq    * sample_infos,
                                   int                max_samples,
                                   InstanceHandle_t   previous_handle,
                                   ReadCondition *    a_condition);

  ReturnCode_t take_next_instance_w_condition( SolarStatusProfilePtrSeq       * received_data,
                                   SampleInfoSeq    * sample_infos,
                                   int                max_samples,
                                   InstanceHandle_t   previous_handle,
                                   ReadCondition *    a_condition);

  ReturnCode_t return_loan ( SolarStatusProfilePtrSeq     * received_data,
                             SampleInfoSeq  * sample_infos);
  
  ReturnCode_t get_key_value ( SolarStatusProfile            * key_holder, 
                               InstanceHandle_t  handle);
    
  InstanceHandle_t lookup_instance ( SolarStatusProfile       * instance_data);

  static SolarStatusProfileDataReader * narrow( DataReader * dr) { return (SolarStatusProfileDataReader *)dr; }
  SolarStatusProfileDataReader        * narrow( void )           { return this; }


 protected:
  /* Constructor / Destructor - use Subscriber::create_datareader() */

  SolarStatusProfileDataReader();
  ~SolarStatusProfileDataReader() {};
 private:

};

}  /* namespace solarmodule */
/* END SCOPE: solarmodule */
/* START SCOPE: switchmodule */

namespace switchmodule {

class SwitchControlProfileTypeSupport;
/******************************************************************
 *   openfmb::switchmodule:: SwitchControlProfile DataReader Class
 ******************************************************************/

class COREDX_TS_CLASS_EXPORT SwitchControlProfileDataReader : public DataReader
{
  friend class DDS::DomainParticipant;
  friend class SwitchControlProfileTypeSupport;

 public:


  /* DataReader Meathods */

  ReturnCode_t read( SwitchControlProfilePtrSeq *    received_data,
                     SampleInfoSeq *   sample_infos,
                     int               max_samples,
                     SampleStateMask   sample_states,
                     ViewStateMask     view_states,
                     InstanceStateMask instance_states );

  ReturnCode_t take( SwitchControlProfilePtrSeq       * received_data,
                     SampleInfoSeq    * sample_infos,
                     int                max_samples,
                     SampleStateMask    sample_states, 
                     ViewStateMask      view_states, 
                     InstanceStateMask  instance_states );


  ReturnCode_t read_w_condition ( SwitchControlProfilePtrSeq    * received_data,
                                  SampleInfoSeq * sample_infos,
                                  int             max_samples,
                                  ReadCondition * a_condition);
  
  ReturnCode_t take_w_condition ( SwitchControlProfilePtrSeq     * received_data,
                                  SampleInfoSeq  * sample_infos,
                                  int              max_samples,
                                  ReadCondition *  a_condition);
  
  ReturnCode_t read_next_sample ( SwitchControlProfile *       received_data,
                                  SampleInfo * sample_info);
  
  ReturnCode_t take_next_sample ( SwitchControlProfile *       received_data,
                                  SampleInfo * sample_info);
  
  ReturnCode_t read_instance ( SwitchControlProfilePtrSeq       * received_data,
                               SampleInfoSeq    * sample_infos,
                               int                max_samples,
                               InstanceHandle_t   a_handle,
                               SampleStateMask    sample_states, 
                               ViewStateMask      view_states, 
                               InstanceStateMask  instance_states);
  
  ReturnCode_t take_instance ( SwitchControlProfilePtrSeq      * received_data,
                               SampleInfoSeq   * sample_infos,
                               int               max_samples,
                               InstanceHandle_t  a_handle,
                               SampleStateMask   sample_states, 
                               ViewStateMask     view_states, 
                               InstanceStateMask instance_states);
  
  ReturnCode_t read_next_instance ( SwitchControlProfilePtrSeq      * received_data,
                                    SampleInfoSeq   * sample_infos,
                                    int               max_samples,
                                    InstanceHandle_t  previous_handle,
                                    SampleStateMask   sample_states, 
                                    ViewStateMask     view_states, 
                                    InstanceStateMask instance_states);
  
  ReturnCode_t take_next_instance ( SwitchControlProfilePtrSeq       * received_data,
                                    SampleInfoSeq    * sample_infos,
                                    int                max_samples,
                                    InstanceHandle_t   previous_handle,
                                    SampleStateMask    sample_states, 
                                    ViewStateMask      view_states, 
                                    InstanceStateMask  instance_states);
  
  ReturnCode_t read_next_instance_w_condition( SwitchControlProfilePtrSeq       * received_data,
                                   SampleInfoSeq    * sample_infos,
                                   int                max_samples,
                                   InstanceHandle_t   previous_handle,
                                   ReadCondition *    a_condition);

  ReturnCode_t take_next_instance_w_condition( SwitchControlProfilePtrSeq       * received_data,
                                   SampleInfoSeq    * sample_infos,
                                   int                max_samples,
                                   InstanceHandle_t   previous_handle,
                                   ReadCondition *    a_condition);

  ReturnCode_t return_loan ( SwitchControlProfilePtrSeq     * received_data,
                             SampleInfoSeq  * sample_infos);
  
  ReturnCode_t get_key_value ( SwitchControlProfile            * key_holder, 
                               InstanceHandle_t  handle);
    
  InstanceHandle_t lookup_instance ( SwitchControlProfile       * instance_data);

  static SwitchControlProfileDataReader * narrow( DataReader * dr) { return (SwitchControlProfileDataReader *)dr; }
  SwitchControlProfileDataReader        * narrow( void )           { return this; }


 protected:
  /* Constructor / Destructor - use Subscriber::create_datareader() */

  SwitchControlProfileDataReader();
  ~SwitchControlProfileDataReader() {};
 private:

};
class SwitchEventProfileTypeSupport;
/******************************************************************
 *   openfmb::switchmodule:: SwitchEventProfile DataReader Class
 ******************************************************************/

class COREDX_TS_CLASS_EXPORT SwitchEventProfileDataReader : public DataReader
{
  friend class DDS::DomainParticipant;
  friend class SwitchEventProfileTypeSupport;

 public:


  /* DataReader Meathods */

  ReturnCode_t read( SwitchEventProfilePtrSeq *    received_data,
                     SampleInfoSeq *   sample_infos,
                     int               max_samples,
                     SampleStateMask   sample_states,
                     ViewStateMask     view_states,
                     InstanceStateMask instance_states );

  ReturnCode_t take( SwitchEventProfilePtrSeq       * received_data,
                     SampleInfoSeq    * sample_infos,
                     int                max_samples,
                     SampleStateMask    sample_states, 
                     ViewStateMask      view_states, 
                     InstanceStateMask  instance_states );


  ReturnCode_t read_w_condition ( SwitchEventProfilePtrSeq    * received_data,
                                  SampleInfoSeq * sample_infos,
                                  int             max_samples,
                                  ReadCondition * a_condition);
  
  ReturnCode_t take_w_condition ( SwitchEventProfilePtrSeq     * received_data,
                                  SampleInfoSeq  * sample_infos,
                                  int              max_samples,
                                  ReadCondition *  a_condition);
  
  ReturnCode_t read_next_sample ( SwitchEventProfile *       received_data,
                                  SampleInfo * sample_info);
  
  ReturnCode_t take_next_sample ( SwitchEventProfile *       received_data,
                                  SampleInfo * sample_info);
  
  ReturnCode_t read_instance ( SwitchEventProfilePtrSeq       * received_data,
                               SampleInfoSeq    * sample_infos,
                               int                max_samples,
                               InstanceHandle_t   a_handle,
                               SampleStateMask    sample_states, 
                               ViewStateMask      view_states, 
                               InstanceStateMask  instance_states);
  
  ReturnCode_t take_instance ( SwitchEventProfilePtrSeq      * received_data,
                               SampleInfoSeq   * sample_infos,
                               int               max_samples,
                               InstanceHandle_t  a_handle,
                               SampleStateMask   sample_states, 
                               ViewStateMask     view_states, 
                               InstanceStateMask instance_states);
  
  ReturnCode_t read_next_instance ( SwitchEventProfilePtrSeq      * received_data,
                                    SampleInfoSeq   * sample_infos,
                                    int               max_samples,
                                    InstanceHandle_t  previous_handle,
                                    SampleStateMask   sample_states, 
                                    ViewStateMask     view_states, 
                                    InstanceStateMask instance_states);
  
  ReturnCode_t take_next_instance ( SwitchEventProfilePtrSeq       * received_data,
                                    SampleInfoSeq    * sample_infos,
                                    int                max_samples,
                                    InstanceHandle_t   previous_handle,
                                    SampleStateMask    sample_states, 
                                    ViewStateMask      view_states, 
                                    InstanceStateMask  instance_states);
  
  ReturnCode_t read_next_instance_w_condition( SwitchEventProfilePtrSeq       * received_data,
                                   SampleInfoSeq    * sample_infos,
                                   int                max_samples,
                                   InstanceHandle_t   previous_handle,
                                   ReadCondition *    a_condition);

  ReturnCode_t take_next_instance_w_condition( SwitchEventProfilePtrSeq       * received_data,
                                   SampleInfoSeq    * sample_infos,
                                   int                max_samples,
                                   InstanceHandle_t   previous_handle,
                                   ReadCondition *    a_condition);

  ReturnCode_t return_loan ( SwitchEventProfilePtrSeq     * received_data,
                             SampleInfoSeq  * sample_infos);
  
  ReturnCode_t get_key_value ( SwitchEventProfile            * key_holder, 
                               InstanceHandle_t  handle);
    
  InstanceHandle_t lookup_instance ( SwitchEventProfile       * instance_data);

  static SwitchEventProfileDataReader * narrow( DataReader * dr) { return (SwitchEventProfileDataReader *)dr; }
  SwitchEventProfileDataReader        * narrow( void )           { return this; }


 protected:
  /* Constructor / Destructor - use Subscriber::create_datareader() */

  SwitchEventProfileDataReader();
  ~SwitchEventProfileDataReader() {};
 private:

};
class SwitchReadingValueTypeSupport;
/******************************************************************
 *   openfmb::switchmodule:: SwitchReadingValue DataReader Class
 ******************************************************************/

class COREDX_TS_CLASS_EXPORT SwitchReadingValueDataReader : public DataReader
{
  friend class DDS::DomainParticipant;
  friend class SwitchReadingValueTypeSupport;

 public:


  /* DataReader Meathods */

  ReturnCode_t read( SwitchReadingValuePtrSeq *    received_data,
                     SampleInfoSeq *   sample_infos,
                     int               max_samples,
                     SampleStateMask   sample_states,
                     ViewStateMask     view_states,
                     InstanceStateMask instance_states );

  ReturnCode_t take( SwitchReadingValuePtrSeq       * received_data,
                     SampleInfoSeq    * sample_infos,
                     int                max_samples,
                     SampleStateMask    sample_states, 
                     ViewStateMask      view_states, 
                     InstanceStateMask  instance_states );


  ReturnCode_t read_w_condition ( SwitchReadingValuePtrSeq    * received_data,
                                  SampleInfoSeq * sample_infos,
                                  int             max_samples,
                                  ReadCondition * a_condition);
  
  ReturnCode_t take_w_condition ( SwitchReadingValuePtrSeq     * received_data,
                                  SampleInfoSeq  * sample_infos,
                                  int              max_samples,
                                  ReadCondition *  a_condition);
  
  ReturnCode_t read_next_sample ( SwitchReadingValue *       received_data,
                                  SampleInfo * sample_info);
  
  ReturnCode_t take_next_sample ( SwitchReadingValue *       received_data,
                                  SampleInfo * sample_info);
  
  ReturnCode_t read_instance ( SwitchReadingValuePtrSeq       * received_data,
                               SampleInfoSeq    * sample_infos,
                               int                max_samples,
                               InstanceHandle_t   a_handle,
                               SampleStateMask    sample_states, 
                               ViewStateMask      view_states, 
                               InstanceStateMask  instance_states);
  
  ReturnCode_t take_instance ( SwitchReadingValuePtrSeq      * received_data,
                               SampleInfoSeq   * sample_infos,
                               int               max_samples,
                               InstanceHandle_t  a_handle,
                               SampleStateMask   sample_states, 
                               ViewStateMask     view_states, 
                               InstanceStateMask instance_states);
  
  ReturnCode_t read_next_instance ( SwitchReadingValuePtrSeq      * received_data,
                                    SampleInfoSeq   * sample_infos,
                                    int               max_samples,
                                    InstanceHandle_t  previous_handle,
                                    SampleStateMask   sample_states, 
                                    ViewStateMask     view_states, 
                                    InstanceStateMask instance_states);
  
  ReturnCode_t take_next_instance ( SwitchReadingValuePtrSeq       * received_data,
                                    SampleInfoSeq    * sample_infos,
                                    int                max_samples,
                                    InstanceHandle_t   previous_handle,
                                    SampleStateMask    sample_states, 
                                    ViewStateMask      view_states, 
                                    InstanceStateMask  instance_states);
  
  ReturnCode_t read_next_instance_w_condition( SwitchReadingValuePtrSeq       * received_data,
                                   SampleInfoSeq    * sample_infos,
                                   int                max_samples,
                                   InstanceHandle_t   previous_handle,
                                   ReadCondition *    a_condition);

  ReturnCode_t take_next_instance_w_condition( SwitchReadingValuePtrSeq       * received_data,
                                   SampleInfoSeq    * sample_infos,
                                   int                max_samples,
                                   InstanceHandle_t   previous_handle,
                                   ReadCondition *    a_condition);

  ReturnCode_t return_loan ( SwitchReadingValuePtrSeq     * received_data,
                             SampleInfoSeq  * sample_infos);
  
  ReturnCode_t get_key_value ( SwitchReadingValue            * key_holder, 
                               InstanceHandle_t  handle);
    
  InstanceHandle_t lookup_instance ( SwitchReadingValue       * instance_data);

  static SwitchReadingValueDataReader * narrow( DataReader * dr) { return (SwitchReadingValueDataReader *)dr; }
  SwitchReadingValueDataReader        * narrow( void )           { return this; }


 protected:
  /* Constructor / Destructor - use Subscriber::create_datareader() */

  SwitchReadingValueDataReader();
  ~SwitchReadingValueDataReader() {};
 private:

};
class SwitchStatusProfileTypeSupport;
/******************************************************************
 *   openfmb::switchmodule:: SwitchStatusProfile DataReader Class
 ******************************************************************/

class COREDX_TS_CLASS_EXPORT SwitchStatusProfileDataReader : public DataReader
{
  friend class DDS::DomainParticipant;
  friend class SwitchStatusProfileTypeSupport;

 public:


  /* DataReader Meathods */

  ReturnCode_t read( SwitchStatusProfilePtrSeq *    received_data,
                     SampleInfoSeq *   sample_infos,
                     int               max_samples,
                     SampleStateMask   sample_states,
                     ViewStateMask     view_states,
                     InstanceStateMask instance_states );

  ReturnCode_t take( SwitchStatusProfilePtrSeq       * received_data,
                     SampleInfoSeq    * sample_infos,
                     int                max_samples,
                     SampleStateMask    sample_states, 
                     ViewStateMask      view_states, 
                     InstanceStateMask  instance_states );


  ReturnCode_t read_w_condition ( SwitchStatusProfilePtrSeq    * received_data,
                                  SampleInfoSeq * sample_infos,
                                  int             max_samples,
                                  ReadCondition * a_condition);
  
  ReturnCode_t take_w_condition ( SwitchStatusProfilePtrSeq     * received_data,
                                  SampleInfoSeq  * sample_infos,
                                  int              max_samples,
                                  ReadCondition *  a_condition);
  
  ReturnCode_t read_next_sample ( SwitchStatusProfile *       received_data,
                                  SampleInfo * sample_info);
  
  ReturnCode_t take_next_sample ( SwitchStatusProfile *       received_data,
                                  SampleInfo * sample_info);
  
  ReturnCode_t read_instance ( SwitchStatusProfilePtrSeq       * received_data,
                               SampleInfoSeq    * sample_infos,
                               int                max_samples,
                               InstanceHandle_t   a_handle,
                               SampleStateMask    sample_states, 
                               ViewStateMask      view_states, 
                               InstanceStateMask  instance_states);
  
  ReturnCode_t take_instance ( SwitchStatusProfilePtrSeq      * received_data,
                               SampleInfoSeq   * sample_infos,
                               int               max_samples,
                               InstanceHandle_t  a_handle,
                               SampleStateMask   sample_states, 
                               ViewStateMask     view_states, 
                               InstanceStateMask instance_states);
  
  ReturnCode_t read_next_instance ( SwitchStatusProfilePtrSeq      * received_data,
                                    SampleInfoSeq   * sample_infos,
                                    int               max_samples,
                                    InstanceHandle_t  previous_handle,
                                    SampleStateMask   sample_states, 
                                    ViewStateMask     view_states, 
                                    InstanceStateMask instance_states);
  
  ReturnCode_t take_next_instance ( SwitchStatusProfilePtrSeq       * received_data,
                                    SampleInfoSeq    * sample_infos,
                                    int                max_samples,
                                    InstanceHandle_t   previous_handle,
                                    SampleStateMask    sample_states, 
                                    ViewStateMask      view_states, 
                                    InstanceStateMask  instance_states);
  
  ReturnCode_t read_next_instance_w_condition( SwitchStatusProfilePtrSeq       * received_data,
                                   SampleInfoSeq    * sample_infos,
                                   int                max_samples,
                                   InstanceHandle_t   previous_handle,
                                   ReadCondition *    a_condition);

  ReturnCode_t take_next_instance_w_condition( SwitchStatusProfilePtrSeq       * received_data,
                                   SampleInfoSeq    * sample_infos,
                                   int                max_samples,
                                   InstanceHandle_t   previous_handle,
                                   ReadCondition *    a_condition);

  ReturnCode_t return_loan ( SwitchStatusProfilePtrSeq     * received_data,
                             SampleInfoSeq  * sample_infos);
  
  ReturnCode_t get_key_value ( SwitchStatusProfile            * key_holder, 
                               InstanceHandle_t  handle);
    
  InstanceHandle_t lookup_instance ( SwitchStatusProfile       * instance_data);

  static SwitchStatusProfileDataReader * narrow( DataReader * dr) { return (SwitchStatusProfileDataReader *)dr; }
  SwitchStatusProfileDataReader        * narrow( void )           { return this; }


 protected:
  /* Constructor / Destructor - use Subscriber::create_datareader() */

  SwitchStatusProfileDataReader();
  ~SwitchStatusProfileDataReader() {};
 private:

};

}  /* namespace switchmodule */
/* END SCOPE: switchmodule */

}  /* namespace openfmb */
/* END SCOPE: openfmb */
/* START SCOPE: openfmb */

namespace openfmb {

/* START SCOPE: breakermodule */

namespace breakermodule {

class BreakerControlProfileTypeSupport;
/******************************************************************
 *   openfmb::breakermodule:: BreakerControlProfile DataReader Class
 ******************************************************************/

class COREDX_TS_CLASS_EXPORT BreakerControlProfileDataReader : public DataReader
{
  friend class DDS::DomainParticipant;
  friend class BreakerControlProfileTypeSupport;

 public:


  /* DataReader Meathods */

  ReturnCode_t read( BreakerControlProfilePtrSeq *    received_data,
                     SampleInfoSeq *   sample_infos,
                     int               max_samples,
                     SampleStateMask   sample_states,
                     ViewStateMask     view_states,
                     InstanceStateMask instance_states );

  ReturnCode_t take( BreakerControlProfilePtrSeq       * received_data,
                     SampleInfoSeq    * sample_infos,
                     int                max_samples,
                     SampleStateMask    sample_states, 
                     ViewStateMask      view_states, 
                     InstanceStateMask  instance_states );


  ReturnCode_t read_w_condition ( BreakerControlProfilePtrSeq    * received_data,
                                  SampleInfoSeq * sample_infos,
                                  int             max_samples,
                                  ReadCondition * a_condition);
  
  ReturnCode_t take_w_condition ( BreakerControlProfilePtrSeq     * received_data,
                                  SampleInfoSeq  * sample_infos,
                                  int              max_samples,
                                  ReadCondition *  a_condition);
  
  ReturnCode_t read_next_sample ( BreakerControlProfile *       received_data,
                                  SampleInfo * sample_info);
  
  ReturnCode_t take_next_sample ( BreakerControlProfile *       received_data,
                                  SampleInfo * sample_info);
  
  ReturnCode_t read_instance ( BreakerControlProfilePtrSeq       * received_data,
                               SampleInfoSeq    * sample_infos,
                               int                max_samples,
                               InstanceHandle_t   a_handle,
                               SampleStateMask    sample_states, 
                               ViewStateMask      view_states, 
                               InstanceStateMask  instance_states);
  
  ReturnCode_t take_instance ( BreakerControlProfilePtrSeq      * received_data,
                               SampleInfoSeq   * sample_infos,
                               int               max_samples,
                               InstanceHandle_t  a_handle,
                               SampleStateMask   sample_states, 
                               ViewStateMask     view_states, 
                               InstanceStateMask instance_states);
  
  ReturnCode_t read_next_instance ( BreakerControlProfilePtrSeq      * received_data,
                                    SampleInfoSeq   * sample_infos,
                                    int               max_samples,
                                    InstanceHandle_t  previous_handle,
                                    SampleStateMask   sample_states, 
                                    ViewStateMask     view_states, 
                                    InstanceStateMask instance_states);
  
  ReturnCode_t take_next_instance ( BreakerControlProfilePtrSeq       * received_data,
                                    SampleInfoSeq    * sample_infos,
                                    int                max_samples,
                                    InstanceHandle_t   previous_handle,
                                    SampleStateMask    sample_states, 
                                    ViewStateMask      view_states, 
                                    InstanceStateMask  instance_states);
  
  ReturnCode_t read_next_instance_w_condition( BreakerControlProfilePtrSeq       * received_data,
                                   SampleInfoSeq    * sample_infos,
                                   int                max_samples,
                                   InstanceHandle_t   previous_handle,
                                   ReadCondition *    a_condition);

  ReturnCode_t take_next_instance_w_condition( BreakerControlProfilePtrSeq       * received_data,
                                   SampleInfoSeq    * sample_infos,
                                   int                max_samples,
                                   InstanceHandle_t   previous_handle,
                                   ReadCondition *    a_condition);

  ReturnCode_t return_loan ( BreakerControlProfilePtrSeq     * received_data,
                             SampleInfoSeq  * sample_infos);
  
  ReturnCode_t get_key_value ( BreakerControlProfile            * key_holder, 
                               InstanceHandle_t  handle);
    
  InstanceHandle_t lookup_instance ( BreakerControlProfile       * instance_data);

  static BreakerControlProfileDataReader * narrow( DataReader * dr) { return (BreakerControlProfileDataReader *)dr; }
  BreakerControlProfileDataReader        * narrow( void )           { return this; }


 protected:
  /* Constructor / Destructor - use Subscriber::create_datareader() */

  BreakerControlProfileDataReader();
  ~BreakerControlProfileDataReader() {};
 private:

};
class BreakerEventProfileTypeSupport;
/******************************************************************
 *   openfmb::breakermodule:: BreakerEventProfile DataReader Class
 ******************************************************************/

class COREDX_TS_CLASS_EXPORT BreakerEventProfileDataReader : public DataReader
{
  friend class DDS::DomainParticipant;
  friend class BreakerEventProfileTypeSupport;

 public:


  /* DataReader Meathods */

  ReturnCode_t read( BreakerEventProfilePtrSeq *    received_data,
                     SampleInfoSeq *   sample_infos,
                     int               max_samples,
                     SampleStateMask   sample_states,
                     ViewStateMask     view_states,
                     InstanceStateMask instance_states );

  ReturnCode_t take( BreakerEventProfilePtrSeq       * received_data,
                     SampleInfoSeq    * sample_infos,
                     int                max_samples,
                     SampleStateMask    sample_states, 
                     ViewStateMask      view_states, 
                     InstanceStateMask  instance_states );


  ReturnCode_t read_w_condition ( BreakerEventProfilePtrSeq    * received_data,
                                  SampleInfoSeq * sample_infos,
                                  int             max_samples,
                                  ReadCondition * a_condition);
  
  ReturnCode_t take_w_condition ( BreakerEventProfilePtrSeq     * received_data,
                                  SampleInfoSeq  * sample_infos,
                                  int              max_samples,
                                  ReadCondition *  a_condition);
  
  ReturnCode_t read_next_sample ( BreakerEventProfile *       received_data,
                                  SampleInfo * sample_info);
  
  ReturnCode_t take_next_sample ( BreakerEventProfile *       received_data,
                                  SampleInfo * sample_info);
  
  ReturnCode_t read_instance ( BreakerEventProfilePtrSeq       * received_data,
                               SampleInfoSeq    * sample_infos,
                               int                max_samples,
                               InstanceHandle_t   a_handle,
                               SampleStateMask    sample_states, 
                               ViewStateMask      view_states, 
                               InstanceStateMask  instance_states);
  
  ReturnCode_t take_instance ( BreakerEventProfilePtrSeq      * received_data,
                               SampleInfoSeq   * sample_infos,
                               int               max_samples,
                               InstanceHandle_t  a_handle,
                               SampleStateMask   sample_states, 
                               ViewStateMask     view_states, 
                               InstanceStateMask instance_states);
  
  ReturnCode_t read_next_instance ( BreakerEventProfilePtrSeq      * received_data,
                                    SampleInfoSeq   * sample_infos,
                                    int               max_samples,
                                    InstanceHandle_t  previous_handle,
                                    SampleStateMask   sample_states, 
                                    ViewStateMask     view_states, 
                                    InstanceStateMask instance_states);
  
  ReturnCode_t take_next_instance ( BreakerEventProfilePtrSeq       * received_data,
                                    SampleInfoSeq    * sample_infos,
                                    int                max_samples,
                                    InstanceHandle_t   previous_handle,
                                    SampleStateMask    sample_states, 
                                    ViewStateMask      view_states, 
                                    InstanceStateMask  instance_states);
  
  ReturnCode_t read_next_instance_w_condition( BreakerEventProfilePtrSeq       * received_data,
                                   SampleInfoSeq    * sample_infos,
                                   int                max_samples,
                                   InstanceHandle_t   previous_handle,
                                   ReadCondition *    a_condition);

  ReturnCode_t take_next_instance_w_condition( BreakerEventProfilePtrSeq       * received_data,
                                   SampleInfoSeq    * sample_infos,
                                   int                max_samples,
                                   InstanceHandle_t   previous_handle,
                                   ReadCondition *    a_condition);

  ReturnCode_t return_loan ( BreakerEventProfilePtrSeq     * received_data,
                             SampleInfoSeq  * sample_infos);
  
  ReturnCode_t get_key_value ( BreakerEventProfile            * key_holder, 
                               InstanceHandle_t  handle);
    
  InstanceHandle_t lookup_instance ( BreakerEventProfile       * instance_data);

  static BreakerEventProfileDataReader * narrow( DataReader * dr) { return (BreakerEventProfileDataReader *)dr; }
  BreakerEventProfileDataReader        * narrow( void )           { return this; }


 protected:
  /* Constructor / Destructor - use Subscriber::create_datareader() */

  BreakerEventProfileDataReader();
  ~BreakerEventProfileDataReader() {};
 private:

};
class BreakerReadingValueTypeSupport;
/******************************************************************
 *   openfmb::breakermodule:: BreakerReadingValue DataReader Class
 ******************************************************************/

class COREDX_TS_CLASS_EXPORT BreakerReadingValueDataReader : public DataReader
{
  friend class DDS::DomainParticipant;
  friend class BreakerReadingValueTypeSupport;

 public:


  /* DataReader Meathods */

  ReturnCode_t read( BreakerReadingValuePtrSeq *    received_data,
                     SampleInfoSeq *   sample_infos,
                     int               max_samples,
                     SampleStateMask   sample_states,
                     ViewStateMask     view_states,
                     InstanceStateMask instance_states );

  ReturnCode_t take( BreakerReadingValuePtrSeq       * received_data,
                     SampleInfoSeq    * sample_infos,
                     int                max_samples,
                     SampleStateMask    sample_states, 
                     ViewStateMask      view_states, 
                     InstanceStateMask  instance_states );


  ReturnCode_t read_w_condition ( BreakerReadingValuePtrSeq    * received_data,
                                  SampleInfoSeq * sample_infos,
                                  int             max_samples,
                                  ReadCondition * a_condition);
  
  ReturnCode_t take_w_condition ( BreakerReadingValuePtrSeq     * received_data,
                                  SampleInfoSeq  * sample_infos,
                                  int              max_samples,
                                  ReadCondition *  a_condition);
  
  ReturnCode_t read_next_sample ( BreakerReadingValue *       received_data,
                                  SampleInfo * sample_info);
  
  ReturnCode_t take_next_sample ( BreakerReadingValue *       received_data,
                                  SampleInfo * sample_info);
  
  ReturnCode_t read_instance ( BreakerReadingValuePtrSeq       * received_data,
                               SampleInfoSeq    * sample_infos,
                               int                max_samples,
                               InstanceHandle_t   a_handle,
                               SampleStateMask    sample_states, 
                               ViewStateMask      view_states, 
                               InstanceStateMask  instance_states);
  
  ReturnCode_t take_instance ( BreakerReadingValuePtrSeq      * received_data,
                               SampleInfoSeq   * sample_infos,
                               int               max_samples,
                               InstanceHandle_t  a_handle,
                               SampleStateMask   sample_states, 
                               ViewStateMask     view_states, 
                               InstanceStateMask instance_states);
  
  ReturnCode_t read_next_instance ( BreakerReadingValuePtrSeq      * received_data,
                                    SampleInfoSeq   * sample_infos,
                                    int               max_samples,
                                    InstanceHandle_t  previous_handle,
                                    SampleStateMask   sample_states, 
                                    ViewStateMask     view_states, 
                                    InstanceStateMask instance_states);
  
  ReturnCode_t take_next_instance ( BreakerReadingValuePtrSeq       * received_data,
                                    SampleInfoSeq    * sample_infos,
                                    int                max_samples,
                                    InstanceHandle_t   previous_handle,
                                    SampleStateMask    sample_states, 
                                    ViewStateMask      view_states, 
                                    InstanceStateMask  instance_states);
  
  ReturnCode_t read_next_instance_w_condition( BreakerReadingValuePtrSeq       * received_data,
                                   SampleInfoSeq    * sample_infos,
                                   int                max_samples,
                                   InstanceHandle_t   previous_handle,
                                   ReadCondition *    a_condition);

  ReturnCode_t take_next_instance_w_condition( BreakerReadingValuePtrSeq       * received_data,
                                   SampleInfoSeq    * sample_infos,
                                   int                max_samples,
                                   InstanceHandle_t   previous_handle,
                                   ReadCondition *    a_condition);

  ReturnCode_t return_loan ( BreakerReadingValuePtrSeq     * received_data,
                             SampleInfoSeq  * sample_infos);
  
  ReturnCode_t get_key_value ( BreakerReadingValue            * key_holder, 
                               InstanceHandle_t  handle);
    
  InstanceHandle_t lookup_instance ( BreakerReadingValue       * instance_data);

  static BreakerReadingValueDataReader * narrow( DataReader * dr) { return (BreakerReadingValueDataReader *)dr; }
  BreakerReadingValueDataReader        * narrow( void )           { return this; }


 protected:
  /* Constructor / Destructor - use Subscriber::create_datareader() */

  BreakerReadingValueDataReader();
  ~BreakerReadingValueDataReader() {};
 private:

};
class BreakerStatusProfileTypeSupport;
/******************************************************************
 *   openfmb::breakermodule:: BreakerStatusProfile DataReader Class
 ******************************************************************/

class COREDX_TS_CLASS_EXPORT BreakerStatusProfileDataReader : public DataReader
{
  friend class DDS::DomainParticipant;
  friend class BreakerStatusProfileTypeSupport;

 public:


  /* DataReader Meathods */

  ReturnCode_t read( BreakerStatusProfilePtrSeq *    received_data,
                     SampleInfoSeq *   sample_infos,
                     int               max_samples,
                     SampleStateMask   sample_states,
                     ViewStateMask     view_states,
                     InstanceStateMask instance_states );

  ReturnCode_t take( BreakerStatusProfilePtrSeq       * received_data,
                     SampleInfoSeq    * sample_infos,
                     int                max_samples,
                     SampleStateMask    sample_states, 
                     ViewStateMask      view_states, 
                     InstanceStateMask  instance_states );


  ReturnCode_t read_w_condition ( BreakerStatusProfilePtrSeq    * received_data,
                                  SampleInfoSeq * sample_infos,
                                  int             max_samples,
                                  ReadCondition * a_condition);
  
  ReturnCode_t take_w_condition ( BreakerStatusProfilePtrSeq     * received_data,
                                  SampleInfoSeq  * sample_infos,
                                  int              max_samples,
                                  ReadCondition *  a_condition);
  
  ReturnCode_t read_next_sample ( BreakerStatusProfile *       received_data,
                                  SampleInfo * sample_info);
  
  ReturnCode_t take_next_sample ( BreakerStatusProfile *       received_data,
                                  SampleInfo * sample_info);
  
  ReturnCode_t read_instance ( BreakerStatusProfilePtrSeq       * received_data,
                               SampleInfoSeq    * sample_infos,
                               int                max_samples,
                               InstanceHandle_t   a_handle,
                               SampleStateMask    sample_states, 
                               ViewStateMask      view_states, 
                               InstanceStateMask  instance_states);
  
  ReturnCode_t take_instance ( BreakerStatusProfilePtrSeq      * received_data,
                               SampleInfoSeq   * sample_infos,
                               int               max_samples,
                               InstanceHandle_t  a_handle,
                               SampleStateMask   sample_states, 
                               ViewStateMask     view_states, 
                               InstanceStateMask instance_states);
  
  ReturnCode_t read_next_instance ( BreakerStatusProfilePtrSeq      * received_data,
                                    SampleInfoSeq   * sample_infos,
                                    int               max_samples,
                                    InstanceHandle_t  previous_handle,
                                    SampleStateMask   sample_states, 
                                    ViewStateMask     view_states, 
                                    InstanceStateMask instance_states);
  
  ReturnCode_t take_next_instance ( BreakerStatusProfilePtrSeq       * received_data,
                                    SampleInfoSeq    * sample_infos,
                                    int                max_samples,
                                    InstanceHandle_t   previous_handle,
                                    SampleStateMask    sample_states, 
                                    ViewStateMask      view_states, 
                                    InstanceStateMask  instance_states);
  
  ReturnCode_t read_next_instance_w_condition( BreakerStatusProfilePtrSeq       * received_data,
                                   SampleInfoSeq    * sample_infos,
                                   int                max_samples,
                                   InstanceHandle_t   previous_handle,
                                   ReadCondition *    a_condition);

  ReturnCode_t take_next_instance_w_condition( BreakerStatusProfilePtrSeq       * received_data,
                                   SampleInfoSeq    * sample_infos,
                                   int                max_samples,
                                   InstanceHandle_t   previous_handle,
                                   ReadCondition *    a_condition);

  ReturnCode_t return_loan ( BreakerStatusProfilePtrSeq     * received_data,
                             SampleInfoSeq  * sample_infos);
  
  ReturnCode_t get_key_value ( BreakerStatusProfile            * key_holder, 
                               InstanceHandle_t  handle);
    
  InstanceHandle_t lookup_instance ( BreakerStatusProfile       * instance_data);

  static BreakerStatusProfileDataReader * narrow( DataReader * dr) { return (BreakerStatusProfileDataReader *)dr; }
  BreakerStatusProfileDataReader        * narrow( void )           { return this; }


 protected:
  /* Constructor / Destructor - use Subscriber::create_datareader() */

  BreakerStatusProfileDataReader();
  ~BreakerStatusProfileDataReader() {};
 private:

};

}  /* namespace breakermodule */
/* END SCOPE: breakermodule */
/* START SCOPE: commonmodule */

namespace commonmodule {


}  /* namespace commonmodule */
/* END SCOPE: commonmodule */
/* START SCOPE: essmodule */

namespace essmodule {

class EssControlFSCCTypeSupport;
/******************************************************************
 *   openfmb::essmodule:: EssControlFSCC DataReader Class
 ******************************************************************/

class COREDX_TS_CLASS_EXPORT EssControlFSCCDataReader : public DataReader
{
  friend class DDS::DomainParticipant;
  friend class EssControlFSCCTypeSupport;

 public:


  /* DataReader Meathods */

  ReturnCode_t read( EssControlFSCCPtrSeq *    received_data,
                     SampleInfoSeq *   sample_infos,
                     int               max_samples,
                     SampleStateMask   sample_states,
                     ViewStateMask     view_states,
                     InstanceStateMask instance_states );

  ReturnCode_t take( EssControlFSCCPtrSeq       * received_data,
                     SampleInfoSeq    * sample_infos,
                     int                max_samples,
                     SampleStateMask    sample_states, 
                     ViewStateMask      view_states, 
                     InstanceStateMask  instance_states );


  ReturnCode_t read_w_condition ( EssControlFSCCPtrSeq    * received_data,
                                  SampleInfoSeq * sample_infos,
                                  int             max_samples,
                                  ReadCondition * a_condition);
  
  ReturnCode_t take_w_condition ( EssControlFSCCPtrSeq     * received_data,
                                  SampleInfoSeq  * sample_infos,
                                  int              max_samples,
                                  ReadCondition *  a_condition);
  
  ReturnCode_t read_next_sample ( EssControlFSCC *       received_data,
                                  SampleInfo * sample_info);
  
  ReturnCode_t take_next_sample ( EssControlFSCC *       received_data,
                                  SampleInfo * sample_info);
  
  ReturnCode_t read_instance ( EssControlFSCCPtrSeq       * received_data,
                               SampleInfoSeq    * sample_infos,
                               int                max_samples,
                               InstanceHandle_t   a_handle,
                               SampleStateMask    sample_states, 
                               ViewStateMask      view_states, 
                               InstanceStateMask  instance_states);
  
  ReturnCode_t take_instance ( EssControlFSCCPtrSeq      * received_data,
                               SampleInfoSeq   * sample_infos,
                               int               max_samples,
                               InstanceHandle_t  a_handle,
                               SampleStateMask   sample_states, 
                               ViewStateMask     view_states, 
                               InstanceStateMask instance_states);
  
  ReturnCode_t read_next_instance ( EssControlFSCCPtrSeq      * received_data,
                                    SampleInfoSeq   * sample_infos,
                                    int               max_samples,
                                    InstanceHandle_t  previous_handle,
                                    SampleStateMask   sample_states, 
                                    ViewStateMask     view_states, 
                                    InstanceStateMask instance_states);
  
  ReturnCode_t take_next_instance ( EssControlFSCCPtrSeq       * received_data,
                                    SampleInfoSeq    * sample_infos,
                                    int                max_samples,
                                    InstanceHandle_t   previous_handle,
                                    SampleStateMask    sample_states, 
                                    ViewStateMask      view_states, 
                                    InstanceStateMask  instance_states);
  
  ReturnCode_t read_next_instance_w_condition( EssControlFSCCPtrSeq       * received_data,
                                   SampleInfoSeq    * sample_infos,
                                   int                max_samples,
                                   InstanceHandle_t   previous_handle,
                                   ReadCondition *    a_condition);

  ReturnCode_t take_next_instance_w_condition( EssControlFSCCPtrSeq       * received_data,
                                   SampleInfoSeq    * sample_infos,
                                   int                max_samples,
                                   InstanceHandle_t   previous_handle,
                                   ReadCondition *    a_condition);

  ReturnCode_t return_loan ( EssControlFSCCPtrSeq     * received_data,
                             SampleInfoSeq  * sample_infos);
  
  ReturnCode_t get_key_value ( EssControlFSCC            * key_holder, 
                               InstanceHandle_t  handle);
    
  InstanceHandle_t lookup_instance ( EssControlFSCC       * instance_data);

  static EssControlFSCCDataReader * narrow( DataReader * dr) { return (EssControlFSCCDataReader *)dr; }
  EssControlFSCCDataReader        * narrow( void )           { return this; }


 protected:
  /* Constructor / Destructor - use Subscriber::create_datareader() */

  EssControlFSCCDataReader();
  ~EssControlFSCCDataReader() {};
 private:

};
class ESSReadingProfileTypeSupport;
/******************************************************************
 *   openfmb::essmodule:: ESSReadingProfile DataReader Class
 ******************************************************************/

class COREDX_TS_CLASS_EXPORT ESSReadingProfileDataReader : public DataReader
{
  friend class DDS::DomainParticipant;
  friend class ESSReadingProfileTypeSupport;

 public:


  /* DataReader Meathods */

  ReturnCode_t read( ESSReadingProfilePtrSeq *    received_data,
                     SampleInfoSeq *   sample_infos,
                     int               max_samples,
                     SampleStateMask   sample_states,
                     ViewStateMask     view_states,
                     InstanceStateMask instance_states );

  ReturnCode_t take( ESSReadingProfilePtrSeq       * received_data,
                     SampleInfoSeq    * sample_infos,
                     int                max_samples,
                     SampleStateMask    sample_states, 
                     ViewStateMask      view_states, 
                     InstanceStateMask  instance_states );


  ReturnCode_t read_w_condition ( ESSReadingProfilePtrSeq    * received_data,
                                  SampleInfoSeq * sample_infos,
                                  int             max_samples,
                                  ReadCondition * a_condition);
  
  ReturnCode_t take_w_condition ( ESSReadingProfilePtrSeq     * received_data,
                                  SampleInfoSeq  * sample_infos,
                                  int              max_samples,
                                  ReadCondition *  a_condition);
  
  ReturnCode_t read_next_sample ( ESSReadingProfile *       received_data,
                                  SampleInfo * sample_info);
  
  ReturnCode_t take_next_sample ( ESSReadingProfile *       received_data,
                                  SampleInfo * sample_info);
  
  ReturnCode_t read_instance ( ESSReadingProfilePtrSeq       * received_data,
                               SampleInfoSeq    * sample_infos,
                               int                max_samples,
                               InstanceHandle_t   a_handle,
                               SampleStateMask    sample_states, 
                               ViewStateMask      view_states, 
                               InstanceStateMask  instance_states);
  
  ReturnCode_t take_instance ( ESSReadingProfilePtrSeq      * received_data,
                               SampleInfoSeq   * sample_infos,
                               int               max_samples,
                               InstanceHandle_t  a_handle,
                               SampleStateMask   sample_states, 
                               ViewStateMask     view_states, 
                               InstanceStateMask instance_states);
  
  ReturnCode_t read_next_instance ( ESSReadingProfilePtrSeq      * received_data,
                                    SampleInfoSeq   * sample_infos,
                                    int               max_samples,
                                    InstanceHandle_t  previous_handle,
                                    SampleStateMask   sample_states, 
                                    ViewStateMask     view_states, 
                                    InstanceStateMask instance_states);
  
  ReturnCode_t take_next_instance ( ESSReadingProfilePtrSeq       * received_data,
                                    SampleInfoSeq    * sample_infos,
                                    int                max_samples,
                                    InstanceHandle_t   previous_handle,
                                    SampleStateMask    sample_states, 
                                    ViewStateMask      view_states, 
                                    InstanceStateMask  instance_states);
  
  ReturnCode_t read_next_instance_w_condition( ESSReadingProfilePtrSeq       * received_data,
                                   SampleInfoSeq    * sample_infos,
                                   int                max_samples,
                                   InstanceHandle_t   previous_handle,
                                   ReadCondition *    a_condition);

  ReturnCode_t take_next_instance_w_condition( ESSReadingProfilePtrSeq       * received_data,
                                   SampleInfoSeq    * sample_infos,
                                   int                max_samples,
                                   InstanceHandle_t   previous_handle,
                                   ReadCondition *    a_condition);

  ReturnCode_t return_loan ( ESSReadingProfilePtrSeq     * received_data,
                             SampleInfoSeq  * sample_infos);
  
  ReturnCode_t get_key_value ( ESSReadingProfile            * key_holder, 
                               InstanceHandle_t  handle);
    
  InstanceHandle_t lookup_instance ( ESSReadingProfile       * instance_data);

  static ESSReadingProfileDataReader * narrow( DataReader * dr) { return (ESSReadingProfileDataReader *)dr; }
  ESSReadingProfileDataReader        * narrow( void )           { return this; }


 protected:
  /* Constructor / Destructor - use Subscriber::create_datareader() */

  ESSReadingProfileDataReader();
  ~ESSReadingProfileDataReader() {};
 private:

};
class ESSControlTypeSupport;
/******************************************************************
 *   openfmb::essmodule:: ESSControl DataReader Class
 ******************************************************************/

class COREDX_TS_CLASS_EXPORT ESSControlDataReader : public DataReader
{
  friend class DDS::DomainParticipant;
  friend class ESSControlTypeSupport;

 public:


  /* DataReader Meathods */

  ReturnCode_t read( ESSControlPtrSeq *    received_data,
                     SampleInfoSeq *   sample_infos,
                     int               max_samples,
                     SampleStateMask   sample_states,
                     ViewStateMask     view_states,
                     InstanceStateMask instance_states );

  ReturnCode_t take( ESSControlPtrSeq       * received_data,
                     SampleInfoSeq    * sample_infos,
                     int                max_samples,
                     SampleStateMask    sample_states, 
                     ViewStateMask      view_states, 
                     InstanceStateMask  instance_states );


  ReturnCode_t read_w_condition ( ESSControlPtrSeq    * received_data,
                                  SampleInfoSeq * sample_infos,
                                  int             max_samples,
                                  ReadCondition * a_condition);
  
  ReturnCode_t take_w_condition ( ESSControlPtrSeq     * received_data,
                                  SampleInfoSeq  * sample_infos,
                                  int              max_samples,
                                  ReadCondition *  a_condition);
  
  ReturnCode_t read_next_sample ( ESSControl *       received_data,
                                  SampleInfo * sample_info);
  
  ReturnCode_t take_next_sample ( ESSControl *       received_data,
                                  SampleInfo * sample_info);
  
  ReturnCode_t read_instance ( ESSControlPtrSeq       * received_data,
                               SampleInfoSeq    * sample_infos,
                               int                max_samples,
                               InstanceHandle_t   a_handle,
                               SampleStateMask    sample_states, 
                               ViewStateMask      view_states, 
                               InstanceStateMask  instance_states);
  
  ReturnCode_t take_instance ( ESSControlPtrSeq      * received_data,
                               SampleInfoSeq   * sample_infos,
                               int               max_samples,
                               InstanceHandle_t  a_handle,
                               SampleStateMask   sample_states, 
                               ViewStateMask     view_states, 
                               InstanceStateMask instance_states);
  
  ReturnCode_t read_next_instance ( ESSControlPtrSeq      * received_data,
                                    SampleInfoSeq   * sample_infos,
                                    int               max_samples,
                                    InstanceHandle_t  previous_handle,
                                    SampleStateMask   sample_states, 
                                    ViewStateMask     view_states, 
                                    InstanceStateMask instance_states);
  
  ReturnCode_t take_next_instance ( ESSControlPtrSeq       * received_data,
                                    SampleInfoSeq    * sample_infos,
                                    int                max_samples,
                                    InstanceHandle_t   previous_handle,
                                    SampleStateMask    sample_states, 
                                    ViewStateMask      view_states, 
                                    InstanceStateMask  instance_states);
  
  ReturnCode_t read_next_instance_w_condition( ESSControlPtrSeq       * received_data,
                                   SampleInfoSeq    * sample_infos,
                                   int                max_samples,
                                   InstanceHandle_t   previous_handle,
                                   ReadCondition *    a_condition);

  ReturnCode_t take_next_instance_w_condition( ESSControlPtrSeq       * received_data,
                                   SampleInfoSeq    * sample_infos,
                                   int                max_samples,
                                   InstanceHandle_t   previous_handle,
                                   ReadCondition *    a_condition);

  ReturnCode_t return_loan ( ESSControlPtrSeq     * received_data,
                             SampleInfoSeq  * sample_infos);
  
  ReturnCode_t get_key_value ( ESSControl            * key_holder, 
                               InstanceHandle_t  handle);
    
  InstanceHandle_t lookup_instance ( ESSControl       * instance_data);

  static ESSControlDataReader * narrow( DataReader * dr) { return (ESSControlDataReader *)dr; }
  ESSControlDataReader        * narrow( void )           { return this; }


 protected:
  /* Constructor / Destructor - use Subscriber::create_datareader() */

  ESSControlDataReader();
  ~ESSControlDataReader() {};
 private:

};
class ESSControlProfileTypeSupport;
/******************************************************************
 *   openfmb::essmodule:: ESSControlProfile DataReader Class
 ******************************************************************/

class COREDX_TS_CLASS_EXPORT ESSControlProfileDataReader : public DataReader
{
  friend class DDS::DomainParticipant;
  friend class ESSControlProfileTypeSupport;

 public:


  /* DataReader Meathods */

  ReturnCode_t read( ESSControlProfilePtrSeq *    received_data,
                     SampleInfoSeq *   sample_infos,
                     int               max_samples,
                     SampleStateMask   sample_states,
                     ViewStateMask     view_states,
                     InstanceStateMask instance_states );

  ReturnCode_t take( ESSControlProfilePtrSeq       * received_data,
                     SampleInfoSeq    * sample_infos,
                     int                max_samples,
                     SampleStateMask    sample_states, 
                     ViewStateMask      view_states, 
                     InstanceStateMask  instance_states );


  ReturnCode_t read_w_condition ( ESSControlProfilePtrSeq    * received_data,
                                  SampleInfoSeq * sample_infos,
                                  int             max_samples,
                                  ReadCondition * a_condition);
  
  ReturnCode_t take_w_condition ( ESSControlProfilePtrSeq     * received_data,
                                  SampleInfoSeq  * sample_infos,
                                  int              max_samples,
                                  ReadCondition *  a_condition);
  
  ReturnCode_t read_next_sample ( ESSControlProfile *       received_data,
                                  SampleInfo * sample_info);
  
  ReturnCode_t take_next_sample ( ESSControlProfile *       received_data,
                                  SampleInfo * sample_info);
  
  ReturnCode_t read_instance ( ESSControlProfilePtrSeq       * received_data,
                               SampleInfoSeq    * sample_infos,
                               int                max_samples,
                               InstanceHandle_t   a_handle,
                               SampleStateMask    sample_states, 
                               ViewStateMask      view_states, 
                               InstanceStateMask  instance_states);
  
  ReturnCode_t take_instance ( ESSControlProfilePtrSeq      * received_data,
                               SampleInfoSeq   * sample_infos,
                               int               max_samples,
                               InstanceHandle_t  a_handle,
                               SampleStateMask   sample_states, 
                               ViewStateMask     view_states, 
                               InstanceStateMask instance_states);
  
  ReturnCode_t read_next_instance ( ESSControlProfilePtrSeq      * received_data,
                                    SampleInfoSeq   * sample_infos,
                                    int               max_samples,
                                    InstanceHandle_t  previous_handle,
                                    SampleStateMask   sample_states, 
                                    ViewStateMask     view_states, 
                                    InstanceStateMask instance_states);
  
  ReturnCode_t take_next_instance ( ESSControlProfilePtrSeq       * received_data,
                                    SampleInfoSeq    * sample_infos,
                                    int                max_samples,
                                    InstanceHandle_t   previous_handle,
                                    SampleStateMask    sample_states, 
                                    ViewStateMask      view_states, 
                                    InstanceStateMask  instance_states);
  
  ReturnCode_t read_next_instance_w_condition( ESSControlProfilePtrSeq       * received_data,
                                   SampleInfoSeq    * sample_infos,
                                   int                max_samples,
                                   InstanceHandle_t   previous_handle,
                                   ReadCondition *    a_condition);

  ReturnCode_t take_next_instance_w_condition( ESSControlProfilePtrSeq       * received_data,
                                   SampleInfoSeq    * sample_infos,
                                   int                max_samples,
                                   InstanceHandle_t   previous_handle,
                                   ReadCondition *    a_condition);

  ReturnCode_t return_loan ( ESSControlProfilePtrSeq     * received_data,
                             SampleInfoSeq  * sample_infos);
  
  ReturnCode_t get_key_value ( ESSControlProfile            * key_holder, 
                               InstanceHandle_t  handle);
    
  InstanceHandle_t lookup_instance ( ESSControlProfile       * instance_data);

  static ESSControlProfileDataReader * narrow( DataReader * dr) { return (ESSControlProfileDataReader *)dr; }
  ESSControlProfileDataReader        * narrow( void )           { return this; }


 protected:
  /* Constructor / Destructor - use Subscriber::create_datareader() */

  ESSControlProfileDataReader();
  ~ESSControlProfileDataReader() {};
 private:

};

}  /* namespace essmodule */
/* END SCOPE: essmodule */
/* START SCOPE: generationmodule */

namespace generationmodule {

class GenerationControlProfileTypeSupport;
/******************************************************************
 *   openfmb::generationmodule:: GenerationControlProfile DataReader Class
 ******************************************************************/

class COREDX_TS_CLASS_EXPORT GenerationControlProfileDataReader : public DataReader
{
  friend class DDS::DomainParticipant;
  friend class GenerationControlProfileTypeSupport;

 public:


  /* DataReader Meathods */

  ReturnCode_t read( GenerationControlProfilePtrSeq *    received_data,
                     SampleInfoSeq *   sample_infos,
                     int               max_samples,
                     SampleStateMask   sample_states,
                     ViewStateMask     view_states,
                     InstanceStateMask instance_states );

  ReturnCode_t take( GenerationControlProfilePtrSeq       * received_data,
                     SampleInfoSeq    * sample_infos,
                     int                max_samples,
                     SampleStateMask    sample_states, 
                     ViewStateMask      view_states, 
                     InstanceStateMask  instance_states );


  ReturnCode_t read_w_condition ( GenerationControlProfilePtrSeq    * received_data,
                                  SampleInfoSeq * sample_infos,
                                  int             max_samples,
                                  ReadCondition * a_condition);
  
  ReturnCode_t take_w_condition ( GenerationControlProfilePtrSeq     * received_data,
                                  SampleInfoSeq  * sample_infos,
                                  int              max_samples,
                                  ReadCondition *  a_condition);
  
  ReturnCode_t read_next_sample ( GenerationControlProfile *       received_data,
                                  SampleInfo * sample_info);
  
  ReturnCode_t take_next_sample ( GenerationControlProfile *       received_data,
                                  SampleInfo * sample_info);
  
  ReturnCode_t read_instance ( GenerationControlProfilePtrSeq       * received_data,
                               SampleInfoSeq    * sample_infos,
                               int                max_samples,
                               InstanceHandle_t   a_handle,
                               SampleStateMask    sample_states, 
                               ViewStateMask      view_states, 
                               InstanceStateMask  instance_states);
  
  ReturnCode_t take_instance ( GenerationControlProfilePtrSeq      * received_data,
                               SampleInfoSeq   * sample_infos,
                               int               max_samples,
                               InstanceHandle_t  a_handle,
                               SampleStateMask   sample_states, 
                               ViewStateMask     view_states, 
                               InstanceStateMask instance_states);
  
  ReturnCode_t read_next_instance ( GenerationControlProfilePtrSeq      * received_data,
                                    SampleInfoSeq   * sample_infos,
                                    int               max_samples,
                                    InstanceHandle_t  previous_handle,
                                    SampleStateMask   sample_states, 
                                    ViewStateMask     view_states, 
                                    InstanceStateMask instance_states);
  
  ReturnCode_t take_next_instance ( GenerationControlProfilePtrSeq       * received_data,
                                    SampleInfoSeq    * sample_infos,
                                    int                max_samples,
                                    InstanceHandle_t   previous_handle,
                                    SampleStateMask    sample_states, 
                                    ViewStateMask      view_states, 
                                    InstanceStateMask  instance_states);
  
  ReturnCode_t read_next_instance_w_condition( GenerationControlProfilePtrSeq       * received_data,
                                   SampleInfoSeq    * sample_infos,
                                   int                max_samples,
                                   InstanceHandle_t   previous_handle,
                                   ReadCondition *    a_condition);

  ReturnCode_t take_next_instance_w_condition( GenerationControlProfilePtrSeq       * received_data,
                                   SampleInfoSeq    * sample_infos,
                                   int                max_samples,
                                   InstanceHandle_t   previous_handle,
                                   ReadCondition *    a_condition);

  ReturnCode_t return_loan ( GenerationControlProfilePtrSeq     * received_data,
                             SampleInfoSeq  * sample_infos);
  
  ReturnCode_t get_key_value ( GenerationControlProfile            * key_holder, 
                               InstanceHandle_t  handle);
    
  InstanceHandle_t lookup_instance ( GenerationControlProfile       * instance_data);

  static GenerationControlProfileDataReader * narrow( DataReader * dr) { return (GenerationControlProfileDataReader *)dr; }
  GenerationControlProfileDataReader        * narrow( void )           { return this; }


 protected:
  /* Constructor / Destructor - use Subscriber::create_datareader() */

  GenerationControlProfileDataReader();
  ~GenerationControlProfileDataReader() {};
 private:

};

}  /* namespace generationmodule */
/* END SCOPE: generationmodule */
/* START SCOPE: loadmodule */

namespace loadmodule {

class LoadControlFSCCTypeSupport;
/******************************************************************
 *   openfmb::loadmodule:: LoadControlFSCC DataReader Class
 ******************************************************************/

class COREDX_TS_CLASS_EXPORT LoadControlFSCCDataReader : public DataReader
{
  friend class DDS::DomainParticipant;
  friend class LoadControlFSCCTypeSupport;

 public:


  /* DataReader Meathods */

  ReturnCode_t read( LoadControlFSCCPtrSeq *    received_data,
                     SampleInfoSeq *   sample_infos,
                     int               max_samples,
                     SampleStateMask   sample_states,
                     ViewStateMask     view_states,
                     InstanceStateMask instance_states );

  ReturnCode_t take( LoadControlFSCCPtrSeq       * received_data,
                     SampleInfoSeq    * sample_infos,
                     int                max_samples,
                     SampleStateMask    sample_states, 
                     ViewStateMask      view_states, 
                     InstanceStateMask  instance_states );


  ReturnCode_t read_w_condition ( LoadControlFSCCPtrSeq    * received_data,
                                  SampleInfoSeq * sample_infos,
                                  int             max_samples,
                                  ReadCondition * a_condition);
  
  ReturnCode_t take_w_condition ( LoadControlFSCCPtrSeq     * received_data,
                                  SampleInfoSeq  * sample_infos,
                                  int              max_samples,
                                  ReadCondition *  a_condition);
  
  ReturnCode_t read_next_sample ( LoadControlFSCC *       received_data,
                                  SampleInfo * sample_info);
  
  ReturnCode_t take_next_sample ( LoadControlFSCC *       received_data,
                                  SampleInfo * sample_info);
  
  ReturnCode_t read_instance ( LoadControlFSCCPtrSeq       * received_data,
                               SampleInfoSeq    * sample_infos,
                               int                max_samples,
                               InstanceHandle_t   a_handle,
                               SampleStateMask    sample_states, 
                               ViewStateMask      view_states, 
                               InstanceStateMask  instance_states);
  
  ReturnCode_t take_instance ( LoadControlFSCCPtrSeq      * received_data,
                               SampleInfoSeq   * sample_infos,
                               int               max_samples,
                               InstanceHandle_t  a_handle,
                               SampleStateMask   sample_states, 
                               ViewStateMask     view_states, 
                               InstanceStateMask instance_states);
  
  ReturnCode_t read_next_instance ( LoadControlFSCCPtrSeq      * received_data,
                                    SampleInfoSeq   * sample_infos,
                                    int               max_samples,
                                    InstanceHandle_t  previous_handle,
                                    SampleStateMask   sample_states, 
                                    ViewStateMask     view_states, 
                                    InstanceStateMask instance_states);
  
  ReturnCode_t take_next_instance ( LoadControlFSCCPtrSeq       * received_data,
                                    SampleInfoSeq    * sample_infos,
                                    int                max_samples,
                                    InstanceHandle_t   previous_handle,
                                    SampleStateMask    sample_states, 
                                    ViewStateMask      view_states, 
                                    InstanceStateMask  instance_states);
  
  ReturnCode_t read_next_instance_w_condition( LoadControlFSCCPtrSeq       * received_data,
                                   SampleInfoSeq    * sample_infos,
                                   int                max_samples,
                                   InstanceHandle_t   previous_handle,
                                   ReadCondition *    a_condition);

  ReturnCode_t take_next_instance_w_condition( LoadControlFSCCPtrSeq       * received_data,
                                   SampleInfoSeq    * sample_infos,
                                   int                max_samples,
                                   InstanceHandle_t   previous_handle,
                                   ReadCondition *    a_condition);

  ReturnCode_t return_loan ( LoadControlFSCCPtrSeq     * received_data,
                             SampleInfoSeq  * sample_infos);
  
  ReturnCode_t get_key_value ( LoadControlFSCC            * key_holder, 
                               InstanceHandle_t  handle);
    
  InstanceHandle_t lookup_instance ( LoadControlFSCC       * instance_data);

  static LoadControlFSCCDataReader * narrow( DataReader * dr) { return (LoadControlFSCCDataReader *)dr; }
  LoadControlFSCCDataReader        * narrow( void )           { return this; }


 protected:
  /* Constructor / Destructor - use Subscriber::create_datareader() */

  LoadControlFSCCDataReader();
  ~LoadControlFSCCDataReader() {};
 private:

};
class LoadReadingProfileTypeSupport;
/******************************************************************
 *   openfmb::loadmodule:: LoadReadingProfile DataReader Class
 ******************************************************************/

class COREDX_TS_CLASS_EXPORT LoadReadingProfileDataReader : public DataReader
{
  friend class DDS::DomainParticipant;
  friend class LoadReadingProfileTypeSupport;

 public:


  /* DataReader Meathods */

  ReturnCode_t read( LoadReadingProfilePtrSeq *    received_data,
                     SampleInfoSeq *   sample_infos,
                     int               max_samples,
                     SampleStateMask   sample_states,
                     ViewStateMask     view_states,
                     InstanceStateMask instance_states );

  ReturnCode_t take( LoadReadingProfilePtrSeq       * received_data,
                     SampleInfoSeq    * sample_infos,
                     int                max_samples,
                     SampleStateMask    sample_states, 
                     ViewStateMask      view_states, 
                     InstanceStateMask  instance_states );


  ReturnCode_t read_w_condition ( LoadReadingProfilePtrSeq    * received_data,
                                  SampleInfoSeq * sample_infos,
                                  int             max_samples,
                                  ReadCondition * a_condition);
  
  ReturnCode_t take_w_condition ( LoadReadingProfilePtrSeq     * received_data,
                                  SampleInfoSeq  * sample_infos,
                                  int              max_samples,
                                  ReadCondition *  a_condition);
  
  ReturnCode_t read_next_sample ( LoadReadingProfile *       received_data,
                                  SampleInfo * sample_info);
  
  ReturnCode_t take_next_sample ( LoadReadingProfile *       received_data,
                                  SampleInfo * sample_info);
  
  ReturnCode_t read_instance ( LoadReadingProfilePtrSeq       * received_data,
                               SampleInfoSeq    * sample_infos,
                               int                max_samples,
                               InstanceHandle_t   a_handle,
                               SampleStateMask    sample_states, 
                               ViewStateMask      view_states, 
                               InstanceStateMask  instance_states);
  
  ReturnCode_t take_instance ( LoadReadingProfilePtrSeq      * received_data,
                               SampleInfoSeq   * sample_infos,
                               int               max_samples,
                               InstanceHandle_t  a_handle,
                               SampleStateMask   sample_states, 
                               ViewStateMask     view_states, 
                               InstanceStateMask instance_states);
  
  ReturnCode_t read_next_instance ( LoadReadingProfilePtrSeq      * received_data,
                                    SampleInfoSeq   * sample_infos,
                                    int               max_samples,
                                    InstanceHandle_t  previous_handle,
                                    SampleStateMask   sample_states, 
                                    ViewStateMask     view_states, 
                                    InstanceStateMask instance_states);
  
  ReturnCode_t take_next_instance ( LoadReadingProfilePtrSeq       * received_data,
                                    SampleInfoSeq    * sample_infos,
                                    int                max_samples,
                                    InstanceHandle_t   previous_handle,
                                    SampleStateMask    sample_states, 
                                    ViewStateMask      view_states, 
                                    InstanceStateMask  instance_states);
  
  ReturnCode_t read_next_instance_w_condition( LoadReadingProfilePtrSeq       * received_data,
                                   SampleInfoSeq    * sample_infos,
                                   int                max_samples,
                                   InstanceHandle_t   previous_handle,
                                   ReadCondition *    a_condition);

  ReturnCode_t take_next_instance_w_condition( LoadReadingProfilePtrSeq       * received_data,
                                   SampleInfoSeq    * sample_infos,
                                   int                max_samples,
                                   InstanceHandle_t   previous_handle,
                                   ReadCondition *    a_condition);

  ReturnCode_t return_loan ( LoadReadingProfilePtrSeq     * received_data,
                             SampleInfoSeq  * sample_infos);
  
  ReturnCode_t get_key_value ( LoadReadingProfile            * key_holder, 
                               InstanceHandle_t  handle);
    
  InstanceHandle_t lookup_instance ( LoadReadingProfile       * instance_data);

  static LoadReadingProfileDataReader * narrow( DataReader * dr) { return (LoadReadingProfileDataReader *)dr; }
  LoadReadingProfileDataReader        * narrow( void )           { return this; }


 protected:
  /* Constructor / Destructor - use Subscriber::create_datareader() */

  LoadReadingProfileDataReader();
  ~LoadReadingProfileDataReader() {};
 private:

};

}  /* namespace loadmodule */
/* END SCOPE: loadmodule */
/* START SCOPE: reclosermodule */

namespace reclosermodule {

class RecloserReadingProfileTypeSupport;
/******************************************************************
 *   openfmb::reclosermodule:: RecloserReadingProfile DataReader Class
 ******************************************************************/

class COREDX_TS_CLASS_EXPORT RecloserReadingProfileDataReader : public DataReader
{
  friend class DDS::DomainParticipant;
  friend class RecloserReadingProfileTypeSupport;

 public:


  /* DataReader Meathods */

  ReturnCode_t read( RecloserReadingProfilePtrSeq *    received_data,
                     SampleInfoSeq *   sample_infos,
                     int               max_samples,
                     SampleStateMask   sample_states,
                     ViewStateMask     view_states,
                     InstanceStateMask instance_states );

  ReturnCode_t take( RecloserReadingProfilePtrSeq       * received_data,
                     SampleInfoSeq    * sample_infos,
                     int                max_samples,
                     SampleStateMask    sample_states, 
                     ViewStateMask      view_states, 
                     InstanceStateMask  instance_states );


  ReturnCode_t read_w_condition ( RecloserReadingProfilePtrSeq    * received_data,
                                  SampleInfoSeq * sample_infos,
                                  int             max_samples,
                                  ReadCondition * a_condition);
  
  ReturnCode_t take_w_condition ( RecloserReadingProfilePtrSeq     * received_data,
                                  SampleInfoSeq  * sample_infos,
                                  int              max_samples,
                                  ReadCondition *  a_condition);
  
  ReturnCode_t read_next_sample ( RecloserReadingProfile *       received_data,
                                  SampleInfo * sample_info);
  
  ReturnCode_t take_next_sample ( RecloserReadingProfile *       received_data,
                                  SampleInfo * sample_info);
  
  ReturnCode_t read_instance ( RecloserReadingProfilePtrSeq       * received_data,
                               SampleInfoSeq    * sample_infos,
                               int                max_samples,
                               InstanceHandle_t   a_handle,
                               SampleStateMask    sample_states, 
                               ViewStateMask      view_states, 
                               InstanceStateMask  instance_states);
  
  ReturnCode_t take_instance ( RecloserReadingProfilePtrSeq      * received_data,
                               SampleInfoSeq   * sample_infos,
                               int               max_samples,
                               InstanceHandle_t  a_handle,
                               SampleStateMask   sample_states, 
                               ViewStateMask     view_states, 
                               InstanceStateMask instance_states);
  
  ReturnCode_t read_next_instance ( RecloserReadingProfilePtrSeq      * received_data,
                                    SampleInfoSeq   * sample_infos,
                                    int               max_samples,
                                    InstanceHandle_t  previous_handle,
                                    SampleStateMask   sample_states, 
                                    ViewStateMask     view_states, 
                                    InstanceStateMask instance_states);
  
  ReturnCode_t take_next_instance ( RecloserReadingProfilePtrSeq       * received_data,
                                    SampleInfoSeq    * sample_infos,
                                    int                max_samples,
                                    InstanceHandle_t   previous_handle,
                                    SampleStateMask    sample_states, 
                                    ViewStateMask      view_states, 
                                    InstanceStateMask  instance_states);
  
  ReturnCode_t read_next_instance_w_condition( RecloserReadingProfilePtrSeq       * received_data,
                                   SampleInfoSeq    * sample_infos,
                                   int                max_samples,
                                   InstanceHandle_t   previous_handle,
                                   ReadCondition *    a_condition);

  ReturnCode_t take_next_instance_w_condition( RecloserReadingProfilePtrSeq       * received_data,
                                   SampleInfoSeq    * sample_infos,
                                   int                max_samples,
                                   InstanceHandle_t   previous_handle,
                                   ReadCondition *    a_condition);

  ReturnCode_t return_loan ( RecloserReadingProfilePtrSeq     * received_data,
                             SampleInfoSeq  * sample_infos);
  
  ReturnCode_t get_key_value ( RecloserReadingProfile            * key_holder, 
                               InstanceHandle_t  handle);
    
  InstanceHandle_t lookup_instance ( RecloserReadingProfile       * instance_data);

  static RecloserReadingProfileDataReader * narrow( DataReader * dr) { return (RecloserReadingProfileDataReader *)dr; }
  RecloserReadingProfileDataReader        * narrow( void )           { return this; }


 protected:
  /* Constructor / Destructor - use Subscriber::create_datareader() */

  RecloserReadingProfileDataReader();
  ~RecloserReadingProfileDataReader() {};
 private:

};

}  /* namespace reclosermodule */
/* END SCOPE: reclosermodule */
/* START SCOPE: regulatormodule */

namespace regulatormodule {

class RegulatorReadingProfileTypeSupport;
/******************************************************************
 *   openfmb::regulatormodule:: RegulatorReadingProfile DataReader Class
 ******************************************************************/

class COREDX_TS_CLASS_EXPORT RegulatorReadingProfileDataReader : public DataReader
{
  friend class DDS::DomainParticipant;
  friend class RegulatorReadingProfileTypeSupport;

 public:


  /* DataReader Meathods */

  ReturnCode_t read( RegulatorReadingProfilePtrSeq *    received_data,
                     SampleInfoSeq *   sample_infos,
                     int               max_samples,
                     SampleStateMask   sample_states,
                     ViewStateMask     view_states,
                     InstanceStateMask instance_states );

  ReturnCode_t take( RegulatorReadingProfilePtrSeq       * received_data,
                     SampleInfoSeq    * sample_infos,
                     int                max_samples,
                     SampleStateMask    sample_states, 
                     ViewStateMask      view_states, 
                     InstanceStateMask  instance_states );


  ReturnCode_t read_w_condition ( RegulatorReadingProfilePtrSeq    * received_data,
                                  SampleInfoSeq * sample_infos,
                                  int             max_samples,
                                  ReadCondition * a_condition);
  
  ReturnCode_t take_w_condition ( RegulatorReadingProfilePtrSeq     * received_data,
                                  SampleInfoSeq  * sample_infos,
                                  int              max_samples,
                                  ReadCondition *  a_condition);
  
  ReturnCode_t read_next_sample ( RegulatorReadingProfile *       received_data,
                                  SampleInfo * sample_info);
  
  ReturnCode_t take_next_sample ( RegulatorReadingProfile *       received_data,
                                  SampleInfo * sample_info);
  
  ReturnCode_t read_instance ( RegulatorReadingProfilePtrSeq       * received_data,
                               SampleInfoSeq    * sample_infos,
                               int                max_samples,
                               InstanceHandle_t   a_handle,
                               SampleStateMask    sample_states, 
                               ViewStateMask      view_states, 
                               InstanceStateMask  instance_states);
  
  ReturnCode_t take_instance ( RegulatorReadingProfilePtrSeq      * received_data,
                               SampleInfoSeq   * sample_infos,
                               int               max_samples,
                               InstanceHandle_t  a_handle,
                               SampleStateMask   sample_states, 
                               ViewStateMask     view_states, 
                               InstanceStateMask instance_states);
  
  ReturnCode_t read_next_instance ( RegulatorReadingProfilePtrSeq      * received_data,
                                    SampleInfoSeq   * sample_infos,
                                    int               max_samples,
                                    InstanceHandle_t  previous_handle,
                                    SampleStateMask   sample_states, 
                                    ViewStateMask     view_states, 
                                    InstanceStateMask instance_states);
  
  ReturnCode_t take_next_instance ( RegulatorReadingProfilePtrSeq       * received_data,
                                    SampleInfoSeq    * sample_infos,
                                    int                max_samples,
                                    InstanceHandle_t   previous_handle,
                                    SampleStateMask    sample_states, 
                                    ViewStateMask      view_states, 
                                    InstanceStateMask  instance_states);
  
  ReturnCode_t read_next_instance_w_condition( RegulatorReadingProfilePtrSeq       * received_data,
                                   SampleInfoSeq    * sample_infos,
                                   int                max_samples,
                                   InstanceHandle_t   previous_handle,
                                   ReadCondition *    a_condition);

  ReturnCode_t take_next_instance_w_condition( RegulatorReadingProfilePtrSeq       * received_data,
                                   SampleInfoSeq    * sample_infos,
                                   int                max_samples,
                                   InstanceHandle_t   previous_handle,
                                   ReadCondition *    a_condition);

  ReturnCode_t return_loan ( RegulatorReadingProfilePtrSeq     * received_data,
                             SampleInfoSeq  * sample_infos);
  
  ReturnCode_t get_key_value ( RegulatorReadingProfile            * key_holder, 
                               InstanceHandle_t  handle);
    
  InstanceHandle_t lookup_instance ( RegulatorReadingProfile       * instance_data);

  static RegulatorReadingProfileDataReader * narrow( DataReader * dr) { return (RegulatorReadingProfileDataReader *)dr; }
  RegulatorReadingProfileDataReader        * narrow( void )           { return this; }


 protected:
  /* Constructor / Destructor - use Subscriber::create_datareader() */

  RegulatorReadingProfileDataReader();
  ~RegulatorReadingProfileDataReader() {};
 private:

};

}  /* namespace regulatormodule */
/* END SCOPE: regulatormodule */
/* START SCOPE: resourcemodule */

namespace resourcemodule {

class ResourceReadingProfileTypeSupport;
/******************************************************************
 *   openfmb::resourcemodule:: ResourceReadingProfile DataReader Class
 ******************************************************************/

class COREDX_TS_CLASS_EXPORT ResourceReadingProfileDataReader : public DataReader
{
  friend class DDS::DomainParticipant;
  friend class ResourceReadingProfileTypeSupport;

 public:


  /* DataReader Meathods */

  ReturnCode_t read( ResourceReadingProfilePtrSeq *    received_data,
                     SampleInfoSeq *   sample_infos,
                     int               max_samples,
                     SampleStateMask   sample_states,
                     ViewStateMask     view_states,
                     InstanceStateMask instance_states );

  ReturnCode_t take( ResourceReadingProfilePtrSeq       * received_data,
                     SampleInfoSeq    * sample_infos,
                     int                max_samples,
                     SampleStateMask    sample_states, 
                     ViewStateMask      view_states, 
                     InstanceStateMask  instance_states );


  ReturnCode_t read_w_condition ( ResourceReadingProfilePtrSeq    * received_data,
                                  SampleInfoSeq * sample_infos,
                                  int             max_samples,
                                  ReadCondition * a_condition);
  
  ReturnCode_t take_w_condition ( ResourceReadingProfilePtrSeq     * received_data,
                                  SampleInfoSeq  * sample_infos,
                                  int              max_samples,
                                  ReadCondition *  a_condition);
  
  ReturnCode_t read_next_sample ( ResourceReadingProfile *       received_data,
                                  SampleInfo * sample_info);
  
  ReturnCode_t take_next_sample ( ResourceReadingProfile *       received_data,
                                  SampleInfo * sample_info);
  
  ReturnCode_t read_instance ( ResourceReadingProfilePtrSeq       * received_data,
                               SampleInfoSeq    * sample_infos,
                               int                max_samples,
                               InstanceHandle_t   a_handle,
                               SampleStateMask    sample_states, 
                               ViewStateMask      view_states, 
                               InstanceStateMask  instance_states);
  
  ReturnCode_t take_instance ( ResourceReadingProfilePtrSeq      * received_data,
                               SampleInfoSeq   * sample_infos,
                               int               max_samples,
                               InstanceHandle_t  a_handle,
                               SampleStateMask   sample_states, 
                               ViewStateMask     view_states, 
                               InstanceStateMask instance_states);
  
  ReturnCode_t read_next_instance ( ResourceReadingProfilePtrSeq      * received_data,
                                    SampleInfoSeq   * sample_infos,
                                    int               max_samples,
                                    InstanceHandle_t  previous_handle,
                                    SampleStateMask   sample_states, 
                                    ViewStateMask     view_states, 
                                    InstanceStateMask instance_states);
  
  ReturnCode_t take_next_instance ( ResourceReadingProfilePtrSeq       * received_data,
                                    SampleInfoSeq    * sample_infos,
                                    int                max_samples,
                                    InstanceHandle_t   previous_handle,
                                    SampleStateMask    sample_states, 
                                    ViewStateMask      view_states, 
                                    InstanceStateMask  instance_states);
  
  ReturnCode_t read_next_instance_w_condition( ResourceReadingProfilePtrSeq       * received_data,
                                   SampleInfoSeq    * sample_infos,
                                   int                max_samples,
                                   InstanceHandle_t   previous_handle,
                                   ReadCondition *    a_condition);

  ReturnCode_t take_next_instance_w_condition( ResourceReadingProfilePtrSeq       * received_data,
                                   SampleInfoSeq    * sample_infos,
                                   int                max_samples,
                                   InstanceHandle_t   previous_handle,
                                   ReadCondition *    a_condition);

  ReturnCode_t return_loan ( ResourceReadingProfilePtrSeq     * received_data,
                             SampleInfoSeq  * sample_infos);
  
  ReturnCode_t get_key_value ( ResourceReadingProfile            * key_holder, 
                               InstanceHandle_t  handle);
    
  InstanceHandle_t lookup_instance ( ResourceReadingProfile       * instance_data);

  static ResourceReadingProfileDataReader * narrow( DataReader * dr) { return (ResourceReadingProfileDataReader *)dr; }
  ResourceReadingProfileDataReader        * narrow( void )           { return this; }


 protected:
  /* Constructor / Destructor - use Subscriber::create_datareader() */

  ResourceReadingProfileDataReader();
  ~ResourceReadingProfileDataReader() {};
 private:

};

}  /* namespace resourcemodule */
/* END SCOPE: resourcemodule */
/* START SCOPE: solarmodule */

namespace solarmodule {

class SolarControlFSCCTypeSupport;
/******************************************************************
 *   openfmb::solarmodule:: SolarControlFSCC DataReader Class
 ******************************************************************/

class COREDX_TS_CLASS_EXPORT SolarControlFSCCDataReader : public DataReader
{
  friend class DDS::DomainParticipant;
  friend class SolarControlFSCCTypeSupport;

 public:


  /* DataReader Meathods */

  ReturnCode_t read( SolarControlFSCCPtrSeq *    received_data,
                     SampleInfoSeq *   sample_infos,
                     int               max_samples,
                     SampleStateMask   sample_states,
                     ViewStateMask     view_states,
                     InstanceStateMask instance_states );

  ReturnCode_t take( SolarControlFSCCPtrSeq       * received_data,
                     SampleInfoSeq    * sample_infos,
                     int                max_samples,
                     SampleStateMask    sample_states, 
                     ViewStateMask      view_states, 
                     InstanceStateMask  instance_states );


  ReturnCode_t read_w_condition ( SolarControlFSCCPtrSeq    * received_data,
                                  SampleInfoSeq * sample_infos,
                                  int             max_samples,
                                  ReadCondition * a_condition);
  
  ReturnCode_t take_w_condition ( SolarControlFSCCPtrSeq     * received_data,
                                  SampleInfoSeq  * sample_infos,
                                  int              max_samples,
                                  ReadCondition *  a_condition);
  
  ReturnCode_t read_next_sample ( SolarControlFSCC *       received_data,
                                  SampleInfo * sample_info);
  
  ReturnCode_t take_next_sample ( SolarControlFSCC *       received_data,
                                  SampleInfo * sample_info);
  
  ReturnCode_t read_instance ( SolarControlFSCCPtrSeq       * received_data,
                               SampleInfoSeq    * sample_infos,
                               int                max_samples,
                               InstanceHandle_t   a_handle,
                               SampleStateMask    sample_states, 
                               ViewStateMask      view_states, 
                               InstanceStateMask  instance_states);
  
  ReturnCode_t take_instance ( SolarControlFSCCPtrSeq      * received_data,
                               SampleInfoSeq   * sample_infos,
                               int               max_samples,
                               InstanceHandle_t  a_handle,
                               SampleStateMask   sample_states, 
                               ViewStateMask     view_states, 
                               InstanceStateMask instance_states);
  
  ReturnCode_t read_next_instance ( SolarControlFSCCPtrSeq      * received_data,
                                    SampleInfoSeq   * sample_infos,
                                    int               max_samples,
                                    InstanceHandle_t  previous_handle,
                                    SampleStateMask   sample_states, 
                                    ViewStateMask     view_states, 
                                    InstanceStateMask instance_states);
  
  ReturnCode_t take_next_instance ( SolarControlFSCCPtrSeq       * received_data,
                                    SampleInfoSeq    * sample_infos,
                                    int                max_samples,
                                    InstanceHandle_t   previous_handle,
                                    SampleStateMask    sample_states, 
                                    ViewStateMask      view_states, 
                                    InstanceStateMask  instance_states);
  
  ReturnCode_t read_next_instance_w_condition( SolarControlFSCCPtrSeq       * received_data,
                                   SampleInfoSeq    * sample_infos,
                                   int                max_samples,
                                   InstanceHandle_t   previous_handle,
                                   ReadCondition *    a_condition);

  ReturnCode_t take_next_instance_w_condition( SolarControlFSCCPtrSeq       * received_data,
                                   SampleInfoSeq    * sample_infos,
                                   int                max_samples,
                                   InstanceHandle_t   previous_handle,
                                   ReadCondition *    a_condition);

  ReturnCode_t return_loan ( SolarControlFSCCPtrSeq     * received_data,
                             SampleInfoSeq  * sample_infos);
  
  ReturnCode_t get_key_value ( SolarControlFSCC            * key_holder, 
                               InstanceHandle_t  handle);
    
  InstanceHandle_t lookup_instance ( SolarControlFSCC       * instance_data);

  static SolarControlFSCCDataReader * narrow( DataReader * dr) { return (SolarControlFSCCDataReader *)dr; }
  SolarControlFSCCDataReader        * narrow( void )           { return this; }


 protected:
  /* Constructor / Destructor - use Subscriber::create_datareader() */

  SolarControlFSCCDataReader();
  ~SolarControlFSCCDataReader() {};
 private:

};
class SolarReadingProfileTypeSupport;
/******************************************************************
 *   openfmb::solarmodule:: SolarReadingProfile DataReader Class
 ******************************************************************/

class COREDX_TS_CLASS_EXPORT SolarReadingProfileDataReader : public DataReader
{
  friend class DDS::DomainParticipant;
  friend class SolarReadingProfileTypeSupport;

 public:


  /* DataReader Meathods */

  ReturnCode_t read( SolarReadingProfilePtrSeq *    received_data,
                     SampleInfoSeq *   sample_infos,
                     int               max_samples,
                     SampleStateMask   sample_states,
                     ViewStateMask     view_states,
                     InstanceStateMask instance_states );

  ReturnCode_t take( SolarReadingProfilePtrSeq       * received_data,
                     SampleInfoSeq    * sample_infos,
                     int                max_samples,
                     SampleStateMask    sample_states, 
                     ViewStateMask      view_states, 
                     InstanceStateMask  instance_states );


  ReturnCode_t read_w_condition ( SolarReadingProfilePtrSeq    * received_data,
                                  SampleInfoSeq * sample_infos,
                                  int             max_samples,
                                  ReadCondition * a_condition);
  
  ReturnCode_t take_w_condition ( SolarReadingProfilePtrSeq     * received_data,
                                  SampleInfoSeq  * sample_infos,
                                  int              max_samples,
                                  ReadCondition *  a_condition);
  
  ReturnCode_t read_next_sample ( SolarReadingProfile *       received_data,
                                  SampleInfo * sample_info);
  
  ReturnCode_t take_next_sample ( SolarReadingProfile *       received_data,
                                  SampleInfo * sample_info);
  
  ReturnCode_t read_instance ( SolarReadingProfilePtrSeq       * received_data,
                               SampleInfoSeq    * sample_infos,
                               int                max_samples,
                               InstanceHandle_t   a_handle,
                               SampleStateMask    sample_states, 
                               ViewStateMask      view_states, 
                               InstanceStateMask  instance_states);
  
  ReturnCode_t take_instance ( SolarReadingProfilePtrSeq      * received_data,
                               SampleInfoSeq   * sample_infos,
                               int               max_samples,
                               InstanceHandle_t  a_handle,
                               SampleStateMask   sample_states, 
                               ViewStateMask     view_states, 
                               InstanceStateMask instance_states);
  
  ReturnCode_t read_next_instance ( SolarReadingProfilePtrSeq      * received_data,
                                    SampleInfoSeq   * sample_infos,
                                    int               max_samples,
                                    InstanceHandle_t  previous_handle,
                                    SampleStateMask   sample_states, 
                                    ViewStateMask     view_states, 
                                    InstanceStateMask instance_states);
  
  ReturnCode_t take_next_instance ( SolarReadingProfilePtrSeq       * received_data,
                                    SampleInfoSeq    * sample_infos,
                                    int                max_samples,
                                    InstanceHandle_t   previous_handle,
                                    SampleStateMask    sample_states, 
                                    ViewStateMask      view_states, 
                                    InstanceStateMask  instance_states);
  
  ReturnCode_t read_next_instance_w_condition( SolarReadingProfilePtrSeq       * received_data,
                                   SampleInfoSeq    * sample_infos,
                                   int                max_samples,
                                   InstanceHandle_t   previous_handle,
                                   ReadCondition *    a_condition);

  ReturnCode_t take_next_instance_w_condition( SolarReadingProfilePtrSeq       * received_data,
                                   SampleInfoSeq    * sample_infos,
                                   int                max_samples,
                                   InstanceHandle_t   previous_handle,
                                   ReadCondition *    a_condition);

  ReturnCode_t return_loan ( SolarReadingProfilePtrSeq     * received_data,
                             SampleInfoSeq  * sample_infos);
  
  ReturnCode_t get_key_value ( SolarReadingProfile            * key_holder, 
                               InstanceHandle_t  handle);
    
  InstanceHandle_t lookup_instance ( SolarReadingProfile       * instance_data);

  static SolarReadingProfileDataReader * narrow( DataReader * dr) { return (SolarReadingProfileDataReader *)dr; }
  SolarReadingProfileDataReader        * narrow( void )           { return this; }


 protected:
  /* Constructor / Destructor - use Subscriber::create_datareader() */

  SolarReadingProfileDataReader();
  ~SolarReadingProfileDataReader() {};
 private:

};

}  /* namespace solarmodule */
/* END SCOPE: solarmodule */
/* START SCOPE: switchmodule */

namespace switchmodule {

class SwitchReadingProfileTypeSupport;
/******************************************************************
 *   openfmb::switchmodule:: SwitchReadingProfile DataReader Class
 ******************************************************************/

class COREDX_TS_CLASS_EXPORT SwitchReadingProfileDataReader : public DataReader
{
  friend class DDS::DomainParticipant;
  friend class SwitchReadingProfileTypeSupport;

 public:


  /* DataReader Meathods */

  ReturnCode_t read( SwitchReadingProfilePtrSeq *    received_data,
                     SampleInfoSeq *   sample_infos,
                     int               max_samples,
                     SampleStateMask   sample_states,
                     ViewStateMask     view_states,
                     InstanceStateMask instance_states );

  ReturnCode_t take( SwitchReadingProfilePtrSeq       * received_data,
                     SampleInfoSeq    * sample_infos,
                     int                max_samples,
                     SampleStateMask    sample_states, 
                     ViewStateMask      view_states, 
                     InstanceStateMask  instance_states );


  ReturnCode_t read_w_condition ( SwitchReadingProfilePtrSeq    * received_data,
                                  SampleInfoSeq * sample_infos,
                                  int             max_samples,
                                  ReadCondition * a_condition);
  
  ReturnCode_t take_w_condition ( SwitchReadingProfilePtrSeq     * received_data,
                                  SampleInfoSeq  * sample_infos,
                                  int              max_samples,
                                  ReadCondition *  a_condition);
  
  ReturnCode_t read_next_sample ( SwitchReadingProfile *       received_data,
                                  SampleInfo * sample_info);
  
  ReturnCode_t take_next_sample ( SwitchReadingProfile *       received_data,
                                  SampleInfo * sample_info);
  
  ReturnCode_t read_instance ( SwitchReadingProfilePtrSeq       * received_data,
                               SampleInfoSeq    * sample_infos,
                               int                max_samples,
                               InstanceHandle_t   a_handle,
                               SampleStateMask    sample_states, 
                               ViewStateMask      view_states, 
                               InstanceStateMask  instance_states);
  
  ReturnCode_t take_instance ( SwitchReadingProfilePtrSeq      * received_data,
                               SampleInfoSeq   * sample_infos,
                               int               max_samples,
                               InstanceHandle_t  a_handle,
                               SampleStateMask   sample_states, 
                               ViewStateMask     view_states, 
                               InstanceStateMask instance_states);
  
  ReturnCode_t read_next_instance ( SwitchReadingProfilePtrSeq      * received_data,
                                    SampleInfoSeq   * sample_infos,
                                    int               max_samples,
                                    InstanceHandle_t  previous_handle,
                                    SampleStateMask   sample_states, 
                                    ViewStateMask     view_states, 
                                    InstanceStateMask instance_states);
  
  ReturnCode_t take_next_instance ( SwitchReadingProfilePtrSeq       * received_data,
                                    SampleInfoSeq    * sample_infos,
                                    int                max_samples,
                                    InstanceHandle_t   previous_handle,
                                    SampleStateMask    sample_states, 
                                    ViewStateMask      view_states, 
                                    InstanceStateMask  instance_states);
  
  ReturnCode_t read_next_instance_w_condition( SwitchReadingProfilePtrSeq       * received_data,
                                   SampleInfoSeq    * sample_infos,
                                   int                max_samples,
                                   InstanceHandle_t   previous_handle,
                                   ReadCondition *    a_condition);

  ReturnCode_t take_next_instance_w_condition( SwitchReadingProfilePtrSeq       * received_data,
                                   SampleInfoSeq    * sample_infos,
                                   int                max_samples,
                                   InstanceHandle_t   previous_handle,
                                   ReadCondition *    a_condition);

  ReturnCode_t return_loan ( SwitchReadingProfilePtrSeq     * received_data,
                             SampleInfoSeq  * sample_infos);
  
  ReturnCode_t get_key_value ( SwitchReadingProfile            * key_holder, 
                               InstanceHandle_t  handle);
    
  InstanceHandle_t lookup_instance ( SwitchReadingProfile       * instance_data);

  static SwitchReadingProfileDataReader * narrow( DataReader * dr) { return (SwitchReadingProfileDataReader *)dr; }
  SwitchReadingProfileDataReader        * narrow( void )           { return this; }


 protected:
  /* Constructor / Destructor - use Subscriber::create_datareader() */

  SwitchReadingProfileDataReader();
  ~SwitchReadingProfileDataReader() {};
 private:

};

}  /* namespace switchmodule */
/* END SCOPE: switchmodule */

}  /* namespace openfmb */
/* END SCOPE: openfmb */
/* START SCOPE: openfmb */

namespace openfmb {

/* START SCOPE: breakermodule */

namespace breakermodule {

class BreakerReadingProfileTypeSupport;
/******************************************************************
 *   openfmb::breakermodule:: BreakerReadingProfile DataReader Class
 ******************************************************************/

class COREDX_TS_CLASS_EXPORT BreakerReadingProfileDataReader : public DataReader
{
  friend class DDS::DomainParticipant;
  friend class BreakerReadingProfileTypeSupport;

 public:


  /* DataReader Meathods */

  ReturnCode_t read( BreakerReadingProfilePtrSeq *    received_data,
                     SampleInfoSeq *   sample_infos,
                     int               max_samples,
                     SampleStateMask   sample_states,
                     ViewStateMask     view_states,
                     InstanceStateMask instance_states );

  ReturnCode_t take( BreakerReadingProfilePtrSeq       * received_data,
                     SampleInfoSeq    * sample_infos,
                     int                max_samples,
                     SampleStateMask    sample_states, 
                     ViewStateMask      view_states, 
                     InstanceStateMask  instance_states );


  ReturnCode_t read_w_condition ( BreakerReadingProfilePtrSeq    * received_data,
                                  SampleInfoSeq * sample_infos,
                                  int             max_samples,
                                  ReadCondition * a_condition);
  
  ReturnCode_t take_w_condition ( BreakerReadingProfilePtrSeq     * received_data,
                                  SampleInfoSeq  * sample_infos,
                                  int              max_samples,
                                  ReadCondition *  a_condition);
  
  ReturnCode_t read_next_sample ( BreakerReadingProfile *       received_data,
                                  SampleInfo * sample_info);
  
  ReturnCode_t take_next_sample ( BreakerReadingProfile *       received_data,
                                  SampleInfo * sample_info);
  
  ReturnCode_t read_instance ( BreakerReadingProfilePtrSeq       * received_data,
                               SampleInfoSeq    * sample_infos,
                               int                max_samples,
                               InstanceHandle_t   a_handle,
                               SampleStateMask    sample_states, 
                               ViewStateMask      view_states, 
                               InstanceStateMask  instance_states);
  
  ReturnCode_t take_instance ( BreakerReadingProfilePtrSeq      * received_data,
                               SampleInfoSeq   * sample_infos,
                               int               max_samples,
                               InstanceHandle_t  a_handle,
                               SampleStateMask   sample_states, 
                               ViewStateMask     view_states, 
                               InstanceStateMask instance_states);
  
  ReturnCode_t read_next_instance ( BreakerReadingProfilePtrSeq      * received_data,
                                    SampleInfoSeq   * sample_infos,
                                    int               max_samples,
                                    InstanceHandle_t  previous_handle,
                                    SampleStateMask   sample_states, 
                                    ViewStateMask     view_states, 
                                    InstanceStateMask instance_states);
  
  ReturnCode_t take_next_instance ( BreakerReadingProfilePtrSeq       * received_data,
                                    SampleInfoSeq    * sample_infos,
                                    int                max_samples,
                                    InstanceHandle_t   previous_handle,
                                    SampleStateMask    sample_states, 
                                    ViewStateMask      view_states, 
                                    InstanceStateMask  instance_states);
  
  ReturnCode_t read_next_instance_w_condition( BreakerReadingProfilePtrSeq       * received_data,
                                   SampleInfoSeq    * sample_infos,
                                   int                max_samples,
                                   InstanceHandle_t   previous_handle,
                                   ReadCondition *    a_condition);

  ReturnCode_t take_next_instance_w_condition( BreakerReadingProfilePtrSeq       * received_data,
                                   SampleInfoSeq    * sample_infos,
                                   int                max_samples,
                                   InstanceHandle_t   previous_handle,
                                   ReadCondition *    a_condition);

  ReturnCode_t return_loan ( BreakerReadingProfilePtrSeq     * received_data,
                             SampleInfoSeq  * sample_infos);
  
  ReturnCode_t get_key_value ( BreakerReadingProfile            * key_holder, 
                               InstanceHandle_t  handle);
    
  InstanceHandle_t lookup_instance ( BreakerReadingProfile       * instance_data);

  static BreakerReadingProfileDataReader * narrow( DataReader * dr) { return (BreakerReadingProfileDataReader *)dr; }
  BreakerReadingProfileDataReader        * narrow( void )           { return this; }


 protected:
  /* Constructor / Destructor - use Subscriber::create_datareader() */

  BreakerReadingProfileDataReader();
  ~BreakerReadingProfileDataReader() {};
 private:

};

}  /* namespace breakermodule */
/* END SCOPE: breakermodule */
/* START SCOPE: loadmodule */

namespace loadmodule {

class LoadControlProfileTypeSupport;
/******************************************************************
 *   openfmb::loadmodule:: LoadControlProfile DataReader Class
 ******************************************************************/

class COREDX_TS_CLASS_EXPORT LoadControlProfileDataReader : public DataReader
{
  friend class DDS::DomainParticipant;
  friend class LoadControlProfileTypeSupport;

 public:


  /* DataReader Meathods */

  ReturnCode_t read( LoadControlProfilePtrSeq *    received_data,
                     SampleInfoSeq *   sample_infos,
                     int               max_samples,
                     SampleStateMask   sample_states,
                     ViewStateMask     view_states,
                     InstanceStateMask instance_states );

  ReturnCode_t take( LoadControlProfilePtrSeq       * received_data,
                     SampleInfoSeq    * sample_infos,
                     int                max_samples,
                     SampleStateMask    sample_states, 
                     ViewStateMask      view_states, 
                     InstanceStateMask  instance_states );


  ReturnCode_t read_w_condition ( LoadControlProfilePtrSeq    * received_data,
                                  SampleInfoSeq * sample_infos,
                                  int             max_samples,
                                  ReadCondition * a_condition);
  
  ReturnCode_t take_w_condition ( LoadControlProfilePtrSeq     * received_data,
                                  SampleInfoSeq  * sample_infos,
                                  int              max_samples,
                                  ReadCondition *  a_condition);
  
  ReturnCode_t read_next_sample ( LoadControlProfile *       received_data,
                                  SampleInfo * sample_info);
  
  ReturnCode_t take_next_sample ( LoadControlProfile *       received_data,
                                  SampleInfo * sample_info);
  
  ReturnCode_t read_instance ( LoadControlProfilePtrSeq       * received_data,
                               SampleInfoSeq    * sample_infos,
                               int                max_samples,
                               InstanceHandle_t   a_handle,
                               SampleStateMask    sample_states, 
                               ViewStateMask      view_states, 
                               InstanceStateMask  instance_states);
  
  ReturnCode_t take_instance ( LoadControlProfilePtrSeq      * received_data,
                               SampleInfoSeq   * sample_infos,
                               int               max_samples,
                               InstanceHandle_t  a_handle,
                               SampleStateMask   sample_states, 
                               ViewStateMask     view_states, 
                               InstanceStateMask instance_states);
  
  ReturnCode_t read_next_instance ( LoadControlProfilePtrSeq      * received_data,
                                    SampleInfoSeq   * sample_infos,
                                    int               max_samples,
                                    InstanceHandle_t  previous_handle,
                                    SampleStateMask   sample_states, 
                                    ViewStateMask     view_states, 
                                    InstanceStateMask instance_states);
  
  ReturnCode_t take_next_instance ( LoadControlProfilePtrSeq       * received_data,
                                    SampleInfoSeq    * sample_infos,
                                    int                max_samples,
                                    InstanceHandle_t   previous_handle,
                                    SampleStateMask    sample_states, 
                                    ViewStateMask      view_states, 
                                    InstanceStateMask  instance_states);
  
  ReturnCode_t read_next_instance_w_condition( LoadControlProfilePtrSeq       * received_data,
                                   SampleInfoSeq    * sample_infos,
                                   int                max_samples,
                                   InstanceHandle_t   previous_handle,
                                   ReadCondition *    a_condition);

  ReturnCode_t take_next_instance_w_condition( LoadControlProfilePtrSeq       * received_data,
                                   SampleInfoSeq    * sample_infos,
                                   int                max_samples,
                                   InstanceHandle_t   previous_handle,
                                   ReadCondition *    a_condition);

  ReturnCode_t return_loan ( LoadControlProfilePtrSeq     * received_data,
                             SampleInfoSeq  * sample_infos);
  
  ReturnCode_t get_key_value ( LoadControlProfile            * key_holder, 
                               InstanceHandle_t  handle);
    
  InstanceHandle_t lookup_instance ( LoadControlProfile       * instance_data);

  static LoadControlProfileDataReader * narrow( DataReader * dr) { return (LoadControlProfileDataReader *)dr; }
  LoadControlProfileDataReader        * narrow( void )           { return this; }


 protected:
  /* Constructor / Destructor - use Subscriber::create_datareader() */

  LoadControlProfileDataReader();
  ~LoadControlProfileDataReader() {};
 private:

};

}  /* namespace loadmodule */
/* END SCOPE: loadmodule */
/* START SCOPE: solarmodule */

namespace solarmodule {

class SolarControlProfileTypeSupport;
/******************************************************************
 *   openfmb::solarmodule:: SolarControlProfile DataReader Class
 ******************************************************************/

class COREDX_TS_CLASS_EXPORT SolarControlProfileDataReader : public DataReader
{
  friend class DDS::DomainParticipant;
  friend class SolarControlProfileTypeSupport;

 public:


  /* DataReader Meathods */

  ReturnCode_t read( SolarControlProfilePtrSeq *    received_data,
                     SampleInfoSeq *   sample_infos,
                     int               max_samples,
                     SampleStateMask   sample_states,
                     ViewStateMask     view_states,
                     InstanceStateMask instance_states );

  ReturnCode_t take( SolarControlProfilePtrSeq       * received_data,
                     SampleInfoSeq    * sample_infos,
                     int                max_samples,
                     SampleStateMask    sample_states, 
                     ViewStateMask      view_states, 
                     InstanceStateMask  instance_states );


  ReturnCode_t read_w_condition ( SolarControlProfilePtrSeq    * received_data,
                                  SampleInfoSeq * sample_infos,
                                  int             max_samples,
                                  ReadCondition * a_condition);
  
  ReturnCode_t take_w_condition ( SolarControlProfilePtrSeq     * received_data,
                                  SampleInfoSeq  * sample_infos,
                                  int              max_samples,
                                  ReadCondition *  a_condition);
  
  ReturnCode_t read_next_sample ( SolarControlProfile *       received_data,
                                  SampleInfo * sample_info);
  
  ReturnCode_t take_next_sample ( SolarControlProfile *       received_data,
                                  SampleInfo * sample_info);
  
  ReturnCode_t read_instance ( SolarControlProfilePtrSeq       * received_data,
                               SampleInfoSeq    * sample_infos,
                               int                max_samples,
                               InstanceHandle_t   a_handle,
                               SampleStateMask    sample_states, 
                               ViewStateMask      view_states, 
                               InstanceStateMask  instance_states);
  
  ReturnCode_t take_instance ( SolarControlProfilePtrSeq      * received_data,
                               SampleInfoSeq   * sample_infos,
                               int               max_samples,
                               InstanceHandle_t  a_handle,
                               SampleStateMask   sample_states, 
                               ViewStateMask     view_states, 
                               InstanceStateMask instance_states);
  
  ReturnCode_t read_next_instance ( SolarControlProfilePtrSeq      * received_data,
                                    SampleInfoSeq   * sample_infos,
                                    int               max_samples,
                                    InstanceHandle_t  previous_handle,
                                    SampleStateMask   sample_states, 
                                    ViewStateMask     view_states, 
                                    InstanceStateMask instance_states);
  
  ReturnCode_t take_next_instance ( SolarControlProfilePtrSeq       * received_data,
                                    SampleInfoSeq    * sample_infos,
                                    int                max_samples,
                                    InstanceHandle_t   previous_handle,
                                    SampleStateMask    sample_states, 
                                    ViewStateMask      view_states, 
                                    InstanceStateMask  instance_states);
  
  ReturnCode_t read_next_instance_w_condition( SolarControlProfilePtrSeq       * received_data,
                                   SampleInfoSeq    * sample_infos,
                                   int                max_samples,
                                   InstanceHandle_t   previous_handle,
                                   ReadCondition *    a_condition);

  ReturnCode_t take_next_instance_w_condition( SolarControlProfilePtrSeq       * received_data,
                                   SampleInfoSeq    * sample_infos,
                                   int                max_samples,
                                   InstanceHandle_t   previous_handle,
                                   ReadCondition *    a_condition);

  ReturnCode_t return_loan ( SolarControlProfilePtrSeq     * received_data,
                             SampleInfoSeq  * sample_infos);
  
  ReturnCode_t get_key_value ( SolarControlProfile            * key_holder, 
                               InstanceHandle_t  handle);
    
  InstanceHandle_t lookup_instance ( SolarControlProfile       * instance_data);

  static SolarControlProfileDataReader * narrow( DataReader * dr) { return (SolarControlProfileDataReader *)dr; }
  SolarControlProfileDataReader        * narrow( void )           { return this; }


 protected:
  /* Constructor / Destructor - use Subscriber::create_datareader() */

  SolarControlProfileDataReader();
  ~SolarControlProfileDataReader() {};
 private:

};

}  /* namespace solarmodule */
/* END SCOPE: solarmodule */

}  /* namespace openfmb */
/* END SCOPE: openfmb */

#endif

