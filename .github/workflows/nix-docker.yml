# SPDX-FileCopyrightText: 2021 Open Energy Solutions Inc
#
# SPDX-License-Identifier: Apache-2.0

---
  name: "Nix Docker Build"
  on:
    push:
  jobs:
    build:
      runs-on: self-hosted
      env:
        PUSH_IMAGES: ${{ github.event_name == 'push' && github.ref == 'refs/heads/v2.1-prerelease' }}
      steps:
        - uses: actions/checkout@v3
        - uses: cachix/install-nix-action@v20
          with:
            nix_path: nixpkgs=channel:nixos-21.11
        - uses: cachix/cachix-action@v12
          with:
            name: openenergysolutions          
        - name: Update submodules
          run: git submodule update --init
        - name: Build all
          run: nix-build all.nix
        - name: Prepare Artifacts
          run: |
            mkdir artifacts
            cp -r `readlink result` artifacts/.
            cp -r `readlink result-2` artifacts/.
            cp -r `readlink result-3` artifacts/.
            cp -r `readlink result-4` artifacts/.
            cp -r `readlink result-5` artifacts/.
            cp -r `readlink result-6` artifacts/.
        - name: Upload Armv8 64bit Docker Artifact
          uses: actions/upload-artifact@v2
          with:
            name: openfmb.adapters-aarch64-docker
            path: artifacts/*docker*aarch64*.tar.gz
        - name: Upload Armv7 Docker Artifact
          uses: actions/upload-artifact@v2
          with:
            name: openfmb.adapters-armv7-docker
            path: artifacts/*docker*armv7*.tar.gz
        - name: Upload x86_64 Docker Artifact
          uses: actions/upload-artifact@v2
          with:
            name: openfmb.adapters-x86_64-docker
            path: artifacts/*docker*x86_64*.tar.gz
        - name: Ok
          run: nix-shell --run "echo OK"
        - name: Login to DockerHub
          if: ${{ env.PUSH_IMAGES == 'true' }}
          uses: docker/login-action@v2
          with:
            username: ${{ secrets.DOCKER_USERNAME }}
            password: ${{ secrets.DOCKER_TOKEN }}
        - name: Push Armv8 Image to DockerHub
          if: ${{ env.PUSH_IMAGES == 'true' }}
          shell: bash
          run: |
            IMAGE_NAME=$(find . -name *docker*aarch64*.tar.gz)
            docker load --input $IMAGE_NAME
            IMAGE_REPOSITORY=$(docker images --format "{{.Repository}}:{{.Tag}}" | grep aarch64)
            docker tag $IMAGE_REPOSITORY docker.io/oesinc/openfmb.adapters:aarch64-${GITHUB_SHA::7}
            docker push docker.io/oesinc/openfmb.adapters:aarch64-${GITHUB_SHA::7}
        - name: Push Armv7 Image to DockerHub
          if: ${{ env.PUSH_IMAGES == 'true' }}
          shell: bash
          run: |
            IMAGE_NAME=$(find . -name *docker*armv7*.tar.gz)
            docker load --input $IMAGE_NAME
            IMAGE_REPOSITORY=$(docker images --format "{{.Repository}}:{{.Tag}}" | grep armv7)
            docker tag $IMAGE_REPOSITORY docker.io/oesinc/openfmb.adapters:armv7-${GITHUB_SHA::7}
            docker push docker.io/oesinc/openfmb.adapters:armv7-${GITHUB_SHA::7}
        - name: Push x86_64 Image to DockerHub
          if: ${{ env.PUSH_IMAGES == 'true' }}
          shell: bash
          run: |
            IMAGE_NAME=$(find . -name *docker*x86_64*.tar.gz)
            docker load --input $IMAGE_NAME
            IMAGE_REPOSITORY=$(docker images --format "{{.Repository}}:{{.Tag}}" | grep x86_64)
            docker tag $IMAGE_REPOSITORY docker.io/oesinc/openfmb.adapters:x86_64-${GITHUB_SHA::7}
            docker push docker.io/oesinc/openfmb.adapters:x86_64-${GITHUB_SHA::7}
        - name: Create and push the multiarch Image to DockerHub
          if: ${{ env.PUSH_IMAGES == 'true' }}
          shell: bash
          run: |
            IMAGE_NAME=${GITHUB_REPOSITORY#*/}
            # create a build specific tag and push
            docker manifest create \
              oesinc/$IMAGE_NAME:${GITHUB_SHA::7} \
              --amend oesinc/$IMAGE_NAME:x86_64-${GITHUB_SHA::7} \
              --amend oesinc/$IMAGE_NAME:armv7-${GITHUB_SHA::7} \
              --amend oesinc/$IMAGE_NAME:aarch64-${GITHUB_SHA::7}
            docker manifest annotate oesinc/$IMAGE_NAME:${GITHUB_SHA::7} oesinc/$IMAGE_NAME:x86_64-${GITHUB_SHA::7} --arch amd64 --os linux
            docker manifest annotate oesinc/$IMAGE_NAME:${GITHUB_SHA::7} oesinc/$IMAGE_NAME:armv7-${GITHUB_SHA::7} --arch arm --os linux --variant v7
            docker manifest annotate oesinc/$IMAGE_NAME:${GITHUB_SHA::7} oesinc/$IMAGE_NAME:aarch64-${GITHUB_SHA::7} --arch arm64 --os linux
            docker manifest push oesinc/$IMAGE_NAME:${GITHUB_SHA::7}
            # create a version tag and push
            docker manifest create \
              oesinc/$IMAGE_NAME:${{ github.ref_name}} \
              --amend oesinc/$IMAGE_NAME:x86_64-${GITHUB_SHA::7} \
              --amend oesinc/$IMAGE_NAME:armv7-${GITHUB_SHA::7} \
              --amend oesinc/$IMAGE_NAME:aarch64-${GITHUB_SHA::7}
            docker manifest annotate oesinc/$IMAGE_NAME:${{ github.ref_name}} oesinc/$IMAGE_NAME:x86_64-${GITHUB_SHA::7} --arch amd64 --os linux
            docker manifest annotate oesinc/$IMAGE_NAME:${{ github.ref_name}} oesinc/$IMAGE_NAME:armv7-${GITHUB_SHA::7} --arch arm --os linux --variant v7
            docker manifest annotate oesinc/$IMAGE_NAME:${{ github.ref_name}} oesinc/$IMAGE_NAME:aarch64-${GITHUB_SHA::7} --arch arm64 --os linux
            docker manifest push oesinc/$IMAGE_NAME:${{ github.ref_name}}
            # create a latest tag and push
            docker manifest create \
              oesinc/$IMAGE_NAME:latest \
              --amend oesinc/$IMAGE_NAME:x86_64-${GITHUB_SHA::7} \
              --amend oesinc/$IMAGE_NAME:armv7-${GITHUB_SHA::7} \
              --amend oesinc/$IMAGE_NAME:aarch64-${GITHUB_SHA::7}
            docker manifest annotate oesinc/$IMAGE_NAME:latest oesinc/$IMAGE_NAME:x86_64-${GITHUB_SHA::7} --arch amd64 --os linux
            docker manifest annotate oesinc/$IMAGE_NAME:latest oesinc/$IMAGE_NAME:armv7-${GITHUB_SHA::7} --arch arm --os linux --variant v7
            docker manifest annotate oesinc/$IMAGE_NAME:latest oesinc/$IMAGE_NAME:aarch64-${GITHUB_SHA::7} --arch arm64 --os linux
            docker manifest push oesinc/$IMAGE_NAME:latest
  