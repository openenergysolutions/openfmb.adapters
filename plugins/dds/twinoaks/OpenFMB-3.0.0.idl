/*
 *  IDL file generated by RTI Connext DDS Enterprise Architect IDL 4 Add-in version 1.0
 *      Enterprise Architect File:  C:\50\UML\20180817\OpenFMB Model (61850-CIM) - 2018-08-17.eap
 *      Date: 8/27/2018 1:45:08 PM
 */
 
/* ******************************************************************* */
/* Note: No configuration used. Reason: Cannot find file "C:\Program Files (x86)\idl4_ea_extension-1.25\IDL4GeneratorConfig.txt" */

/* ******************************************************************* */
/* These are UML builtin primitive types that are not primitive in IDL */
module UML_Extension { 
    // Place the type declarations below
    typedef string    ErrorUnresolvedType; 
    typedef long long dateTime;
    typedef long long date;
    typedef string token;
    typedef string NMTOKEN;
};

/* ******************************************************************* */
/* These are Types defined in the model */

/* -----  Model: "Model"  ----- */
module OpenFMB_Model {
    module OpenFMB_Information_Model {
        module openfmb {
            module coordinationservicemodule {
                struct CoordinationControl;
                struct CoordinationControlDCSC;
                struct CoordinationControlProfile;
                struct CoordinationEvent;
                struct CoordinationEventDCSC;
                struct CoordinationEventProfile;
                struct CoordinationStatus;
                struct CoordinationStatusDCSC;
                struct CoordinationStatusProfile;
                struct ENG_CoordinationServiceModeKind;
                enum CoordinationServiceModeKind {
                    @value(2)                     CoordinationServiceModeKind_manual,
                    @value(3)                     CoordinationServiceModeKind_netzero,
                    @value(4)                     CoordinationServiceModeKind_start,
                    @value(5)                     CoordinationServiceModeKind_stop,
                    @value(0)                     CoordinationServiceModeKind_none,
                    @value(1)                     CoordinationServiceModeKind_auto
                };
            }; /* module coordinationservicemodule */

            module breakermodule {
                struct Breaker;
                struct BreakerDiscreteControl;
                struct BreakerDiscreteControlProfile;
                struct BreakerDiscreteControlXCBR;
                struct BreakerEvent;
                struct BreakerEventProfile;
                struct BreakerReading;
                struct BreakerReadingProfile;
                struct BreakerReadingValue;
                struct BreakerStatus;
                struct BreakerStatusProfile;
            }; /* module breakermodule */

            module commonmodule {
                struct ACDCTerminal;
                struct ActivePower;
                struct AnalogStatusGGIO;
                struct AnalogueValue;
                struct AnalogueValueCtl;
                struct ApplicationSystem;
                struct ASG;
                struct BCR;
                struct BooleanStatusGGIO;
                struct CheckConditions;
                struct CMV;
                struct ConductingEquipment;
                struct ConductingEquipmentTerminalReading;
                struct ControlDPC;
                struct ControlFSCC;
                struct ControlING;
                struct ControlISC;
                struct ControlMessageInfo;
                struct ControlScheduleFSCH;
                struct ControlSPC;
                struct ControlTimestamp;
                struct ControlValue;
                struct DateTimeInterval;
                struct DEL;
                struct DetailQual;
                struct EnergyConsumer;
                struct ENG_CalcMethodKind;
                struct ENG_GridConnectModeKind;
                struct ENG_PFSignKind;
                struct ENS_BehaviourModeKind;
                struct ENS_DERGeneratorStateKind;
                struct ENS_DynamicTestKind;
                struct ENS_GridConnectModeKind;
                struct ENS_HealthKind;
                struct ESS;
                struct EventMessageInfo;
                struct EventValue;
                struct ForecastIED;
                struct ForecastValue;
                struct ForecastValueSource;
                struct IdentifiedObject;
                struct IED;
                struct IntegerStatusGGIO;
                struct LogicalNode;
                struct LogicalNodeForControl;
                struct LogicalNodeForEventAndStatus;
                struct MeasurementValue;
                struct MessageInfo;
                struct Meter;
                struct MV;
                struct NamedObject;
                struct OptimizationMessageInfo;
                struct ORS;
                struct PhaseMMTN;
                struct Quality;
                struct RampRate;
                struct ReadingMessageInfo;
                struct ReadingMMTN;
                struct ReadingMMTR;
                struct ReadingMMXU;
                struct ScheduleCSG;
                struct SchedulePoint;
                struct StatusAndEventXCBR;
                struct StatusDPS;
                struct StatusINS;
                struct StatusISC;
                struct StatusMessageInfo;
                struct StatusSPC;
                struct StatusSPS;
                struct StatusValue;
                struct StringStatusGGIO;
                struct Terminal;
                struct TimeQuality;
                struct Timestamp;
                struct Unit;
                struct Vector;
                struct VSS;
                struct WYE;
                enum BehaviourModeKind {
                    @value(0)                     BehaviourModeKind_UNDEFINED,
                    @value(2)                     BehaviourModeKind_blocked,
                    @value(3)                     BehaviourModeKind_test,
                    @value(1)                     BehaviourModeKind_on,
                    @value(5)                     BehaviourModeKind_off,
                    @value(4)                     BehaviourModeKind_test_blocked
                };
                enum CalcMethodKind {
                    @value(11)                     CalcMethodKind_P_CLASS,
                    @value(0)                     CalcMethodKind_UNDEFINED,
                    @value(13)                     CalcMethodKind_DIFF,
                    @value(12)                     CalcMethodKind_M_CLASS
                };
                enum DbPosKind {
                    @value(3)                     DbPosKind_invalid,
                    @value(2)                     DbPosKind_open,
                    @value(0)                     DbPosKind_transient,
                    @value(1)                     DbPosKind_closed
                };
                enum DERGeneratorStateKind {
                    @value(1)                     DERGeneratorStateKind_Not_operating,
                    @value(0)                     DERGeneratorStateKind_UNDEFINED,
                    @value(2)                     DERGeneratorStateKind_Operating,
                    @value(3)                     DERGeneratorStateKind_Starting_up,
                    @value(4)                     DERGeneratorStateKind_Shutting_down,
                    @value(5)                     DERGeneratorStateKind_At_disconnect_level,
                    @value(6)                     DERGeneratorStateKind_Ramping_in_power,
                    @value(7)                     DERGeneratorStateKind_Ramping_in_reactive_power,
                    @value(98)                     DERGeneratorStateKind_Not_applicable_Unknown,
                    @value(99)                     DERGeneratorStateKind_Other,
                    @value(8)                     DERGeneratorStateKind_Standby
                };
                enum DynamicTestKind {
                    @value(3)                     DynamicTestKind_failed,
                    @value(2)                     DynamicTestKind_operating,
                    @value(0)                     DynamicTestKind_none,
                    @value(1)                     DynamicTestKind_testing
                };
                enum GridConnectModeKind {
                    @value(1)                     GridConnectModeKind_CSI,
                    @value(0)                     GridConnectModeKind_UNDEFINED,
                    @value(2)                     GridConnectModeKind_VC_VSI,
                    @value(3)                     GridConnectModeKind_CC_VSI,
                    @value(98)                     GridConnectModeKind_none,
                    @value(99)                     GridConnectModeKind_other,
                    @value(2000)                     GridConnectModeKind_VSI_PQ,
                    @value(2001)                     GridConnectModeKind_VSI_VF,
                    @value(2002)                     GridConnectModeKind_VSI_ISO
                };
                enum HealthKind {
                    @value(2)                     HealthKind_Warning,
                    @value(3)                     HealthKind_Alarm,
                    @value(0)                     HealthKind_none,
                    @value(1)                     HealthKind_OK
                };
                enum PFSignKind {
                    @value(0)                     PFSignKind_UNDEFINED,
                    @value(2)                     PFSignKind_EEI,
                    @value(1)                     PFSignKind_IEC
                };
                enum PhaseCodeKind {
                    @value(128)                     PhaseCodeKind_A,
                    @value(132)                     PhaseCodeKind_AB,
                    @value(224)                     PhaseCodeKind_ABC,
                    @value(225)                     PhaseCodeKind_ABCN,
                    @value(193)                     PhaseCodeKind_ABN,
                    @value(40)                     PhaseCodeKind_AC,
                    @value(41)                     PhaseCodeKind_ACN,
                    @value(129)                     PhaseCodeKind_AN,
                    @value(64)                     PhaseCodeKind_B,
                    @value(66)                     PhaseCodeKind_BC,
                    @value(97)                     PhaseCodeKind_BCN,
                    @value(65)                     PhaseCodeKind_BN,
                    @value(32)                     PhaseCodeKind_C,
                    @value(33)                     PhaseCodeKind_CN,
                    @value(16)                     PhaseCodeKind_N,
                    @value(0)                     PhaseCodeKind_none,
                    @value(512)                     PhaseCodeKind_s1,
                    @value(768)                     PhaseCodeKind_s12,
                    @value(769)                     PhaseCodeKind_s12N,
                    @value(513)                     PhaseCodeKind_s1N,
                    @value(256)                     PhaseCodeKind_s2,
                    @value(257)                     PhaseCodeKind_s2N,
                    @value(1)                     PhaseCodeKind_other
                };
                enum SourceKind {
                    @value(0)                     SourceKind_process,
                    @value(1)                     SourceKind_substituted
                };
                enum StateKind {
                    @value(2)                     StateKind_standby,
                    @value(0)                     StateKind_off,
                    @value(1)                     StateKind_on
                };
                enum TimeAccuracyKind {
                    @value(14)                     TimeAccuracyKind_T2,
                    @value(10)                     TimeAccuracyKind_T1,
                    @value(16)                     TimeAccuracyKind_T3,
                    @value(18)                     TimeAccuracyKind_T4,
                    @value(20)                     TimeAccuracyKind_T5,
                    @value(0)                     TimeAccuracyKind_UNDEFINED,
                    @value(31)                     TimeAccuracyKind_unspecified,
                    @value(7)                     TimeAccuracyKind_T0
                };
                enum UnitMultiplierKind {
                    @value(2)                     UnitMultiplierKind_centi,
                    @value(3)                     UnitMultiplierKind_deci,
                    @value(4)                     UnitMultiplierKind_Giga,
                    @value(5)                     UnitMultiplierKind_kilo,
                    @value(8)                     UnitMultiplierKind_milli,
                    @value(6)                     UnitMultiplierKind_Mega,
                    @value(7)                     UnitMultiplierKind_micro,
                    @value(9)                     UnitMultiplierKind_nano,
                    @value(0)                     UnitMultiplierKind_none,
                    @value(10)                     UnitMultiplierKind_pico,
                    @value(11)                     UnitMultiplierKind_Tera,
                    @value(1)                     UnitMultiplierKind_other
                };
                enum UnitSymbolKind {
                    @value(5)                     UnitSymbolKind_Amp,
                    @value(9)                     UnitSymbolKind_deg,
                    @value(23)                     UnitSymbolKind_degC,
                    @value(279)                     UnitSymbolKind_degF,
                    @value(25)                     UnitSymbolKind_Farad,
                    @value(3)                     UnitSymbolKind_gram,
                    @value(160)                     UnitSymbolKind_hour,
                    @value(28)                     UnitSymbolKind_Henry,
                    @value(33)                     UnitSymbolKind_Hz,
                    @value(31)                     UnitSymbolKind_Joule,
                    @value(2)                     UnitSymbolKind_meter,
                    @value(41)                     UnitSymbolKind_m2,
                    @value(166)                     UnitSymbolKind_m3,
                    @value(159)                     UnitSymbolKind_min,
                    @value(500)                     UnitSymbolKind_mph,
                    @value(32)                     UnitSymbolKind_Newton,
                    @value(0)                     UnitSymbolKind_none,
                    @value(30)                     UnitSymbolKind_ohm,
                    @value(39)                     UnitSymbolKind_Pa,
                    @value(10)                     UnitSymbolKind_rad,
                    @value(53)                     UnitSymbolKind_Siemens,
                    @value(27)                     UnitSymbolKind_sec,
                    @value(29)                     UnitSymbolKind_V,
                    @value(61)                     UnitSymbolKind_VA,
                    @value(71)                     UnitSymbolKind_VAh,
                    @value(63)                     UnitSymbolKind_VAr,
                    @value(73)                     UnitSymbolKind_VArh,
                    @value(38)                     UnitSymbolKind_W,
                    @value(72)                     UnitSymbolKind_Wh,
                    @value(65)                     UnitSymbolKind_wPerVA,
                    @value(179)                     UnitSymbolKind_wPerM2,
                    @value(75)                     UnitSymbolKind_hzPerS,
                    @value(81)                     UnitSymbolKind_wPerS,
                    @value(100)                     UnitSymbolKind_other,
                    @value(106)                     UnitSymbolKind_Ah
                };
                enum ValidityKind {
                    @value(2)                     ValidityKind_reserved,
                    @value(3)                     ValidityKind_questionable,
                    @value(0)                     ValidityKind_good,
                    @value(1)                     ValidityKind_invalid
                };
                typedef float FLOAT32;
                typedef sequence<octet,2> HexBinary16;
                typedef long INT32;
                typedef unsigned long INT32U;
                typedef long long INT64;
                typedef unsigned long long INT64U;
                typedef long INT8;
                typedef sequence<string,129> ObjRef;
                typedef sequence<string,255> Unicode255;
                typedef string uuidType;
                typedef sequence<string,255> VisString255;
            }; /* module commonmodule */

            module essmodule {
                struct ENG_ESSFunctionKind;
                struct ENG_ESSFunctionParameter;
                struct EssControlFSCC;
                struct ESSControlScheduleFSCH;
                struct ESSCSG;
                struct ESSEvent;
                struct ESSEventAndStatusZGEN;
                struct ESSEventProfile;
                struct EssEventZBAT;
                struct ESSEventZGEN;
                struct ESSPoint;
                struct ESSPointStatus;
                struct ESSReading;
                struct ESSReadingProfile;
                struct ESSStatus;
                struct ESSStatusProfile;
                struct EssStatusZBAT;
                struct ESSStatusZGEN;
                struct ESSControl;
                struct ESSControlProfile;
                enum ESSFunctionKind {
                    @value(2)                     ESSFunctionKind_capacityFirming,
                    @value(3)                     ESSFunctionKind_frequencyRegulation,
                    @value(4)                     ESSFunctionKind_peakShaving,
                    @value(5)                     ESSFunctionKind_socLimit,
                    @value(0)                     ESSFunctionKind_none,
                    @value(6)                     ESSFunctionKind_socManagement,
                    @value(7)                     ESSFunctionKind_voltageDroop,
                    @value(1)                     ESSFunctionKind_other,
                    @value(8)                     ESSFunctionKind_voltagePI
                };
                enum ESSFunctionParameterKind {
                    @value(2)                     ESSFunctionParameterKind_socHighLimit,
                    @value(3)                     ESSFunctionParameterKind_socLowLimit,
                    @value(4)                     ESSFunctionParameterKind_socHighLimitHysteresis,
                    @value(5)                     ESSFunctionParameterKind_socLowLimitHysteresis,
                    @value(6)                     ESSFunctionParameterKind_frequencySetPoint,
                    @value(0)                     ESSFunctionParameterKind_none,
                    @value(7)                     ESSFunctionParameterKind_frequencyDeadBandPlus,
                    @value(8)                     ESSFunctionParameterKind_frequencyDeadBandMinus,
                    @value(1)                     ESSFunctionParameterKind_other,
                    @value(9)                     ESSFunctionParameterKind_overFrequencyDroop,
                    @value(10)                     ESSFunctionParameterKind_underFrequencyDroop,
                    @value(11)                     ESSFunctionParameterKind_gridFrequencyStableBandPlus,
                    @value(12)                     ESSFunctionParameterKind_gridFrequencyStableBandMinus,
                    @value(13)                     ESSFunctionParameterKind_voltageSetPointHighWord,
                    @value(14)                     ESSFunctionParameterKind_voltageSetPointLowWord,
                    @value(15)                     ESSFunctionParameterKind_voltageDeadBandPlusHighWord,
                    @value(16)                     ESSFunctionParameterKind_voltageDeadBandPlusLowWord,
                    @value(17)                     ESSFunctionParameterKind_voltageDeadBandMinusHighWord,
                    @value(18)                     ESSFunctionParameterKind_voltageDeadBandMinusLowWord,
                    @value(19)                     ESSFunctionParameterKind_overVoltageDroop,
                    @value(20)                     ESSFunctionParameterKind_underVoltageDroop,
                    @value(21)                     ESSFunctionParameterKind_peakShavingLimit,
                    @value(22)                     ESSFunctionParameterKind_baseShavingLimit,
                    @value(23)                     ESSFunctionParameterKind_socManagementAllowedHighLimit,
                    @value(24)                     ESSFunctionParameterKind_socManagementAllowedLowLimit,
                    @value(25)                     ESSFunctionParameterKind_limitPositive_dp_dt,
                    @value(26)                     ESSFunctionParameterKind_limitNegative_dp_dt,
                    @value(27)                     ESSFunctionParameterKind_socSetPoint,
                    @value(28)                     ESSFunctionParameterKind_socDeadBandPlus,
                    @value(29)                     ESSFunctionParameterKind_socDeadBandMinus,
                    @value(30)                     ESSFunctionParameterKind_socPowerSetPoint
                };
            }; /* module essmodule */

            module generationmodule {
                struct GeneratingUnit;
                struct GenerationControl;
                struct GenerationControlFSCC;
                struct GenerationControlProfile;
                struct GenerationControlScheduleFSCH;
                struct GenerationCSG;
                struct GenerationEvent;
                struct GenerationEventAndStatusZGEN;
                struct GenerationEventZGEN;
                struct GenerationPoint;
                struct GenerationPointStatus;
                struct GenerationReading;
                struct GenerationStatus;
                struct GenerationStatusZGEN;
                struct GenerationReadingProfile;
                struct GenerationEventProfile;
                struct GenerationStatusProfile;
            }; /* module generationmodule */

            module interconnectionmodule {
                struct InterconnectionControlScheduleFSCH;
                struct InterconnectionCSG;
                struct InterconnectionPoint;
                struct InterconnectionScheduleFSCC;
                struct InterconnectionSchedule;
                struct PlannedInterconnectionScheduleProfile;
                struct RequestedInterconnectionScheduleProfile;
            }; /* module interconnectionmodule */

            module loadmodule {
                struct LoadControl;
                struct LoadControlFSCC;
                struct LoadControlProfile;
                struct LoadControlScheduleFSCH;
                struct LoadCSG;
                struct LoadEvent;
                struct LoadEventAndStatusZGLD;
                struct LoadEventProfile;
                struct LoadEventZGLD;
                struct LoadPoint;
                struct LoadPointStatus;
                struct LoadReading;
                struct LoadReadingProfile;
                struct LoadStatus;
                struct LoadStatusProfile;
                struct LoadStatusZGLD;
            }; /* module loadmodule */

            module optimizermodule {
                struct ESSControlScheduleProfileList;
                struct GenerationControlScheduleProfileList;
                struct LoadControlScheduleProfileList;
                struct PlannedInterconnectionScheduleProfileList;
                struct PlannedOptimizerScheduleProfile;
                struct RegulatorControlScheduleProfileList;
                struct RequestedInterconnectionScheduleProfileList;
                struct RequestedOptimizerScheduleProfile;
                struct SolarControlScheduleProfileList;
                struct SwitchControlScheduleProfileList;
                module reclosermodule {
                    struct Recloser;
                    struct RecloserControl;
                    struct RecloserControlFSCC;
                    struct RecloserControlProfile;
                    struct RecloserDiscreteControl;
                    struct RecloserDiscreteControlProfile;
                    struct RecloserDiscreteControlXCBR;
                    struct RecloserEvent;
                    struct RecloserEventProfile;
                    struct RecloserReading;
                    struct RecloserReadingProfile;
                    struct RecloserStatus;
                    struct RecloserStatusProfile;
                }; /* module reclosermodule */

            }; /* module optimizermodule */

            module regulatormodule {
                struct RegulatorControl;
                struct RegulatorControlATCC;
                struct RegulatorControlFSCC;
                struct RegulatorControlProfile;
                struct RegulatorControlScheduleFSCH;
                struct RegulatorCSG;
                struct RegulatorEvent;
                struct RegulatorEventAndStatusANCR;
                struct RegulatorEventAndStatusATCC;
                struct RegulatorEventAndStatusPoint;
                struct RegulatorEventProfile;
                struct RegulatorPoint;
                struct RegulatorReading;
                struct RegulatorReadingProfile;
                struct RegulatorStatus;
                struct RegulatorStatusProfile;
                struct RegulatorSystem;
            }; /* module regulatormodule */

            module resourcemodule {
                struct ResourceReading;
                struct ResourceReadingProfile;
                struct ResourceStatus;
                struct ResourceStatusProfile;
            }; /* module resourcemodule */

            module solarmodule {
                struct SolarControl;
                struct SolarControlFSCC;
                struct SolarControlProfile;
                struct SolarControlScheduleFSCH;
                struct SolarCSG;
                struct SolarEvent;
                struct SolarEventAndStatusZGEN;
                struct SolarEventProfile;
                struct SolarEventZGEN;
                struct SolarInverter;
                struct SolarPoint;
                struct SolarPointStatus;
                struct SolarReading;
                struct SolarReadingProfile;
                struct SolarStatus;
                struct SolarStatusProfile;
                struct SolarStatusZGEN;
            }; /* module solarmodule */

            module switchmodule {
                struct ProtectedSwitch;
                struct SwitchControl;
                struct SwitchControlFSCC;
                struct SwitchControlScheduleFSCH;
                struct SwitchCSG;
                struct SwitchDiscreteControl;
                struct SwitchDiscreteControlProfile;
                struct SwitchDiscreteControlXSWI;
                struct SwitchEvent;
                struct SwitchEventProfile;
                struct SwitchEventXSWI;
                struct SwitchPoint;
                struct SwitchReading;
                struct SwitchReadingProfile;
                struct SwitchStatus;
                struct SwitchStatusProfile;
                struct SwitchStatusXSWI;
                struct SwitchControlProfile;
            }; /* module switchmodule */

        }; /* module openfmb */

    }; /* module OpenFMB_Information_Model */

}; /* module OpenFMB_Model */

module OpenFMB_Model {
    module OpenFMB_Information_Model {
        module openfmb {
            module coordinationservicemodule {
                @nested(TRUE) 
                struct ENG_CoordinationServiceModeKind {
                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::coordinationservicemodule::CoordinationServiceModeKind setVal;
                    @optional                    string setValExtension;
                };
            }; /* module coordinationservicemodule */

            module commonmodule {
                @nested(TRUE) 
                struct ActivePower {
                    @optional                    float value;
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::UnitSymbolKind unit;
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::UnitMultiplierKind multiplier;
                };
                @nested(TRUE) 
                struct AnalogueValue {
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::INT32 i;
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::FLOAT32 f;
                };
                @nested(TRUE) 
                struct AnalogueValueCtl {
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::INT32 i;
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::FLOAT32 f;
                };
                @nested(TRUE) 
                struct CheckConditions {
                    @optional                    boolean synchroCheck;
                    @optional                    boolean interlockCheck;
                };
                @nested(TRUE) 
                struct ControlDPC {
                    boolean ctlVal;
                };
                @nested(TRUE) 
                struct ControlISC {
                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::INT8 ctlVal;
                };
                @nested(TRUE) 
                struct ControlSPC {
                    boolean ctlVal;
                };
                @nested(TRUE) 
                struct ControlTimestamp {
                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::INT64U seconds;
                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::INT32U fraction;
                };
                @nested(TRUE) 
                struct DateTimeInterval {
                    @optional                    UML_Extension::dateTime end;
                    @optional                    UML_Extension::dateTime start;
                };
                @nested(TRUE) 
                struct DetailQual {
                    boolean overflow;
                    boolean outOfRange;
                    boolean badReference;
                    boolean oscillatory;
                    boolean failure;
                    boolean oldData;
                    boolean inconsistent;
                    boolean inaccurate;
                };
                @nested(TRUE) 
                struct ENG_CalcMethodKind {
                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::CalcMethodKind setVal;
                };
                @nested(TRUE) 
                struct ENG_GridConnectModeKind {
                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::GridConnectModeKind setVal;
                    @optional                    string setValExtension;
                };
                @nested(TRUE) 
                struct ENG_PFSignKind {
                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::PFSignKind setVal;
                };
                @nested(TRUE) 
                struct ENS_GridConnectModeKind {
                    string stValExtension;
                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::GridConnectModeKind stVal;
                };
                struct ENS_HealthKind {
                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::HealthKind stVal;
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::VisString255 d;
                };
                @nested(TRUE) 
                struct IdentifiedObject {
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::uuidType mRID;
                    @optional                    string description;
                    @optional                    string name;
                };
                @nested(TRUE) 
                struct IED : OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::IdentifiedObject {
                    octet __dummy_prevent_empty_class_IED;
                };
                @nested(TRUE) 
                struct LogicalNode : OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::IdentifiedObject {
                    octet __dummy_prevent_empty_class_LogicalNode;
                };
                @nested(TRUE) 
                struct LogicalNodeForControl : OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::LogicalNode {
                    octet __dummy_prevent_empty_class_LogicalNodeForControl;
                };
                @nested(TRUE) 
                struct MeasurementValue : OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::IdentifiedObject {
                    octet __dummy_prevent_empty_class_MeasurementValue;
                };
                @nested(TRUE) 
                struct NamedObject {
                    @optional                    string description;
                    @optional                    string name;
                };
                @nested(TRUE) 
                struct Quality {
                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::ValidityKind validity;
                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::DetailQual detailQual;
                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::SourceKind source;
                    boolean test;
                    boolean operatorBlocked;
                };
                @nested(TRUE) 
                struct RampRate {
                    @optional                    float positiveRealPowerKWPerMin;
                    @optional                    float negativeRealPowerKWPerMin;
                    @optional                    float positiveReactivePowerKVArPerMin;
                    @optional                    float negativeReactivePowerKVArPerMin;
                };
                @nested(TRUE) 
                struct SchedulePoint {
                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::ControlTimestamp xVal;
                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::FLOAT32 yVal;
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::FLOAT32 zVal;
                };
                @nested(TRUE) 
                struct StatusValue : OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::IdentifiedObject {
                    octet __dummy_prevent_empty_class_StatusValue;
                };
                @nested(TRUE) 
                struct TimeQuality {
                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::TimeAccuracyKind timeAccuracy;
                    boolean clockFailure;
                    boolean clockNotSynchronized;
                    boolean leapSecondsKnown;
                };
                @nested(TRUE) 
                struct Timestamp {
                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::INT64U seconds;
                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::INT32U fraction;
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::TimeQuality tq;
                };
                @nested(TRUE) 
                struct Unit {
                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::UnitSymbolKind SIUnit;
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::UnitMultiplierKind multiplier;
                };
                @nested(TRUE) 
                struct Vector {
                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::AnalogueValue mag;
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::AnalogueValue ang;
                };
                @nested(TRUE) 
                struct VSS {
                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::VisString255 stVal;
                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::Quality q;
                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::Timestamp t;
                };
            }; /* module commonmodule */

            module essmodule {
                @nested(TRUE) 
                struct ENG_ESSFunctionKind {
                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::essmodule::ESSFunctionKind setVal;
                    @optional                    string setValExtension;
                };
                @nested(TRUE) 
                struct ENG_ESSFunctionParameter {
                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::essmodule::ESSFunctionParameterKind functionParameterType;
                    long value;
                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::Unit unit;
                };
                @nested(TRUE) 
                struct ESSPoint {
                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::ControlTimestamp xVal;
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::essmodule::ENG_ESSFunctionKind function;
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::ENG_GridConnectModeKind mode;
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::StateKind state;
                    sequence<OpenFMB_Model::OpenFMB_Information_Model::openfmb::essmodule::ENG_ESSFunctionParameter> functionParameter;
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::RampRate rampRates;
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::ControlDPC blackStartEnabled;
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::ControlDPC transToIslndOnGridLossEnabled;
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::ControlDPC syncBackToGrid;
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::ControlDPC realPwrSetPointEnabled;
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::ControlDPC reactivePwrSetPointEnabled;
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::ControlDPC reset;
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::FLOAT32 pctVDroop;
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::FLOAT32 pctHzDroop;
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::ControlDPC frequencySetPointEnabled;
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::ControlDPC voltageSetPointEnabled;
                };
                @nested(TRUE) 
                struct ESSPointStatus {
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::essmodule::ENG_ESSFunctionKind function;
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::ENG_GridConnectModeKind mode;
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::StateKind state;
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::essmodule::ENG_ESSFunctionParameter functionParameter;
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::RampRate rampRates;
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::ControlDPC blackStartEnabled;
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::ControlDPC transToIslndOnGridLossEnabled;
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::ControlDPC syncBackToGrid;
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::ControlDPC realPwrSetPointEnabled;
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::ControlDPC reactivePwrSetPointEnabled;
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::ControlDPC frequencySetPointEnabled;
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::FLOAT32 pctVDroop;
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::FLOAT32 pctHzDroop;
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::ControlDPC voltageSetPointEnabled;
                };
            }; /* module essmodule */

            module generationmodule {
                @nested(TRUE) 
                struct GenerationPoint {
                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::ControlTimestamp xVal;
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::StateKind state;
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::RampRate rampRates;
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::ControlDPC blackStartEnabled;
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::ControlDPC transToIslndOnGridLossEnabled;
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::ControlDPC syncBackToGrid;
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::ControlDPC realPwrSetPointEnabled;
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::ControlDPC reactivePwrSetPointEnabled;
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::ControlDPC reset;
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::ControlDPC frequencySetPointEnabled;
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::FLOAT32 pctVDroop;
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::FLOAT32 pctHzDroop;
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::ControlDPC voltageSetPointEnabled;
                };
                @nested(TRUE) 
                struct GenerationPointStatus {
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::StateKind state;
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::RampRate rampRates;
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::ControlDPC blackStartEnabled;
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::ControlDPC transToIslndOnGridLossEnabled;
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::ControlDPC syncBackToGrid;
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::ControlDPC realPwrSetPointEnabled;
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::ControlDPC reactivePwrSetPointEnabled;
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::ControlDPC frequencySetPointEnabled;
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::FLOAT32 pctVDroop;
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::FLOAT32 pctHzDroop;
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::ControlDPC voltageSetPointEnabled;
                };
            }; /* module generationmodule */

            module interconnectionmodule {
                @nested(TRUE) 
                struct InterconnectionPoint {
                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::Timestamp xVal;
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::RampRate rampRates;
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::ControlDPC blackStartEnabled;
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::ControlDPC island;
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::ControlDPC realPwrSetPointEnabled;
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::ControlDPC reactivePwrSetPointEnabled;
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::FLOAT32 pctVDroop;
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::FLOAT32 pctHzDroop;
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::ControlDPC frequencySetPointEnabled;
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::ControlDPC voltageSetPointEnabled;
                };
            }; /* module interconnectionmodule */

            module loadmodule {
                @nested(TRUE) 
                struct LoadPoint {
                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::ControlTimestamp xVal;
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::StateKind state;
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::RampRate rampRates;
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::ControlDPC realPwrSetPointEnabled;
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::ControlDPC reactivePwrSetPointEnabled;
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::ControlDPC reset;
                };
                @nested(TRUE) 
                struct LoadPointStatus {
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::StateKind state;
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::RampRate rampRates;
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::ControlDPC realPwrSetPointEnabled;
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::ControlDPC reactivePwrSetPointEnabled;
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::ControlDPC reset;
                };
            }; /* module loadmodule */

            module optimizermodule {
                module reclosermodule {
                    @nested(TRUE) 
                    struct RecloserDiscreteControlXCBR : OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::LogicalNodeForControl {
                        @optional                        OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::ControlDPC Pos;
                    };
                }; /* module reclosermodule */

            }; /* module optimizermodule */

            module solarmodule {
                @nested(TRUE) 
                struct SolarPoint {
                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::ControlTimestamp xVal;
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::ENG_GridConnectModeKind mode;
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::StateKind state;
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::RampRate rampRates;
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::ControlDPC frequencySetPointEnabled;
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::ControlDPC realPwrSetPointEnabled;
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::ControlDPC reactivePwrSetPointEnabled;
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::ControlDPC voltageSetPointEnabled;
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::ControlDPC reset;
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::FLOAT32 pctVDroop;
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::FLOAT32 pctHzDroop;
                };
                @nested(TRUE) 
                struct SolarPointStatus {
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::ENG_GridConnectModeKind mode;
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::StateKind state;
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::RampRate rampRates;
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::ControlDPC frequencySetPointEnabled;
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::ControlDPC voltageSetPointEnabled;
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::ControlDPC realPwrSetPointEnabled;
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::ControlDPC reactivePwrSetPointEnabled;
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::FLOAT32 pctVDroop;
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::FLOAT32 pctHzDroop;
                };
            }; /* module solarmodule */

            module switchmodule {
                struct SwitchDiscreteControlXSWI : OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::LogicalNodeForControl {
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::ControlDPC Pos;
                };
                @nested(TRUE) 
                struct SwitchPoint {
                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::ControlTimestamp xVal;
                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::ControlDPC Pos;
                };
            }; /* module switchmodule */

        }; /* module openfmb */

    }; /* module OpenFMB_Information_Model */

}; /* module OpenFMB_Model */

module OpenFMB_Model {
    module OpenFMB_Information_Model {
        module openfmb {
            module coordinationservicemodule {
                struct CoordinationControlDCSC : OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::LogicalNodeForControl {
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::ControlDPC Island;
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::coordinationservicemodule::ENG_CoordinationServiceModeKind CoordinationServiceMode;
                };
            }; /* module coordinationservicemodule */

            module breakermodule {
                @nested(TRUE) 
                struct BreakerDiscreteControlXCBR : OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::LogicalNodeForControl {
                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::ControlDPC Pos;
                };
            }; /* module breakermodule */

            module commonmodule {
                struct ACDCTerminal : OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::IdentifiedObject {
                    @optional                    boolean connected;
                    @optional                    long sequenceNumber;
                };
                struct ApplicationSystem : OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::NamedObject {
                    @key                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::uuidType mRID;
                };
                @nested(TRUE) 
                struct ASG {
                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::AnalogueValueCtl setMag;
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::Unit units;
                };
                @nested(TRUE) 
                struct BCR {
                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::INT64 actVal;
                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::Quality q;
                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::Timestamp t;
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::UnitSymbolKind units;
                };
                @nested(TRUE) 
                struct CMV {
                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::Vector cVal;
                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::Quality q;
                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::Timestamp t;
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::Unit units;
                };
                struct ConductingEquipment : OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::NamedObject {
                    @key                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::uuidType mRID;
                };
                @nested(TRUE) 
                struct ControlING {
                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::INT32 setVal;
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::Unit units;
                };
                @nested(TRUE) 
                struct ControlValue : OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::IdentifiedObject {
                    @optional                    boolean modBlk;
                };
                @nested(TRUE) 
                struct DEL {
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::CMV phsAB;
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::CMV phsBC;
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::CMV phsCA;
                };
                @nested(TRUE) 
                struct EnergyConsumer : OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::ConductingEquipment {
                    @optional                    string operatingLimit;
                };
                @nested(TRUE) 
                struct ENS_BehaviourModeKind {
                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::BehaviourModeKind stVal;
                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::Quality q;
                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::Timestamp t;
                };
                @nested(TRUE) 
                struct ENS_DERGeneratorStateKind {
                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::DERGeneratorStateKind stVal;
                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::Quality q;
                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::Timestamp t;
                };
                @nested(TRUE) 
                struct ENS_DynamicTestKind {
                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::DynamicTestKind stVal;
                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::Quality q;
                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::Timestamp t;
                };
                @nested(TRUE) 
                struct ESS : OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::ConductingEquipment {
                    octet __dummy_prevent_empty_class_ESS;
                };
                @nested(TRUE) 
                struct EventValue : OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::IdentifiedObject {
                    octet __dummy_prevent_empty_class_EventValue;
                };
                @nested(TRUE) 
                struct ForecastValue : OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::IdentifiedObject {
                    octet __dummy_prevent_empty_class_ForecastValue;
                };
                @nested(TRUE) 
                struct ForecastValueSource : OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::IdentifiedObject {
                    octet __dummy_prevent_empty_class_ForecastValueSource;
                };
                @nested(TRUE) 
                struct LogicalNodeForEventAndStatus : OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::LogicalNode {
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::ENS_BehaviourModeKind Beh;
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::ENS_HealthKind EEHealth;
                };
                struct MessageInfo : OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::IdentifiedObject {
                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::Timestamp messageTimeStamp;
                };
                @nested(TRUE) 
                struct Meter : OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::ConductingEquipment {
                    octet __dummy_prevent_empty_class_Meter;
                };
                @nested(TRUE) 
                struct MV {
                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::AnalogueValue mag;
                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::Quality q;
                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::Timestamp t;
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::Unit units;
                };
                struct OptimizationMessageInfo : OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::MessageInfo {
                    octet __dummy_prevent_empty_class_OptimizationMessageInfo;
                };
                @nested(TRUE) 
                struct ORS {
                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::ObjRef stVal;
                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::Quality q;
                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::Timestamp t;
                };
                struct ReadingMessageInfo : OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::MessageInfo {
                    octet __dummy_prevent_empty_class_ReadingMessageInfo;
                };
                @nested(TRUE) 
                struct ReadingMMTN : OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::LogicalNode {
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::BCR TotVAh;
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::BCR TotWh;
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::BCR TotVArh;
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::BCR SupWh;
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::BCR SupVArh;
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::BCR DmdWh;
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::BCR DmdVAh;
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::BCR DmdVArh;
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::BCR SupVAh;
                };
                @nested(TRUE) 
                struct ReadingMMTR : OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::LogicalNode {
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::BCR TotVAh;
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::BCR TotWh;
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::BCR TotVArh;
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::BCR SupWh;
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::BCR SupVArh;
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::BCR DmdWh;
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::BCR DmdVArh;
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::BCR SupVAh;
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::BCR DmdVAh;
                };
                @nested(TRUE) 
                struct ScheduleCSG {
                    sequence<OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::SchedulePoint> crvPts;
                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::Unit yUnits;
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::Unit zUnits;
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::VisString255 xD;
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::Unicode255 xDU;
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::VisString255 yD;
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::Unicode255 yDU;
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::VisString255 zD;
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::Unicode255 zDU;
                };
                @nested(TRUE) 
                struct StatusDPS {
                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::Quality q;
                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::Timestamp t;
                };
                @nested(TRUE) 
                struct StatusINS {
                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::INT32 stVal;
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::Quality q;
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::Timestamp t;
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::Unit units;
                };
                @nested(TRUE) 
                struct StatusISC {
                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::INT8 stVal;
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::Quality q;
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::Timestamp t;
                };
                struct StatusMessageInfo : OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::MessageInfo {
                    octet __dummy_prevent_empty_class_StatusMessageInfo;
                };
                @nested(TRUE) 
                struct StatusSPC {
                    boolean stVal;
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::Quality q;
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::Timestamp t;
                };
                @nested(TRUE) 
                struct StatusSPS {
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::Quality q;
                    boolean stVal;
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::Timestamp t;
                };
                @nested(TRUE) 
                struct StringStatusGGIO : OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::LogicalNode {
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::PhaseCodeKind Phase;
                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::VSS StrIn;
                };
                struct Terminal : OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::ACDCTerminal {
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::PhaseCodeKind phases;
                };
                @nested(TRUE) 
                struct WYE {
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::CMV phsA;
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::CMV phsB;
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::CMV phsC;
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::CMV neut;
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::CMV net;
                };
            }; /* module commonmodule */

            module essmodule {
                @nested(TRUE) 
                struct ESSCSG {
                    sequence<OpenFMB_Model::OpenFMB_Information_Model::openfmb::essmodule::ESSPoint> crvPts;
                };
                @nested(TRUE) 
                struct ESSEventAndStatusZGEN : OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::LogicalNodeForEventAndStatus {
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::StatusSPS GnSynSt;
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::StatusSPS AuxPwrSt;
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::ENS_DynamicTestKind DynamicTest;
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::StatusSPS EmgStop;
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::essmodule::ESSPointStatus PointStatus;
                };
                struct EssEventZBAT : OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::LogicalNodeForEventAndStatus {
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::StatusSPS BatHi;
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::StatusSPS BatLo;
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::MV Soc;
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::StatusSPS BatSt;
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::StatusSPS Stdby;
                };
                @nested(TRUE) 
                struct ESSEventZGEN : OpenFMB_Model::OpenFMB_Information_Model::openfmb::essmodule::ESSEventAndStatusZGEN {
                    octet __dummy_prevent_empty_class_ESSEventZGEN;
                };
                struct EssStatusZBAT : OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::LogicalNodeForEventAndStatus {
                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::StatusSPS BatSt;
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::StatusSPS Stdby;
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::ENG_GridConnectModeKind GriMod;
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::MV Soc;
                };
                @nested(TRUE) 
                struct ESSStatusZGEN : OpenFMB_Model::OpenFMB_Information_Model::openfmb::essmodule::ESSEventAndStatusZGEN {
                    octet __dummy_prevent_empty_class_ESSStatusZGEN;
                };
            }; /* module essmodule */

            module generationmodule {
                @nested(TRUE) 
                struct GeneratingUnit : OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::ConductingEquipment {
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::ActivePower maxOperatingP;
                };
                @nested(TRUE) 
                struct GenerationCSG {
                    sequence<OpenFMB_Model::OpenFMB_Information_Model::openfmb::generationmodule::GenerationPoint> crvPts;
                };
                @nested(TRUE) 
                struct GenerationEventAndStatusZGEN : OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::LogicalNodeForEventAndStatus {
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::StatusSPS AuxPwrSt;
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::ENS_DynamicTestKind DynamicTest;
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::StatusSPS EmgStop;
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::StatusSPS GnSynSt;
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::generationmodule::GenerationPointStatus PointStatus;
                };
                @nested(TRUE) 
                struct GenerationEventZGEN : OpenFMB_Model::OpenFMB_Information_Model::openfmb::generationmodule::GenerationEventAndStatusZGEN {
                    octet __dummy_prevent_empty_class_GenerationEventZGEN;
                };
                @nested(TRUE) 
                struct GenerationStatusZGEN : OpenFMB_Model::OpenFMB_Information_Model::openfmb::generationmodule::GenerationEventAndStatusZGEN {
                    octet __dummy_prevent_empty_class_GenerationStatusZGEN;
                };
            }; /* module generationmodule */

            module interconnectionmodule {
                @nested(TRUE) 
                struct InterconnectionCSG {
                    sequence<OpenFMB_Model::OpenFMB_Information_Model::openfmb::interconnectionmodule::InterconnectionPoint> crvPts;
                };
            }; /* module interconnectionmodule */

            module loadmodule {
                @nested(TRUE) 
                struct LoadCSG {
                    sequence<OpenFMB_Model::OpenFMB_Information_Model::openfmb::loadmodule::LoadPoint> crvPts;
                };
                @nested(TRUE) 
                struct LoadEventAndStatusZGLD : OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::LogicalNodeForEventAndStatus {
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::ENS_DynamicTestKind DynamicTest;
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::StatusSPS EmgStop;
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::loadmodule::LoadPointStatus PointStatus;
                };
                @nested(TRUE) 
                struct LoadEventZGLD : OpenFMB_Model::OpenFMB_Information_Model::openfmb::loadmodule::LoadEventAndStatusZGLD {
                    octet __dummy_prevent_empty_class_LoadEventZGLD;
                };
                @nested(TRUE) 
                struct LoadStatusZGLD : OpenFMB_Model::OpenFMB_Information_Model::openfmb::loadmodule::LoadEventAndStatusZGLD {
                    octet __dummy_prevent_empty_class_LoadStatusZGLD;
                };
            }; /* module loadmodule */

            module optimizermodule {
                module reclosermodule {
                    @nested(TRUE) 
                    struct Recloser : OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::ConductingEquipment {
                        @optional                        boolean normalOpen;
                    };
                    @nested(TRUE) 
                    struct RecloserDiscreteControl : OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::ControlValue {
                        @optional                        OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::CheckConditions check;
                        OpenFMB_Model::OpenFMB_Information_Model::openfmb::optimizermodule::reclosermodule::RecloserDiscreteControlXCBR  recloserDiscreteControlXCBR;
                    };
                }; /* module reclosermodule */

            }; /* module optimizermodule */

            module regulatormodule {
                @nested(TRUE) 
                struct RegulatorControlATCC {
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::ControlISC TapPos;
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::ControlSPC ParOp;
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::ASG BndCtr;
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::ASG BndWid;
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::ControlING CtlDlTmms;
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::ASG LDCR;
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::ASG LDCX;
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::ASG LDCZ;
                };
                @nested(TRUE) 
                struct RegulatorEventAndStatusATCC {
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::StatusSPS TapOpErr;
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::StatusISC TapPos;
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::StatusSPC ParOp;
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::ASG BndCtr;
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::ASG BndWid;
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::ASG LDCR;
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::ASG LDCX;
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::ASG LDCZ;
                };
                @nested(TRUE) 
                struct RegulatorEventAndStatusPoint {
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::StateKind state;
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::RampRate rampRates;
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::regulatormodule::RegulatorEventAndStatusATCC eventAndStatus;
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::StatusSPC reactivePwrSetPointEnabled;
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::FLOAT32 pctVDroop;
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::StatusSPC voltageSetPointEnabled;
                };
                @nested(TRUE) 
                struct RegulatorPoint {
                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::Timestamp xVal;
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::StateKind state;
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::RampRate rampRates;
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::regulatormodule::RegulatorControlATCC control;
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::ControlDPC reactivePwrSetPointEnabled;
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::ControlDPC reset;
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::FLOAT32 pctVDroop;
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::ControlDPC voltageSetPointEnabled;
                };
                @nested(TRUE) 
                struct RegulatorSystem : OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::ConductingEquipment {
                    octet __dummy_prevent_empty_class_RegulatorSystem;
                };
            }; /* module regulatormodule */

            module solarmodule {
                @nested(TRUE) 
                struct SolarCSG {
                    sequence<OpenFMB_Model::OpenFMB_Information_Model::openfmb::solarmodule::SolarPoint> crvPts;
                };
                @nested(TRUE) 
                struct SolarEventAndStatusZGEN : OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::LogicalNodeForEventAndStatus {
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::StatusSPS AuxPwrSt;
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::ENS_DynamicTestKind DynamicTest;
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::StatusSPS EmgStop;
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::solarmodule::SolarPointStatus PointStatus;
                };
                struct SolarEventZGEN : OpenFMB_Model::OpenFMB_Information_Model::openfmb::solarmodule::SolarEventAndStatusZGEN {
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::ENG_GridConnectModeKind GriMod;
                };
                @nested(TRUE) 
                struct SolarInverter : OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::ConductingEquipment {
                    octet __dummy_prevent_empty_class_SolarInverter;
                };
                struct SolarStatusZGEN : OpenFMB_Model::OpenFMB_Information_Model::openfmb::solarmodule::SolarEventAndStatusZGEN {
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::ENG_GridConnectModeKind GriMod;
                };
            }; /* module solarmodule */

            module switchmodule {
                @nested(TRUE) 
                struct ProtectedSwitch : OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::ConductingEquipment {
                    octet __dummy_prevent_empty_class_ProtectedSwitch;
                };
                @nested(TRUE) 
                struct SwitchCSG {
                    sequence<OpenFMB_Model::OpenFMB_Information_Model::openfmb::switchmodule::SwitchPoint> crvPts;
                };
                @nested(TRUE) 
                struct SwitchDiscreteControl : OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::ControlValue {
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::CheckConditions check;
                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::switchmodule::SwitchDiscreteControlXSWI  switchDiscreteControlXSWI;
                };
                @nested(TRUE) 
                struct SwitchEventXSWI : OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::LogicalNodeForEventAndStatus {
                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::StatusDPS Pos;
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::ENS_DynamicTestKind DynamicTest;
                };
                @nested(TRUE) 
                struct SwitchStatusXSWI : OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::LogicalNodeForEventAndStatus {
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::ENS_DynamicTestKind DynamicTest;
                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::StatusDPS Pos;
                };
            }; /* module switchmodule */

        }; /* module openfmb */

    }; /* module OpenFMB_Information_Model */

}; /* module OpenFMB_Model */

module OpenFMB_Model {
    module OpenFMB_Information_Model {
        module openfmb {
            module coordinationservicemodule {
                @nested(TRUE) 
                struct CoordinationControl : OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::ControlValue {
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::CheckConditions check;
                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::coordinationservicemodule::CoordinationControlDCSC  coordinationControlDCSC;
                };
                struct CoordinationEventDCSC : OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::LogicalNodeForEventAndStatus {
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::StatusSPS Island;
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::coordinationservicemodule::ENG_CoordinationServiceModeKind CoordinationServiceMode;
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::StatusSPS PermissibleAuto;
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::StatusSPS PermissibleManual;
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::StatusSPS PermissibleNetzero;
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::StatusSPS PermissibleStart;
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::StatusSPS PermissibleStop;
                };
                struct CoordinationStatusDCSC : OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::LogicalNodeForEventAndStatus {
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::StatusSPS Island;
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::coordinationservicemodule::ENG_CoordinationServiceModeKind CoordinationServiceMode;
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::StatusSPS PermissibleAuto;
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::StatusSPS PermissibleManual;
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::StatusSPS PermissibleNetzero;
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::StatusSPS PermissibleStart;
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::StatusSPS PermissibleStop;
                };
            }; /* module coordinationservicemodule */

            module breakermodule {
                struct Breaker : OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::ConductingEquipment {
                    octet __dummy_prevent_empty_class_Breaker;
                };
                @nested(TRUE) 
                struct BreakerDiscreteControl : OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::ControlValue {
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::CheckConditions check;
                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::breakermodule::BreakerDiscreteControlXCBR  breakerDiscreteControlXCBR;
                };
            }; /* module breakermodule */

            module commonmodule {
                @nested(TRUE) 
                struct AnalogStatusGGIO : OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::LogicalNode {
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::PhaseCodeKind Phase;
                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::MV AnIn;
                };
                @nested(TRUE) 
                struct BooleanStatusGGIO : OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::LogicalNode {
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::PhaseCodeKind Phase;
                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::StatusSPS Ind;
                };
                @nested(TRUE) 
                struct ConductingEquipmentTerminalReading {
                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::Terminal  terminal;
                };
                struct ControlMessageInfo : OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::MessageInfo {
                    octet __dummy_prevent_empty_class_ControlMessageInfo;
                };
                @nested(TRUE) 
                struct ControlScheduleFSCH {
                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::ScheduleCSG ValACSG;
                };
                struct EventMessageInfo : OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::MessageInfo {
                    octet __dummy_prevent_empty_class_EventMessageInfo;
                };
                @nested(TRUE) 
                struct ForecastIED : OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::ForecastValueSource {
                    string sourceApplicationID;
                    UML_Extension::dateTime sourceDateTime;
                };
                @nested(TRUE) 
                struct IntegerStatusGGIO : OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::LogicalNode {
                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::StatusINS IntIn;
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::PhaseCodeKind Phase;
                };
                @nested(TRUE) 
                struct PhaseMMTN {
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::ReadingMMTN phsA;
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::ReadingMMTN phsB;
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::ReadingMMTN phsC;
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::ReadingMMTN phsAB;
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::ReadingMMTN phsBC;
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::ReadingMMTN phsCA;
                };
                @nested(TRUE) 
                struct ReadingMMXU : OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::LogicalNode {
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::MV Hz;
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::DEL PPV;
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::ENG_CalcMethodKind ClcMth;
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::WYE PF;
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::WYE PhV;
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::WYE A;
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::ENG_PFSignKind PFSign;
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::WYE W;
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::WYE VAr;
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::WYE VA;
                };
                @nested(TRUE) 
                struct StatusAndEventXCBR : OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::LogicalNodeForEventAndStatus {
                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::StatusDPS Pos;
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::ENS_DynamicTestKind DynamicTest;
                };
            }; /* module commonmodule */

            module essmodule {
                @nested(TRUE) 
                struct ESSControlScheduleFSCH {
                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::essmodule::ESSCSG ValDCSG;
                };
                @nested(TRUE) 
                struct ESSEvent : OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::EventValue {
                    @optional OpenFMB_Model::OpenFMB_Information_Model::openfmb::essmodule::EssEventZBAT  essEventZBAT; 
                    @optional OpenFMB_Model::OpenFMB_Information_Model::openfmb::essmodule::ESSEventZGEN  essEventZGEN; 
                };
                @nested(FALSE) 
                struct ESSEventProfile : OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::EventMessageInfo {
                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::essmodule::ESSEvent  essEvent;
                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::IED  ied;
                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::ESS  ess;
                };
                struct ESSReading : OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::ConductingEquipmentTerminalReading {
                    @optional OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::ReadingMMXU  readingMMXU; 
                    @optional OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::ReadingMMTR  readingMMTR; 
                    @optional OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::PhaseMMTN  phaseMMTN; 
                };
                @nested(FALSE) 
                struct ESSReadingProfile : OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::ReadingMessageInfo {
                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::essmodule::ESSReading  essReading;
                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::IED  ied;
                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::ESS  ess;
                };
                @nested(TRUE) 
                struct ESSStatus : OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::StatusValue {
                    @optional OpenFMB_Model::OpenFMB_Information_Model::openfmb::essmodule::EssStatusZBAT  essStatusZBAT; 
                    @optional OpenFMB_Model::OpenFMB_Information_Model::openfmb::essmodule::ESSStatusZGEN  essStatusZGEN; 
                };
                @nested(FALSE) 
                struct ESSStatusProfile : OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::StatusMessageInfo {
                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::essmodule::ESSStatus  essStatus;
                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::IED  ied;
                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::ESS  ess;
                };
            }; /* module essmodule */

            module generationmodule {
                @nested(TRUE) 
                struct GenerationControlScheduleFSCH {
                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::generationmodule::GenerationCSG ValDCSG;
                };
                @nested(TRUE) 
                struct GenerationEvent : OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::EventValue {
                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::generationmodule::GenerationEventZGEN  generationEventZGEN;
                };
                struct GenerationReading : OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::ConductingEquipmentTerminalReading {
                    @optional OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::ReadingMMXU  readingMMXU; 
                    @optional OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::ReadingMMTR  readingMMTR; 
                    @optional OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::PhaseMMTN  phaseMMTN; 
                };
                @nested(TRUE) 
                struct GenerationStatus : OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::StatusValue {
                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::generationmodule::GenerationStatusZGEN  generationStatusZGEN;
                };
                @nested(FALSE) 
                struct GenerationReadingProfile : OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::ReadingMessageInfo {
                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::generationmodule::GenerationReading  generationReading;
                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::IED  ied;
                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::generationmodule::GeneratingUnit  generatingUnit;
                };
                @nested(FALSE) 
                struct GenerationEventProfile : OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::EventMessageInfo {
                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::generationmodule::GenerationEvent  generationEvent;
                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::IED  ied;
                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::generationmodule::GeneratingUnit  generatingUnit;
                };
                @nested(FALSE) 
                struct GenerationStatusProfile : OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::StatusMessageInfo {
                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::generationmodule::GenerationStatus  generationStatus;
                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::IED  ied;
                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::generationmodule::GeneratingUnit  generatingUnit;
                };
            }; /* module generationmodule */

            module interconnectionmodule {
                @nested(TRUE) 
                struct InterconnectionControlScheduleFSCH {
                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::interconnectionmodule::InterconnectionCSG ValDCSG;
                };
            }; /* module interconnectionmodule */

            module loadmodule {
                @nested(TRUE) 
                struct LoadControlScheduleFSCH {
                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::loadmodule::LoadCSG ValDCSG;
                };
                @nested(TRUE) 
                struct LoadEvent : OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::EventValue {
                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::loadmodule::LoadEventZGLD  loadEventZGLD;
                };
                @nested(FALSE) 
                struct LoadEventProfile : OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::EventMessageInfo {
                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::loadmodule::LoadEvent  loadEvent;
                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::IED  ied;
                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::EnergyConsumer  energyConsumer;
                };
                struct LoadReading : OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::ConductingEquipmentTerminalReading {
                    @optional OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::ReadingMMXU  readingMMXU; 
                    @optional OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::ReadingMMTR  readingMMTR; 
                    @optional OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::PhaseMMTN  phaseMMTN; 
                };
                @nested(FALSE) 
                struct LoadReadingProfile : OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::ReadingMessageInfo {
                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::loadmodule::LoadReading  loadReading;
                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::IED  ied;
                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::EnergyConsumer  energyConsumer;
                };
                @nested(TRUE) 
                struct LoadStatus : OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::StatusValue {
                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::loadmodule::LoadStatusZGLD  loadStatusZGLD;
                };
                @nested(FALSE) 
                struct LoadStatusProfile : OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::StatusMessageInfo {
                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::loadmodule::LoadStatus  loadStatus;
                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::IED  ied;
                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::EnergyConsumer  energyConsumer;
                };
            }; /* module loadmodule */

            module optimizermodule {
                module reclosermodule {
                    @nested(FALSE) 
                    struct RecloserDiscreteControlProfile : OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::ControlMessageInfo {
                        OpenFMB_Model::OpenFMB_Information_Model::openfmb::optimizermodule::reclosermodule::RecloserDiscreteControl  recloserDiscreteControl;
                        OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::IED  ied;
                        OpenFMB_Model::OpenFMB_Information_Model::openfmb::optimizermodule::reclosermodule::Recloser  recloser;
                    };
                    @nested(TRUE) 
                    struct RecloserEvent : OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::EventValue {
                        OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::StatusAndEventXCBR  statusAndEventXCBR;
                    };
                    @nested(FALSE) 
                    struct RecloserEventProfile : OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::EventMessageInfo {
                        OpenFMB_Model::OpenFMB_Information_Model::openfmb::optimizermodule::reclosermodule::RecloserEvent  recloserEvent;
                        OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::IED  ied;
                        OpenFMB_Model::OpenFMB_Information_Model::openfmb::optimizermodule::reclosermodule::Recloser  recloser;
                    };
                    struct RecloserReading : OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::ConductingEquipmentTerminalReading {
                        @optional OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::ReadingMMXU  readingMMXU; 
                        @optional OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::ReadingMMTR  readingMMTR; 
                        @optional OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::PhaseMMTN  phaseMMTN; 
                        @optional OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::ReadingMMXU  diffReadingMMXU; 
                    };
                    @nested(FALSE) 
                    struct RecloserReadingProfile : OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::ReadingMessageInfo {
                        sequence<OpenFMB_Model::OpenFMB_Information_Model::openfmb::optimizermodule::reclosermodule::RecloserReading,2>  recloserReading;
                        OpenFMB_Model::OpenFMB_Information_Model::openfmb::optimizermodule::reclosermodule::Recloser  recloser;
                        OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::IED  ied;
                    };
                    @nested(TRUE) 
                    struct RecloserStatus : OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::StatusValue {
                        OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::StatusAndEventXCBR  statusAndEventXCBR;
                    };
                    @nested(FALSE) 
                    struct RecloserStatusProfile : OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::StatusMessageInfo {
                        OpenFMB_Model::OpenFMB_Information_Model::openfmb::optimizermodule::reclosermodule::RecloserStatus  recloserStatus;
                        OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::IED  ied;
                        OpenFMB_Model::OpenFMB_Information_Model::openfmb::optimizermodule::reclosermodule::Recloser  recloser;
                    };
                }; /* module reclosermodule */

            }; /* module optimizermodule */

            module regulatormodule {
                @nested(TRUE) 
                struct RegulatorCSG {
                    sequence<OpenFMB_Model::OpenFMB_Information_Model::openfmb::regulatormodule::RegulatorPoint> crvPts;
                };
                @nested(TRUE) 
                struct RegulatorEventAndStatusANCR : OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::LogicalNodeForEventAndStatus {
                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::regulatormodule::RegulatorEventAndStatusPoint PointStatus;
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::ENS_DynamicTestKind DynamicTest;
                };
                struct RegulatorReading : OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::ConductingEquipmentTerminalReading {
                    @optional OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::ReadingMMXU  readingMMXU; 
                    @optional OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::ReadingMMTR  readingMMTR; 
                    @optional OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::PhaseMMTN  phaseMMTN; 
                };
                @nested(FALSE) 
                struct RegulatorReadingProfile : OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::ReadingMessageInfo {
                    sequence<OpenFMB_Model::OpenFMB_Information_Model::openfmb::regulatormodule::RegulatorReading,2>  regulatorReading;
                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::regulatormodule::RegulatorSystem  regulatorSystem;
                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::IED  ied;
                };
                @nested(TRUE) 
                struct RegulatorStatus : OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::StatusValue {
                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::regulatormodule::RegulatorEventAndStatusANCR  regulatorEventAndStatusANCR;
                };
                @nested(FALSE) 
                struct RegulatorStatusProfile : OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::StatusMessageInfo {
                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::regulatormodule::RegulatorStatus  regulatorStatus;
                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::IED  ied;
                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::regulatormodule::RegulatorSystem  regulatorSystem;
                };
            }; /* module regulatormodule */

            module resourcemodule {
                struct ResourceReading : OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::ConductingEquipmentTerminalReading {
                    @optional OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::ReadingMMXU  readingMMXU; 
                    @optional OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::ReadingMMTR  readingMMTR; 
                    @optional OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::PhaseMMTN  phaseMMTN; 
                };
                @nested(FALSE) 
                struct ResourceReadingProfile : OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::ReadingMessageInfo {
                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::IED  ied;
                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::Meter  meter;
                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::resourcemodule::ResourceReading  resourceReading;
                };
                @nested(TRUE) 
                struct ResourceStatus : OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::StatusValue {
                    sequence<OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::BooleanStatusGGIO>  booleanStatusGGIO;
                    sequence<OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::StringStatusGGIO>  stringStatusGGIO;
                    sequence<OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::AnalogStatusGGIO>  analogStatusGGIO;
                    sequence<OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::IntegerStatusGGIO>  integerStatusGGIO;
                };
                @nested(FALSE) 
                struct ResourceStatusProfile : OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::StatusMessageInfo {
                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::ConductingEquipment  conductingEquipment;
                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::resourcemodule::ResourceStatus  resourceStatus;
                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::IED  ied;
                };
            }; /* module resourcemodule */

            module solarmodule {
                @nested(TRUE) 
                struct SolarControlScheduleFSCH {
                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::solarmodule::SolarCSG ValDCSG;
                };
                @nested(TRUE) 
                struct SolarEvent : OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::EventValue {
                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::solarmodule::SolarEventZGEN  solarEventZGEN;
                };
                @nested(FALSE) 
                struct SolarEventProfile : OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::EventMessageInfo {
                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::solarmodule::SolarEvent  solarEvent;
                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::IED  ied;
                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::solarmodule::SolarInverter  solarInverter;
                };
                struct SolarReading : OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::ConductingEquipmentTerminalReading {
                    @optional OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::ReadingMMXU  readingMMXU; 
                    @optional OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::ReadingMMTR  readingMMTR; 
                    @optional OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::PhaseMMTN  phaseMMTN; 
                };
                @nested(FALSE) 
                struct SolarReadingProfile : OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::ReadingMessageInfo {
                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::solarmodule::SolarReading  solarReading;
                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::solarmodule::SolarInverter  solarInverter;
                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::IED  ied;
                };
                @nested(TRUE) 
                struct SolarStatus : OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::StatusValue {
                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::solarmodule::SolarStatusZGEN  solarStatusZGEN;
                };
                @nested(FALSE) 
                struct SolarStatusProfile : OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::StatusMessageInfo {
                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::solarmodule::SolarStatus  solarStatus;
                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::IED  ied;
                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::solarmodule::SolarInverter  solarInverter;
                };
            }; /* module solarmodule */

            module switchmodule {
                @nested(TRUE) 
                struct SwitchControlScheduleFSCH {
                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::switchmodule::SwitchCSG ValDCSG;
                };
                @nested(FALSE) 
                struct SwitchDiscreteControlProfile : OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::ControlMessageInfo {
                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::switchmodule::SwitchDiscreteControl  switchDiscreteControl;
                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::IED  ied;
                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::switchmodule::ProtectedSwitch  protectedSwitch;
                };
                @nested(TRUE) 
                struct SwitchEvent : OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::EventValue {
                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::switchmodule::SwitchEventXSWI  switchEventXSWI;
                };
                @nested(FALSE) 
                struct SwitchEventProfile : OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::EventMessageInfo {
                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::switchmodule::SwitchEvent  switchEvent;
                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::IED  ied;
                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::switchmodule::ProtectedSwitch  protectedSwitch;
                };
                struct SwitchReading : OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::ConductingEquipmentTerminalReading {
                    @optional OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::ReadingMMXU  readingMMXU; 
                    @optional OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::ReadingMMTR  readingMMTR; 
                    @optional OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::PhaseMMTN  phaseMMTN; 
                    @optional OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::ReadingMMXU  diffReadingMMXU; 
                };
                @nested(FALSE) 
                struct SwitchReadingProfile : OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::ReadingMessageInfo {
                    sequence<OpenFMB_Model::OpenFMB_Information_Model::openfmb::switchmodule::SwitchReading,2>  switchReading;
                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::IED  ied;
                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::switchmodule::ProtectedSwitch  protectedSwitch;
                };
                @nested(TRUE) 
                struct SwitchStatus : OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::StatusValue {
                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::switchmodule::SwitchStatusXSWI  switchStatusXSWI;
                };
                @nested(FALSE) 
                struct SwitchStatusProfile : OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::StatusMessageInfo {
                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::switchmodule::SwitchStatus  switchStatus;
                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::IED  ied;
                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::switchmodule::ProtectedSwitch  protectedSwitch;
                };
            }; /* module switchmodule */

        }; /* module openfmb */

    }; /* module OpenFMB_Information_Model */

}; /* module OpenFMB_Model */

module OpenFMB_Model {
    module OpenFMB_Information_Model {
        module openfmb {
            module coordinationservicemodule {
                @nested(FALSE) 
                struct CoordinationControlProfile : OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::ControlMessageInfo {
                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::coordinationservicemodule::CoordinationControl  coordinationControl;
                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::ApplicationSystem  applicationSystem;
                };
                @nested(TRUE) 
                struct CoordinationEvent : OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::EventValue {
                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::coordinationservicemodule::CoordinationEventDCSC  coordinationEventDCSC;
                };
                @nested(FALSE) 
                struct CoordinationEventProfile : OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::EventMessageInfo {
                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::coordinationservicemodule::CoordinationEvent  coordinationEvent;
                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::ApplicationSystem  applicationSystem;
                };
                @nested(TRUE) 
                struct CoordinationStatus : OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::EventValue {
                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::coordinationservicemodule::CoordinationStatusDCSC  coordinationStatusDCSC;
                };
                @nested(FALSE) 
                struct CoordinationStatusProfile : OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::EventMessageInfo {
                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::coordinationservicemodule::CoordinationStatus  coordinationStatus;
                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::ApplicationSystem  applicationSystem;
                };
            }; /* module coordinationservicemodule */

            module breakermodule {
                @nested(FALSE) 
                struct BreakerDiscreteControlProfile : OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::ControlMessageInfo {
                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::IED  ied;
                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::breakermodule::BreakerDiscreteControl  breakerDiscreteControl;
                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::breakermodule::Breaker  breaker;
                };
                @nested(TRUE) 
                struct BreakerEvent : OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::EventValue {
                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::StatusAndEventXCBR  statusAndEventXCBR;
                };
                @nested(FALSE) 
                struct BreakerEventProfile : OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::EventMessageInfo {
                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::IED  ied;
                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::breakermodule::BreakerEvent  breakerEvent;
                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::breakermodule::Breaker  breaker;
                };
                @nested(TRUE) 
                struct BreakerReading : OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::ConductingEquipmentTerminalReading {
                    @optional OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::ReadingMMXU  readingMMXU; 
                    @optional OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::ReadingMMTR  readingMMTR; 
                    @optional OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::PhaseMMTN  phaseMMTN; 
                    @optional OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::ReadingMMXU  diffReadingMMXU; 
                };
                @nested(FALSE) 
                struct BreakerReadingProfile : OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::ReadingMessageInfo {
                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::IED  ied;
                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::breakermodule::Breaker  breaker;
                    sequence<OpenFMB_Model::OpenFMB_Information_Model::openfmb::breakermodule::BreakerReading,2>  breakerReading;
                };
                struct BreakerReadingValue : OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::MeasurementValue {
                    @optional                    string terminalID;
                    @optional OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::ReadingMMXU  readingMMXU; 
                    @optional OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::ReadingMMTR  readingMMTR; 
                };
                @nested(TRUE) 
                struct BreakerStatus : OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::StatusValue {
                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::StatusAndEventXCBR  statusAndEventXCBR;
                };
                @nested(FALSE) 
                struct BreakerStatusProfile : OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::StatusMessageInfo {
                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::IED  ied;
                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::breakermodule::BreakerStatus  breakerStatus;
                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::breakermodule::Breaker  breaker;
                };
            }; /* module breakermodule */

            module commonmodule {
                @nested(TRUE) 
                struct ControlFSCC : OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::LogicalNodeForControl {
                    sequence<OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::ControlScheduleFSCH>  controlScheduleFSCH;
                };
            }; /* module commonmodule */

            module essmodule {
                struct EssControlFSCC : OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::ControlFSCC {
                    @optional OpenFMB_Model::OpenFMB_Information_Model::openfmb::essmodule::ESSControlScheduleFSCH  essControlScheduleFSCH; 
                };
                @nested(TRUE) 
                struct ESSControl : OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::ControlValue {
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::CheckConditions check;
                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::essmodule::EssControlFSCC  essControlFSCC;
                };
                @nested(FALSE) 
                struct ESSControlProfile : OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::ControlMessageInfo {
                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::essmodule::ESSControl  essControl;
                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::IED  ied;
                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::ESS  ess;
                };
            }; /* module essmodule */

            module generationmodule {
                @nested(TRUE) 
                struct GenerationControlFSCC : OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::ControlFSCC {
                    @optional OpenFMB_Model::OpenFMB_Information_Model::openfmb::generationmodule::GenerationControlScheduleFSCH  GenerationControlScheduleFSCH; 
                };
            }; /* module generationmodule */

            module interconnectionmodule {
                struct InterconnectionScheduleFSCC : OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::ControlFSCC {
                    sequence<OpenFMB_Model::OpenFMB_Information_Model::openfmb::interconnectionmodule::InterconnectionControlScheduleFSCH>  interconnectionControlScheduleFSCH;
                };
                @nested(TRUE) 
                struct InterconnectionSchedule : OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::ControlValue {
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::CheckConditions check;
                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::interconnectionmodule::InterconnectionScheduleFSCC  interconnectionScheduleFSCC;
                };
                @nested(FALSE) 
                struct PlannedInterconnectionScheduleProfile : OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::ControlMessageInfo {
                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::interconnectionmodule::InterconnectionSchedule  interconnectionSchedule;
                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::ApplicationSystem  applicationSystem;
                };
                @nested(FALSE) 
                struct RequestedInterconnectionScheduleProfile : OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::ControlMessageInfo {
                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::interconnectionmodule::InterconnectionSchedule  interconnectionSchedule;
                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::ApplicationSystem  applicationSystem;
                };
            }; /* module interconnectionmodule */

            module loadmodule {
                struct LoadControlFSCC : OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::ControlFSCC {
                    @optional OpenFMB_Model::OpenFMB_Information_Model::openfmb::loadmodule::LoadControlScheduleFSCH  loadControlScheduleFSCH; 
                };
            }; /* module loadmodule */

            module optimizermodule {
                @nested(TRUE) 
                struct ESSControlScheduleProfileList {
                    sequence<OpenFMB_Model::OpenFMB_Information_Model::openfmb::essmodule::ESSControlProfile>  essControlProfile;
                };
                @nested(TRUE) 
                struct PlannedInterconnectionScheduleProfileList {
                    sequence<OpenFMB_Model::OpenFMB_Information_Model::openfmb::interconnectionmodule::PlannedInterconnectionScheduleProfile>  plannedInterconnectionScheduleProfile;
                };
                @nested(TRUE) 
                struct RequestedInterconnectionScheduleProfileList {
                    sequence<OpenFMB_Model::OpenFMB_Information_Model::openfmb::interconnectionmodule::RequestedInterconnectionScheduleProfile>  requestedInterconnectionScheduleProfile;
                };
                module reclosermodule {
                    struct RecloserControlFSCC : OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::LogicalNodeForControl {
                        @optional OpenFMB_Model::OpenFMB_Information_Model::openfmb::switchmodule::SwitchControlScheduleFSCH  switchControlScheduleFSCH; 
                    };
                }; /* module reclosermodule */

            }; /* module optimizermodule */

            module regulatormodule {
                @nested(TRUE) 
                struct RegulatorControlScheduleFSCH {
                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::regulatormodule::RegulatorCSG ValDCSG;
                };
                @nested(TRUE) 
                struct RegulatorEvent : OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::EventValue {
                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::regulatormodule::RegulatorEventAndStatusANCR  regulatorEventAndStatusANCR;
                };
                @nested(FALSE) 
                struct RegulatorEventProfile : OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::EventMessageInfo {
                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::regulatormodule::RegulatorEvent  regulatorEvent;
                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::IED  ied;
                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::regulatormodule::RegulatorSystem  regulatorSystem;
                };
            }; /* module regulatormodule */

            module solarmodule {
                struct SolarControlFSCC : OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::ControlFSCC {
                    @optional OpenFMB_Model::OpenFMB_Information_Model::openfmb::solarmodule::SolarControlScheduleFSCH  SolarControlScheduleFSCH; 
                };
            }; /* module solarmodule */

            module switchmodule {
                struct SwitchControlFSCC : OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::LogicalNodeForControl {
                    @optional OpenFMB_Model::OpenFMB_Information_Model::openfmb::switchmodule::SwitchControlScheduleFSCH  switchControlScheduleFSCH; 
                };
            }; /* module switchmodule */

        }; /* module openfmb */

    }; /* module OpenFMB_Information_Model */

}; /* module OpenFMB_Model */

module OpenFMB_Model {
    module OpenFMB_Information_Model {
        module openfmb {
            module generationmodule {
                @nested(TRUE) 
                struct GenerationControl : OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::ControlValue {
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::CheckConditions check;
                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::generationmodule::GenerationControlFSCC  generationControlFSCC;
                };
                @nested(FALSE) 
                struct GenerationControlProfile : OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::ControlMessageInfo {
                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::generationmodule::GenerationControl  generationControl;
                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::IED  ied;
                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::generationmodule::GeneratingUnit  generatingUnit;
                };
            }; /* module generationmodule */

            module loadmodule {
                @nested(TRUE) 
                struct LoadControl : OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::ControlValue {
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::CheckConditions check;
                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::loadmodule::LoadControlFSCC  loadControlFSCC;
                };
                @nested(FALSE) 
                struct LoadControlProfile : OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::ControlMessageInfo {
                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::loadmodule::LoadControl  loadControl;
                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::IED  ied;
                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::EnergyConsumer  energyConsumer;
                };
            }; /* module loadmodule */

            module optimizermodule {
                @nested(TRUE) 
                struct GenerationControlScheduleProfileList {
                    sequence<OpenFMB_Model::OpenFMB_Information_Model::openfmb::generationmodule::GenerationControlProfile>  generationControlProfile;
                };
                @nested(TRUE) 
                struct LoadControlScheduleProfileList {
                    sequence<OpenFMB_Model::OpenFMB_Information_Model::openfmb::loadmodule::LoadControlProfile>  loadControlProfile;
                };
                module reclosermodule {
                    @nested(TRUE) 
                    struct RecloserControl : OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::ControlValue {
                        @optional                        OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::CheckConditions check;
                        OpenFMB_Model::OpenFMB_Information_Model::openfmb::optimizermodule::reclosermodule::RecloserControlFSCC  recloserControlFSCC;
                    };
                    @nested(FALSE) 
                    struct RecloserControlProfile : OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::ControlMessageInfo {
                        OpenFMB_Model::OpenFMB_Information_Model::openfmb::optimizermodule::reclosermodule::RecloserControl  recloserControl;
                        OpenFMB_Model::OpenFMB_Information_Model::openfmb::optimizermodule::reclosermodule::Recloser  recloser;
                        OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::IED  ied;
                    };
                }; /* module reclosermodule */

            }; /* module optimizermodule */

            module regulatormodule {
                @nested(TRUE) 
                struct RegulatorControlFSCC : OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::ControlFSCC {
                    @optional OpenFMB_Model::OpenFMB_Information_Model::openfmb::regulatormodule::RegulatorControlScheduleFSCH  regulatorControlScheduleFSCH; 
                };
            }; /* module regulatormodule */

            module solarmodule {
                @nested(TRUE) 
                struct SolarControl : OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::ControlValue {
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::CheckConditions check;
                    @optional OpenFMB_Model::OpenFMB_Information_Model::openfmb::solarmodule::SolarControlFSCC  solarControlFSCC; 
                };
                @nested(FALSE) 
                struct SolarControlProfile : OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::ControlMessageInfo {
                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::solarmodule::SolarControl  solarControl;
                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::IED  ied;
                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::solarmodule::SolarInverter  solarInverter;
                };
            }; /* module solarmodule */

            module switchmodule {
                @nested(TRUE) 
                struct SwitchControl : OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::ControlValue {
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::CheckConditions check;
                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::switchmodule::SwitchControlFSCC  SwitchControlFSCC;
                };
                @nested(FALSE) 
                struct SwitchControlProfile : OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::ControlMessageInfo {
                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::switchmodule::ProtectedSwitch  protectedSwitch;
                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::switchmodule::SwitchControl  switchControl;
                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::IED  ied;
                };
            }; /* module switchmodule */

        }; /* module openfmb */

    }; /* module OpenFMB_Information_Model */

}; /* module OpenFMB_Model */

module OpenFMB_Model {
    module OpenFMB_Information_Model {
        module openfmb {
            module optimizermodule {
                @nested(TRUE) 
                struct SolarControlScheduleProfileList {
                    sequence<OpenFMB_Model::OpenFMB_Information_Model::openfmb::solarmodule::SolarControlProfile>  solarControlProfile;
                };
                @nested(TRUE) 
                struct SwitchControlScheduleProfileList {
                    sequence<OpenFMB_Model::OpenFMB_Information_Model::openfmb::switchmodule::SwitchControlProfile>  switchControlProfile;
                };
            }; /* module optimizermodule */

            module regulatormodule {
                @nested(TRUE) 
                struct RegulatorControl : OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::ControlValue {
                    @optional                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::CheckConditions check;
                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::regulatormodule::RegulatorControlFSCC  regulatorControlFSCC;
                };
                @nested(FALSE) 
                struct RegulatorControlProfile : OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::ControlMessageInfo {
                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::regulatormodule::RegulatorControl  regulatorControl;
                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::IED  ied;
                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::regulatormodule::RegulatorSystem  regulatorSystem;
                };
            }; /* module regulatormodule */

        }; /* module openfmb */

    }; /* module OpenFMB_Information_Model */

}; /* module OpenFMB_Model */

module OpenFMB_Model {
    module OpenFMB_Information_Model {
        module openfmb {
            module optimizermodule {
                @nested(TRUE) 
                struct RegulatorControlScheduleProfileList {
                    sequence<OpenFMB_Model::OpenFMB_Information_Model::openfmb::regulatormodule::RegulatorControlProfile>  regulatorControlProfile;
                };
                @nested(FALSE) 
                struct RequestedOptimizerScheduleProfile : OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::OptimizationMessageInfo {
                    @optional OpenFMB_Model::OpenFMB_Information_Model::openfmb::optimizermodule::RegulatorControlScheduleProfileList  regulatorControlScheduleProfileList; 
                    @optional OpenFMB_Model::OpenFMB_Information_Model::openfmb::optimizermodule::SolarControlScheduleProfileList  solarControlScheduleProfileList; 
                    @optional OpenFMB_Model::OpenFMB_Information_Model::openfmb::optimizermodule::LoadControlScheduleProfileList  loadControlScheduleProfileList; 
                    @optional OpenFMB_Model::OpenFMB_Information_Model::openfmb::optimizermodule::RequestedInterconnectionScheduleProfileList  requestedInterconnectionScheduleProfileList; 
                    @optional OpenFMB_Model::OpenFMB_Information_Model::openfmb::optimizermodule::ESSControlScheduleProfileList  essControlScheduleProfileList; 
                    @optional OpenFMB_Model::OpenFMB_Information_Model::openfmb::optimizermodule::SwitchControlScheduleProfileList  switchControlScheduleProfileList; 
                    @optional OpenFMB_Model::OpenFMB_Information_Model::openfmb::optimizermodule::GenerationControlScheduleProfileList  generationControlScheduleProfileList; 
                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::ApplicationSystem  applicationSystem;
                };
            }; /* module optimizermodule */

        }; /* module openfmb */

    }; /* module OpenFMB_Information_Model */

}; /* module OpenFMB_Model */

module OpenFMB_Model {
    module OpenFMB_Information_Model {
        module openfmb {
            module optimizermodule {
                @nested(FALSE) 
                struct PlannedOptimizerScheduleProfile : OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::OptimizationMessageInfo {
                    @optional OpenFMB_Model::OpenFMB_Information_Model::openfmb::optimizermodule::RegulatorControlScheduleProfileList  regulatorControlScheduleProfileList; 
                    @optional OpenFMB_Model::OpenFMB_Information_Model::openfmb::optimizermodule::SolarControlScheduleProfileList  solarControlScheduleProfileList; 
                    @optional OpenFMB_Model::OpenFMB_Information_Model::openfmb::optimizermodule::PlannedInterconnectionScheduleProfileList  plannedInterconnectionScheduleProfileList; 
                    @optional OpenFMB_Model::OpenFMB_Information_Model::openfmb::optimizermodule::LoadControlScheduleProfileList  loadControlScheduleProfileList; 
                    @optional OpenFMB_Model::OpenFMB_Information_Model::openfmb::optimizermodule::ESSControlScheduleProfileList  essControlScheduleProfileList; 
                    @optional OpenFMB_Model::OpenFMB_Information_Model::openfmb::optimizermodule::SwitchControlScheduleProfileList  switchControlScheduleProfileList; 
                    @optional OpenFMB_Model::OpenFMB_Information_Model::openfmb::optimizermodule::GenerationControlScheduleProfileList  generationControlScheduleProfileList; 
                    OpenFMB_Model::OpenFMB_Information_Model::openfmb::commonmodule::ApplicationSystem  applicationSystem;
                };
            }; /* module optimizermodule */

        }; /* module openfmb */

    }; /* module OpenFMB_Information_Model */

}; /* module OpenFMB_Model */

